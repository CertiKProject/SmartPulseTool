This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:34:19,432 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:34:19,433 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:34:19,444 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:34:19,444 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:34:19,445 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:34:19,446 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:34:19,447 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:34:19,449 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:34:19,449 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:34:19,450 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:34:19,450 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:34:19,451 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:34:19,452 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:34:19,453 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:34:19,453 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:34:19,454 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:34:19,455 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:34:19,456 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:34:19,458 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:34:19,459 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:34:19,460 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:34:19,462 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:34:19,462 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:34:19,462 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:34:19,462 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:34:19,463 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:34:19,463 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:34:19,464 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:34:19,464 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:34:19,464 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:34:19,465 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:34:19,465 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:34:19,466 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:34:19,467 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:34:19,467 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:34:19,467 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:34:19,468 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:34:19,468 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:34:19,469 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:34:19,469 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:34:19,469 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:34:19,477 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:34:19,478 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:34:19,478 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:34:19,479 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:34:19,479 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:34:19,479 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:34:19,479 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:34:19,479 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:34:19,479 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:34:19,479 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:34:19,479 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:34:19,480 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:34:19,480 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:34:19,480 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:34:19,480 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:34:19,480 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:34:19,480 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:34:19,480 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:34:19,480 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:34:19,481 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:34:19,481 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:34:19,481 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:34:19,481 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:34:19,481 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:34:19,481 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:34:19,481 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:34:19,504 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:34:19,518 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:34:19,522 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:34:19,523 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:34:19,524 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:34:19,525 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl
[2020-11-25 02:34:19,525 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl'
[2020-11-25 02:34:19,636 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:34:19,637 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:34:19,638 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:34:19,638 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:34:19,638 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:34:19,655 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:34:19" (1/1) ...
[2020-11-25 02:34:19,656 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:34:19" (1/1) ...
[2020-11-25 02:34:19,698 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:34:19" (1/1) ...
[2020-11-25 02:34:19,699 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:34:19" (1/1) ...
[2020-11-25 02:34:19,736 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:34:19" (1/1) ...
[2020-11-25 02:34:19,755 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:34:19" (1/1) ...
[2020-11-25 02:34:19,770 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:34:19" (1/1) ...
[2020-11-25 02:34:19,789 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:34:19,790 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:34:19,790 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:34:19,792 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:34:19,796 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:34:19" (1/1) ...
[2020-11-25 02:34:19,820 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transferFrom(from, to, value), return == true && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:34:19,826 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transferFrom(from, to, value), return == true && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:34:19,834 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transferFrom(from, to, value), return == true && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:34:19,845 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s937 || p2!=msg.sender ) && from_s937==to_s937 ) && value_s937<=_balances_ERC20[this][from_s937] ) && value_s937<=_allowed_ERC20[this][from_s937][msg.sender] ) && value_s937>=0 ) && value_s937<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s937]>=0 ) && _balances_ERC20[this][to_s937]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s937]>=0 ) && _balances_ERC20[this][from_s937]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_ERC20[this][from_s937][msg.sender]>=0 ) && _allowed_ERC20[this][from_s937][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[COMPEQ,IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IdentifierExpression[to_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:34:19,848 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _allowed_ERC20[this][from_s937][msg.sender]==( ( old(_allowed_ERC20[this][from_s937][msg.sender]) ) - value_s937 ) ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowed_ERC20[this][p1][p2]==( old(_allowed_ERC20[this][p1][p2]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_ERC20Pausable>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],IdentifierExpression[value_s937,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]]
[2020-11-25 02:34:19,858 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transferFrom(from, to, value), return == true && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:34:19,858 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC20Pausable0) ==> ( <>AP(success_transferFrom_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:34:19,877 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:34:19 PropertyContainer
[2020-11-25 02:34:19,878 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:34:19,878 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:34:19,878 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:34:19,878 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:34:19,879 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:34:19" (1/2) ...
[2020-11-25 02:34:19,880 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:34:19,880 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:34:19,904 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:34:19" (2/2) ...
[2020-11-25 02:34:19,904 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:34:19,905 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:34:19,905 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:34:19,905 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:34:19,905 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:34:19" (1/2) ...
[2020-11-25 02:34:19,964 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:34:19,964 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 02:34:19,964 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:34:19,964 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 02:34:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 02:34:19,965 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 02:34:19,965 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 02:34:19,965 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 02:34:19,965 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 02:34:19,965 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 02:34:19,965 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 02:34:19,965 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:34:19,965 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:34:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:34:19,966 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:34:19,966 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:34:19,966 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:34:19,966 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:34:19,967 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:34:19,967 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:34:19,967 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 02:34:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 02:34:19,967 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 02:34:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 02:34:19,967 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 02:34:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 02:34:19,967 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 02:34:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 02:34:19,968 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 02:34:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 02:34:19,968 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 02:34:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 02:34:19,968 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:34:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:34:19,968 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:34:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:34:19,968 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:34:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:34:19,968 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:34:19,969 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:34:19,969 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:34:19,969 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:34:19,969 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:34:19,969 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 02:34:19,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 02:34:19,969 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 02:34:19,969 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 02:34:19,969 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 02:34:19,969 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:34:19,970 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 02:34:19,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 02:34:19,970 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 02:34:19,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 02:34:19,970 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 02:34:19,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 02:34:19,970 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 02:34:19,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 02:34:19,970 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:34:19,970 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:34:19,971 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:34:19,971 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 02:34:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 02:34:19,971 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 02:34:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 02:34:19,971 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 02:34:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 02:34:19,971 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 02:34:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 02:34:19,971 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:34:19,972 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:34:19,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:34:19,972 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:34:19,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:34:19,972 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:34:19,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:34:19,972 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 02:34:19,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 02:34:19,972 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:34:19,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:34:19,972 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:34:19,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:34:19,973 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:34:19,973 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:34:19,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:34:19,973 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 02:34:19,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 02:34:19,973 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 02:34:19,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 02:34:19,973 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 02:34:19,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 02:34:19,974 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 02:34:19,974 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 02:34:19,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 02:34:19,974 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 02:34:19,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 02:34:19,974 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 02:34:19,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 02:34:19,974 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 02:34:19,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 02:34:19,974 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 02:34:19,974 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 02:34:19,975 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 02:34:19,975 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 02:34:19,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 02:34:19,975 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 02:34:19,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 02:34:19,975 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 02:34:19,975 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 02:34:19,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 02:34:19,975 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 02:34:19,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 02:34:19,976 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 02:34:19,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 02:34:19,976 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken_NoBaseCtor__success
[2020-11-25 02:34:19,976 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken
[2020-11-25 02:34:19,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken
[2020-11-25 02:34:19,976 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:34:19,976 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:34:19,976 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:34:19,976 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 02:34:19,976 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 02:34:19,977 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 02:34:19,977 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 02:34:19,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 02:34:19,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 02:34:19,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:34:19,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:34:19,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 02:34:19,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 02:34:19,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 02:34:19,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 02:34:19,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 02:34:19,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 02:34:19,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 02:34:19,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 02:34:19,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:34:19,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:34:19,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:34:19,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:34:19,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 02:34:19,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 02:34:19,979 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 02:34:19,979 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 02:34:19,979 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 02:34:19,979 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 02:34:19,979 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_OMToken
[2020-11-25 02:34:19,979 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:34:19,979 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:34:19,979 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 02:34:19,979 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:34:19,979 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 02:34:19,980 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 02:34:19,980 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:34:19,980 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:34:19,980 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:34:19,980 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:34:19,980 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:34:19,980 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:34:19,980 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:34:19,980 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:34:19,980 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:34:19,980 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 02:34:19,981 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 02:34:19,981 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 02:34:19,981 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 02:34:19,981 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 02:34:19,981 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:34:19,981 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 02:34:19,981 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:34:19,981 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:34:19,981 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:34:19,981 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:34:19,982 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:34:19,982 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:34:19,982 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:34:19,982 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:34:19,982 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:34:19,982 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:34:19,982 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:34:19,982 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:34:19,982 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:34:19,982 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:34:19,982 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:34:19,982 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:34:19,983 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 02:34:19,983 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 02:34:19,983 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 02:34:19,983 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 02:34:19,983 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 02:34:19,983 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:34:19,983 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 02:34:19,983 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 02:34:19,983 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 02:34:19,983 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:34:19,983 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 02:34:19,984 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:34:19,984 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 02:34:19,984 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:34:19,984 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:34:19,984 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:34:19,984 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:34:19,984 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 02:34:19,984 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 02:34:19,984 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 02:34:19,984 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 02:34:19,984 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 02:34:19,984 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 02:34:19,985 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 02:34:19,985 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 02:34:19,985 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:34:19,985 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:34:19,985 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:34:19,985 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:34:19,985 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:34:19,985 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:34:19,985 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:34:19,985 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 02:34:19,985 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 02:34:19,986 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:34:19,986 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:34:19,986 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:34:19,986 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:34:19,986 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:34:19,986 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:34:19,986 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:34:19,986 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 02:34:19,986 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 02:34:19,986 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 02:34:19,986 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:34:19,986 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 02:34:19,987 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:34:19,987 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 02:34:19,987 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 02:34:19,987 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 02:34:19,987 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 02:34:19,987 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 02:34:19,987 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 02:34:19,987 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 02:34:19,987 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 02:34:19,987 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 02:34:19,987 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 02:34:19,987 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 02:34:19,988 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 02:34:19,988 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 02:34:19,988 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 02:34:19,988 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 02:34:19,988 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 02:34:19,988 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 02:34:19,988 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 02:34:19,988 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 02:34:19,988 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 02:34:19,988 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 02:34:19,988 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 02:34:19,988 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 02:34:19,989 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken_NoBaseCtor__fail
[2020-11-25 02:34:19,989 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken__success
[2020-11-25 02:34:19,989 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken__fail
[2020-11-25 02:34:19,989 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:34:19,989 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:34:19,989 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:34:19,989 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 02:34:19,989 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 02:34:19,989 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 02:34:19,989 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 02:34:19,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:34:19,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:34:19,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 02:34:19,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 02:34:19,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:34:19,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:34:19,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 02:34:19,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 02:34:19,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:34:19,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:34:19,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:34:19,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:34:19,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:34:19,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:34:19,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:34:19,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:34:19,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:34:19,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:34:19,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:34:19,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:34:19,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:34:19,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:34:19,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:34:19,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:34:19,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 02:34:19,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 02:34:19,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 02:34:19,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 02:34:19,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:34:19,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 02:34:19,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:34:19,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 02:34:19,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:34:19,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:34:19,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:34:19,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:34:19,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:34:19,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:34:19,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:34:19,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:34:19,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:34:19,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:34:19,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:34:19,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:34:19,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:34:19,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:34:19,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:34:19,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:34:19,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:34:19,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:34:19,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:34:19,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:34:19,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 02:34:19,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 02:34:19,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 02:34:19,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 02:34:19,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 02:34:19,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 02:34:19,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 02:34:19,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 02:34:19,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:34:19,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:34:19,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 02:34:19,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 02:34:19,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:34:19,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 02:34:19,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:34:19,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 02:34:19,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:34:19,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 02:34:19,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:34:19,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:34:19,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:34:19,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:34:19,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:34:19,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:34:19,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 02:34:19,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 02:34:19,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 02:34:19,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 02:34:19,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 02:34:19,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 02:34:19,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 02:34:19,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 02:34:19,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:34:19,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:34:19,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:34:19,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:34:19,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:34:19,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:34:19,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:34:19,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:34:19,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 02:34:19,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 02:34:19,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:34:19,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:34:19,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:34:19,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:34:19,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:34:19,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:34:19,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:34:19,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:34:19,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 02:34:19,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 02:34:19,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:34:19,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 02:34:19,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:34:19,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 02:34:19,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 02:34:19,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 02:34:19,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 02:34:20,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 02:34:20,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 02:34:20,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 02:34:20,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 02:34:20,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 02:34:20,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 02:34:20,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 02:34:20,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 02:34:20,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 02:34:20,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 02:34:20,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 02:34:20,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 02:34:20,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 02:34:20,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 02:34:20,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 02:34:20,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 02:34:20,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 02:34:20,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 02:34:20,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 02:34:20,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 02:34:20,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 02:34:20,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 02:34:20,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 02:34:20,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 02:34:20,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 02:34:20,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken_NoBaseCtor__fail
[2020-11-25 02:34:20,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken_NoBaseCtor__success
[2020-11-25 02:34:20,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken__fail
[2020-11-25 02:34:20,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken__success
[2020-11-25 02:34:20,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:34:20,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:34:20,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:34:20,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:34:20,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:34:20,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:34:20,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 02:34:20,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 02:34:20,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 02:34:20,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 02:34:20,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 02:34:20,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 02:34:20,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 02:34:20,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 02:34:20,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 02:34:20,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 02:34:20,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:34:20,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:34:20,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 02:34:20,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 02:34:20,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 02:34:20,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 02:34:20,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 02:34:20,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 02:34:20,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 02:34:20,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 02:34:20,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:34:20,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:34:20,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:34:20,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:34:20,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 02:34:20,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 02:34:20,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 02:34:20,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 02:34:20,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 02:34:20,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 02:34:20,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_OMToken
[2020-11-25 02:34:20,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:34:20,009 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:34:20,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:34:20,600 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:34:20,601 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:34:20,601 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:34:21,028 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:34:21,270 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:34:21,270 INFO  L286             CfgBuilder]: Removed 12 assue(true) statements.
[2020-11-25 02:34:21,273 INFO  L202        PluginConnector]: Adding new model OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:34:21 BoogieIcfgContainer
[2020-11-25 02:34:21,273 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:34:19" (2/2) ...
[2020-11-25 02:34:21,273 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:34:21,273 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2aa25022 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:34:21, skipping insertion in model container
[2020-11-25 02:34:21,273 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:34:21,273 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:34:21,273 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:34:21,274 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:34:21,274 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:34:19" (1/3) ...
[2020-11-25 02:34:21,275 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1ff8ef2b and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:34:21, skipping insertion in model container
[2020-11-25 02:34:21,275 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:34:19" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:34:21,308 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:34:21 NWAContainer
[2020-11-25 02:34:21,308 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:34:21,308 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:34:21,308 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:34:21,309 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:34:21,309 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:34:21" (3/4) ...
[2020-11-25 02:34:21,310 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@30796ce6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:34:21, skipping insertion in model container
[2020-11-25 02:34:21,310 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:34:21" (4/4) ...
[2020-11-25 02:34:21,312 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:34:21,317 INFO  L110   BuchiProductObserver]: Initial RCFG 3605 locations, 5218 edges
[2020-11-25 02:34:21,317 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:34:21,329 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:34:24,491 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:34:24,503 INFO  L110   BuchiProductObserver]: BuchiProgram size 9266 locations, 17161 edges
[2020-11-25 02:34:24,504 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:34:24 BoogieIcfgContainer
[2020-11-25 02:34:24,504 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:34:24,504 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:34:24,504 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:34:24,506 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:34:24,506 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:34:24" (1/1) ...
[2020-11-25 02:34:24,671 INFO  L313           BlockEncoder]: Initial Icfg 9266 locations, 17161 edges
[2020-11-25 02:34:24,671 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:34:24,671 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:34:24,672 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:34:24,672 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:34:24,694 INFO  L70    emoveInfeasibleEdges]: Removed 234 edges and 27 locations because of local infeasibility
[2020-11-25 02:34:24,708 INFO  L70        RemoveSinkStates]: Removed 116 edges and 77 locations by removing sink states
[2020-11-25 02:34:24,726 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:34:24,731 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:34:24,737 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:34:24,737 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:34:24,741 INFO  L313           BlockEncoder]: Encoded RCFG 9110 locations, 16734 edges
[2020-11-25 02:34:24,742 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:34:24 BasicIcfg
[2020-11-25 02:34:24,742 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:34:24,742 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:34:24,742 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:34:24,744 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:34:24,744 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:34:24,744 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:34:19" (1/6) ...
[2020-11-25 02:34:24,746 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4724c77b and model type OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:34:24, skipping insertion in model container
[2020-11-25 02:34:24,746 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:34:24,746 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:34:19" (2/6) ...
[2020-11-25 02:34:24,746 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4724c77b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:34:24, skipping insertion in model container
[2020-11-25 02:34:24,746 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:34:24,746 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:34:21" (3/6) ...
[2020-11-25 02:34:24,746 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4724c77b and model type OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:34:24, skipping insertion in model container
[2020-11-25 02:34:24,746 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:34:24,746 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:34:21" (4/6) ...
[2020-11-25 02:34:24,747 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4724c77b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:34:24, skipping insertion in model container
[2020-11-25 02:34:24,747 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:34:24,747 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:34:24" (5/6) ...
[2020-11-25 02:34:24,747 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4724c77b and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:34:24, skipping insertion in model container
[2020-11-25 02:34:24,747 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:34:24,747 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:34:24" (6/6) ...
[2020-11-25 02:34:24,748 INFO  L404   chiAutomizerObserver]: Analyzing ICFG OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transferfrom-self.bpl_BEv2
[2020-11-25 02:34:24,780 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:34:24,781 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:34:24,781 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:34:24,781 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:34:24,781 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:34:24,781 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:34:24,781 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:34:24,781 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:34:24,781 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:34:24,842 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9110 states.
[2020-11-25 02:34:24,918 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:34:24,918 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:24,918 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:24,925 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:24,925 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:24,925 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:34:24,925 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9110 states.
[2020-11-25 02:34:24,955 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:34:24,955 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:24,955 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:24,957 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:24,957 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND FALSE  !(gas >= 0)
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:24,970 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:24,970 INFO  L82        PathProgramCache]: Analyzing trace with hash 1223895600, now seen corresponding path program 1 times
[2020-11-25 02:34:24,975 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:24,998 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:25,034 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:34:25,037 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:34:25,037 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:34:25,455 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:25,467 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:34:25,467 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:34:25,469 INFO  L87              Difference]: Start difference. First operand 9110 states. Second operand 3 states.
[2020-11-25 02:34:25,924 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:25,924 INFO  L93              Difference]: Finished difference Result 5021 states and 6073 transitions.
[2020-11-25 02:34:25,924 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:34:25,925 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5021 states and 6073 transitions.
[2020-11-25 02:34:25,950 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:34:25,983 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5021 states to 5021 states and 6073 transitions.
[2020-11-25 02:34:25,983 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 02:34:25,986 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 956
[2020-11-25 02:34:25,986 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5021 states and 6073 transitions.
[2020-11-25 02:34:25,999 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:25,999 INFO  L728         BuchiCegarLoop]: Abstraction has 5021 states and 6073 transitions.
[2020-11-25 02:34:26,017 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5021 states and 6073 transitions.
[2020-11-25 02:34:26,080 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5021 to 5021.
[2020-11-25 02:34:26,081 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5021 states.
[2020-11-25 02:34:26,089 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5021 states to 5021 states and 6073 transitions.
[2020-11-25 02:34:26,090 INFO  L751         BuchiCegarLoop]: Abstraction has 5021 states and 6073 transitions.
[2020-11-25 02:34:26,090 INFO  L631         BuchiCegarLoop]: Abstraction has 5021 states and 6073 transitions.
[2020-11-25 02:34:26,090 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:34:26,090 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5021 states and 6073 transitions.
[2020-11-25 02:34:26,101 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:34:26,101 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:26,101 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:26,103 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:26,103 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:26,107 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:26,107 INFO  L82        PathProgramCache]: Analyzing trace with hash 1147600626, now seen corresponding path program 1 times
[2020-11-25 02:34:26,108 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:26,116 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:26,140 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:34:26,140 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:34:26,140 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:34:26,141 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:26,141 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:34:26,141 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:34:26,142 INFO  L87              Difference]: Start difference. First operand 5021 states and 6073 transitions. cyclomatic complexity: 1054 Second operand 3 states.
[2020-11-25 02:34:26,339 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:26,339 INFO  L93              Difference]: Finished difference Result 6851 states and 8300 transitions.
[2020-11-25 02:34:26,339 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:34:26,339 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6851 states and 8300 transitions.
[2020-11-25 02:34:26,361 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:34:26,393 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6851 states to 6851 states and 8300 transitions.
[2020-11-25 02:34:26,393 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1489
[2020-11-25 02:34:26,394 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1489
[2020-11-25 02:34:26,395 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6851 states and 8300 transitions.
[2020-11-25 02:34:26,403 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:26,403 INFO  L728         BuchiCegarLoop]: Abstraction has 6851 states and 8300 transitions.
[2020-11-25 02:34:26,409 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6851 states and 8300 transitions.
[2020-11-25 02:34:26,471 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6851 to 5975.
[2020-11-25 02:34:26,471 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5975 states.
[2020-11-25 02:34:26,481 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5975 states to 5975 states and 7244 transitions.
[2020-11-25 02:34:26,481 INFO  L751         BuchiCegarLoop]: Abstraction has 5975 states and 7244 transitions.
[2020-11-25 02:34:26,481 INFO  L631         BuchiCegarLoop]: Abstraction has 5975 states and 7244 transitions.
[2020-11-25 02:34:26,481 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:34:26,481 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5975 states and 7244 transitions.
[2020-11-25 02:34:26,489 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:34:26,489 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:26,490 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:26,491 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:26,491 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND TRUE   DType[this] == ERC20Pausable
[L4944]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND TRUE   !(account_s659 != null)
[L4809]              revert := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND TRUE   revert
[L4944]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4945]  COND TRUE   revert
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:26,495 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:26,495 INFO  L82        PathProgramCache]: Analyzing trace with hash 1105071208, now seen corresponding path program 1 times
[2020-11-25 02:34:26,496 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:26,505 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:26,566 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:34:26,566 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:34:26,566 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:34:26,567 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:26,567 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:34:26,567 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:34:26,567 INFO  L87              Difference]: Start difference. First operand 5975 states and 7244 transitions. cyclomatic complexity: 1271 Second operand 7 states.
[2020-11-25 02:34:26,758 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:26,758 INFO  L93              Difference]: Finished difference Result 6026 states and 7315 transitions.
[2020-11-25 02:34:26,758 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:34:26,759 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6026 states and 7315 transitions.
[2020-11-25 02:34:26,779 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:34:26,806 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6026 states to 5987 states and 7259 transitions.
[2020-11-25 02:34:26,807 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1260
[2020-11-25 02:34:26,808 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1260
[2020-11-25 02:34:26,808 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5987 states and 7259 transitions.
[2020-11-25 02:34:26,814 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:26,814 INFO  L728         BuchiCegarLoop]: Abstraction has 5987 states and 7259 transitions.
[2020-11-25 02:34:26,821 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5987 states and 7259 transitions.
[2020-11-25 02:34:26,879 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5987 to 5987.
[2020-11-25 02:34:26,879 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5987 states.
[2020-11-25 02:34:26,890 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5987 states to 5987 states and 7259 transitions.
[2020-11-25 02:34:26,890 INFO  L751         BuchiCegarLoop]: Abstraction has 5987 states and 7259 transitions.
[2020-11-25 02:34:26,890 INFO  L631         BuchiCegarLoop]: Abstraction has 5987 states and 7259 transitions.
[2020-11-25 02:34:26,890 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:34:26,890 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5987 states and 7259 transitions.
[2020-11-25 02:34:26,900 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:34:26,901 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:26,901 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:26,902 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:26,903 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND FALSE  !(DType[this] == Pausable)
[L4953]  COND TRUE   DType[this] == PauserRole
[L4954]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND TRUE   !(account_s659 != null)
[L4809]              revert := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND TRUE   revert
[L4954]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4955]  COND TRUE   revert
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:26,906 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:26,906 INFO  L82        PathProgramCache]: Analyzing trace with hash -1139803811, now seen corresponding path program 1 times
[2020-11-25 02:34:26,907 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:26,915 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:26,976 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:34:26,977 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:34:26,977 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:34:26,977 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:26,977 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:34:26,977 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:34:26,977 INFO  L87              Difference]: Start difference. First operand 5987 states and 7259 transitions. cyclomatic complexity: 1274 Second operand 7 states.
[2020-11-25 02:34:27,140 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:27,140 INFO  L93              Difference]: Finished difference Result 6038 states and 7330 transitions.
[2020-11-25 02:34:27,140 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:34:27,140 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6038 states and 7330 transitions.
[2020-11-25 02:34:27,155 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:34:27,177 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6038 states to 5999 states and 7274 transitions.
[2020-11-25 02:34:27,177 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1260
[2020-11-25 02:34:27,178 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1260
[2020-11-25 02:34:27,178 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5999 states and 7274 transitions.
[2020-11-25 02:34:27,184 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:27,185 INFO  L728         BuchiCegarLoop]: Abstraction has 5999 states and 7274 transitions.
[2020-11-25 02:34:27,191 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5999 states and 7274 transitions.
[2020-11-25 02:34:27,240 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5999 to 5987.
[2020-11-25 02:34:27,240 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5987 states.
[2020-11-25 02:34:27,248 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5987 states to 5987 states and 7259 transitions.
[2020-11-25 02:34:27,248 INFO  L751         BuchiCegarLoop]: Abstraction has 5987 states and 7259 transitions.
[2020-11-25 02:34:27,248 INFO  L631         BuchiCegarLoop]: Abstraction has 5987 states and 7259 transitions.
[2020-11-25 02:34:27,248 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:34:27,248 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5987 states and 7259 transitions.
[2020-11-25 02:34:27,256 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:34:27,256 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:27,256 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:27,258 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:27,258 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND TRUE   !(account_s659 != null)
[L4809]              revert := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND TRUE   revert
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND TRUE   revert
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:27,260 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:27,261 INFO  L82        PathProgramCache]: Analyzing trace with hash 866849288, now seen corresponding path program 1 times
[2020-11-25 02:34:27,261 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:27,269 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:27,301 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 9 trivial. 0 not checked.
[2020-11-25 02:34:27,301 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:34:27,302 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:34:27,302 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:27,303 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:34:27,303 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:34:27,303 INFO  L87              Difference]: Start difference. First operand 5987 states and 7259 transitions. cyclomatic complexity: 1274 Second operand 9 states.
[2020-11-25 02:34:27,385 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:27,385 INFO  L93              Difference]: Finished difference Result 6045 states and 7351 transitions.
[2020-11-25 02:34:27,385 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:34:27,385 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6045 states and 7351 transitions.
[2020-11-25 02:34:27,399 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:34:27,419 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6045 states to 6045 states and 7351 transitions.
[2020-11-25 02:34:27,419 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1269
[2020-11-25 02:34:27,420 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1269
[2020-11-25 02:34:27,420 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6045 states and 7351 transitions.
[2020-11-25 02:34:27,425 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:27,425 INFO  L728         BuchiCegarLoop]: Abstraction has 6045 states and 7351 transitions.
[2020-11-25 02:34:27,430 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6045 states and 7351 transitions.
[2020-11-25 02:34:27,472 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6045 to 6000.
[2020-11-25 02:34:27,472 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6000 states.
[2020-11-25 02:34:27,479 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6000 states to 6000 states and 7289 transitions.
[2020-11-25 02:34:27,479 INFO  L751         BuchiCegarLoop]: Abstraction has 6000 states and 7289 transitions.
[2020-11-25 02:34:27,479 INFO  L631         BuchiCegarLoop]: Abstraction has 6000 states and 7289 transitions.
[2020-11-25 02:34:27,479 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:34:27,479 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6000 states and 7289 transitions.
[2020-11-25 02:34:27,485 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:34:27,485 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:27,486 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:27,487 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:27,487 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND TRUE   !(account_s713 != null)
[L4880]              revert := true;
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND TRUE   revert
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND TRUE   revert
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND TRUE   revert
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:27,490 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:27,490 INFO  L82        PathProgramCache]: Analyzing trace with hash 876356202, now seen corresponding path program 1 times
[2020-11-25 02:34:27,491 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:27,498 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:27,534 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 9 trivial. 0 not checked.
[2020-11-25 02:34:27,534 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:34:27,534 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:34:27,535 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:27,535 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:34:27,535 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:34:27,535 INFO  L87              Difference]: Start difference. First operand 6000 states and 7289 transitions. cyclomatic complexity: 1291 Second operand 10 states.
[2020-11-25 02:34:27,630 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:27,630 INFO  L93              Difference]: Finished difference Result 6072 states and 7399 transitions.
[2020-11-25 02:34:27,631 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:34:27,631 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6072 states and 7399 transitions.
[2020-11-25 02:34:27,643 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:34:27,658 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6072 states to 6072 states and 7399 transitions.
[2020-11-25 02:34:27,658 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1276
[2020-11-25 02:34:27,659 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1276
[2020-11-25 02:34:27,659 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6072 states and 7399 transitions.
[2020-11-25 02:34:27,663 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:27,663 INFO  L728         BuchiCegarLoop]: Abstraction has 6072 states and 7399 transitions.
[2020-11-25 02:34:27,668 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6072 states and 7399 transitions.
[2020-11-25 02:34:27,705 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6072 to 6007.
[2020-11-25 02:34:27,705 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6007 states.
[2020-11-25 02:34:27,711 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6007 states to 6007 states and 7298 transitions.
[2020-11-25 02:34:27,711 INFO  L751         BuchiCegarLoop]: Abstraction has 6007 states and 7298 transitions.
[2020-11-25 02:34:27,711 INFO  L631         BuchiCegarLoop]: Abstraction has 6007 states and 7298 transitions.
[2020-11-25 02:34:27,711 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:34:27,711 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6007 states and 7298 transitions.
[2020-11-25 02:34:27,718 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:34:27,718 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:27,718 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:27,719 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:27,719 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND TRUE   !!__var_18
[L4817]              revert := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND TRUE   revert
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND TRUE   revert
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND FALSE  !(__exception)
[L1607]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5406]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5406]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5407]  COND TRUE   revert
[L1607]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1608]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s937][msgsender_MSG] == old(_allowed_ERC20[this][from_s937][msgsender_MSG]) - value_s937) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:27,722 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:27,722 INFO  L82        PathProgramCache]: Analyzing trace with hash 767556093, now seen corresponding path program 1 times
[2020-11-25 02:34:27,723 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:27,729 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:27,751 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:34:27,752 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:34:27,752 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:34:27,752 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:27,752 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:34:27,752 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:34:27,752 INFO  L87              Difference]: Start difference. First operand 6007 states and 7298 transitions. cyclomatic complexity: 1293 Second operand 3 states.
[2020-11-25 02:34:27,862 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:27,862 INFO  L93              Difference]: Finished difference Result 6871 states and 7932 transitions.
[2020-11-25 02:34:27,862 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:34:27,862 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6871 states and 7932 transitions.
[2020-11-25 02:34:27,876 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:34:27,891 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6871 states to 6167 states and 7077 transitions.
[2020-11-25 02:34:27,891 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1266
[2020-11-25 02:34:27,892 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1332
[2020-11-25 02:34:27,892 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6167 states and 7077 transitions.
[2020-11-25 02:34:27,896 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:27,896 INFO  L728         BuchiCegarLoop]: Abstraction has 6167 states and 7077 transitions.
[2020-11-25 02:34:27,900 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6167 states and 7077 transitions.
[2020-11-25 02:34:27,926 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6167 to 5423.
[2020-11-25 02:34:27,926 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5423 states.
[2020-11-25 02:34:27,932 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5423 states to 5423 states and 6153 transitions.
[2020-11-25 02:34:27,932 INFO  L751         BuchiCegarLoop]: Abstraction has 5423 states and 6153 transitions.
[2020-11-25 02:34:27,932 INFO  L631         BuchiCegarLoop]: Abstraction has 5423 states and 6153 transitions.
[2020-11-25 02:34:27,932 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 02:34:27,932 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5423 states and 6153 transitions.
[2020-11-25 02:34:27,937 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:34:27,937 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:27,937 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:27,940 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:27,940 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND FALSE  !(DType[this] == Pausable)
[L4953]  COND TRUE   DType[this] == PauserRole
[L4954]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4954]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4955]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND FALSE  !(DType[this] == Pausable)
[L4953]  COND TRUE   DType[this] == PauserRole
[L4954]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4954]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4955]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND FALSE  !(DType[this] == Pausable)
[L4953]  COND TRUE   DType[this] == PauserRole
[L4954]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4954]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4955]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND TRUE   DType[this] == ERC20Mintable
[L5717]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5717]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5718]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND TRUE   DType[this] == ERC20Mintable
[L5717]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5717]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5718]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:27,946 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:27,946 INFO  L82        PathProgramCache]: Analyzing trace with hash -1650901764, now seen corresponding path program 1 times
[2020-11-25 02:34:27,946 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:27,962 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:28,191 INFO  L134       CoverageAnalysis]: Checked inductivity of 1028 backedges. 6 proven. 31 refuted. 0 times theorem prover too weak. 991 trivial. 0 not checked.
[2020-11-25 02:34:28,192 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:34:28,192 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:34:28,192 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:28,192 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:34:28,192 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:34:28,193 INFO  L87              Difference]: Start difference. First operand 5423 states and 6153 transitions. cyclomatic complexity: 732 Second operand 8 states.
[2020-11-25 02:34:28,342 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:28,342 INFO  L93              Difference]: Finished difference Result 5456 states and 6193 transitions.
[2020-11-25 02:34:28,343 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:34:28,343 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5456 states and 6193 transitions.
[2020-11-25 02:34:28,352 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:34:28,362 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5456 states to 5430 states and 6161 transitions.
[2020-11-25 02:34:28,362 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1163
[2020-11-25 02:34:28,362 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1163
[2020-11-25 02:34:28,362 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5430 states and 6161 transitions.
[2020-11-25 02:34:28,366 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:28,366 INFO  L728         BuchiCegarLoop]: Abstraction has 5430 states and 6161 transitions.
[2020-11-25 02:34:28,370 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5430 states and 6161 transitions.
[2020-11-25 02:34:28,396 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5430 to 5430.
[2020-11-25 02:34:28,396 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5430 states.
[2020-11-25 02:34:28,401 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5430 states to 5430 states and 6161 transitions.
[2020-11-25 02:34:28,402 INFO  L751         BuchiCegarLoop]: Abstraction has 5430 states and 6161 transitions.
[2020-11-25 02:34:28,402 INFO  L631         BuchiCegarLoop]: Abstraction has 5430 states and 6161 transitions.
[2020-11-25 02:34:28,402 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 02:34:28,402 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5430 states and 6161 transitions.
[2020-11-25 02:34:28,407 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:34:28,407 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:28,407 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:28,410 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:28,410 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:28,416 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:28,416 INFO  L82        PathProgramCache]: Analyzing trace with hash 306910695, now seen corresponding path program 1 times
[2020-11-25 02:34:28,417 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:28,436 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:28,645 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1024 trivial. 0 not checked.
[2020-11-25 02:34:28,645 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:34:28,645 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 02:34:28,645 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:28,646 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 02:34:28,646 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-25 02:34:28,646 INFO  L87              Difference]: Start difference. First operand 5430 states and 6161 transitions. cyclomatic complexity: 733 Second operand 14 states.
[2020-11-25 02:34:34,785 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:34,785 INFO  L93              Difference]: Finished difference Result 8553 states and 9737 transitions.
[2020-11-25 02:34:34,785 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 02:34:34,785 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8553 states and 9737 transitions.
[2020-11-25 02:34:34,806 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 02:34:34,827 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8553 states to 8529 states and 9710 transitions.
[2020-11-25 02:34:34,828 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1785
[2020-11-25 02:34:34,828 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1785
[2020-11-25 02:34:34,828 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8529 states and 9710 transitions.
[2020-11-25 02:34:34,833 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:34,833 INFO  L728         BuchiCegarLoop]: Abstraction has 8529 states and 9710 transitions.
[2020-11-25 02:34:34,838 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8529 states and 9710 transitions.
[2020-11-25 02:34:34,897 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8529 to 7607.
[2020-11-25 02:34:34,897 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7607 states.
[2020-11-25 02:34:34,907 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7607 states to 7607 states and 8765 transitions.
[2020-11-25 02:34:34,907 INFO  L751         BuchiCegarLoop]: Abstraction has 7607 states and 8765 transitions.
[2020-11-25 02:34:34,907 INFO  L631         BuchiCegarLoop]: Abstraction has 7607 states and 8765 transitions.
[2020-11-25 02:34:34,907 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 02:34:34,907 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7607 states and 8765 transitions.
[2020-11-25 02:34:34,918 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 02:34:34,918 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:34,918 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:34,921 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:34,921 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND TRUE   __exception
[L2718]              __tmp__Balance := Balance;
[L2719]              __tmp__DType := DType;
[L2720]              __tmp__Alloc := Alloc;
[L2721]              __tmp__balance_ADDR := balance_ADDR;
[L2722]              __tmp__M_Ref_int := M_Ref_int;
[L2723]              __tmp__sum__balances0 := sum__balances0;
[L2724]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2725]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2726]              __tmp__sum__allowed1 := sum__allowed1;
[L2727]              __tmp__M_Ref_bool := M_Ref_bool;
[L2728]              __tmp__sum := sum;
[L2729]              __tmp__Length := Length;
[L2730]              __tmp__now := now;
[L2731]              __tmp___balances_ERC20 := _balances_ERC20;
[L2732]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2733]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2734]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2735]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2736]              __tmp___paused_Pausable := _paused_Pausable;
[L2737]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2738]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2739]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2740]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2741]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6137]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L6137]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6138]  COND FALSE  !(revert)
[L6141]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L6141]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]  COND FALSE  !(revert)
[L6145]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4905]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4910]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4915]  COND TRUE   __tmp__DType[this] == PauserRole
[L4916]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4916]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4917]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L6145]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6146]  COND FALSE  !(revert)
[L6149]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4905]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4910]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4915]  COND TRUE   __tmp__DType[this] == PauserRole
[L4916]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4916]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4917]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5175]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5176]  COND FALSE  !(revert)
[L5179]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5156]              assume msgsender_MSG != null;
[L5157]              __tmp__Balance[this] := 0;
[L5158]              __tmp___paused_Pausable[this] := false;
[L5160]              __tmp___paused_Pausable[this] := false;
[L5179]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5180]  COND FALSE  !(revert)
[L6149]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6150]  COND FALSE  !(revert)
[L6153]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5281]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5282]  COND FALSE  !(revert)
[L5285]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L5285]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5286]  COND FALSE  !(revert)
[L5289]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5289]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5290]  COND FALSE  !(revert)
[L5293]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5175]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5176]  COND FALSE  !(revert)
[L5179]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5156]              assume msgsender_MSG != null;
[L5157]              __tmp__Balance[this] := 0;
[L5158]              __tmp___paused_Pausable[this] := false;
[L5160]              __tmp___paused_Pausable[this] := false;
[L5179]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5180]  COND FALSE  !(revert)
[L5293]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5294]  COND FALSE  !(revert)
[L5297]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5266]              assume msgsender_MSG != null;
[L5267]              __tmp__Balance[this] := 0;
[L5297]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5298]  COND FALSE  !(revert)
[L6153]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6154]  COND FALSE  !(revert)
[L6157]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5607]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5607]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5608]  COND FALSE  !(revert)
[L5611]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5580]              assume msgsender_MSG != null;
[L5581]              __tmp__Balance[this] := 0;
[L5582]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5584]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5586]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5587]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5588]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5611]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5612]  COND FALSE  !(revert)
[L6157]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6158]  COND FALSE  !(revert)
[L6161]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5669]              assume msgsender_MSG != null;
[L5670]              __tmp__Balance[this] := 0;
[L5672]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L5672]  RET         call __var_35 := FreshRefGenerator__fail();
[L5673]  COND FALSE  !(revert)
[L5676]              __tmp___minters_MinterRole[this] := __var_35;
[L5678]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5683]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L5684]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5869]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5869]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5870]  COND FALSE  !(revert)
[L5684]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5685]  COND FALSE  !(revert)
[L5734]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5735]  COND FALSE  !(revert)
[L6161]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6162]  COND FALSE  !(revert)
[L6165]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5919]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]  COND FALSE  !(revert)
[L5923]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L5923]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5924]  COND FALSE  !(revert)
[L5927]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5669]              assume msgsender_MSG != null;
[L5670]              __tmp__Balance[this] := 0;
[L5672]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L5672]  RET         call __var_35 := FreshRefGenerator__fail();
[L5673]  COND FALSE  !(revert)
[L5676]              __tmp___minters_MinterRole[this] := __var_35;
[L5678]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5683]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L5684]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5869]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5869]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5870]  COND FALSE  !(revert)
[L5684]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5685]  COND FALSE  !(revert)
[L5734]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5735]  COND FALSE  !(revert)
[L5927]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5928]  COND FALSE  !(revert)
[L5931]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5904]              assume msgsender_MSG != null;
[L5905]              __tmp__Balance[this] := 0;
[L5931]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5932]  COND FALSE  !(revert)
[L6165]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6166]  COND FALSE  !(revert)
[L6169]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L6021]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6022]  COND FALSE  !(revert)
[L6025]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L6025]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6026]  COND FALSE  !(revert)
[L6029]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6006]              assume msgsender_MSG != null;
[L6007]              __tmp__Balance[this] := 0;
[L6029]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6030]  COND FALSE  !(revert)
[L6169]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6170]  COND FALSE  !(revert)
[L6173]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6122]              assume msgsender_MSG != null;
[L6123]              __tmp__Balance[this] := 0;
[L6173]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6174]  COND FALSE  !(revert)
[L2741]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2742]              assume revert || gas < 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5390]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5391]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND TRUE   !(b_s149 <= a_s149)
[L4103]              revert := true;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND TRUE   revert
[L5391]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5392]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:34,927 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:34,927 INFO  L82        PathProgramCache]: Analyzing trace with hash 805031036, now seen corresponding path program 1 times
[2020-11-25 02:34:34,928 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:34,973 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:35,166 INFO  L134       CoverageAnalysis]: Checked inductivity of 975 backedges. 9 proven. 22 refuted. 0 times theorem prover too weak. 944 trivial. 0 not checked.
[2020-11-25 02:34:35,166 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:34:35,166 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:34:35,166 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:35,167 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:34:35,167 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:34:35,167 INFO  L87              Difference]: Start difference. First operand 7607 states and 8765 transitions. cyclomatic complexity: 1162 Second operand 10 states.
[2020-11-25 02:34:36,471 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:36,471 INFO  L93              Difference]: Finished difference Result 9813 states and 11388 transitions.
[2020-11-25 02:34:36,471 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 02:34:36,472 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9813 states and 11388 transitions.
[2020-11-25 02:34:36,492 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:34:36,513 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9813 states to 9773 states and 11337 transitions.
[2020-11-25 02:34:36,513 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2119
[2020-11-25 02:34:36,514 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2119
[2020-11-25 02:34:36,514 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9773 states and 11337 transitions.
[2020-11-25 02:34:36,519 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:36,519 INFO  L728         BuchiCegarLoop]: Abstraction has 9773 states and 11337 transitions.
[2020-11-25 02:34:36,524 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9773 states and 11337 transitions.
[2020-11-25 02:34:36,579 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9773 to 9677.
[2020-11-25 02:34:36,579 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9677 states.
[2020-11-25 02:34:36,591 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9677 states to 9677 states and 11241 transitions.
[2020-11-25 02:34:36,591 INFO  L751         BuchiCegarLoop]: Abstraction has 9677 states and 11241 transitions.
[2020-11-25 02:34:36,591 INFO  L631         BuchiCegarLoop]: Abstraction has 9677 states and 11241 transitions.
[2020-11-25 02:34:36,591 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 02:34:36,591 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9677 states and 11241 transitions.
[2020-11-25 02:34:36,602 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:34:36,602 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:36,602 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:36,604 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:36,604 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND TRUE   __exception
[L2718]              __tmp__Balance := Balance;
[L2719]              __tmp__DType := DType;
[L2720]              __tmp__Alloc := Alloc;
[L2721]              __tmp__balance_ADDR := balance_ADDR;
[L2722]              __tmp__M_Ref_int := M_Ref_int;
[L2723]              __tmp__sum__balances0 := sum__balances0;
[L2724]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2725]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2726]              __tmp__sum__allowed1 := sum__allowed1;
[L2727]              __tmp__M_Ref_bool := M_Ref_bool;
[L2728]              __tmp__sum := sum;
[L2729]              __tmp__Length := Length;
[L2730]              __tmp__now := now;
[L2731]              __tmp___balances_ERC20 := _balances_ERC20;
[L2732]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2733]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2734]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2735]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2736]              __tmp___paused_Pausable := _paused_Pausable;
[L2737]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2738]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2739]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2740]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2741]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6137]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L6137]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6138]  COND FALSE  !(revert)
[L6141]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L6141]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]  COND FALSE  !(revert)
[L6145]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4905]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4910]  COND TRUE   __tmp__DType[this] == Pausable
[L4911]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4911]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4912]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L6145]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6146]  COND FALSE  !(revert)
[L6149]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4905]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4910]  COND TRUE   __tmp__DType[this] == Pausable
[L4911]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4911]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4912]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5175]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5176]  COND FALSE  !(revert)
[L5179]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5156]              assume msgsender_MSG != null;
[L5157]              __tmp__Balance[this] := 0;
[L5158]              __tmp___paused_Pausable[this] := false;
[L5160]              __tmp___paused_Pausable[this] := false;
[L5179]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5180]  COND FALSE  !(revert)
[L6149]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6150]  COND FALSE  !(revert)
[L6153]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5281]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5282]  COND FALSE  !(revert)
[L5285]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L5285]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5286]  COND FALSE  !(revert)
[L5289]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4905]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4910]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4915]  COND TRUE   __tmp__DType[this] == PauserRole
[L4916]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4916]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4917]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5289]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5290]  COND FALSE  !(revert)
[L5293]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5175]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5176]  COND FALSE  !(revert)
[L5179]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5156]              assume msgsender_MSG != null;
[L5157]              __tmp__Balance[this] := 0;
[L5158]              __tmp___paused_Pausable[this] := false;
[L5160]              __tmp___paused_Pausable[this] := false;
[L5179]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5180]  COND FALSE  !(revert)
[L5293]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5294]  COND FALSE  !(revert)
[L5297]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5266]              assume msgsender_MSG != null;
[L5267]              __tmp__Balance[this] := 0;
[L5297]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5298]  COND FALSE  !(revert)
[L6153]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6154]  COND FALSE  !(revert)
[L6157]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5607]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5607]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5608]  COND FALSE  !(revert)
[L5611]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5580]              assume msgsender_MSG != null;
[L5581]              __tmp__Balance[this] := 0;
[L5582]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5584]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5586]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5587]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5588]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5611]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5612]  COND FALSE  !(revert)
[L6157]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6158]  COND FALSE  !(revert)
[L6161]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5669]              assume msgsender_MSG != null;
[L5670]              __tmp__Balance[this] := 0;
[L5672]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L5672]  RET         call __var_35 := FreshRefGenerator__fail();
[L5673]  COND FALSE  !(revert)
[L5676]              __tmp___minters_MinterRole[this] := __var_35;
[L5678]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5683]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L5684]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5869]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5869]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5870]  COND FALSE  !(revert)
[L5684]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5685]  COND FALSE  !(revert)
[L5734]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5735]  COND FALSE  !(revert)
[L6161]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6162]  COND FALSE  !(revert)
[L6165]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5919]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]  COND FALSE  !(revert)
[L5923]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L5923]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5924]  COND FALSE  !(revert)
[L5927]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5669]              assume msgsender_MSG != null;
[L5670]              __tmp__Balance[this] := 0;
[L5672]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L5672]  RET         call __var_35 := FreshRefGenerator__fail();
[L5673]  COND FALSE  !(revert)
[L5676]              __tmp___minters_MinterRole[this] := __var_35;
[L5678]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5683]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L5684]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5869]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5869]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5870]  COND FALSE  !(revert)
[L5684]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5685]  COND FALSE  !(revert)
[L5734]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5735]  COND FALSE  !(revert)
[L5927]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5928]  COND FALSE  !(revert)
[L5931]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5904]              assume msgsender_MSG != null;
[L5905]              __tmp__Balance[this] := 0;
[L5931]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5932]  COND FALSE  !(revert)
[L6165]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6166]  COND FALSE  !(revert)
[L6169]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L6021]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6022]  COND FALSE  !(revert)
[L6025]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L6025]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6026]  COND FALSE  !(revert)
[L6029]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6006]              assume msgsender_MSG != null;
[L6007]              __tmp__Balance[this] := 0;
[L6029]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6030]  COND FALSE  !(revert)
[L6169]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6170]  COND FALSE  !(revert)
[L6173]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6122]              assume msgsender_MSG != null;
[L6123]              __tmp__Balance[this] := 0;
[L6173]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6174]  COND FALSE  !(revert)
[L2741]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2742]              assume revert || gas < 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5390]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5391]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND TRUE   !(b_s149 <= a_s149)
[L4103]              revert := true;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND TRUE   revert
[L5391]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5392]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:36,609 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:36,609 INFO  L82        PathProgramCache]: Analyzing trace with hash 493466654, now seen corresponding path program 1 times
[2020-11-25 02:34:36,610 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:36,621 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:36,814 INFO  L134       CoverageAnalysis]: Checked inductivity of 974 backedges. 9 proven. 19 refuted. 0 times theorem prover too weak. 946 trivial. 0 not checked.
[2020-11-25 02:34:36,814 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:34:36,814 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:34:36,814 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:36,814 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:34:36,814 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:34:36,815 INFO  L87              Difference]: Start difference. First operand 9677 states and 11241 transitions. cyclomatic complexity: 1572 Second operand 9 states.
[2020-11-25 02:34:38,063 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:38,063 INFO  L93              Difference]: Finished difference Result 9831 states and 11408 transitions.
[2020-11-25 02:34:38,063 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:34:38,063 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9831 states and 11408 transitions.
[2020-11-25 02:34:38,083 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:34:38,104 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9831 states to 9777 states and 11341 transitions.
[2020-11-25 02:34:38,104 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2119
[2020-11-25 02:34:38,105 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2119
[2020-11-25 02:34:38,105 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9777 states and 11341 transitions.
[2020-11-25 02:34:38,110 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:38,110 INFO  L728         BuchiCegarLoop]: Abstraction has 9777 states and 11341 transitions.
[2020-11-25 02:34:38,115 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9777 states and 11341 transitions.
[2020-11-25 02:34:38,160 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9777 to 9672.
[2020-11-25 02:34:38,160 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9672 states.
[2020-11-25 02:34:38,171 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9672 states to 9672 states and 11234 transitions.
[2020-11-25 02:34:38,171 INFO  L751         BuchiCegarLoop]: Abstraction has 9672 states and 11234 transitions.
[2020-11-25 02:34:38,172 INFO  L631         BuchiCegarLoop]: Abstraction has 9672 states and 11234 transitions.
[2020-11-25 02:34:38,172 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 02:34:38,172 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9672 states and 11234 transitions.
[2020-11-25 02:34:38,181 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:34:38,181 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:38,181 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:38,183 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:38,183 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND TRUE   __exception
[L2718]              __tmp__Balance := Balance;
[L2719]              __tmp__DType := DType;
[L2720]              __tmp__Alloc := Alloc;
[L2721]              __tmp__balance_ADDR := balance_ADDR;
[L2722]              __tmp__M_Ref_int := M_Ref_int;
[L2723]              __tmp__sum__balances0 := sum__balances0;
[L2724]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2725]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2726]              __tmp__sum__allowed1 := sum__allowed1;
[L2727]              __tmp__M_Ref_bool := M_Ref_bool;
[L2728]              __tmp__sum := sum;
[L2729]              __tmp__Length := Length;
[L2730]              __tmp__now := now;
[L2731]              __tmp___balances_ERC20 := _balances_ERC20;
[L2732]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2733]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2734]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2735]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2736]              __tmp___paused_Pausable := _paused_Pausable;
[L2737]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2738]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2739]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2740]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2741]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6137]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L6137]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6138]  COND FALSE  !(revert)
[L6141]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L6141]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]  COND FALSE  !(revert)
[L6145]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L6145]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6146]  COND FALSE  !(revert)
[L6149]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5175]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5176]  COND FALSE  !(revert)
[L5179]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5156]              assume msgsender_MSG != null;
[L5157]              __tmp__Balance[this] := 0;
[L5158]              __tmp___paused_Pausable[this] := false;
[L5160]              __tmp___paused_Pausable[this] := false;
[L5179]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5180]  COND FALSE  !(revert)
[L6149]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6150]  COND FALSE  !(revert)
[L6153]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5281]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5282]  COND FALSE  !(revert)
[L5285]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L5285]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5286]  COND FALSE  !(revert)
[L5289]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5289]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5290]  COND FALSE  !(revert)
[L5293]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5175]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5176]  COND FALSE  !(revert)
[L5179]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5156]              assume msgsender_MSG != null;
[L5157]              __tmp__Balance[this] := 0;
[L5158]              __tmp___paused_Pausable[this] := false;
[L5160]              __tmp___paused_Pausable[this] := false;
[L5179]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5180]  COND FALSE  !(revert)
[L5293]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5294]  COND FALSE  !(revert)
[L5297]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5266]              assume msgsender_MSG != null;
[L5267]              __tmp__Balance[this] := 0;
[L5297]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5298]  COND FALSE  !(revert)
[L6153]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6154]  COND FALSE  !(revert)
[L6157]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5607]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5607]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5608]  COND FALSE  !(revert)
[L5611]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5580]              assume msgsender_MSG != null;
[L5581]              __tmp__Balance[this] := 0;
[L5582]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5584]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5586]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5587]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5588]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5611]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5612]  COND FALSE  !(revert)
[L6157]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6158]  COND FALSE  !(revert)
[L6161]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5669]              assume msgsender_MSG != null;
[L5670]              __tmp__Balance[this] := 0;
[L5672]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L5672]  RET         call __var_35 := FreshRefGenerator__fail();
[L5673]  COND FALSE  !(revert)
[L5676]              __tmp___minters_MinterRole[this] := __var_35;
[L5678]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5683]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L5684]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5869]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5869]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5870]  COND FALSE  !(revert)
[L5684]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5685]  COND FALSE  !(revert)
[L5734]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5735]  COND FALSE  !(revert)
[L6161]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6162]  COND FALSE  !(revert)
[L6165]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5919]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]  COND FALSE  !(revert)
[L5923]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L5923]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5924]  COND FALSE  !(revert)
[L5927]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5669]              assume msgsender_MSG != null;
[L5670]              __tmp__Balance[this] := 0;
[L5672]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L5672]  RET         call __var_35 := FreshRefGenerator__fail();
[L5673]  COND FALSE  !(revert)
[L5676]              __tmp___minters_MinterRole[this] := __var_35;
[L5678]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5683]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L5684]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5869]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5869]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5870]  COND FALSE  !(revert)
[L5684]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5685]  COND FALSE  !(revert)
[L5734]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5735]  COND FALSE  !(revert)
[L5927]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5928]  COND FALSE  !(revert)
[L5931]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5904]              assume msgsender_MSG != null;
[L5905]              __tmp__Balance[this] := 0;
[L5931]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5932]  COND FALSE  !(revert)
[L6165]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6166]  COND FALSE  !(revert)
[L6169]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L6021]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6022]  COND FALSE  !(revert)
[L6025]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L6025]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6026]  COND FALSE  !(revert)
[L6029]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6006]              assume msgsender_MSG != null;
[L6007]              __tmp__Balance[this] := 0;
[L6029]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6030]  COND FALSE  !(revert)
[L6169]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6170]  COND FALSE  !(revert)
[L6173]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6122]              assume msgsender_MSG != null;
[L6123]              __tmp__Balance[this] := 0;
[L6173]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6174]  COND FALSE  !(revert)
[L2741]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2742]              assume revert || gas < 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:38,188 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:38,188 INFO  L82        PathProgramCache]: Analyzing trace with hash 1606338352, now seen corresponding path program 1 times
[2020-11-25 02:34:38,189 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:38,211 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:38,416 INFO  L134       CoverageAnalysis]: Checked inductivity of 988 backedges. 32 proven. 0 refuted. 0 times theorem prover too weak. 956 trivial. 0 not checked.
[2020-11-25 02:34:38,416 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:34:38,416 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:34:38,416 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:38,417 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:34:38,417 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:34:38,417 INFO  L87              Difference]: Start difference. First operand 9672 states and 11234 transitions. cyclomatic complexity: 1570 Second operand 4 states.
[2020-11-25 02:34:38,631 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:38,631 INFO  L93              Difference]: Finished difference Result 12248 states and 14858 transitions.
[2020-11-25 02:34:38,631 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 02:34:38,631 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12248 states and 14858 transitions.
[2020-11-25 02:34:38,660 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 48
[2020-11-25 02:34:38,692 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12248 states to 11867 states and 14449 transitions.
[2020-11-25 02:34:38,692 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2484
[2020-11-25 02:34:38,693 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2484
[2020-11-25 02:34:38,693 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11867 states and 14449 transitions.
[2020-11-25 02:34:38,701 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:38,701 INFO  L728         BuchiCegarLoop]: Abstraction has 11867 states and 14449 transitions.
[2020-11-25 02:34:38,706 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11867 states and 14449 transitions.
[2020-11-25 02:34:38,776 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11867 to 10334.
[2020-11-25 02:34:38,776 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10334 states.
[2020-11-25 02:34:38,788 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10334 states to 10334 states and 12258 transitions.
[2020-11-25 02:34:38,789 INFO  L751         BuchiCegarLoop]: Abstraction has 10334 states and 12258 transitions.
[2020-11-25 02:34:38,789 INFO  L631         BuchiCegarLoop]: Abstraction has 10334 states and 12258 transitions.
[2020-11-25 02:34:38,789 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 02:34:38,789 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10334 states and 12258 transitions.
[2020-11-25 02:34:38,799 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 02:34:38,799 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:38,799 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:38,800 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:38,800 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND TRUE   __tmp__DType[this] == OMToken
[L5386]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND TRUE   !(b_s149 <= a_s149)
[L4103]              revert := true;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND TRUE   revert
[L5386]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5387]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND FALSE  !(gas >= 0)
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:38,805 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:38,805 INFO  L82        PathProgramCache]: Analyzing trace with hash -101479540, now seen corresponding path program 1 times
[2020-11-25 02:34:38,806 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:38,824 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:39,019 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1030 trivial. 0 not checked.
[2020-11-25 02:34:39,019 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:34:39,019 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:34:39,020 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:39,020 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:34:39,020 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:34:39,020 INFO  L87              Difference]: Start difference. First operand 10334 states and 12258 transitions. cyclomatic complexity: 1932 Second operand 8 states.
[2020-11-25 02:34:40,857 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:40,858 INFO  L93              Difference]: Finished difference Result 10486 states and 12459 transitions.
[2020-11-25 02:34:40,858 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:34:40,858 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10486 states and 12459 transitions.
[2020-11-25 02:34:40,881 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 02:34:40,905 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10486 states to 10486 states and 12459 transitions.
[2020-11-25 02:34:40,905 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2377
[2020-11-25 02:34:40,906 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2377
[2020-11-25 02:34:40,906 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10486 states and 12459 transitions.
[2020-11-25 02:34:40,912 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:40,912 INFO  L728         BuchiCegarLoop]: Abstraction has 10486 states and 12459 transitions.
[2020-11-25 02:34:40,917 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10486 states and 12459 transitions.
[2020-11-25 02:34:40,968 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10486 to 7891.
[2020-11-25 02:34:40,968 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7891 states.
[2020-11-25 02:34:40,978 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7891 states to 7891 states and 9171 transitions.
[2020-11-25 02:34:40,978 INFO  L751         BuchiCegarLoop]: Abstraction has 7891 states and 9171 transitions.
[2020-11-25 02:34:40,978 INFO  L631         BuchiCegarLoop]: Abstraction has 7891 states and 9171 transitions.
[2020-11-25 02:34:40,978 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 02:34:40,978 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7891 states and 9171 transitions.
[2020-11-25 02:34:40,986 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:34:40,986 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:40,986 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:40,988 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:40,988 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND FALSE  !(DType[this] == Pausable)
[L4953]  COND TRUE   DType[this] == PauserRole
[L4954]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4954]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4955]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND FALSE  !(DType[this] == Pausable)
[L4953]  COND TRUE   DType[this] == PauserRole
[L4954]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4954]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4955]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5390]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5391]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5391]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5392]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND FALSE  !(choice == 21)
[L9778]  COND FALSE  !(choice == 20)
[L9784]  COND FALSE  !(choice == 19)
[L9790]  COND FALSE  !(choice == 18)
[L9796]  COND FALSE  !(choice == 17)
[L9803]  COND FALSE  !(choice == 16)
[L9810]  COND FALSE  !(choice == 15)
[L9816]  COND FALSE  !(choice == 14)
[L9822]  COND FALSE  !(choice == 13)
[L9828]  COND FALSE  !(choice == 12)
[L9834]  COND FALSE  !(choice == 11)
[L9840]  COND FALSE  !(choice == 10)
[L9846]  COND FALSE  !(choice == 9)
[L9852]  COND FALSE  !(choice == 8)
[L9858]  COND FALSE  !(choice == 7)
[L9864]  COND FALSE  !(choice == 6)
[L9870]  COND FALSE  !(choice == 5)
[L9876]  COND FALSE  !(choice == 4)
[L9882]  COND FALSE  !(choice == 3)
[L9889]  COND FALSE  !(choice == 2)
[L9896]  COND FALSE  !(choice == 1)
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:40,992 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:40,993 INFO  L82        PathProgramCache]: Analyzing trace with hash 56554440, now seen corresponding path program 1 times
[2020-11-25 02:34:40,993 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:41,007 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:41,175 INFO  L134       CoverageAnalysis]: Checked inductivity of 1017 backedges. 12 proven. 12 refuted. 0 times theorem prover too weak. 993 trivial. 0 not checked.
[2020-11-25 02:34:41,175 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:34:41,175 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:34:41,176 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:41,176 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:34:41,176 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:34:41,176 INFO  L87              Difference]: Start difference. First operand 7891 states and 9171 transitions. cyclomatic complexity: 1288 Second operand 8 states.
[2020-11-25 02:34:41,328 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:41,328 INFO  L93              Difference]: Finished difference Result 7924 states and 9210 transitions.
[2020-11-25 02:34:41,329 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:34:41,329 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7924 states and 9210 transitions.
[2020-11-25 02:34:41,342 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:34:41,358 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7924 states to 7891 states and 9170 transitions.
[2020-11-25 02:34:41,358 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1903
[2020-11-25 02:34:41,359 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1903
[2020-11-25 02:34:41,359 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7891 states and 9170 transitions.
[2020-11-25 02:34:41,363 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:41,363 INFO  L728         BuchiCegarLoop]: Abstraction has 7891 states and 9170 transitions.
[2020-11-25 02:34:41,367 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7891 states and 9170 transitions.
[2020-11-25 02:34:41,412 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7891 to 7891.
[2020-11-25 02:34:41,412 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7891 states.
[2020-11-25 02:34:41,423 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7891 states to 7891 states and 9170 transitions.
[2020-11-25 02:34:41,423 INFO  L751         BuchiCegarLoop]: Abstraction has 7891 states and 9170 transitions.
[2020-11-25 02:34:41,423 INFO  L631         BuchiCegarLoop]: Abstraction has 7891 states and 9170 transitions.
[2020-11-25 02:34:41,423 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 02:34:41,423 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7891 states and 9170 transitions.
[2020-11-25 02:34:41,434 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:34:41,434 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:41,434 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:41,436 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:41,436 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND TRUE   DType[this] == ERC20Pausable
[L4944]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4944]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4945]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5390]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5391]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5391]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5392]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND FALSE  !(choice == 21)
[L9778]  COND FALSE  !(choice == 20)
[L9784]  COND FALSE  !(choice == 19)
[L9790]  COND FALSE  !(choice == 18)
[L9796]  COND FALSE  !(choice == 17)
[L9803]  COND FALSE  !(choice == 16)
[L9810]  COND FALSE  !(choice == 15)
[L9816]  COND FALSE  !(choice == 14)
[L9822]  COND FALSE  !(choice == 13)
[L9828]  COND FALSE  !(choice == 12)
[L9834]  COND FALSE  !(choice == 11)
[L9840]  COND FALSE  !(choice == 10)
[L9846]  COND FALSE  !(choice == 9)
[L9852]  COND FALSE  !(choice == 8)
[L9858]  COND FALSE  !(choice == 7)
[L9864]  COND FALSE  !(choice == 6)
[L9870]  COND FALSE  !(choice == 5)
[L9876]  COND FALSE  !(choice == 4)
[L9882]  COND FALSE  !(choice == 3)
[L9889]  COND FALSE  !(choice == 2)
[L9896]  COND FALSE  !(choice == 1)
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:41,441 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:41,441 INFO  L82        PathProgramCache]: Analyzing trace with hash 1910049516, now seen corresponding path program 1 times
[2020-11-25 02:34:41,442 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:41,458 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:41,668 INFO  L134       CoverageAnalysis]: Checked inductivity of 1020 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 995 trivial. 0 not checked.
[2020-11-25 02:34:41,668 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:34:41,668 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:34:41,668 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:41,669 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:34:41,669 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:34:41,669 INFO  L87              Difference]: Start difference. First operand 7891 states and 9170 transitions. cyclomatic complexity: 1287 Second operand 9 states.
[2020-11-25 02:34:41,819 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:41,819 INFO  L93              Difference]: Finished difference Result 7934 states and 9219 transitions.
[2020-11-25 02:34:41,819 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:34:41,819 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7934 states and 9219 transitions.
[2020-11-25 02:34:41,832 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:34:41,846 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7934 states to 7887 states and 9164 transitions.
[2020-11-25 02:34:41,846 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1903
[2020-11-25 02:34:41,847 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1903
[2020-11-25 02:34:41,847 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7887 states and 9164 transitions.
[2020-11-25 02:34:41,851 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:41,851 INFO  L728         BuchiCegarLoop]: Abstraction has 7887 states and 9164 transitions.
[2020-11-25 02:34:41,855 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7887 states and 9164 transitions.
[2020-11-25 02:34:41,891 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7887 to 7887.
[2020-11-25 02:34:41,891 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7887 states.
[2020-11-25 02:34:41,900 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7887 states to 7887 states and 9164 transitions.
[2020-11-25 02:34:41,900 INFO  L751         BuchiCegarLoop]: Abstraction has 7887 states and 9164 transitions.
[2020-11-25 02:34:41,900 INFO  L631         BuchiCegarLoop]: Abstraction has 7887 states and 9164 transitions.
[2020-11-25 02:34:41,900 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 02:34:41,900 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7887 states and 9164 transitions.
[2020-11-25 02:34:41,908 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:34:41,908 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:41,908 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:41,909 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:41,909 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND TRUE   DType[this] == Pausable
[L4949]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4949]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4950]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5390]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5391]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5391]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5392]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND FALSE  !(choice == 21)
[L9778]  COND FALSE  !(choice == 20)
[L9784]  COND FALSE  !(choice == 19)
[L9790]  COND FALSE  !(choice == 18)
[L9796]  COND FALSE  !(choice == 17)
[L9803]  COND FALSE  !(choice == 16)
[L9810]  COND FALSE  !(choice == 15)
[L9816]  COND FALSE  !(choice == 14)
[L9822]  COND FALSE  !(choice == 13)
[L9828]  COND FALSE  !(choice == 12)
[L9834]  COND FALSE  !(choice == 11)
[L9840]  COND FALSE  !(choice == 10)
[L9846]  COND FALSE  !(choice == 9)
[L9852]  COND FALSE  !(choice == 8)
[L9858]  COND FALSE  !(choice == 7)
[L9864]  COND FALSE  !(choice == 6)
[L9870]  COND FALSE  !(choice == 5)
[L9876]  COND FALSE  !(choice == 4)
[L9882]  COND FALSE  !(choice == 3)
[L9889]  COND FALSE  !(choice == 2)
[L9896]  COND FALSE  !(choice == 1)
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:41,913 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:41,914 INFO  L82        PathProgramCache]: Analyzing trace with hash 205437058, now seen corresponding path program 1 times
[2020-11-25 02:34:41,914 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:41,928 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:42,092 INFO  L134       CoverageAnalysis]: Checked inductivity of 1020 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 995 trivial. 0 not checked.
[2020-11-25 02:34:42,092 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:34:42,092 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:34:42,092 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:42,092 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:34:42,092 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:34:42,093 INFO  L87              Difference]: Start difference. First operand 7887 states and 9164 transitions. cyclomatic complexity: 1285 Second operand 9 states.
[2020-11-25 02:34:42,241 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:42,241 INFO  L93              Difference]: Finished difference Result 7924 states and 9207 transitions.
[2020-11-25 02:34:42,241 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:34:42,241 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7924 states and 9207 transitions.
[2020-11-25 02:34:42,255 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:34:42,268 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7924 states to 7870 states and 9143 transitions.
[2020-11-25 02:34:42,268 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1903
[2020-11-25 02:34:42,269 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1903
[2020-11-25 02:34:42,269 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7870 states and 9143 transitions.
[2020-11-25 02:34:42,273 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:42,273 INFO  L728         BuchiCegarLoop]: Abstraction has 7870 states and 9143 transitions.
[2020-11-25 02:34:42,277 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7870 states and 9143 transitions.
[2020-11-25 02:34:42,313 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7870 to 7870.
[2020-11-25 02:34:42,313 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7870 states.
[2020-11-25 02:34:42,321 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7870 states to 7870 states and 9143 transitions.
[2020-11-25 02:34:42,322 INFO  L751         BuchiCegarLoop]: Abstraction has 7870 states and 9143 transitions.
[2020-11-25 02:34:42,322 INFO  L631         BuchiCegarLoop]: Abstraction has 7870 states and 9143 transitions.
[2020-11-25 02:34:42,322 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 02:34:42,322 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7870 states and 9143 transitions.
[2020-11-25 02:34:42,329 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:34:42,329 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:42,329 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:42,331 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:42,331 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND TRUE   __tmp__DType[this] == OMToken
[L5386]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5386]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5387]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND TRUE   __tmp__DType[this] == OMToken
[L5386]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5386]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5387]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:42,335 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:42,335 INFO  L82        PathProgramCache]: Analyzing trace with hash -1143199992, now seen corresponding path program 1 times
[2020-11-25 02:34:42,336 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:42,352 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:42,594 INFO  L134       CoverageAnalysis]: Checked inductivity of 1032 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 1023 trivial. 0 not checked.
[2020-11-25 02:34:42,594 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:34:42,594 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:34:42,595 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:42,595 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:34:42,595 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:34:42,595 INFO  L87              Difference]: Start difference. First operand 7870 states and 9143 transitions. cyclomatic complexity: 1281 Second operand 7 states.
[2020-11-25 02:34:42,717 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:42,717 INFO  L93              Difference]: Finished difference Result 7893 states and 9169 transitions.
[2020-11-25 02:34:42,717 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:34:42,717 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7893 states and 9169 transitions.
[2020-11-25 02:34:42,730 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:34:42,744 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7893 states to 7876 states and 9149 transitions.
[2020-11-25 02:34:42,744 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1903
[2020-11-25 02:34:42,745 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1903
[2020-11-25 02:34:42,745 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7876 states and 9149 transitions.
[2020-11-25 02:34:42,749 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:42,749 INFO  L728         BuchiCegarLoop]: Abstraction has 7876 states and 9149 transitions.
[2020-11-25 02:34:42,753 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7876 states and 9149 transitions.
[2020-11-25 02:34:42,788 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7876 to 7876.
[2020-11-25 02:34:42,788 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7876 states.
[2020-11-25 02:34:42,796 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7876 states to 7876 states and 9149 transitions.
[2020-11-25 02:34:42,796 INFO  L751         BuchiCegarLoop]: Abstraction has 7876 states and 9149 transitions.
[2020-11-25 02:34:42,796 INFO  L631         BuchiCegarLoop]: Abstraction has 7876 states and 9149 transitions.
[2020-11-25 02:34:42,797 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 02:34:42,797 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7876 states and 9149 transitions.
[2020-11-25 02:34:42,804 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:34:42,804 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:42,804 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:42,806 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:42,806 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5390]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5391]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5391]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5392]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND FALSE  !(choice == 21)
[L9778]  COND FALSE  !(choice == 20)
[L9784]  COND FALSE  !(choice == 19)
[L9790]  COND FALSE  !(choice == 18)
[L9796]  COND FALSE  !(choice == 17)
[L9803]  COND FALSE  !(choice == 16)
[L9810]  COND FALSE  !(choice == 15)
[L9816]  COND FALSE  !(choice == 14)
[L9822]  COND FALSE  !(choice == 13)
[L9828]  COND FALSE  !(choice == 12)
[L9834]  COND FALSE  !(choice == 11)
[L9840]  COND FALSE  !(choice == 10)
[L9846]  COND FALSE  !(choice == 9)
[L9852]  COND FALSE  !(choice == 8)
[L9858]  COND FALSE  !(choice == 7)
[L9864]  COND FALSE  !(choice == 6)
[L9870]  COND FALSE  !(choice == 5)
[L9876]  COND FALSE  !(choice == 4)
[L9882]  COND FALSE  !(choice == 3)
[L9889]  COND FALSE  !(choice == 2)
[L9896]  COND FALSE  !(choice == 1)
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:42,810 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:42,810 INFO  L82        PathProgramCache]: Analyzing trace with hash 62586436, now seen corresponding path program 1 times
[2020-11-25 02:34:42,811 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:42,828 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:43,003 INFO  L134       CoverageAnalysis]: Checked inductivity of 1026 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1020 trivial. 0 not checked.
[2020-11-25 02:34:43,003 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:34:43,003 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:34:43,004 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:43,004 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:34:43,004 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:34:43,004 INFO  L87              Difference]: Start difference. First operand 7876 states and 9149 transitions. cyclomatic complexity: 1281 Second operand 8 states.
[2020-11-25 02:34:43,140 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:43,140 INFO  L93              Difference]: Finished difference Result 7897 states and 9172 transitions.
[2020-11-25 02:34:43,141 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:34:43,141 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7897 states and 9172 transitions.
[2020-11-25 02:34:43,154 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:34:43,168 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7897 states to 7865 states and 9136 transitions.
[2020-11-25 02:34:43,168 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1903
[2020-11-25 02:34:43,169 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1903
[2020-11-25 02:34:43,169 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7865 states and 9136 transitions.
[2020-11-25 02:34:43,173 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:43,173 INFO  L728         BuchiCegarLoop]: Abstraction has 7865 states and 9136 transitions.
[2020-11-25 02:34:43,177 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7865 states and 9136 transitions.
[2020-11-25 02:34:43,211 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7865 to 7865.
[2020-11-25 02:34:43,211 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7865 states.
[2020-11-25 02:34:43,219 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7865 states to 7865 states and 9136 transitions.
[2020-11-25 02:34:43,220 INFO  L751         BuchiCegarLoop]: Abstraction has 7865 states and 9136 transitions.
[2020-11-25 02:34:43,220 INFO  L631         BuchiCegarLoop]: Abstraction has 7865 states and 9136 transitions.
[2020-11-25 02:34:43,220 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 02:34:43,220 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7865 states and 9136 transitions.
[2020-11-25 02:34:43,227 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:34:43,228 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:43,228 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:43,229 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:43,229 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5390]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5391]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5391]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5392]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND FALSE  !(choice == 21)
[L9778]  COND FALSE  !(choice == 20)
[L9784]  COND FALSE  !(choice == 19)
[L9790]  COND FALSE  !(choice == 18)
[L9796]  COND FALSE  !(choice == 17)
[L9803]  COND FALSE  !(choice == 16)
[L9810]  COND FALSE  !(choice == 15)
[L9816]  COND FALSE  !(choice == 14)
[L9822]  COND FALSE  !(choice == 13)
[L9828]  COND FALSE  !(choice == 12)
[L9834]  COND FALSE  !(choice == 11)
[L9840]  COND FALSE  !(choice == 10)
[L9846]  COND FALSE  !(choice == 9)
[L9852]  COND FALSE  !(choice == 8)
[L9858]  COND FALSE  !(choice == 7)
[L9864]  COND FALSE  !(choice == 6)
[L9870]  COND FALSE  !(choice == 5)
[L9876]  COND FALSE  !(choice == 4)
[L9882]  COND FALSE  !(choice == 3)
[L9889]  COND FALSE  !(choice == 2)
[L9896]  COND FALSE  !(choice == 1)
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:43,233 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:43,233 INFO  L82        PathProgramCache]: Analyzing trace with hash 749969130, now seen corresponding path program 1 times
[2020-11-25 02:34:43,234 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:43,250 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:43,442 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1030 trivial. 0 not checked.
[2020-11-25 02:34:43,443 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:34:43,443 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:34:43,444 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:43,444 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:34:43,444 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:34:43,444 INFO  L87              Difference]: Start difference. First operand 7865 states and 9136 transitions. cyclomatic complexity: 1279 Second operand 4 states.
[2020-11-25 02:34:43,505 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:43,505 INFO  L93              Difference]: Finished difference Result 7887 states and 9161 transitions.
[2020-11-25 02:34:43,505 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:34:43,505 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7887 states and 9161 transitions.
[2020-11-25 02:34:43,518 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:34:43,532 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7887 states to 7887 states and 9161 transitions.
[2020-11-25 02:34:43,532 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1915
[2020-11-25 02:34:43,533 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1915
[2020-11-25 02:34:43,533 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7887 states and 9161 transitions.
[2020-11-25 02:34:43,536 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:43,537 INFO  L728         BuchiCegarLoop]: Abstraction has 7887 states and 9161 transitions.
[2020-11-25 02:34:43,540 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7887 states and 9161 transitions.
[2020-11-25 02:34:43,574 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7887 to 7875.
[2020-11-25 02:34:43,574 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7875 states.
[2020-11-25 02:34:43,582 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7875 states to 7875 states and 9146 transitions.
[2020-11-25 02:34:43,582 INFO  L751         BuchiCegarLoop]: Abstraction has 7875 states and 9146 transitions.
[2020-11-25 02:34:43,582 INFO  L631         BuchiCegarLoop]: Abstraction has 7875 states and 9146 transitions.
[2020-11-25 02:34:43,582 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 02:34:43,582 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7875 states and 9146 transitions.
[2020-11-25 02:34:43,590 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:34:43,590 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:43,590 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:43,591 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:43,591 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND TRUE   DType[this] == ERC20Mintable
[L5717]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5717]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5718]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND TRUE   DType[this] == ERC20Mintable
[L5717]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5717]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5718]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND TRUE   __tmp__DType[this] == OMToken
[L5386]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5386]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5387]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND FALSE  !(gas >= 0)
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:43,595 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:43,595 INFO  L82        PathProgramCache]: Analyzing trace with hash -2104257004, now seen corresponding path program 1 times
[2020-11-25 02:34:43,596 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:43,612 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:34:43,766 INFO  L134       CoverageAnalysis]: Checked inductivity of 1031 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 1022 trivial. 0 not checked.
[2020-11-25 02:34:43,767 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:34:43,767 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:34:43,767 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:34:43,767 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:34:43,767 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:34:43,767 INFO  L87              Difference]: Start difference. First operand 7875 states and 9146 transitions. cyclomatic complexity: 1279 Second operand 7 states.
[2020-11-25 02:34:43,872 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:34:43,872 INFO  L93              Difference]: Finished difference Result 7898 states and 9172 transitions.
[2020-11-25 02:34:43,873 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:34:43,873 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7898 states and 9172 transitions.
[2020-11-25 02:34:43,886 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:34:43,900 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7898 states to 7881 states and 9152 transitions.
[2020-11-25 02:34:43,900 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1908
[2020-11-25 02:34:43,901 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1908
[2020-11-25 02:34:43,901 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7881 states and 9152 transitions.
[2020-11-25 02:34:43,905 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:34:43,905 INFO  L728         BuchiCegarLoop]: Abstraction has 7881 states and 9152 transitions.
[2020-11-25 02:34:43,909 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7881 states and 9152 transitions.
[2020-11-25 02:34:43,944 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7881 to 7881.
[2020-11-25 02:34:43,944 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7881 states.
[2020-11-25 02:34:43,952 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7881 states to 7881 states and 9152 transitions.
[2020-11-25 02:34:43,952 INFO  L751         BuchiCegarLoop]: Abstraction has 7881 states and 9152 transitions.
[2020-11-25 02:34:43,952 INFO  L631         BuchiCegarLoop]: Abstraction has 7881 states and 9152 transitions.
[2020-11-25 02:34:43,952 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 02:34:43,952 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7881 states and 9152 transitions.
[2020-11-25 02:34:43,960 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 02:34:43,960 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:34:43,960 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:34:43,961 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:34:43,961 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND TRUE   __tmp__DType[this] == OMToken
[L5386]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5386]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5387]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND FALSE  !(choice == 22)
[L9771]  COND TRUE   choice == 21
[L9772]              gas := gas - 21000;
[L9773]  COND TRUE   gas >= 0
[L9774]              assume value_s937 >= 0 && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9775]              assume msgvalue_MSG == 0;
[L9776]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND TRUE   __tmp__DType[this] == OMToken
[L5386]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5386]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5387]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:34:43,966 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:43,966 INFO  L82        PathProgramCache]: Analyzing trace with hash 1390177096, now seen corresponding path program 1 times
[2020-11-25 02:34:43,966 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:43,988 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:34:44,013 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:34:44,156 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:44,156 INFO  L82        PathProgramCache]: Analyzing trace with hash 1336400583, now seen corresponding path program 1 times
[2020-11-25 02:34:44,157 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:44,162 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:34:44,167 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:34:44,180 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:34:44,180 INFO  L82        PathProgramCache]: Analyzing trace with hash -1414586418, now seen corresponding path program 1 times
[2020-11-25 02:34:44,181 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:34:44,207 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:34:44,240 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 02:34:44,665 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification. DAG size of input: 97 DAG size of output: 94
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 02:34:45,082 WARN  L188               SmtUtils]: Spent 286.00 ms on a formula simplification. DAG size of input: 192 DAG size of output: 182
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3137 to 6271
[2020-11-25 02:34:45,388 WARN  L188               SmtUtils]: Spent 286.00 ms on a formula simplification. DAG size of input: 137 DAG size of output: 131
[2020-11-25 02:34:45,679 WARN  L188               SmtUtils]: Spent 289.00 ms on a formula simplification that was a NOOP. DAG size: 301
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3517 to 7027
[2020-11-25 02:34:46,631 WARN  L188               SmtUtils]: Spent 938.00 ms on a formula simplification. DAG size of input: 249 DAG size of output: 249
[2020-11-25 02:34:47,994 WARN  L188               SmtUtils]: Spent 1.36 s on a formula simplification. DAG size of input: 319 DAG size of output: 309
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.002s / 0.002s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.003s / 0.005s total
Resizing node table from 13313 to 26597
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #8: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
[2020-11-25 02:34:48,444 WARN  L188               SmtUtils]: Spent 415.00 ms on a formula simplification. DAG size of input: 202 DAG size of output: 196
[2020-11-25 02:34:48,833 WARN  L188               SmtUtils]: Spent 386.00 ms on a formula simplification that was a NOOP. DAG size: 373
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 02:34:49,657 WARN  L188               SmtUtils]: Spent 810.00 ms on a formula simplification. DAG size of input: 304 DAG size of output: 304
[2020-11-25 02:34:50,079 WARN  L188               SmtUtils]: Spent 420.00 ms on a formula simplification that was a NOOP. DAG size: 304
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 13313 to 26597
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
[2020-11-25 02:34:52,274 WARN  L188               SmtUtils]: Spent 2.18 s on a formula simplification. DAG size of input: 226 DAG size of output: 209
[2020-11-25 02:34:52,290 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
[2020-11-25 02:34:54,292 WARN  L188               SmtUtils]: Spent 1.00 s on a formula simplification. DAG size of input: 476 DAG size of output: 445
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 631 to 1259
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 02:34:54,651 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification that was a NOOP. DAG size: 342
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 02:34:55,182 WARN  L188               SmtUtils]: Spent 199.00 ms on a formula simplification. DAG size of input: 192 DAG size of output: 182
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 02:34:55,388 WARN  L188               SmtUtils]: Spent 195.00 ms on a formula simplification. DAG size of input: 137 DAG size of output: 131
[2020-11-25 02:34:55,623 WARN  L188               SmtUtils]: Spent 233.00 ms on a formula simplification that was a NOOP. DAG size: 301
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 02:34:56,658 WARN  L188               SmtUtils]: Spent 1.03 s on a formula simplification. DAG size of input: 249 DAG size of output: 249
[2020-11-25 02:34:57,903 WARN  L188               SmtUtils]: Spent 1.24 s on a formula simplification. DAG size of input: 318 DAG size of output: 309
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 13313 to 26597
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #8: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
[2020-11-25 02:34:58,934 WARN  L188               SmtUtils]: Spent 980.00 ms on a formula simplification. DAG size of input: 235 DAG size of output: 203
[2020-11-25 02:34:59,563 WARN  L188               SmtUtils]: Spent 628.00 ms on a formula simplification that was a NOOP. DAG size: 380
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9181 to 18353
[2020-11-25 02:35:02,411 WARN  L188               SmtUtils]: Spent 2.83 s on a formula simplification. DAG size of input: 317 DAG size of output: 311
[2020-11-25 02:35:04,971 WARN  L188               SmtUtils]: Spent 2.56 s on a formula simplification. DAG size of input: 597 DAG size of output: 585
Garbage collection #1: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #2: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #3: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #4: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #5: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #6: 7027 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 7027 to 14051
Garbage collection #7: 14051 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 14051 to 28099
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #8: 14051 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14051 to 28099
[2020-11-25 02:35:06,988 WARN  L188               SmtUtils]: Spent 1.89 s on a formula simplification. DAG size of input: 447 DAG size of output: 333
[2020-11-25 02:35:07,837 WARN  L188               SmtUtils]: Spent 827.00 ms on a formula simplification that was a NOOP. DAG size: 452
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
Garbage collection #9: 31699 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31699 to 63397
[2020-11-25 02:35:10,606 WARN  L188               SmtUtils]: Spent 2.64 s on a formula simplification. DAG size of input: 533 DAG size of output: 328
[2020-11-25 02:35:11,859 WARN  L188               SmtUtils]: Spent 1.25 s on a formula simplification. DAG size of input: 449 DAG size of output: 448
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #8: 18353 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 18353 to 36697
Garbage collection #9: 36697 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 36697 to 73387
Garbage collection #10: 73387 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 73387 to 123379
[2020-11-25 02:35:14,817 WARN  L188               SmtUtils]: Spent 2.92 s on a formula simplification. DAG size of input: 471 DAG size of output: 443
[2020-11-25 02:35:14,860 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:35:14,893 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:35:14,905 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:35:14 BasicIcfg
[2020-11-25 02:35:14,906 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:35:14,906 INFO  L168              Benchmark]: Toolchain (without parser) took 55269.38 ms. Allocated memory was 1.0 GB in the beginning and 4.1 GB in the end (delta: 3.1 GB). Free memory was 924.5 MB in the beginning and 3.6 GB in the end (delta: -2.7 GB). Peak memory consumption was 3.3 GB. Max. memory is 15.3 GB.
[2020-11-25 02:35:14,906 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:35:14,906 INFO  L168              Benchmark]: Boogie Preprocessor took 151.96 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:35:14,907 INFO  L168              Benchmark]: UtopiaSpecLang took 87.85 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:35:14,907 INFO  L168              Benchmark]: Boogie Printer took 26.27 ms. Allocated memory is still 1.0 GB. Free memory was 892.3 MB in the beginning and 886.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:35:14,907 INFO  L168              Benchmark]: RCFGBuilder took 1368.52 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 70.3 MB). Free memory was 886.9 MB in the beginning and 817.7 MB in the end (delta: 69.2 MB). Peak memory consumption was 175.8 MB. Max. memory is 15.3 GB.
[2020-11-25 02:35:14,908 INFO  L168              Benchmark]: UtopiaLTL2Aut took 34.57 ms. Allocated memory is still 1.1 GB. Free memory was 817.7 MB in the beginning and 807.9 MB in the end (delta: 9.7 MB). Peak memory consumption was 9.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:35:14,908 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3195.96 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 446.7 MB). Free memory was 807.9 MB in the beginning and 1.2 GB in the end (delta: -366.1 MB). Peak memory consumption was 380.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:35:14,908 INFO  L168              Benchmark]: BlockEncodingV2 took 238.14 ms. Allocated memory is still 1.5 GB. Free memory was 1.2 GB in the beginning and 1.0 GB in the end (delta: 124.5 MB). Peak memory consumption was 124.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:35:14,909 INFO  L168              Benchmark]: BuchiAutomizer took 50163.13 ms. Allocated memory was 1.5 GB in the beginning and 4.1 GB in the end (delta: 2.5 GB). Free memory was 1.0 GB in the beginning and 3.6 GB in the end (delta: -2.5 GB). Peak memory consumption was 2.9 GB. Max. memory is 15.3 GB.
[2020-11-25 02:35:14,911 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    9266 locations, 17161 edges
  - StatisticsResult: Encoded RCFG
    9110 locations, 16734 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 151.96 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 87.85 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 26.27 ms. Allocated memory is still 1.0 GB. Free memory was 892.3 MB in the beginning and 886.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1368.52 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 70.3 MB). Free memory was 886.9 MB in the beginning and 817.7 MB in the end (delta: 69.2 MB). Peak memory consumption was 175.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 34.57 ms. Allocated memory is still 1.1 GB. Free memory was 817.7 MB in the beginning and 807.9 MB in the end (delta: 9.7 MB). Peak memory consumption was 9.7 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3195.96 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 446.7 MB). Free memory was 807.9 MB in the beginning and 1.2 GB in the end (delta: -366.1 MB). Peak memory consumption was 380.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 238.14 ms. Allocated memory is still 1.5 GB. Free memory was 1.2 GB in the beginning and 1.0 GB in the end (delta: 124.5 MB). Peak memory consumption was 124.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 50163.13 ms. Allocated memory was 1.5 GB in the beginning and 4.1 GB in the end (delta: 2.5 GB). Free memory was 1.0 GB in the beginning and 3.6 GB in the end (delta: -2.5 GB). Peak memory consumption was 2.9 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3605 locations, 5218 edges
  - StatisticsResult: BuchiProgram size
    9266 locations, 17161 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 20 terminating modules (20 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.20 modules have a trivial ranking function, the largest among these consists of 14 locations. The remainder module has 7881 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 50.0s and 21 iterations.  TraceHistogramMax:9. Analysis of lassos took 34.5s. Construction of modules took 9.1s. BÃ¼chi inclusion checks took 3.8s. Highest rank in rank-based complementation 0. Minimization of det autom 20. Minimization of nondet autom 0. Automata minimization 1.1s AutomataMinimizationTime, 20 MinimizatonAttempts, 7005 StatesRemovedByMinimization, 11 NontrivialMinimizations. Non-live state removal took 0.7s Buchi closure took 0.0s. Biggest automaton had 10334 states and ocurred in iteration 12.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 117160 SDtfs, 44436 SDslu, 477826 SDs, 0 SdLazy, 124142 SolverSat, 7267 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 9.1s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU20 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(3979037) = (new OMToken)({from : 3979024, name : 3979032, symbol : 3979033, decimals : 3979021});
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
ERC20Pausable(3979037).transferFrom~address~address~uint256.gas(3979002)({from : 3979004, from : 0, to : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND TRUE   __tmp__DType[this] == OMToken
[L5386]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5386]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5387]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);

Loop:
ERC20Pausable(3979037).transferFrom~address~address~uint256.gas(3979001)({from : 3979003, from : 0, to : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s937 || p2 != msgsender_MSG) && from_s937 == to_s937) && value_s937 <= _balances_ERC20[this][from_s937]) && value_s937 <= _allowed_ERC20[this][from_s937][msgsender_MSG]) && value_s937 >= 0) && value_s937 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s937] >= 0) && _balances_ERC20[this][to_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s937] >= 0) && _balances_ERC20[this][from_s937] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s937][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s937][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1578]              havoc __exception;
[L1579]              revert := false;
[L1580]  COND TRUE   __exception
[L1581]              __tmp__Balance := Balance;
[L1582]              __tmp__DType := DType;
[L1583]              __tmp__Alloc := Alloc;
[L1584]              __tmp__balance_ADDR := balance_ADDR;
[L1585]              __tmp__M_Ref_int := M_Ref_int;
[L1586]              __tmp__sum__balances0 := sum__balances0;
[L1587]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1588]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1589]              __tmp__sum__allowed1 := sum__allowed1;
[L1590]              __tmp__M_Ref_bool := M_Ref_bool;
[L1591]              __tmp__sum := sum;
[L1592]              __tmp__Length := Length;
[L1593]              __tmp__now := now;
[L1594]              __tmp___balances_ERC20 := _balances_ERC20;
[L1595]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1596]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1597]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1598]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1599]              __tmp___paused_Pausable := _paused_Pausable;
[L1600]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1601]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1602]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1603]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1604]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5381]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5381]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  COND TRUE   __tmp__DType[this] == OMToken
[L5386]  CALL        call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L4355]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4102]  COND FALSE  !(!(b_s149 <= a_s149))
[L4106]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              __ret_0_ := c_s149;
[L4355]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s351][msgsender_MSG], value_s351);
[L4356]  COND FALSE  !(revert)
[L4359]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] - __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4360]              __tmp___allowed_ERC20[this][from_s351][msgsender_MSG] := __var_2;
[L4361]              __tmp__sum__allowed1[from_s351] := __tmp__sum__allowed1[from_s351] + __tmp___allowed_ERC20[this][from_s351][msgsender_MSG];
[L4362]  COND TRUE   __tmp__DType[this] == OMToken
[L4363]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4363]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s351, to_s351, value_s351);
[L4364]  COND TRUE   revert
[L5386]  RET         call __var_27 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L5387]  COND TRUE   revert
[L1604]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);
[L1605]              assume revert || gas < 0;
[L9776]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s937, to_s937, value_s937);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
