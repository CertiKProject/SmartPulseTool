This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 01:49:45,286 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 01:49:45,288 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 01:49:45,300 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 01:49:45,300 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 01:49:45,300 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 01:49:45,301 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 01:49:45,303 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 01:49:45,304 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 01:49:45,305 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 01:49:45,306 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 01:49:45,306 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 01:49:45,307 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 01:49:45,308 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 01:49:45,309 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 01:49:45,309 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 01:49:45,310 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 01:49:45,311 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 01:49:45,313 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 01:49:45,314 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 01:49:45,314 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 01:49:45,315 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 01:49:45,317 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 01:49:45,317 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 01:49:45,317 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 01:49:45,318 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 01:49:45,318 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 01:49:45,319 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 01:49:45,319 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 01:49:45,319 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 01:49:45,319 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 01:49:45,320 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 01:49:45,320 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 01:49:45,321 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 01:49:45,322 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 01:49:45,322 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 01:49:45,322 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 01:49:45,322 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 01:49:45,323 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 01:49:45,323 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 01:49:45,324 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 01:49:45,324 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 01:49:45,332 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 01:49:45,332 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 01:49:45,333 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 01:49:45,333 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 01:49:45,333 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 01:49:45,333 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 01:49:45,333 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 01:49:45,333 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 01:49:45,333 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 01:49:45,333 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 01:49:45,334 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 01:49:45,334 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 01:49:45,334 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 01:49:45,334 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 01:49:45,334 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 01:49:45,334 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 01:49:45,334 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 01:49:45,334 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 01:49:45,334 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 01:49:45,334 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 01:49:45,335 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 01:49:45,335 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 01:49:45,335 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 01:49:45,335 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 01:49:45,335 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 01:49:45,335 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 01:49:45,359 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 01:49:45,372 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 01:49:45,374 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 01:49:45,375 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 01:49:45,376 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 01:49:45,377 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl
[2020-11-25 01:49:45,377 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl'
[2020-11-25 01:49:45,464 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 01:49:45,465 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 01:49:45,465 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 01:49:45,465 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 01:49:45,465 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 01:49:45,482 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:49:45" (1/1) ...
[2020-11-25 01:49:45,483 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:49:45" (1/1) ...
[2020-11-25 01:49:45,521 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:49:45" (1/1) ...
[2020-11-25 01:49:45,522 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:49:45" (1/1) ...
[2020-11-25 01:49:45,544 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:49:45" (1/1) ...
[2020-11-25 01:49:45,553 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:49:45" (1/1) ...
[2020-11-25 01:49:45,561 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:49:45" (1/1) ...
[2020-11-25 01:49:45,572 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 01:49:45,573 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 01:49:45,573 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 01:49:45,575 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 01:49:45,579 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:49:45" (1/1) ...
[2020-11-25 01:49:45,597 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balanceOf_TokenERC20[this][msg.sender] && balanceOf_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && balanceOf_TokenERC20[this][msg.sender] == old(balanceOf_TokenERC20[this][msg.sender]) - value && balanceOf_TokenERC20[this][to] == old(balanceOf_TokenERC20[this][to]) + value && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this]) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1]) && sellPrice_MyAdvancedToken[this] == old(sellPrice_MyAdvancedToken[this]) && buyPrice_MyAdvancedToken[this] == old(buyPrice_MyAdvancedToken[this]) && frozenAccount_MyAdvancedToken[this] == old(frozenAccount_MyAdvancedToken[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 01:49:45,603 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balanceOf_TokenERC20[this][msg.sender] && balanceOf_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && balanceOf_TokenERC20[this][msg.sender] == old(balanceOf_TokenERC20[this][msg.sender]) - value && balanceOf_TokenERC20[this][to] == old(balanceOf_TokenERC20[this][to]) + value && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this]) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1]) && sellPrice_MyAdvancedToken[this] == old(sellPrice_MyAdvancedToken[this]) && buyPrice_MyAdvancedToken[this] == old(buyPrice_MyAdvancedToken[this]) && frozenAccount_MyAdvancedToken[this] == old(frozenAccount_MyAdvancedToken[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 01:49:45,611 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balanceOf_TokenERC20[this][msg.sender] && balanceOf_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && balanceOf_TokenERC20[this][msg.sender] == old(balanceOf_TokenERC20[this][msg.sender]) - value && balanceOf_TokenERC20[this][to] == old(balanceOf_TokenERC20[this][to]) + value && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this]) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1]) && sellPrice_MyAdvancedToken[this] == old(sellPrice_MyAdvancedToken[this]) && buyPrice_MyAdvancedToken[this] == old(buyPrice_MyAdvancedToken[this]) && frozenAccount_MyAdvancedToken[this] == old(frozenAccount_MyAdvancedToken[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 01:49:45,618 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=_to_s221 ) && msg.sender!=_to_s221 ) && _value_s221<=balanceOf_TokenERC20[this][msg.sender] ) && ( balanceOf_TokenERC20[this][_to_s221] + _value_s221 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _value_s221>=0 ) && _value_s221<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_to_s221]>=0 ) && balanceOf_TokenERC20[this][_to_s221]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][msg.sender]>=0 ) && balanceOf_TokenERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_to_s221,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IdentifierExpression[_to_s221,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s221,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s221,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IdentifierExpression[_value_s221,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s221,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s221,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s221,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s221,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 01:49:45,621 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( success_s221==true && balanceOf_TokenERC20[this][msg.sender]==( ( old(balanceOf_TokenERC20[this][msg.sender]) ) - _value_s221 ) ) && balanceOf_TokenERC20[this][_to_s221]==( ( old(balanceOf_TokenERC20[this][_to_s221]) ) + _value_s221 ) ) && totalSupply_TokenERC20[this]==( old(totalSupply_TokenERC20[this]) ) ) && allowance_TokenERC20[this]==( old(allowance_TokenERC20[this]) ) ) && balanceOf_TokenERC20[this][p1]==( old(balanceOf_TokenERC20[this][p1]) ) ) && sellPrice_MyAdvancedToken[this]==( old(sellPrice_MyAdvancedToken[this]) ) ) && buyPrice_MyAdvancedToken[this]==( old(buyPrice_MyAdvancedToken[this]) ) ) && frozenAccount_MyAdvancedToken[this]==( old(frozenAccount_MyAdvancedToken[this]) ) ) && name_TokenERC20[this]==( old(name_TokenERC20[this]) ) ) && symbol_TokenERC20[this]==( old(symbol_TokenERC20[this]) ) ) && decimals_TokenERC20[this]==( old(decimals_TokenERC20[this]) ) ) && owner_owned[this]==( old(owner_owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s221,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_TokenERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]],IdentifierExpression[_value_s221,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s221,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s221,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]],IdentifierExpression[_value_s221,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sellPrice_MyAdvancedToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sellPrice_MyAdvancedToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[buyPrice_MyAdvancedToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[buyPrice_MyAdvancedToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_MyAdvancedToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_MyAdvancedToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]]
[2020-11-25 01:49:45,627 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balanceOf_TokenERC20[this][msg.sender] && balanceOf_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && balanceOf_TokenERC20[this][msg.sender] == old(balanceOf_TokenERC20[this][msg.sender]) - value && balanceOf_TokenERC20[this][to] == old(balanceOf_TokenERC20[this][to]) + value && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this]) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1]) && sellPrice_MyAdvancedToken[this] == old(sellPrice_MyAdvancedToken[this]) && buyPrice_MyAdvancedToken[this] == old(buyPrice_MyAdvancedToken[this]) && frozenAccount_MyAdvancedToken[this] == old(frozenAccount_MyAdvancedToken[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 01:49:45,628 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_TokenERC200) ==> ( <>AP(success_transfer_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 01:49:45,640 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:49:45 PropertyContainer
[2020-11-25 01:49:45,640 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 01:49:45,641 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 01:49:45,641 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 01:49:45,641 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 01:49:45,642 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:49:45" (1/2) ...
[2020-11-25 01:49:45,643 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 01:49:45,643 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 01:49:45,663 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:49:45" (2/2) ...
[2020-11-25 01:49:45,664 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 01:49:45,664 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 01:49:45,664 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 01:49:45,664 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 01:49:45,665 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:49:45" (1/2) ...
[2020-11-25 01:49:45,722 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 01:49:45,722 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__success
[2020-11-25 01:49:45,722 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned
[2020-11-25 01:49:45,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned
[2020-11-25 01:49:45,723 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned
[2020-11-25 01:49:45,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned
[2020-11-25 01:49:45,723 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned
[2020-11-25 01:49:45,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned
[2020-11-25 01:49:45,723 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 01:49:45,723 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-25 01:49:45,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-25 01:49:45,723 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-25 01:49:45,724 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 01:49:45,724 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 01:49:45,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 01:49:45,724 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 01:49:45,725 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 01:49:45,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 01:49:45,725 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 01:49:45,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 01:49:45,725 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 01:49:45,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 01:49:45,725 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 01:49:45,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 01:49:45,726 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20
[2020-11-25 01:49:45,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20
[2020-11-25 01:49:45,726 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 01:49:45,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 01:49:45,726 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 01:49:45,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 01:49:45,726 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 01:49:45,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 01:49:45,726 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 01:49:45,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 01:49:45,726 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 01:49:45,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 01:49:45,727 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 01:49:45,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 01:49:45,727 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 01:49:45,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 01:49:45,727 INFO  L130     BoogieDeclarations]: Found specification of procedure MyAdvancedToken_MyAdvancedToken_NoBaseCtor__success
[2020-11-25 01:49:45,727 INFO  L130     BoogieDeclarations]: Found specification of procedure MyAdvancedToken_MyAdvancedToken
[2020-11-25 01:49:45,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyAdvancedToken_MyAdvancedToken
[2020-11-25 01:49:45,727 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_MyAdvancedToken__success
[2020-11-25 01:49:45,727 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_MyAdvancedToken
[2020-11-25 01:49:45,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_MyAdvancedToken
[2020-11-25 01:49:45,728 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_MyAdvancedToken
[2020-11-25 01:49:45,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_MyAdvancedToken
[2020-11-25 01:49:45,728 INFO  L130     BoogieDeclarations]: Found specification of procedure setPrices~uint256~uint256_MyAdvancedToken
[2020-11-25 01:49:45,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPrices~uint256~uint256_MyAdvancedToken
[2020-11-25 01:49:45,728 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_MyAdvancedToken
[2020-11-25 01:49:45,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_MyAdvancedToken
[2020-11-25 01:49:45,728 INFO  L130     BoogieDeclarations]: Found specification of procedure sell~uint256_MyAdvancedToken
[2020-11-25 01:49:45,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure sell~uint256_MyAdvancedToken
[2020-11-25 01:49:45,729 INFO  L130     BoogieDeclarations]: Found specification of procedure sellPrice_MyAdvancedToken
[2020-11-25 01:49:45,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure sellPrice_MyAdvancedToken
[2020-11-25 01:49:45,729 INFO  L130     BoogieDeclarations]: Found specification of procedure buyPrice_MyAdvancedToken
[2020-11-25 01:49:45,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyPrice_MyAdvancedToken
[2020-11-25 01:49:45,729 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_MyAdvancedToken
[2020-11-25 01:49:45,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_MyAdvancedToken
[2020-11-25 01:49:45,729 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 01:49:45,729 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 01:49:45,729 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 01:49:45,729 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 01:49:45,730 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_owned
[2020-11-25 01:49:45,730 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_owned
[2020-11-25 01:49:45,730 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-25 01:49:45,730 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-25 01:49:45,730 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 01:49:45,730 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 01:49:45,730 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MyAdvancedToken
[2020-11-25 01:49:45,730 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 01:49:45,730 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 01:49:45,730 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 01:49:45,731 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__success
[2020-11-25 01:49:45,731 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__fail
[2020-11-25 01:49:45,731 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__success
[2020-11-25 01:49:45,731 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__fail
[2020-11-25 01:49:45,731 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__success
[2020-11-25 01:49:45,731 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__fail
[2020-11-25 01:49:45,731 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 01:49:45,731 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 01:49:45,731 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 01:49:45,732 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 01:49:45,732 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 01:49:45,732 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 01:49:45,732 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 01:49:45,732 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 01:49:45,732 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 01:49:45,732 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 01:49:45,732 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 01:49:45,732 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 01:49:45,732 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 01:49:45,733 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 01:49:45,733 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 01:49:45,733 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__success
[2020-11-25 01:49:45,733 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__fail
[2020-11-25 01:49:45,733 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 01:49:45,733 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 01:49:45,733 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 01:49:45,733 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 01:49:45,733 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 01:49:45,733 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 01:49:45,734 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 01:49:45,734 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 01:49:45,734 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 01:49:45,734 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 01:49:45,734 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 01:49:45,734 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 01:49:45,734 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 01:49:45,734 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 01:49:45,734 INFO  L130     BoogieDeclarations]: Found specification of procedure MyAdvancedToken_MyAdvancedToken_NoBaseCtor__fail
[2020-11-25 01:49:45,735 INFO  L130     BoogieDeclarations]: Found specification of procedure MyAdvancedToken_MyAdvancedToken__success
[2020-11-25 01:49:45,735 INFO  L130     BoogieDeclarations]: Found specification of procedure MyAdvancedToken_MyAdvancedToken__fail
[2020-11-25 01:49:45,735 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_MyAdvancedToken__fail
[2020-11-25 01:49:45,735 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_MyAdvancedToken__success
[2020-11-25 01:49:45,735 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_MyAdvancedToken__fail
[2020-11-25 01:49:45,735 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_MyAdvancedToken__success
[2020-11-25 01:49:45,735 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_MyAdvancedToken__fail
[2020-11-25 01:49:45,735 INFO  L130     BoogieDeclarations]: Found specification of procedure setPrices~uint256~uint256_MyAdvancedToken__success
[2020-11-25 01:49:45,735 INFO  L130     BoogieDeclarations]: Found specification of procedure setPrices~uint256~uint256_MyAdvancedToken__fail
[2020-11-25 01:49:45,736 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_MyAdvancedToken__success
[2020-11-25 01:49:45,736 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_MyAdvancedToken__fail
[2020-11-25 01:49:45,736 INFO  L130     BoogieDeclarations]: Found specification of procedure sell~uint256_MyAdvancedToken__success
[2020-11-25 01:49:45,736 INFO  L130     BoogieDeclarations]: Found specification of procedure sell~uint256_MyAdvancedToken__fail
[2020-11-25 01:49:45,736 INFO  L130     BoogieDeclarations]: Found specification of procedure sellPrice_MyAdvancedToken__success
[2020-11-25 01:49:45,736 INFO  L130     BoogieDeclarations]: Found specification of procedure sellPrice_MyAdvancedToken__fail
[2020-11-25 01:49:45,736 INFO  L130     BoogieDeclarations]: Found specification of procedure buyPrice_MyAdvancedToken__success
[2020-11-25 01:49:45,736 INFO  L130     BoogieDeclarations]: Found specification of procedure buyPrice_MyAdvancedToken__fail
[2020-11-25 01:49:45,737 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_MyAdvancedToken__success
[2020-11-25 01:49:45,737 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_MyAdvancedToken__fail
[2020-11-25 01:49:45,737 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 01:49:45,737 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 01:49:45,737 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 01:49:45,737 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 01:49:45,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 01:49:45,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 01:49:45,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 01:49:45,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__success
[2020-11-25 01:49:45,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__fail
[2020-11-25 01:49:45,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__success
[2020-11-25 01:49:45,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__fail
[2020-11-25 01:49:45,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__success
[2020-11-25 01:49:45,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__fail
[2020-11-25 01:49:45,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__success
[2020-11-25 01:49:45,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 01:49:45,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 01:49:45,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 01:49:45,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 01:49:45,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 01:49:45,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 01:49:45,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 01:49:45,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 01:49:45,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 01:49:45,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 01:49:45,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 01:49:45,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 01:49:45,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 01:49:45,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 01:49:45,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 01:49:45,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 01:49:45,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 01:49:45,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 01:49:45,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__fail
[2020-11-25 01:49:45,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__success
[2020-11-25 01:49:45,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 01:49:45,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 01:49:45,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 01:49:45,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 01:49:45,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 01:49:45,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 01:49:45,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 01:49:45,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 01:49:45,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 01:49:45,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 01:49:45,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 01:49:45,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 01:49:45,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 01:49:45,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 01:49:45,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyAdvancedToken_MyAdvancedToken_NoBaseCtor__fail
[2020-11-25 01:49:45,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyAdvancedToken_MyAdvancedToken_NoBaseCtor__success
[2020-11-25 01:49:45,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyAdvancedToken_MyAdvancedToken__fail
[2020-11-25 01:49:45,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyAdvancedToken_MyAdvancedToken__success
[2020-11-25 01:49:45,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_MyAdvancedToken__fail
[2020-11-25 01:49:45,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_MyAdvancedToken__success
[2020-11-25 01:49:45,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_MyAdvancedToken__fail
[2020-11-25 01:49:45,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_MyAdvancedToken__success
[2020-11-25 01:49:45,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_MyAdvancedToken__fail
[2020-11-25 01:49:45,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_MyAdvancedToken__success
[2020-11-25 01:49:45,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPrices~uint256~uint256_MyAdvancedToken__fail
[2020-11-25 01:49:45,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPrices~uint256~uint256_MyAdvancedToken__success
[2020-11-25 01:49:45,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_MyAdvancedToken__fail
[2020-11-25 01:49:45,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_MyAdvancedToken__success
[2020-11-25 01:49:45,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure sell~uint256_MyAdvancedToken__fail
[2020-11-25 01:49:45,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure sell~uint256_MyAdvancedToken__success
[2020-11-25 01:49:45,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure sellPrice_MyAdvancedToken__fail
[2020-11-25 01:49:45,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure sellPrice_MyAdvancedToken__success
[2020-11-25 01:49:45,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyPrice_MyAdvancedToken__fail
[2020-11-25 01:49:45,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyPrice_MyAdvancedToken__success
[2020-11-25 01:49:45,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_MyAdvancedToken__fail
[2020-11-25 01:49:45,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_MyAdvancedToken__success
[2020-11-25 01:49:45,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 01:49:45,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 01:49:45,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 01:49:45,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 01:49:45,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 01:49:45,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 01:49:45,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 01:49:45,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 01:49:45,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_owned
[2020-11-25 01:49:45,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_owned
[2020-11-25 01:49:45,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-25 01:49:45,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-25 01:49:45,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 01:49:45,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 01:49:45,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MyAdvancedToken
[2020-11-25 01:49:45,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 01:49:45,744 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 01:49:45,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 01:49:46,242 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:49:46,481 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:49:46,481 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:49:46,481 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:49:46,532 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 01:49:46,532 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-11-25 01:49:46,535 INFO  L202        PluginConnector]: Adding new model MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:49:46 BoogieIcfgContainer
[2020-11-25 01:49:46,536 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:49:45" (2/2) ...
[2020-11-25 01:49:46,536 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 01:49:46,536 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4eaa6b45 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:49:46, skipping insertion in model container
[2020-11-25 01:49:46,536 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 01:49:46,537 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 01:49:46,537 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 01:49:46,539 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 01:49:46,539 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:49:45" (1/3) ...
[2020-11-25 01:49:46,540 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@dedc93a and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:49:46, skipping insertion in model container
[2020-11-25 01:49:46,540 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:49:45" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 01:49:46,579 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:49:46 NWAContainer
[2020-11-25 01:49:46,579 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 01:49:46,579 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 01:49:46,579 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 01:49:46,580 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 01:49:46,581 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:49:46" (3/4) ...
[2020-11-25 01:49:46,581 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6abe21fb and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:49:46, skipping insertion in model container
[2020-11-25 01:49:46,582 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:49:46" (4/4) ...
[2020-11-25 01:49:46,584 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 01:49:46,589 INFO  L110   BuchiProductObserver]: Initial RCFG 2320 locations, 3070 edges
[2020-11-25 01:49:46,590 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 01:49:46,602 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 01:49:47,948 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 01:49:47,955 INFO  L110   BuchiProductObserver]: BuchiProgram size 5482 locations, 9669 edges
[2020-11-25 01:49:47,955 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:49:47 BoogieIcfgContainer
[2020-11-25 01:49:47,955 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 01:49:47,955 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 01:49:47,955 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 01:49:47,957 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 01:49:47,957 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:49:47" (1/1) ...
[2020-11-25 01:49:48,048 INFO  L313           BlockEncoder]: Initial Icfg 5482 locations, 9669 edges
[2020-11-25 01:49:48,048 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 01:49:48,049 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 01:49:48,049 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 01:49:48,050 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 01:49:48,064 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 11 locations because of local infeasibility
[2020-11-25 01:49:48,075 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 01:49:48,089 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 01:49:48,095 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 01:49:48,100 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 01:49:48,100 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 01:49:48,104 INFO  L313           BlockEncoder]: Encoded RCFG 5426 locations, 9518 edges
[2020-11-25 01:49:48,104 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:49:48 BasicIcfg
[2020-11-25 01:49:48,104 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 01:49:48,105 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 01:49:48,105 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 01:49:48,107 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 01:49:48,108 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:49:48,108 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:49:45" (1/6) ...
[2020-11-25 01:49:48,110 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1e2a2af7 and model type MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:49:48, skipping insertion in model container
[2020-11-25 01:49:48,110 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:49:48,110 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:49:45" (2/6) ...
[2020-11-25 01:49:48,110 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1e2a2af7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:49:48, skipping insertion in model container
[2020-11-25 01:49:48,110 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:49:48,110 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:49:46" (3/6) ...
[2020-11-25 01:49:48,110 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1e2a2af7 and model type MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:49:48, skipping insertion in model container
[2020-11-25 01:49:48,111 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:49:48,111 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:49:46" (4/6) ...
[2020-11-25 01:49:48,111 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1e2a2af7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:49:48, skipping insertion in model container
[2020-11-25 01:49:48,111 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:49:48,111 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:49:47" (5/6) ...
[2020-11-25 01:49:48,111 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1e2a2af7 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:49:48, skipping insertion in model container
[2020-11-25 01:49:48,111 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:49:48,111 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:49:48" (6/6) ...
[2020-11-25 01:49:48,112 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MyAdvancedToken_0x86c9f9df4a0bfc9a52eb3d16bcce3bc50d1a34ae_transfer-normal.bpl_BEv2
[2020-11-25 01:49:48,149 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 01:49:48,150 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 01:49:48,150 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 01:49:48,150 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 01:49:48,150 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 01:49:48,150 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 01:49:48,150 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 01:49:48,150 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 01:49:48,150 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 01:49:48,189 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5426 states.
[2020-11-25 01:49:48,274 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:49:48,274 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:49:48,274 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:49:48,284 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:49:48,284 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:49:48,284 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 01:49:48,284 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5426 states.
[2020-11-25 01:49:48,318 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:49:48,318 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:49:48,319 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:49:48,321 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:49:48,321 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_TokenERC200 := false;
[L3]                 call_transfer_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == MyAdvancedToken;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call MyAdvancedToken_MyAdvancedToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call MyAdvancedToken_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND TRUE   revert
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND TRUE   revert
[L1234]  RET         call MyAdvancedToken_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call MyAdvancedToken_MyAdvancedToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;

Loop:
[L4909]  CALL        call CorralChoice_MyAdvancedToken(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != MyAdvancedToken;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND TRUE   choice == 22
[L4747]              gas := gas - 21000;
[L4748]  COND FALSE  !(gas >= 0)
[L4909]  RET         call CorralChoice_MyAdvancedToken(this);

[2020-11-25 01:49:48,339 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:49:48,339 INFO  L82        PathProgramCache]: Analyzing trace with hash 10475694, now seen corresponding path program 1 times
[2020-11-25 01:49:48,343 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:49:48,365 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:49:48,407 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:49:48,411 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:49:48,412 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:49:48,654 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:49:48,662 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:49:48,663 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:49:48,664 INFO  L87              Difference]: Start difference. First operand 5426 states. Second operand 3 states.
[2020-11-25 01:49:49,009 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:49:49,009 INFO  L93              Difference]: Finished difference Result 4636 states and 5583 transitions.
[2020-11-25 01:49:49,010 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:49:49,011 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4636 states and 5583 transitions.
[2020-11-25 01:49:49,043 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:49:49,079 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4636 states to 4634 states and 5579 transitions.
[2020-11-25 01:49:49,080 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 01:49:49,081 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 174
[2020-11-25 01:49:49,082 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4634 states and 5579 transitions.
[2020-11-25 01:49:49,095 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:49:49,095 INFO  L728         BuchiCegarLoop]: Abstraction has 4634 states and 5579 transitions.
[2020-11-25 01:49:49,117 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4634 states and 5579 transitions.
[2020-11-25 01:49:49,188 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4634 to 4634.
[2020-11-25 01:49:49,188 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4634 states.
[2020-11-25 01:49:49,198 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4634 states to 4634 states and 5579 transitions.
[2020-11-25 01:49:49,199 INFO  L751         BuchiCegarLoop]: Abstraction has 4634 states and 5579 transitions.
[2020-11-25 01:49:49,199 INFO  L631         BuchiCegarLoop]: Abstraction has 4634 states and 5579 transitions.
[2020-11-25 01:49:49,199 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 01:49:49,199 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4634 states and 5579 transitions.
[2020-11-25 01:49:49,212 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:49:49,212 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:49:49,212 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:49:49,215 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:49:49,215 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_TokenERC200 := false;
[L3]                 call_transfer_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == MyAdvancedToken;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call MyAdvancedToken_MyAdvancedToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call MyAdvancedToken_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND TRUE   revert
[L1234]  RET         call MyAdvancedToken_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call MyAdvancedToken_MyAdvancedToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;
[L4909]  CALL        call CorralChoice_MyAdvancedToken(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != MyAdvancedToken;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND TRUE   choice == 14
[L4795]              gas := gas - 21000;
[L4796]  COND TRUE   gas >= 0
[L4797]              assume _value_s221 >= 0 && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4798]              assume msgvalue_MSG == 0;
[L4799]  CALL        call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s221) && msgsender_MSG != _to_s221) && _value_s221 <= balanceOf_TokenERC20[this][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s221] + _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s221 >= 0) && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s221] >= 0) && balanceOf_TokenERC20[this][_to_s221] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L424]               havoc __exception;
[L425]               revert := false;
[L426]   COND FALSE  !(__exception)
[L453]   CALL        call success_s221 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L2710]  COND TRUE   DType[this] == MyAdvancedToken
[L2711]  CALL        call _transfer~address~address~uint256_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L3089]              __var_6 := null;
[L3090]  COND TRUE   !(_to_s522 != null)
[L3091]              revert := true;
[L2711]  RET         call _transfer~address~address~uint256_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L2712]  COND TRUE   revert
[L453]   RET         call success_s221 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L454]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((success_s221 == true && balanceOf_TokenERC20[this][msgsender_MSG] == old(balanceOf_TokenERC20[this][msgsender_MSG]) - _value_s221) && balanceOf_TokenERC20[this][_to_s221] == old(balanceOf_TokenERC20[this][_to_s221]) + _value_s221) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1])) && sellPrice_MyAdvancedToken[this] == old(sellPrice_MyAdvancedToken[this])) && buyPrice_MyAdvancedToken[this] == old(buyPrice_MyAdvancedToken[this])) && frozenAccount_MyAdvancedToken[this] == old(frozenAccount_MyAdvancedToken[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L3]                 revert := revert_hold;
[L4799]  RET         call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L4909]  RET         call CorralChoice_MyAdvancedToken(this);

Loop:
[L4909]  CALL        call CorralChoice_MyAdvancedToken(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != MyAdvancedToken;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND TRUE   choice == 14
[L4795]              gas := gas - 21000;
[L4796]  COND TRUE   gas >= 0
[L4797]              assume _value_s221 >= 0 && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4798]              assume msgvalue_MSG == 0;
[L4799]  CALL        call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s221) && msgsender_MSG != _to_s221) && _value_s221 <= balanceOf_TokenERC20[this][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s221] + _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s221 >= 0) && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s221] >= 0) && balanceOf_TokenERC20[this][_to_s221] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L424]               havoc __exception;
[L425]               revert := false;
[L426]   COND FALSE  !(__exception)
[L453]   CALL        call success_s221 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L2710]  COND TRUE   DType[this] == MyAdvancedToken
[L2711]  CALL        call _transfer~address~address~uint256_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L3089]              __var_6 := null;
[L3090]  COND TRUE   !(_to_s522 != null)
[L3091]              revert := true;
[L2711]  RET         call _transfer~address~address~uint256_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L2712]  COND TRUE   revert
[L453]   RET         call success_s221 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L454]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((success_s221 == true && balanceOf_TokenERC20[this][msgsender_MSG] == old(balanceOf_TokenERC20[this][msgsender_MSG]) - _value_s221) && balanceOf_TokenERC20[this][_to_s221] == old(balanceOf_TokenERC20[this][_to_s221]) + _value_s221) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1])) && sellPrice_MyAdvancedToken[this] == old(sellPrice_MyAdvancedToken[this])) && buyPrice_MyAdvancedToken[this] == old(buyPrice_MyAdvancedToken[this])) && frozenAccount_MyAdvancedToken[this] == old(frozenAccount_MyAdvancedToken[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L3]                 revert := revert_hold;
[L4799]  RET         call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L4909]  RET         call CorralChoice_MyAdvancedToken(this);

[2020-11-25 01:49:49,221 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:49:49,221 INFO  L82        PathProgramCache]: Analyzing trace with hash -1967610846, now seen corresponding path program 1 times
[2020-11-25 01:49:49,222 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:49:49,237 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:49:49,268 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:49:49,268 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:49:49,268 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:49:49,270 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:49:49,270 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:49:49,270 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:49:49,270 INFO  L87              Difference]: Start difference. First operand 4634 states and 5579 transitions. cyclomatic complexity: 951 Second operand 4 states.
[2020-11-25 01:49:50,093 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:49:50,093 INFO  L93              Difference]: Finished difference Result 6194 states and 7337 transitions.
[2020-11-25 01:49:50,093 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:49:50,094 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6194 states and 7337 transitions.
[2020-11-25 01:49:50,113 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 01:49:50,139 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6194 states to 5946 states and 7035 transitions.
[2020-11-25 01:49:50,139 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 251
[2020-11-25 01:49:50,140 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 251
[2020-11-25 01:49:50,140 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5946 states and 7035 transitions.
[2020-11-25 01:49:50,147 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:49:50,147 INFO  L728         BuchiCegarLoop]: Abstraction has 5946 states and 7035 transitions.
[2020-11-25 01:49:50,153 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5946 states and 7035 transitions.
[2020-11-25 01:49:50,203 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5946 to 4766.
[2020-11-25 01:49:50,203 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4766 states.
[2020-11-25 01:49:50,210 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4766 states to 4766 states and 5519 transitions.
[2020-11-25 01:49:50,210 INFO  L751         BuchiCegarLoop]: Abstraction has 4766 states and 5519 transitions.
[2020-11-25 01:49:50,210 INFO  L631         BuchiCegarLoop]: Abstraction has 4766 states and 5519 transitions.
[2020-11-25 01:49:50,210 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 01:49:50,210 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4766 states and 5519 transitions.
[2020-11-25 01:49:50,217 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:49:50,217 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:49:50,218 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:49:50,220 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:49:50,220 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_TokenERC200 := false;
[L3]                 call_transfer_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == MyAdvancedToken;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call MyAdvancedToken_MyAdvancedToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call MyAdvancedToken_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND FALSE  !(revert)
[L3044]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L2629]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2597]              assume msgsender_MSG != null;
[L2598]              Balance[this] := 0;
[L2599]              name_TokenERC20[this] := -914773036;
[L2600]              symbol_TokenERC20[this] := -914773036;
[L2601]              decimals_TokenERC20[this] := 18;
[L2602]              totalSupply_TokenERC20[this] := 0;
[L2603]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2604]              sum_balanceOf0[this] := 0;
[L2605]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2606]              sum_allowance1[this] := 0;
[L2608]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2609]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s124, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2610]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2611]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2612]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2613]              name_TokenERC20[this] := tokenName_s124;
[L2614]              symbol_TokenERC20[this] := tokenSymbol_s124;
[L2629]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2630]  COND FALSE  !(revert)
[L3044]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3045]  COND FALSE  !(revert)
[L3048]  CALL        call MyAdvancedToken_MyAdvancedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3014]              assume msgsender_MSG != null;
[L3015]              Balance[this] := 0;
[L3016]              sellPrice_MyAdvancedToken[this] := 0;
[L3017]              buyPrice_MyAdvancedToken[this] := 0;
[L3018]              frozenAccount_MyAdvancedToken[this] := zeroRefboolArr();
[L3048]  RET         call MyAdvancedToken_MyAdvancedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3049]  COND FALSE  !(revert)
[L1234]  RET         call MyAdvancedToken_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call MyAdvancedToken_MyAdvancedToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;
[L4909]  CALL        call CorralChoice_MyAdvancedToken(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != MyAdvancedToken;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND TRUE   choice == 14
[L4795]              gas := gas - 21000;
[L4796]  COND TRUE   gas >= 0
[L4797]              assume _value_s221 >= 0 && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4798]              assume msgvalue_MSG == 0;
[L4799]  CALL        call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s221) && msgsender_MSG != _to_s221) && _value_s221 <= balanceOf_TokenERC20[this][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s221] + _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s221 >= 0) && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s221] >= 0) && balanceOf_TokenERC20[this][_to_s221] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L424]               havoc __exception;
[L425]               revert := false;
[L426]   COND FALSE  !(__exception)
[L453]   CALL        call success_s221 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L2710]  COND TRUE   DType[this] == MyAdvancedToken
[L2711]  CALL        call _transfer~address~address~uint256_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L3089]              __var_6 := null;
[L3090]  COND FALSE  !(!(_to_s522 != null))
[L3094]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s522] >= _value_s522))
[L3098]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s522] + _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s522]))
[L3102]  COND FALSE  !(!!frozenAccount_MyAdvancedToken[this][_from_s522])
[L3106]  COND FALSE  !(!!frozenAccount_MyAdvancedToken[this][_to_s522])
[L3110]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s522];
[L3111]              balanceOf_TokenERC20[this][_from_s522] := (balanceOf_TokenERC20[this][_from_s522] - _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3112]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s522];
[L3113]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s522];
[L3114]              balanceOf_TokenERC20[this][_to_s522] := (balanceOf_TokenERC20[this][_to_s522] + _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3115]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s522];
[L3116]              assert { :EventEmitted "Transfer_MyAdvancedToken" } true;
[L2711]  RET         call _transfer~address~address~uint256_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L2712]  COND FALSE  !(revert)
[L2723]              success_s221 := true;
[L453]   RET         call success_s221 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L454]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((success_s221 == true && balanceOf_TokenERC20[this][msgsender_MSG] == old(balanceOf_TokenERC20[this][msgsender_MSG]) - _value_s221) && balanceOf_TokenERC20[this][_to_s221] == old(balanceOf_TokenERC20[this][_to_s221]) + _value_s221) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1])) && sellPrice_MyAdvancedToken[this] == old(sellPrice_MyAdvancedToken[this])) && buyPrice_MyAdvancedToken[this] == old(buyPrice_MyAdvancedToken[this])) && frozenAccount_MyAdvancedToken[this] == old(frozenAccount_MyAdvancedToken[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L3]                 revert := revert_hold;
[L4799]  RET         call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L4909]  RET         call CorralChoice_MyAdvancedToken(this);

Loop:
[L4909]  CALL        call CorralChoice_MyAdvancedToken(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != MyAdvancedToken;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND TRUE   choice == 14
[L4795]              gas := gas - 21000;
[L4796]  COND TRUE   gas >= 0
[L4797]              assume _value_s221 >= 0 && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4798]              assume msgvalue_MSG == 0;
[L4799]  CALL        call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s221) && msgsender_MSG != _to_s221) && _value_s221 <= balanceOf_TokenERC20[this][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s221] + _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s221 >= 0) && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s221] >= 0) && balanceOf_TokenERC20[this][_to_s221] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L424]               havoc __exception;
[L425]               revert := false;
[L426]   COND FALSE  !(__exception)
[L453]   CALL        call success_s221 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L2710]  COND TRUE   DType[this] == MyAdvancedToken
[L2711]  CALL        call _transfer~address~address~uint256_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L3089]              __var_6 := null;
[L3090]  COND FALSE  !(!(_to_s522 != null))
[L3094]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s522] >= _value_s522))
[L3098]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s522] + _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s522]))
[L3102]  COND FALSE  !(!!frozenAccount_MyAdvancedToken[this][_from_s522])
[L3106]  COND FALSE  !(!!frozenAccount_MyAdvancedToken[this][_to_s522])
[L3110]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s522];
[L3111]              balanceOf_TokenERC20[this][_from_s522] := (balanceOf_TokenERC20[this][_from_s522] - _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3112]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s522];
[L3113]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s522];
[L3114]              balanceOf_TokenERC20[this][_to_s522] := (balanceOf_TokenERC20[this][_to_s522] + _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3115]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s522];
[L3116]              assert { :EventEmitted "Transfer_MyAdvancedToken" } true;
[L2711]  RET         call _transfer~address~address~uint256_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L2712]  COND FALSE  !(revert)
[L2723]              success_s221 := true;
[L453]   RET         call success_s221 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L454]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((success_s221 == true && balanceOf_TokenERC20[this][msgsender_MSG] == old(balanceOf_TokenERC20[this][msgsender_MSG]) - _value_s221) && balanceOf_TokenERC20[this][_to_s221] == old(balanceOf_TokenERC20[this][_to_s221]) + _value_s221) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1])) && sellPrice_MyAdvancedToken[this] == old(sellPrice_MyAdvancedToken[this])) && buyPrice_MyAdvancedToken[this] == old(buyPrice_MyAdvancedToken[this])) && frozenAccount_MyAdvancedToken[this] == old(frozenAccount_MyAdvancedToken[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L3]                 revert := revert_hold;
[L4799]  RET         call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L4909]  RET         call CorralChoice_MyAdvancedToken(this);

[2020-11-25 01:49:50,225 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:49:50,225 INFO  L82        PathProgramCache]: Analyzing trace with hash -1143909596, now seen corresponding path program 1 times
[2020-11-25 01:49:50,226 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:49:50,309 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:49:50,975 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:49:50,975 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:49:50,976 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 01:49:50,976 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:49:50,976 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 01:49:50,976 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=40, Invalid=302, Unknown=0, NotChecked=0, Total=342
[2020-11-25 01:49:50,976 INFO  L87              Difference]: Start difference. First operand 4766 states and 5519 transitions. cyclomatic complexity: 759 Second operand 19 states.
[2020-11-25 01:49:53,354 WARN  L188               SmtUtils]: Spent 149.00 ms on a formula simplification. DAG size of input: 105 DAG size of output: 104
[2020-11-25 01:49:57,667 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:49:57,668 INFO  L93              Difference]: Finished difference Result 4947 states and 5743 transitions.
[2020-11-25 01:49:57,668 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 01:49:57,668 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4947 states and 5743 transitions.
[2020-11-25 01:49:57,677 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 01:49:57,692 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4947 states to 4947 states and 5743 transitions.
[2020-11-25 01:49:57,692 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 219
[2020-11-25 01:49:57,692 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 219
[2020-11-25 01:49:57,692 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4947 states and 5743 transitions.
[2020-11-25 01:49:57,696 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:49:57,696 INFO  L728         BuchiCegarLoop]: Abstraction has 4947 states and 5743 transitions.
[2020-11-25 01:49:57,699 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4947 states and 5743 transitions.
[2020-11-25 01:49:57,732 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4947 to 4886.
[2020-11-25 01:49:57,732 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4886 states.
[2020-11-25 01:49:57,737 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4886 states to 4886 states and 5662 transitions.
[2020-11-25 01:49:57,737 INFO  L751         BuchiCegarLoop]: Abstraction has 4886 states and 5662 transitions.
[2020-11-25 01:49:57,737 INFO  L631         BuchiCegarLoop]: Abstraction has 4886 states and 5662 transitions.
[2020-11-25 01:49:57,737 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 01:49:57,737 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4886 states and 5662 transitions.
[2020-11-25 01:49:57,742 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:49:57,742 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:49:57,742 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:49:57,744 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:49:57,745 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_TokenERC200 := false;
[L3]                 call_transfer_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == MyAdvancedToken;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call MyAdvancedToken_MyAdvancedToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call MyAdvancedToken_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND FALSE  !(revert)
[L3044]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L2629]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2597]              assume msgsender_MSG != null;
[L2598]              Balance[this] := 0;
[L2599]              name_TokenERC20[this] := -914773036;
[L2600]              symbol_TokenERC20[this] := -914773036;
[L2601]              decimals_TokenERC20[this] := 18;
[L2602]              totalSupply_TokenERC20[this] := 0;
[L2603]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2604]              sum_balanceOf0[this] := 0;
[L2605]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2606]              sum_allowance1[this] := 0;
[L2608]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2609]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s124, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2610]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2611]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2612]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2613]              name_TokenERC20[this] := tokenName_s124;
[L2614]              symbol_TokenERC20[this] := tokenSymbol_s124;
[L2629]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2630]  COND FALSE  !(revert)
[L3044]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3045]  COND FALSE  !(revert)
[L3048]  CALL        call MyAdvancedToken_MyAdvancedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3014]              assume msgsender_MSG != null;
[L3015]              Balance[this] := 0;
[L3016]              sellPrice_MyAdvancedToken[this] := 0;
[L3017]              buyPrice_MyAdvancedToken[this] := 0;
[L3018]              frozenAccount_MyAdvancedToken[this] := zeroRefboolArr();
[L3048]  RET         call MyAdvancedToken_MyAdvancedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3049]  COND FALSE  !(revert)
[L1234]  RET         call MyAdvancedToken_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call MyAdvancedToken_MyAdvancedToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;
[L4909]  CALL        call CorralChoice_MyAdvancedToken(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != MyAdvancedToken;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND TRUE   choice == 14
[L4795]              gas := gas - 21000;
[L4796]  COND TRUE   gas >= 0
[L4797]              assume _value_s221 >= 0 && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4798]              assume msgvalue_MSG == 0;
[L4799]  CALL        call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s221) && msgsender_MSG != _to_s221) && _value_s221 <= balanceOf_TokenERC20[this][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s221] + _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s221 >= 0) && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s221] >= 0) && balanceOf_TokenERC20[this][_to_s221] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L424]               havoc __exception;
[L425]               revert := false;
[L426]   COND FALSE  !(__exception)
[L453]   CALL        call success_s221 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L2710]  COND FALSE  !(DType[this] == MyAdvancedToken)
[L2715]  COND TRUE   DType[this] == TokenERC20
[L2716]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L2665]              __var_2 := null;
[L2666]  COND FALSE  !(!(_to_s202 != null))
[L2670]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s202] >= _value_s202))
[L2674]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s202] + _value_s202) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s202]))
[L2678]              previousBalances_s202 := (balanceOf_TokenERC20[this][_from_s202] + balanceOf_TokenERC20[this][_to_s202]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2679]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s202];
[L2680]              balanceOf_TokenERC20[this][_from_s202] := (balanceOf_TokenERC20[this][_from_s202] - _value_s202) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2681]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s202];
[L2682]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s202];
[L2683]              balanceOf_TokenERC20[this][_to_s202] := (balanceOf_TokenERC20[this][_to_s202] + _value_s202) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2684]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s202];
[L2685]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2686]              assert (balanceOf_TokenERC20[this][_from_s202] + balanceOf_TokenERC20[this][_to_s202]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s202;
[L2716]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L2717]  COND FALSE  !(revert)
[L2723]              success_s221 := true;
[L453]   RET         call success_s221 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L454]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((success_s221 == true && balanceOf_TokenERC20[this][msgsender_MSG] == old(balanceOf_TokenERC20[this][msgsender_MSG]) - _value_s221) && balanceOf_TokenERC20[this][_to_s221] == old(balanceOf_TokenERC20[this][_to_s221]) + _value_s221) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1])) && sellPrice_MyAdvancedToken[this] == old(sellPrice_MyAdvancedToken[this])) && buyPrice_MyAdvancedToken[this] == old(buyPrice_MyAdvancedToken[this])) && frozenAccount_MyAdvancedToken[this] == old(frozenAccount_MyAdvancedToken[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L3]                 revert := revert_hold;
[L4799]  RET         call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L4909]  RET         call CorralChoice_MyAdvancedToken(this);

Loop:
[L4909]  CALL        call CorralChoice_MyAdvancedToken(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != MyAdvancedToken;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND TRUE   choice == 14
[L4795]              gas := gas - 21000;
[L4796]  COND TRUE   gas >= 0
[L4797]              assume _value_s221 >= 0 && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4798]              assume msgvalue_MSG == 0;
[L4799]  CALL        call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s221) && msgsender_MSG != _to_s221) && _value_s221 <= balanceOf_TokenERC20[this][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s221] + _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s221 >= 0) && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s221] >= 0) && balanceOf_TokenERC20[this][_to_s221] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L424]               havoc __exception;
[L425]               revert := false;
[L426]   COND FALSE  !(__exception)
[L453]   CALL        call success_s221 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L2710]  COND TRUE   DType[this] == MyAdvancedToken
[L2711]  CALL        call _transfer~address~address~uint256_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L3089]              __var_6 := null;
[L3090]  COND FALSE  !(!(_to_s522 != null))
[L3094]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s522] >= _value_s522))
[L3098]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s522] + _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s522]))
[L3102]  COND FALSE  !(!!frozenAccount_MyAdvancedToken[this][_from_s522])
[L3106]  COND FALSE  !(!!frozenAccount_MyAdvancedToken[this][_to_s522])
[L3110]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s522];
[L3111]              balanceOf_TokenERC20[this][_from_s522] := (balanceOf_TokenERC20[this][_from_s522] - _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3112]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s522];
[L3113]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s522];
[L3114]              balanceOf_TokenERC20[this][_to_s522] := (balanceOf_TokenERC20[this][_to_s522] + _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3115]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s522];
[L3116]              assert { :EventEmitted "Transfer_MyAdvancedToken" } true;
[L2711]  RET         call _transfer~address~address~uint256_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L2712]  COND FALSE  !(revert)
[L2723]              success_s221 := true;
[L453]   RET         call success_s221 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L454]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((success_s221 == true && balanceOf_TokenERC20[this][msgsender_MSG] == old(balanceOf_TokenERC20[this][msgsender_MSG]) - _value_s221) && balanceOf_TokenERC20[this][_to_s221] == old(balanceOf_TokenERC20[this][_to_s221]) + _value_s221) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1])) && sellPrice_MyAdvancedToken[this] == old(sellPrice_MyAdvancedToken[this])) && buyPrice_MyAdvancedToken[this] == old(buyPrice_MyAdvancedToken[this])) && frozenAccount_MyAdvancedToken[this] == old(frozenAccount_MyAdvancedToken[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L3]                 revert := revert_hold;
[L4799]  RET         call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L4909]  RET         call CorralChoice_MyAdvancedToken(this);

[2020-11-25 01:49:57,747 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:49:57,748 INFO  L82        PathProgramCache]: Analyzing trace with hash 1054256182, now seen corresponding path program 1 times
[2020-11-25 01:49:57,748 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:49:57,756 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:49:57,784 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:49:57,784 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:49:57,784 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 01:49:57,784 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:49:57,784 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 01:49:57,784 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 01:49:57,784 INFO  L87              Difference]: Start difference. First operand 4886 states and 5662 transitions. cyclomatic complexity: 784 Second operand 6 states.
[2020-11-25 01:49:57,848 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:49:57,848 INFO  L93              Difference]: Finished difference Result 4910 states and 5683 transitions.
[2020-11-25 01:49:57,848 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 01:49:57,848 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4910 states and 5683 transitions.
[2020-11-25 01:49:57,856 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:49:57,869 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4910 states to 4886 states and 5655 transitions.
[2020-11-25 01:49:57,870 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 215
[2020-11-25 01:49:57,870 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 215
[2020-11-25 01:49:57,870 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4886 states and 5655 transitions.
[2020-11-25 01:49:57,873 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:49:57,873 INFO  L728         BuchiCegarLoop]: Abstraction has 4886 states and 5655 transitions.
[2020-11-25 01:49:57,877 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4886 states and 5655 transitions.
[2020-11-25 01:49:57,904 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4886 to 4886.
[2020-11-25 01:49:57,904 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4886 states.
[2020-11-25 01:49:57,909 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4886 states to 4886 states and 5655 transitions.
[2020-11-25 01:49:57,909 INFO  L751         BuchiCegarLoop]: Abstraction has 4886 states and 5655 transitions.
[2020-11-25 01:49:57,909 INFO  L631         BuchiCegarLoop]: Abstraction has 4886 states and 5655 transitions.
[2020-11-25 01:49:57,909 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 01:49:57,909 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4886 states and 5655 transitions.
[2020-11-25 01:49:57,913 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:49:57,913 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:49:57,913 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:49:57,914 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:49:57,914 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_TokenERC200 := false;
[L3]                 call_transfer_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == MyAdvancedToken;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call MyAdvancedToken_MyAdvancedToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call MyAdvancedToken_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND FALSE  !(revert)
[L3044]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L2629]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2597]              assume msgsender_MSG != null;
[L2598]              Balance[this] := 0;
[L2599]              name_TokenERC20[this] := -914773036;
[L2600]              symbol_TokenERC20[this] := -914773036;
[L2601]              decimals_TokenERC20[this] := 18;
[L2602]              totalSupply_TokenERC20[this] := 0;
[L2603]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2604]              sum_balanceOf0[this] := 0;
[L2605]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2606]              sum_allowance1[this] := 0;
[L2608]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2609]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s124, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2610]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2611]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2612]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2613]              name_TokenERC20[this] := tokenName_s124;
[L2614]              symbol_TokenERC20[this] := tokenSymbol_s124;
[L2629]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2630]  COND FALSE  !(revert)
[L3044]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3045]  COND FALSE  !(revert)
[L3048]  CALL        call MyAdvancedToken_MyAdvancedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3014]              assume msgsender_MSG != null;
[L3015]              Balance[this] := 0;
[L3016]              sellPrice_MyAdvancedToken[this] := 0;
[L3017]              buyPrice_MyAdvancedToken[this] := 0;
[L3018]              frozenAccount_MyAdvancedToken[this] := zeroRefboolArr();
[L3048]  RET         call MyAdvancedToken_MyAdvancedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3049]  COND FALSE  !(revert)
[L1234]  RET         call MyAdvancedToken_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call MyAdvancedToken_MyAdvancedToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;
[L4909]  CALL        call CorralChoice_MyAdvancedToken(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != MyAdvancedToken;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND TRUE   choice == 14
[L4795]              gas := gas - 21000;
[L4796]  COND TRUE   gas >= 0
[L4797]              assume _value_s221 >= 0 && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4798]              assume msgvalue_MSG == 0;
[L4799]  CALL        call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s221) && msgsender_MSG != _to_s221) && _value_s221 <= balanceOf_TokenERC20[this][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s221] + _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s221 >= 0) && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s221] >= 0) && balanceOf_TokenERC20[this][_to_s221] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L424]               havoc __exception;
[L425]               revert := false;
[L426]   COND TRUE   __exception
[L427]               __tmp__Balance := Balance;
[L428]               __tmp__DType := DType;
[L429]               __tmp__Alloc := Alloc;
[L430]               __tmp__balance_ADDR := balance_ADDR;
[L431]               __tmp__M_Ref_int := M_Ref_int;
[L432]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L433]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L434]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L435]               __tmp__sum_allowance1 := sum_allowance1;
[L436]               __tmp__M_Ref_bool := M_Ref_bool;
[L437]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L438]               __tmp__Length := Length;
[L439]               __tmp__now := now;
[L440]               __tmp__owner_owned := owner_owned;
[L441]               __tmp__name_TokenERC20 := name_TokenERC20;
[L442]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L443]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L444]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L445]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L446]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L447]               __tmp__sellPrice_MyAdvancedToken := sellPrice_MyAdvancedToken;
[L448]               __tmp__buyPrice_MyAdvancedToken := buyPrice_MyAdvancedToken;
[L449]               __tmp__frozenAccount_MyAdvancedToken := frozenAccount_MyAdvancedToken;
[L450]   CALL        call success_s221 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L2691]  COND TRUE   __tmp__DType[this] == MyAdvancedToken
[L2692]  CALL        call _transfer~address~address~uint256_MyAdvancedToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L3057]              __var_6 := null;
[L3058]  COND TRUE   !(_to_s522 != null)
[L3059]              revert := true;
[L2692]  RET         call _transfer~address~address~uint256_MyAdvancedToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L2693]  COND TRUE   revert
[L450]   RET         call success_s221 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L451]               assume revert || gas < 0;
[L4799]  RET         call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L4909]  RET         call CorralChoice_MyAdvancedToken(this);

Loop:
[L4909]  CALL        call CorralChoice_MyAdvancedToken(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != MyAdvancedToken;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND TRUE   choice == 14
[L4795]              gas := gas - 21000;
[L4796]  COND TRUE   gas >= 0
[L4797]              assume _value_s221 >= 0 && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4798]              assume msgvalue_MSG == 0;
[L4799]  CALL        call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s221) && msgsender_MSG != _to_s221) && _value_s221 <= balanceOf_TokenERC20[this][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s221] + _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s221 >= 0) && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s221] >= 0) && balanceOf_TokenERC20[this][_to_s221] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L424]               havoc __exception;
[L425]               revert := false;
[L426]   COND TRUE   __exception
[L427]               __tmp__Balance := Balance;
[L428]               __tmp__DType := DType;
[L429]               __tmp__Alloc := Alloc;
[L430]               __tmp__balance_ADDR := balance_ADDR;
[L431]               __tmp__M_Ref_int := M_Ref_int;
[L432]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L433]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L434]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L435]               __tmp__sum_allowance1 := sum_allowance1;
[L436]               __tmp__M_Ref_bool := M_Ref_bool;
[L437]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L438]               __tmp__Length := Length;
[L439]               __tmp__now := now;
[L440]               __tmp__owner_owned := owner_owned;
[L441]               __tmp__name_TokenERC20 := name_TokenERC20;
[L442]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L443]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L444]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L445]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L446]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L447]               __tmp__sellPrice_MyAdvancedToken := sellPrice_MyAdvancedToken;
[L448]               __tmp__buyPrice_MyAdvancedToken := buyPrice_MyAdvancedToken;
[L449]               __tmp__frozenAccount_MyAdvancedToken := frozenAccount_MyAdvancedToken;
[L450]   CALL        call success_s221 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L2691]  COND TRUE   __tmp__DType[this] == MyAdvancedToken
[L2692]  CALL        call _transfer~address~address~uint256_MyAdvancedToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L3057]              __var_6 := null;
[L3058]  COND TRUE   !(_to_s522 != null)
[L3059]              revert := true;
[L2692]  RET         call _transfer~address~address~uint256_MyAdvancedToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L2693]  COND TRUE   revert
[L450]   RET         call success_s221 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L451]               assume revert || gas < 0;
[L4799]  RET         call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L4909]  RET         call CorralChoice_MyAdvancedToken(this);

[2020-11-25 01:49:57,918 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:49:57,918 INFO  L82        PathProgramCache]: Analyzing trace with hash 700558653, now seen corresponding path program 1 times
[2020-11-25 01:49:57,918 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:49:57,926 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:49:57,935 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:49:57,991 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:49:57,991 INFO  L82        PathProgramCache]: Analyzing trace with hash -1657514545, now seen corresponding path program 1 times
[2020-11-25 01:49:57,992 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:49:57,997 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:49:58,001 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:49:58,011 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:49:58,011 INFO  L82        PathProgramCache]: Analyzing trace with hash -200192493, now seen corresponding path program 1 times
[2020-11-25 01:49:58,012 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:49:58,023 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:49:58,035 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2647 to 5281
[2020-11-25 01:49:58,493 WARN  L188               SmtUtils]: Spent 195.00 ms on a formula simplification that was a NOOP. DAG size: 269
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3331 to 6661
[2020-11-25 01:49:58,689 WARN  L188               SmtUtils]: Spent 178.00 ms on a formula simplification that was a NOOP. DAG size: 215
[2020-11-25 01:49:59,061 WARN  L188               SmtUtils]: Spent 368.00 ms on a formula simplification. DAG size of input: 279 DAG size of output: 249
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 6037 to 12073
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3517 to 7027
[2020-11-25 01:49:59,263 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification that was a NOOP. DAG size: 333
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8543 to 17077
[2020-11-25 01:49:59,391 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification that was a NOOP. DAG size: 268
[2020-11-25 01:49:59,554 WARN  L188               SmtUtils]: Spent 161.00 ms on a formula simplification that was a NOOP. DAG size: 268
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 01:49:59,644 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
[2020-11-25 01:50:00,427 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification that was a NOOP. DAG size: 215
[2020-11-25 01:50:00,742 WARN  L188               SmtUtils]: Spent 313.00 ms on a formula simplification. DAG size of input: 278 DAG size of output: 249
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 01:50:00,956 WARN  L188               SmtUtils]: Spent 124.00 ms on a formula simplification that was a NOOP. DAG size: 333
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
[2020-11-25 01:50:01,067 WARN  L188               SmtUtils]: Spent 106.00 ms on a formula simplification that was a NOOP. DAG size: 268
[2020-11-25 01:50:01,867 WARN  L188               SmtUtils]: Spent 798.00 ms on a formula simplification. DAG size of input: 492 DAG size of output: 482
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 01:50:02,094 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification that was a NOOP. DAG size: 306
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 01:50:02,363 WARN  L188               SmtUtils]: Spent 215.00 ms on a formula simplification. DAG size of input: 308 DAG size of output: 307
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 01:50:02,471 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification that was a NOOP. DAG size: 303
[2020-11-25 01:50:02,483 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:50:02,499 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:50:02,508 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:50:02 BasicIcfg
[2020-11-25 01:50:02,508 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 01:50:02,509 INFO  L168              Benchmark]: Toolchain (without parser) took 17044.68 ms. Allocated memory was 1.0 GB in the beginning and 2.1 GB in the end (delta: 1.1 GB). Free memory was 935.2 MB in the beginning and 1.1 GB in the end (delta: -122.7 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 01:50:02,509 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:50:02,509 INFO  L168              Benchmark]: Boogie Preprocessor took 107.20 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:50:02,509 INFO  L168              Benchmark]: UtopiaSpecLang took 67.76 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:50:02,510 INFO  L168              Benchmark]: Boogie Printer took 23.08 ms. Allocated memory is still 1.0 GB. Free memory is still 913.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:50:02,510 INFO  L168              Benchmark]: RCFGBuilder took 872.65 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 784.9 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
[2020-11-25 01:50:02,510 INFO  L168              Benchmark]: UtopiaLTL2Aut took 42.07 ms. Allocated memory is still 1.0 GB. Free memory was 784.9 MB in the beginning and 781.3 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 01:50:02,510 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1375.98 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 206.0 MB). Free memory was 781.3 MB in the beginning and 935.1 MB in the end (delta: -153.8 MB). Peak memory consumption was 176.0 MB. Max. memory is 15.3 GB.
[2020-11-25 01:50:02,511 INFO  L168              Benchmark]: BlockEncodingV2 took 149.13 ms. Allocated memory is still 1.2 GB. Free memory was 935.1 MB in the beginning and 870.5 MB in the end (delta: 64.6 MB). Peak memory consumption was 64.6 MB. Max. memory is 15.3 GB.
[2020-11-25 01:50:02,511 INFO  L168              Benchmark]: BuchiAutomizer took 14403.42 ms. Allocated memory was 1.2 GB in the beginning and 2.1 GB in the end (delta: 874.5 MB). Free memory was 870.5 MB in the beginning and 1.1 GB in the end (delta: -187.4 MB). Peak memory consumption was 902.9 MB. Max. memory is 15.3 GB.
[2020-11-25 01:50:02,514 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5482 locations, 9669 edges
  - StatisticsResult: Encoded RCFG
    5426 locations, 9518 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 107.20 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 67.76 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 23.08 ms. Allocated memory is still 1.0 GB. Free memory is still 913.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 872.65 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 784.9 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 42.07 ms. Allocated memory is still 1.0 GB. Free memory was 784.9 MB in the beginning and 781.3 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1375.98 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 206.0 MB). Free memory was 781.3 MB in the beginning and 935.1 MB in the end (delta: -153.8 MB). Peak memory consumption was 176.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 149.13 ms. Allocated memory is still 1.2 GB. Free memory was 935.1 MB in the beginning and 870.5 MB in the end (delta: 64.6 MB). Peak memory consumption was 64.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 14403.42 ms. Allocated memory was 1.2 GB in the beginning and 2.1 GB in the end (delta: 874.5 MB). Free memory was 870.5 MB in the beginning and 1.1 GB in the end (delta: -187.4 MB). Peak memory consumption was 902.9 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2320 locations, 3070 edges
  - StatisticsResult: BuchiProgram size
    5482 locations, 9669 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 4 terminating modules (4 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.4 modules have a trivial ranking function, the largest among these consists of 19 locations. The remainder module has 4886 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 14.3s and 5 iterations.  TraceHistogramMax:1. Analysis of lassos took 5.7s. Construction of modules took 6.1s. BÃ¼chi inclusion checks took 1.8s. Highest rank in rank-based complementation 0. Minimization of det autom 4. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 4 MinimizatonAttempts, 1241 StatesRemovedByMinimization, 2 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 4886 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 22575 SDtfs, 16612 SDslu, 54962 SDs, 0 SdLazy, 51005 SolverSat, 3246 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 6.1s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU4 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115792089237316195423570985008687907853269984665640564039457584007913129639956) = (new MyAdvancedToken)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639943, initialSupply : 115792089237316195423570985008687907853269984665640564039457584007913129639944, tokenName : 115792089237316195423570985008687907853269984665640564039457584007913129639951, tokenSymbol : 115792089237316195423570985008687907853269984665640564039457584007913129639946});
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call MyAdvancedToken_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND FALSE  !(revert)
[L3044]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L2629]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2597]              assume msgsender_MSG != null;
[L2598]              Balance[this] := 0;
[L2599]              name_TokenERC20[this] := -914773036;
[L2600]              symbol_TokenERC20[this] := -914773036;
[L2601]              decimals_TokenERC20[this] := 18;
[L2602]              totalSupply_TokenERC20[this] := 0;
[L2603]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2604]              sum_balanceOf0[this] := 0;
[L2605]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2606]              sum_allowance1[this] := 0;
[L2608]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2609]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s124, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2610]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2611]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2612]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2613]              name_TokenERC20[this] := tokenName_s124;
[L2614]              symbol_TokenERC20[this] := tokenSymbol_s124;
[L2629]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2630]  COND FALSE  !(revert)
[L3044]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3045]  COND FALSE  !(revert)
[L3048]  CALL        call MyAdvancedToken_MyAdvancedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3014]              assume msgsender_MSG != null;
[L3015]              Balance[this] := 0;
[L3016]              sellPrice_MyAdvancedToken[this] := 0;
[L3017]              buyPrice_MyAdvancedToken[this] := 0;
[L3018]              frozenAccount_MyAdvancedToken[this] := zeroRefboolArr();
[L3048]  RET         call MyAdvancedToken_MyAdvancedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3049]  COND FALSE  !(revert)
[L1234]  RET         call MyAdvancedToken_MyAdvancedToken__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call MyAdvancedToken_MyAdvancedToken(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
TokenERC20(115792089237316195423570985008687907853269984665640564039457584007913129639956).transfer~address~uint256.gas(3979002)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639943, _to : 0, _value : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((p1 != msgsender_MSG && p1 != _to_s221) && msgsender_MSG != _to_s221) && _value_s221 <= balanceOf_TokenERC20[this][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s221] + _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s221 >= 0) && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s221] >= 0) && balanceOf_TokenERC20[this][_to_s221] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transfer_TokenERC200 := true;
[L3]                call_transfer_TokenERC200 := false;
[L3]                revert := revert_hold;
[L424]              havoc __exception;
[L425]              revert := false;
[L426]   COND TRUE  __exception
[L427]              __tmp__Balance := Balance;
[L428]              __tmp__DType := DType;
[L429]              __tmp__Alloc := Alloc;
[L430]              __tmp__balance_ADDR := balance_ADDR;
[L431]              __tmp__M_Ref_int := M_Ref_int;
[L432]              __tmp__sum_balanceOf0 := sum_balanceOf0;
[L433]              __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L434]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L435]              __tmp__sum_allowance1 := sum_allowance1;
[L436]              __tmp__M_Ref_bool := M_Ref_bool;
[L437]              __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L438]              __tmp__Length := Length;
[L439]              __tmp__now := now;
[L440]              __tmp__owner_owned := owner_owned;
[L441]              __tmp__name_TokenERC20 := name_TokenERC20;
[L442]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L443]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L444]              __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L445]              __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L446]              __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L447]              __tmp__sellPrice_MyAdvancedToken := sellPrice_MyAdvancedToken;
[L448]              __tmp__buyPrice_MyAdvancedToken := buyPrice_MyAdvancedToken;
[L449]              __tmp__frozenAccount_MyAdvancedToken := frozenAccount_MyAdvancedToken;
[L450]   CALL       call success_s221 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L2691]  COND TRUE  __tmp__DType[this] == MyAdvancedToken
[L2692]  CALL       call _transfer~address~address~uint256_MyAdvancedToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L3057]             __var_6 := null;
[L3058]  COND TRUE  !(_to_s522 != null)
[L3059]             revert := true;
[L2692]  RET        call _transfer~address~address~uint256_MyAdvancedToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L2693]  COND TRUE  revert
[L450]   RET        call success_s221 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L451]              assume revert || gas < 0;
[L4799]  RET        call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);

Loop:
TokenERC20(115792089237316195423570985008687907853269984665640564039457584007913129639956).transfer~address~uint256.gas(3979001)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639950, _to : 0, _value : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((p1 != msgsender_MSG && p1 != _to_s221) && msgsender_MSG != _to_s221) && _value_s221 <= balanceOf_TokenERC20[this][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s221] + _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s221 >= 0) && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s221] >= 0) && balanceOf_TokenERC20[this][_to_s221] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transfer_TokenERC200 := true;
[L3]                call_transfer_TokenERC200 := false;
[L3]                revert := revert_hold;
[L424]              havoc __exception;
[L425]              revert := false;
[L426]   COND TRUE  __exception
[L427]              __tmp__Balance := Balance;
[L428]              __tmp__DType := DType;
[L429]              __tmp__Alloc := Alloc;
[L430]              __tmp__balance_ADDR := balance_ADDR;
[L431]              __tmp__M_Ref_int := M_Ref_int;
[L432]              __tmp__sum_balanceOf0 := sum_balanceOf0;
[L433]              __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L434]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L435]              __tmp__sum_allowance1 := sum_allowance1;
[L436]              __tmp__M_Ref_bool := M_Ref_bool;
[L437]              __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L438]              __tmp__Length := Length;
[L439]              __tmp__now := now;
[L440]              __tmp__owner_owned := owner_owned;
[L441]              __tmp__name_TokenERC20 := name_TokenERC20;
[L442]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L443]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L444]              __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L445]              __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L446]              __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L447]              __tmp__sellPrice_MyAdvancedToken := sellPrice_MyAdvancedToken;
[L448]              __tmp__buyPrice_MyAdvancedToken := buyPrice_MyAdvancedToken;
[L449]              __tmp__frozenAccount_MyAdvancedToken := frozenAccount_MyAdvancedToken;
[L450]   CALL       call success_s221 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L2691]  COND TRUE  __tmp__DType[this] == MyAdvancedToken
[L2692]  CALL       call _transfer~address~address~uint256_MyAdvancedToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L3057]             __var_6 := null;
[L3058]  COND TRUE  !(_to_s522 != null)
[L3059]             revert := true;
[L2692]  RET        call _transfer~address~address~uint256_MyAdvancedToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s221, _value_s221);
[L2693]  COND TRUE  revert
[L450]   RET        call success_s221 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);
[L451]              assume revert || gas < 0;
[L4799]  RET        call success_s221 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s221, _value_s221);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
