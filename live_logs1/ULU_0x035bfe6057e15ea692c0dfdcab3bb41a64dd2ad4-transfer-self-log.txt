This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 07:32:46,283 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 07:32:46,285 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 07:32:46,297 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 07:32:46,297 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 07:32:46,298 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 07:32:46,299 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 07:32:46,301 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 07:32:46,302 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 07:32:46,304 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 07:32:46,304 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 07:32:46,305 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 07:32:46,305 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 07:32:46,306 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 07:32:46,307 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 07:32:46,308 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 07:32:46,308 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 07:32:46,310 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 07:32:46,311 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 07:32:46,313 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 07:32:46,314 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 07:32:46,315 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 07:32:46,316 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 07:32:46,317 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 07:32:46,317 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 07:32:46,317 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 07:32:46,318 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 07:32:46,319 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 07:32:46,319 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 07:32:46,319 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 07:32:46,320 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 07:32:46,320 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 07:32:46,321 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 07:32:46,321 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 07:32:46,322 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 07:32:46,322 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 07:32:46,323 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 07:32:46,323 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 07:32:46,323 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 07:32:46,324 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 07:32:46,324 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 07:32:46,325 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 07:32:46,332 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 07:32:46,333 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 07:32:46,333 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 07:32:46,334 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 07:32:46,334 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 07:32:46,334 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 07:32:46,334 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 07:32:46,334 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 07:32:46,334 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 07:32:46,334 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 07:32:46,334 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 07:32:46,334 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 07:32:46,335 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 07:32:46,335 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 07:32:46,335 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 07:32:46,335 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 07:32:46,335 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 07:32:46,335 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 07:32:46,335 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 07:32:46,335 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 07:32:46,335 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 07:32:46,335 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 07:32:46,336 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 07:32:46,336 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 07:32:46,336 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 07:32:46,336 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 07:32:46,362 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 07:32:46,377 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 07:32:46,379 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 07:32:46,381 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 07:32:46,381 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 07:32:46,382 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl
[2020-11-25 07:32:46,382 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl'
[2020-11-25 07:32:46,478 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 07:32:46,479 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 07:32:46,480 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 07:32:46,480 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 07:32:46,480 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 07:32:46,497 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:32:46" (1/1) ...
[2020-11-25 07:32:46,498 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:32:46" (1/1) ...
[2020-11-25 07:32:46,536 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:32:46" (1/1) ...
[2020-11-25 07:32:46,537 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:32:46" (1/1) ...
[2020-11-25 07:32:46,562 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:32:46" (1/1) ...
[2020-11-25 07:32:46,574 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:32:46" (1/1) ...
[2020-11-25 07:32:46,584 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:32:46" (1/1) ...
[2020-11-25 07:32:46,594 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 07:32:46,595 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 07:32:46,595 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 07:32:46,598 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 07:32:46,601 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:32:46" (1/1) ...
[2020-11-25 07:32:46,620 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_ULU[this] == old(governance_ULU[this]) && minters_ULU[this] == old(minters_ULU[this]) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 07:32:46,626 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_ULU[this] == old(governance_ULU[this]) && minters_ULU[this] == old(minters_ULU[this]) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 07:32:46,634 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_ULU[this] == old(governance_ULU[this]) && minters_ULU[this] == old(minters_ULU[this]) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 07:32:46,640 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==recipient_s140 && amount_s140<=_balances_ERC20[this][msg.sender] ) && amount_s140>=0 ) && amount_s140<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s140]>=0 ) && _balances_ERC20[this][recipient_s140]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 07:32:46,643 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && governance_ULU[this]==( old(governance_ULU[this]) ) ) && minters_ULU[this]==( old(minters_ULU[this]) ) ) && pendingAddMinters_ULU[this]==( old(pendingAddMinters_ULU[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[governance_ULU,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[governance_ULU,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[minters_ULU,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[minters_ULU,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[pendingAddMinters_ULU,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[pendingAddMinters_ULU,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]
[2020-11-25 07:32:46,650 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_ULU[this] == old(governance_ULU[this]) && minters_ULU[this] == old(minters_ULU[this]) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 07:32:46,650 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 07:32:46,662 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:32:46 PropertyContainer
[2020-11-25 07:32:46,663 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 07:32:46,663 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 07:32:46,663 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 07:32:46,663 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 07:32:46,664 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:32:46" (1/2) ...
[2020-11-25 07:32:46,664 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 07:32:46,665 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 07:32:46,682 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:32:46" (2/2) ...
[2020-11-25 07:32:46,683 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 07:32:46,683 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 07:32:46,683 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 07:32:46,683 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 07:32:46,684 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:32:46" (1/2) ...
[2020-11-25 07:32:46,739 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 07:32:46,739 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 07:32:46,739 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 07:32:46,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 07:32:46,739 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 07:32:46,740 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 07:32:46,740 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 07:32:46,740 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 07:32:46,740 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 07:32:46,740 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 07:32:46,740 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 07:32:46,740 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 07:32:46,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 07:32:46,740 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 07:32:46,741 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 07:32:46,741 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 07:32:46,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 07:32:46,741 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 07:32:46,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 07:32:46,741 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 07:32:46,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 07:32:46,741 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 07:32:46,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 07:32:46,742 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 07:32:46,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 07:32:46,742 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 07:32:46,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 07:32:46,742 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 07:32:46,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 07:32:46,742 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 07:32:46,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 07:32:46,742 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 07:32:46,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 07:32:46,743 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 07:32:46,743 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 07:32:46,743 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 07:32:46,743 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 07:32:46,743 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 07:32:46,743 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 07:32:46,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 07:32:46,743 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 07:32:46,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 07:32:46,743 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 07:32:46,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 07:32:46,744 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 07:32:46,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 07:32:46,744 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 07:32:46,744 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 07:32:46,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 07:32:46,744 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 07:32:46,744 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 07:32:46,744 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 07:32:46,744 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 07:32:46,744 INFO  L130     BoogieDeclarations]: Found specification of procedure ULU_ULU_NoBaseCtor__success
[2020-11-25 07:32:46,745 INFO  L130     BoogieDeclarations]: Found specification of procedure ULU_ULU
[2020-11-25 07:32:46,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULU_ULU
[2020-11-25 07:32:46,745 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ULU
[2020-11-25 07:32:46,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ULU
[2020-11-25 07:32:46,745 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ULU
[2020-11-25 07:32:46,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ULU
[2020-11-25 07:32:46,745 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_ULU
[2020-11-25 07:32:46,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_ULU
[2020-11-25 07:32:46,745 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_ULU
[2020-11-25 07:32:46,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_ULU
[2020-11-25 07:32:46,746 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingAddMinter~address_ULU
[2020-11-25 07:32:46,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingAddMinter~address_ULU
[2020-11-25 07:32:46,746 INFO  L130     BoogieDeclarations]: Found specification of procedure cancelAddMinter~address_ULU
[2020-11-25 07:32:46,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure cancelAddMinter~address_ULU
[2020-11-25 07:32:46,746 INFO  L130     BoogieDeclarations]: Found specification of procedure executeAddMinter~address_ULU
[2020-11-25 07:32:46,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure executeAddMinter~address_ULU
[2020-11-25 07:32:46,746 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_ULU
[2020-11-25 07:32:46,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_ULU
[2020-11-25 07:32:46,746 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_ULU
[2020-11-25 07:32:46,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_ULU
[2020-11-25 07:32:46,747 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_ULU
[2020-11-25 07:32:46,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_ULU
[2020-11-25 07:32:46,747 INFO  L130     BoogieDeclarations]: Found specification of procedure GRACE_PERIOD_ULU
[2020-11-25 07:32:46,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure GRACE_PERIOD_ULU
[2020-11-25 07:32:46,747 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingAddMinters~address_ULU
[2020-11-25 07:32:46,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingAddMinters~address_ULU
[2020-11-25 07:32:46,747 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 07:32:46,747 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 07:32:46,747 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 07:32:46,748 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 07:32:46,748 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 07:32:46,748 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 07:32:46,748 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 07:32:46,748 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 07:32:46,748 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 07:32:46,748 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 07:32:46,748 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 07:32:46,748 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 07:32:46,749 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 07:32:46,749 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ULU
[2020-11-25 07:32:46,749 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 07:32:46,749 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 07:32:46,749 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 07:32:46,749 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 07:32:46,749 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 07:32:46,749 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 07:32:46,749 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 07:32:46,749 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 07:32:46,749 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 07:32:46,750 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 07:32:46,750 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 07:32:46,750 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 07:32:46,750 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 07:32:46,750 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 07:32:46,750 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 07:32:46,750 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 07:32:46,750 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 07:32:46,750 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 07:32:46,750 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 07:32:46,750 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 07:32:46,751 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 07:32:46,751 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 07:32:46,751 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 07:32:46,751 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 07:32:46,751 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:32:46,751 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:32:46,751 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:32:46,751 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:32:46,751 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 07:32:46,751 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 07:32:46,752 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 07:32:46,752 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 07:32:46,752 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 07:32:46,752 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 07:32:46,752 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 07:32:46,752 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 07:32:46,752 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 07:32:46,752 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 07:32:46,752 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 07:32:46,752 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 07:32:46,752 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 07:32:46,752 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 07:32:46,753 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 07:32:46,753 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 07:32:46,753 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 07:32:46,753 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 07:32:46,753 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 07:32:46,753 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 07:32:46,753 INFO  L130     BoogieDeclarations]: Found specification of procedure ULU_ULU_NoBaseCtor__fail
[2020-11-25 07:32:46,753 INFO  L130     BoogieDeclarations]: Found specification of procedure ULU_ULU__success
[2020-11-25 07:32:46,753 INFO  L130     BoogieDeclarations]: Found specification of procedure ULU_ULU__fail
[2020-11-25 07:32:46,753 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ULU__success
[2020-11-25 07:32:46,753 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ULU__fail
[2020-11-25 07:32:46,753 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ULU__success
[2020-11-25 07:32:46,754 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ULU__fail
[2020-11-25 07:32:46,754 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_ULU__success
[2020-11-25 07:32:46,754 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_ULU__fail
[2020-11-25 07:32:46,754 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_ULU__success
[2020-11-25 07:32:46,754 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_ULU__fail
[2020-11-25 07:32:46,754 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingAddMinter~address_ULU__success
[2020-11-25 07:32:46,754 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingAddMinter~address_ULU__fail
[2020-11-25 07:32:46,754 INFO  L130     BoogieDeclarations]: Found specification of procedure cancelAddMinter~address_ULU__success
[2020-11-25 07:32:46,754 INFO  L130     BoogieDeclarations]: Found specification of procedure cancelAddMinter~address_ULU__fail
[2020-11-25 07:32:46,754 INFO  L130     BoogieDeclarations]: Found specification of procedure executeAddMinter~address_ULU__success
[2020-11-25 07:32:46,754 INFO  L130     BoogieDeclarations]: Found specification of procedure executeAddMinter~address_ULU__fail
[2020-11-25 07:32:46,754 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_ULU__success
[2020-11-25 07:32:46,754 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_ULU__fail
[2020-11-25 07:32:46,754 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_ULU__success
[2020-11-25 07:32:46,755 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_ULU__fail
[2020-11-25 07:32:46,755 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_ULU__success
[2020-11-25 07:32:46,755 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_ULU__fail
[2020-11-25 07:32:46,755 INFO  L130     BoogieDeclarations]: Found specification of procedure GRACE_PERIOD_ULU__success
[2020-11-25 07:32:46,755 INFO  L130     BoogieDeclarations]: Found specification of procedure GRACE_PERIOD_ULU__fail
[2020-11-25 07:32:46,755 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingAddMinters~address_ULU__success
[2020-11-25 07:32:46,755 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingAddMinters~address_ULU__fail
[2020-11-25 07:32:46,755 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 07:32:46,755 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 07:32:46,755 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 07:32:46,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 07:32:46,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 07:32:46,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 07:32:46,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 07:32:46,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 07:32:46,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 07:32:46,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 07:32:46,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 07:32:46,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 07:32:46,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 07:32:46,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 07:32:46,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 07:32:46,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 07:32:46,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 07:32:46,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 07:32:46,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 07:32:46,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 07:32:46,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 07:32:46,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 07:32:46,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 07:32:46,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 07:32:46,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 07:32:46,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 07:32:46,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 07:32:46,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 07:32:46,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 07:32:46,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 07:32:46,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 07:32:46,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:32:46,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:32:46,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:32:46,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:32:46,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 07:32:46,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 07:32:46,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 07:32:46,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 07:32:46,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 07:32:46,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 07:32:46,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 07:32:46,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 07:32:46,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 07:32:46,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 07:32:46,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 07:32:46,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 07:32:46,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 07:32:46,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 07:32:46,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 07:32:46,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 07:32:46,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 07:32:46,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 07:32:46,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 07:32:46,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 07:32:46,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 07:32:46,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 07:32:46,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 07:32:46,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 07:32:46,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 07:32:46,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 07:32:46,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 07:32:46,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 07:32:46,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 07:32:46,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 07:32:46,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULU_ULU_NoBaseCtor__fail
[2020-11-25 07:32:46,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULU_ULU_NoBaseCtor__success
[2020-11-25 07:32:46,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULU_ULU__fail
[2020-11-25 07:32:46,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULU_ULU__success
[2020-11-25 07:32:46,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ULU__fail
[2020-11-25 07:32:46,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ULU__success
[2020-11-25 07:32:46,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ULU__fail
[2020-11-25 07:32:46,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ULU__success
[2020-11-25 07:32:46,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_ULU__fail
[2020-11-25 07:32:46,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_ULU__success
[2020-11-25 07:32:46,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_ULU__fail
[2020-11-25 07:32:46,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_ULU__success
[2020-11-25 07:32:46,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingAddMinter~address_ULU__fail
[2020-11-25 07:32:46,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingAddMinter~address_ULU__success
[2020-11-25 07:32:46,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure cancelAddMinter~address_ULU__fail
[2020-11-25 07:32:46,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure cancelAddMinter~address_ULU__success
[2020-11-25 07:32:46,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure executeAddMinter~address_ULU__fail
[2020-11-25 07:32:46,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure executeAddMinter~address_ULU__success
[2020-11-25 07:32:46,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_ULU__fail
[2020-11-25 07:32:46,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_ULU__success
[2020-11-25 07:32:46,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_ULU__fail
[2020-11-25 07:32:46,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_ULU__success
[2020-11-25 07:32:46,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_ULU__fail
[2020-11-25 07:32:46,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_ULU__success
[2020-11-25 07:32:46,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure GRACE_PERIOD_ULU__fail
[2020-11-25 07:32:46,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure GRACE_PERIOD_ULU__success
[2020-11-25 07:32:46,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingAddMinters~address_ULU__fail
[2020-11-25 07:32:46,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingAddMinters~address_ULU__success
[2020-11-25 07:32:46,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 07:32:46,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 07:32:46,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 07:32:46,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 07:32:46,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 07:32:46,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 07:32:46,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 07:32:46,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 07:32:46,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 07:32:46,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 07:32:46,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 07:32:46,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 07:32:46,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 07:32:46,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 07:32:46,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 07:32:46,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 07:32:46,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ULU
[2020-11-25 07:32:46,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 07:32:46,765 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 07:32:46,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 07:32:46,979 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 07:32:46,979 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 07:32:46,979 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 07:32:47,521 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 07:32:47,521 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 07:32:47,523 INFO  L202        PluginConnector]: Adding new model ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:32:47 BoogieIcfgContainer
[2020-11-25 07:32:47,523 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:32:46" (2/2) ...
[2020-11-25 07:32:47,523 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 07:32:47,524 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5eae9f7b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:32:47, skipping insertion in model container
[2020-11-25 07:32:47,524 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 07:32:47,524 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 07:32:47,524 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 07:32:47,525 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 07:32:47,526 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:32:46" (1/3) ...
[2020-11-25 07:32:47,526 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@86977b and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:32:47, skipping insertion in model container
[2020-11-25 07:32:47,526 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:32:46" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 07:32:47,561 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:32:47 NWAContainer
[2020-11-25 07:32:47,561 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 07:32:47,561 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 07:32:47,561 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 07:32:47,562 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 07:32:47,563 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:32:47" (3/4) ...
[2020-11-25 07:32:47,564 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@32e9bfe8 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:32:47, skipping insertion in model container
[2020-11-25 07:32:47,564 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:32:47" (4/4) ...
[2020-11-25 07:32:47,566 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 07:32:47,571 INFO  L110   BuchiProductObserver]: Initial RCFG 2186 locations, 2926 edges
[2020-11-25 07:32:47,571 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 07:32:47,583 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 07:32:49,019 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 07:32:49,026 INFO  L110   BuchiProductObserver]: BuchiProgram size 5342 locations, 9464 edges
[2020-11-25 07:32:49,027 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:32:49 BoogieIcfgContainer
[2020-11-25 07:32:49,027 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 07:32:49,027 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 07:32:49,027 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 07:32:49,028 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 07:32:49,029 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:32:49" (1/1) ...
[2020-11-25 07:32:49,176 INFO  L313           BlockEncoder]: Initial Icfg 5342 locations, 9464 edges
[2020-11-25 07:32:49,176 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 07:32:49,176 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 07:32:49,177 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 07:32:49,177 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 07:32:49,192 INFO  L70    emoveInfeasibleEdges]: Removed 150 edges and 15 locations because of local infeasibility
[2020-11-25 07:32:49,206 INFO  L70        RemoveSinkStates]: Removed 98 edges and 65 locations by removing sink states
[2020-11-25 07:32:49,220 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 07:32:49,226 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 07:32:49,230 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 07:32:49,231 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 07:32:49,235 INFO  L313           BlockEncoder]: Encoded RCFG 5242 locations, 9187 edges
[2020-11-25 07:32:49,235 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 07:32:49 BasicIcfg
[2020-11-25 07:32:49,235 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 07:32:49,235 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 07:32:49,236 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 07:32:49,238 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 07:32:49,238 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:32:49,238 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:32:46" (1/6) ...
[2020-11-25 07:32:49,240 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@77054015 and model type ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 07:32:49, skipping insertion in model container
[2020-11-25 07:32:49,240 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:32:49,240 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:32:46" (2/6) ...
[2020-11-25 07:32:49,240 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@77054015 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 07:32:49, skipping insertion in model container
[2020-11-25 07:32:49,241 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:32:49,241 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:32:47" (3/6) ...
[2020-11-25 07:32:49,241 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@77054015 and model type ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 07:32:49, skipping insertion in model container
[2020-11-25 07:32:49,241 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:32:49,241 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:32:47" (4/6) ...
[2020-11-25 07:32:49,241 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@77054015 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 07:32:49, skipping insertion in model container
[2020-11-25 07:32:49,241 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:32:49,242 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:32:49" (5/6) ...
[2020-11-25 07:32:49,242 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@77054015 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 07:32:49, skipping insertion in model container
[2020-11-25 07:32:49,242 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:32:49,242 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 07:32:49" (6/6) ...
[2020-11-25 07:32:49,243 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ULU_0x035bfe6057e15ea692c0dfdcab3bb41a64dd2ad4_transfer-self.bpl_BEv2
[2020-11-25 07:32:49,277 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 07:32:49,278 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 07:32:49,278 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 07:32:49,278 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 07:32:49,278 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 07:32:49,278 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 07:32:49,278 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 07:32:49,278 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 07:32:49,278 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 07:32:49,324 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5242 states.
[2020-11-25 07:32:49,408 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:32:49,408 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:32:49,408 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:32:49,415 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:32:49,415 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:32:49,416 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 07:32:49,416 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5242 states.
[2020-11-25 07:32:49,438 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:32:49,438 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:32:49,438 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:32:49,440 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:32:49,440 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND TRUE   revert
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND TRUE   choice == 23
[L5663]              gas := gas - 21000;
[L5664]  COND FALSE  !(gas >= 0)
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:32:49,453 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:32:49,453 INFO  L82        PathProgramCache]: Analyzing trace with hash 2130272195, now seen corresponding path program 1 times
[2020-11-25 07:32:49,457 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:32:49,473 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:32:49,500 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 07:32:49,501 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:32:49,501 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 07:32:49,791 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:32:49,802 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 07:32:49,803 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 07:32:49,806 INFO  L87              Difference]: Start difference. First operand 5242 states. Second operand 4 states.
[2020-11-25 07:32:50,404 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:32:50,404 INFO  L93              Difference]: Finished difference Result 3790 states and 4373 transitions.
[2020-11-25 07:32:50,404 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 07:32:50,406 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3790 states and 4373 transitions.
[2020-11-25 07:32:50,424 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:32:50,449 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3790 states to 3790 states and 4373 transitions.
[2020-11-25 07:32:50,450 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 07:32:50,453 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1114
[2020-11-25 07:32:50,453 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3790 states and 4373 transitions.
[2020-11-25 07:32:50,461 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:32:50,461 INFO  L728         BuchiCegarLoop]: Abstraction has 3790 states and 4373 transitions.
[2020-11-25 07:32:50,480 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3790 states and 4373 transitions.
[2020-11-25 07:32:50,534 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3790 to 3790.
[2020-11-25 07:32:50,535 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3790 states.
[2020-11-25 07:32:50,541 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3790 states to 3790 states and 4373 transitions.
[2020-11-25 07:32:50,542 INFO  L751         BuchiCegarLoop]: Abstraction has 3790 states and 4373 transitions.
[2020-11-25 07:32:50,542 INFO  L631         BuchiCegarLoop]: Abstraction has 3790 states and 4373 transitions.
[2020-11-25 07:32:50,542 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 07:32:50,542 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3790 states and 4373 transitions.
[2020-11-25 07:32:50,551 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:32:50,551 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:32:50,551 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:32:50,553 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:32:50,553 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND TRUE   revert
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND TRUE   revert
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND TRUE   revert
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:32:50,557 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:32:50,557 INFO  L82        PathProgramCache]: Analyzing trace with hash 287425891, now seen corresponding path program 1 times
[2020-11-25 07:32:50,558 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:32:50,566 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:32:50,600 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 07:32:50,600 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:32:50,600 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 07:32:50,601 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:32:50,602 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 07:32:50,602 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 07:32:50,602 INFO  L87              Difference]: Start difference. First operand 3790 states and 4373 transitions. cyclomatic complexity: 585 Second operand 4 states.
[2020-11-25 07:32:51,688 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:32:51,688 INFO  L93              Difference]: Finished difference Result 5338 states and 6143 transitions.
[2020-11-25 07:32:51,688 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 07:32:51,689 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5338 states and 6143 transitions.
[2020-11-25 07:32:51,706 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 07:32:51,727 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5338 states to 5084 states and 5847 transitions.
[2020-11-25 07:32:51,727 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1495
[2020-11-25 07:32:51,729 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1517
[2020-11-25 07:32:51,729 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5084 states and 5847 transitions.
[2020-11-25 07:32:51,735 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:32:51,735 INFO  L728         BuchiCegarLoop]: Abstraction has 5084 states and 5847 transitions.
[2020-11-25 07:32:51,739 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5084 states and 5847 transitions.
[2020-11-25 07:32:51,776 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5084 to 3872.
[2020-11-25 07:32:51,776 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3872 states.
[2020-11-25 07:32:51,781 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3872 states to 3872 states and 4275 transitions.
[2020-11-25 07:32:51,781 INFO  L751         BuchiCegarLoop]: Abstraction has 3872 states and 4275 transitions.
[2020-11-25 07:32:51,781 INFO  L631         BuchiCegarLoop]: Abstraction has 3872 states and 4275 transitions.
[2020-11-25 07:32:51,781 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 07:32:51,781 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3872 states and 4275 transitions.
[2020-11-25 07:32:51,788 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:32:51,788 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:32:51,788 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:32:51,790 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:32:51,790 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND TRUE   __exception
[L429]               __tmp__Balance := Balance;
[L430]               __tmp__DType := DType;
[L431]               __tmp__Alloc := Alloc;
[L432]               __tmp__balance_ADDR := balance_ADDR;
[L433]               __tmp__M_Ref_int := M_Ref_int;
[L434]               __tmp__sum__balances0 := sum__balances0;
[L435]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L436]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L437]               __tmp__sum__allowances1 := sum__allowances1;
[L438]               __tmp__M_Ref_bool := M_Ref_bool;
[L439]               __tmp__sum_minters2 := sum_minters2;
[L440]               __tmp__sum_pendingAddMinters3 := sum_pendingAddMinters3;
[L441]               __tmp__Length := Length;
[L442]               __tmp__now := now;
[L443]               __tmp___balances_ERC20 := _balances_ERC20;
[L444]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L445]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L446]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L447]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L448]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L449]               __tmp__governance_ULU := governance_ULU;
[L450]               __tmp__minters_ULU := minters_ULU;
[L451]               __tmp__GRACE_PERIOD_ULU := GRACE_PERIOD_ULU;
[L452]               __tmp__pendingAddMinters_ULU := pendingAddMinters_ULU;
[L453]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2853]  COND TRUE   __tmp__DType[this] == ULU
[L2854]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2758]              __ret_0_ := msgsender_MSG;
[L2854]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2855]  COND FALSE  !(revert)
[L2866]  COND TRUE   __tmp__DType[this] == ULU
[L2867]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3338]              __var_12 := null;
[L3339]  COND TRUE   !(sender_s323 != null)
[L3340]              revert := true;
[L2867]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2868]  COND TRUE   revert
[L453]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L454]               assume revert || gas < 0;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND TRUE   __exception
[L429]               __tmp__Balance := Balance;
[L430]               __tmp__DType := DType;
[L431]               __tmp__Alloc := Alloc;
[L432]               __tmp__balance_ADDR := balance_ADDR;
[L433]               __tmp__M_Ref_int := M_Ref_int;
[L434]               __tmp__sum__balances0 := sum__balances0;
[L435]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L436]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L437]               __tmp__sum__allowances1 := sum__allowances1;
[L438]               __tmp__M_Ref_bool := M_Ref_bool;
[L439]               __tmp__sum_minters2 := sum_minters2;
[L440]               __tmp__sum_pendingAddMinters3 := sum_pendingAddMinters3;
[L441]               __tmp__Length := Length;
[L442]               __tmp__now := now;
[L443]               __tmp___balances_ERC20 := _balances_ERC20;
[L444]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L445]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L446]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L447]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L448]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L449]               __tmp__governance_ULU := governance_ULU;
[L450]               __tmp__minters_ULU := minters_ULU;
[L451]               __tmp__GRACE_PERIOD_ULU := GRACE_PERIOD_ULU;
[L452]               __tmp__pendingAddMinters_ULU := pendingAddMinters_ULU;
[L453]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2853]  COND TRUE   __tmp__DType[this] == ULU
[L2854]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2758]              __ret_0_ := msgsender_MSG;
[L2854]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2855]  COND FALSE  !(revert)
[L2866]  COND TRUE   __tmp__DType[this] == ULU
[L2867]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3338]              __var_12 := null;
[L3339]  COND TRUE   !(sender_s323 != null)
[L3340]              revert := true;
[L2867]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2868]  COND TRUE   revert
[L453]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L454]               assume revert || gas < 0;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:32:51,795 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:32:51,795 INFO  L82        PathProgramCache]: Analyzing trace with hash -380557334, now seen corresponding path program 1 times
[2020-11-25 07:32:51,795 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:32:51,809 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:32:51,895 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 07:32:51,895 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:32:51,895 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 07:32:51,896 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:32:51,896 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 07:32:51,896 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 07:32:51,896 INFO  L87              Difference]: Start difference. First operand 3872 states and 4275 transitions. cyclomatic complexity: 405 Second operand 8 states.
[2020-11-25 07:32:52,013 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:32:52,013 INFO  L93              Difference]: Finished difference Result 3896 states and 4303 transitions.
[2020-11-25 07:32:52,013 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 07:32:52,013 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3896 states and 4303 transitions.
[2020-11-25 07:32:52,022 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:32:52,032 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3896 states to 3876 states and 4281 transitions.
[2020-11-25 07:32:52,032 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1165
[2020-11-25 07:32:52,033 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1165
[2020-11-25 07:32:52,033 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3876 states and 4281 transitions.
[2020-11-25 07:32:52,037 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:32:52,037 INFO  L728         BuchiCegarLoop]: Abstraction has 3876 states and 4281 transitions.
[2020-11-25 07:32:52,040 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3876 states and 4281 transitions.
[2020-11-25 07:32:52,066 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3876 to 3876.
[2020-11-25 07:32:52,066 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3876 states.
[2020-11-25 07:32:52,069 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3876 states to 3876 states and 4281 transitions.
[2020-11-25 07:32:52,069 INFO  L751         BuchiCegarLoop]: Abstraction has 3876 states and 4281 transitions.
[2020-11-25 07:32:52,069 INFO  L631         BuchiCegarLoop]: Abstraction has 3876 states and 4281 transitions.
[2020-11-25 07:32:52,069 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 07:32:52,070 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3876 states and 4281 transitions.
[2020-11-25 07:32:52,074 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:32:52,074 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:32:52,074 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:32:52,076 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:32:52,076 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND TRUE   __exception
[L429]               __tmp__Balance := Balance;
[L430]               __tmp__DType := DType;
[L431]               __tmp__Alloc := Alloc;
[L432]               __tmp__balance_ADDR := balance_ADDR;
[L433]               __tmp__M_Ref_int := M_Ref_int;
[L434]               __tmp__sum__balances0 := sum__balances0;
[L435]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L436]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L437]               __tmp__sum__allowances1 := sum__allowances1;
[L438]               __tmp__M_Ref_bool := M_Ref_bool;
[L439]               __tmp__sum_minters2 := sum_minters2;
[L440]               __tmp__sum_pendingAddMinters3 := sum_pendingAddMinters3;
[L441]               __tmp__Length := Length;
[L442]               __tmp__now := now;
[L443]               __tmp___balances_ERC20 := _balances_ERC20;
[L444]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L445]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L446]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L447]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L448]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L449]               __tmp__governance_ULU := governance_ULU;
[L450]               __tmp__minters_ULU := minters_ULU;
[L451]               __tmp__GRACE_PERIOD_ULU := GRACE_PERIOD_ULU;
[L452]               __tmp__pendingAddMinters_ULU := pendingAddMinters_ULU;
[L453]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2853]  COND TRUE   __tmp__DType[this] == ULU
[L2854]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2758]              __ret_0_ := msgsender_MSG;
[L2854]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2855]  COND FALSE  !(revert)
[L2866]  COND TRUE   __tmp__DType[this] == ULU
[L2867]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3338]              __var_12 := null;
[L3339]  COND FALSE  !(!(sender_s323 != null))
[L3343]              __var_13 := null;
[L3344]  COND TRUE   !(recipient_s323 != null)
[L3345]              revert := true;
[L2867]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2868]  COND TRUE   revert
[L453]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L454]               assume revert || gas < 0;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND TRUE   __exception
[L429]               __tmp__Balance := Balance;
[L430]               __tmp__DType := DType;
[L431]               __tmp__Alloc := Alloc;
[L432]               __tmp__balance_ADDR := balance_ADDR;
[L433]               __tmp__M_Ref_int := M_Ref_int;
[L434]               __tmp__sum__balances0 := sum__balances0;
[L435]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L436]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L437]               __tmp__sum__allowances1 := sum__allowances1;
[L438]               __tmp__M_Ref_bool := M_Ref_bool;
[L439]               __tmp__sum_minters2 := sum_minters2;
[L440]               __tmp__sum_pendingAddMinters3 := sum_pendingAddMinters3;
[L441]               __tmp__Length := Length;
[L442]               __tmp__now := now;
[L443]               __tmp___balances_ERC20 := _balances_ERC20;
[L444]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L445]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L446]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L447]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L448]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L449]               __tmp__governance_ULU := governance_ULU;
[L450]               __tmp__minters_ULU := minters_ULU;
[L451]               __tmp__GRACE_PERIOD_ULU := GRACE_PERIOD_ULU;
[L452]               __tmp__pendingAddMinters_ULU := pendingAddMinters_ULU;
[L453]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2853]  COND TRUE   __tmp__DType[this] == ULU
[L2854]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2758]              __ret_0_ := msgsender_MSG;
[L2854]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2855]  COND FALSE  !(revert)
[L2866]  COND TRUE   __tmp__DType[this] == ULU
[L2867]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3338]              __var_12 := null;
[L3339]  COND FALSE  !(!(sender_s323 != null))
[L3343]              __var_13 := null;
[L3344]  COND TRUE   !(recipient_s323 != null)
[L3345]              revert := true;
[L2867]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2868]  COND TRUE   revert
[L453]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L454]               assume revert || gas < 0;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:32:52,080 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:32:52,080 INFO  L82        PathProgramCache]: Analyzing trace with hash 60069879, now seen corresponding path program 1 times
[2020-11-25 07:32:52,081 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:32:52,090 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:32:52,128 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 07:32:52,128 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:32:52,128 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 07:32:52,128 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:32:52,129 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 07:32:52,129 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 07:32:52,129 INFO  L87              Difference]: Start difference. First operand 3876 states and 4281 transitions. cyclomatic complexity: 407 Second operand 7 states.
[2020-11-25 07:32:52,188 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:32:52,188 INFO  L93              Difference]: Finished difference Result 3982 states and 4400 transitions.
[2020-11-25 07:32:52,188 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 07:32:52,188 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3982 states and 4400 transitions.
[2020-11-25 07:32:52,197 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:32:52,211 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3982 states to 3974 states and 4392 transitions.
[2020-11-25 07:32:52,211 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1184
[2020-11-25 07:32:52,211 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1184
[2020-11-25 07:32:52,211 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3974 states and 4392 transitions.
[2020-11-25 07:32:52,215 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:32:52,215 INFO  L728         BuchiCegarLoop]: Abstraction has 3974 states and 4392 transitions.
[2020-11-25 07:32:52,218 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3974 states and 4392 transitions.
[2020-11-25 07:32:52,244 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3974 to 3961.
[2020-11-25 07:32:52,245 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3961 states.
[2020-11-25 07:32:52,248 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3961 states to 3961 states and 4377 transitions.
[2020-11-25 07:32:52,248 INFO  L751         BuchiCegarLoop]: Abstraction has 3961 states and 4377 transitions.
[2020-11-25 07:32:52,248 INFO  L631         BuchiCegarLoop]: Abstraction has 3961 states and 4377 transitions.
[2020-11-25 07:32:52,248 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 07:32:52,248 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3961 states and 4377 transitions.
[2020-11-25 07:32:52,253 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:32:52,253 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:32:52,253 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:32:52,255 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:32:52,255 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:32:52,259 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:32:52,259 INFO  L82        PathProgramCache]: Analyzing trace with hash 1941082295, now seen corresponding path program 1 times
[2020-11-25 07:32:52,260 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:32:52,294 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:32:52,816 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 07:32:52,816 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:32:52,816 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [26] imperfect sequences [] total 26
[2020-11-25 07:32:52,817 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:32:52,817 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 07:32:52,817 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=67, Invalid=635, Unknown=0, NotChecked=0, Total=702
[2020-11-25 07:32:52,817 INFO  L87              Difference]: Start difference. First operand 3961 states and 4377 transitions. cyclomatic complexity: 418 Second operand 27 states.
[2020-11-25 07:32:57,808 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:32:57,808 INFO  L93              Difference]: Finished difference Result 4029 states and 4470 transitions.
[2020-11-25 07:32:57,808 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 07:32:57,808 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4029 states and 4470 transitions.
[2020-11-25 07:32:57,815 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 07:32:57,825 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4029 states to 4029 states and 4470 transitions.
[2020-11-25 07:32:57,826 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1209
[2020-11-25 07:32:57,826 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1209
[2020-11-25 07:32:57,826 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4029 states and 4470 transitions.
[2020-11-25 07:32:57,829 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:32:57,829 INFO  L728         BuchiCegarLoop]: Abstraction has 4029 states and 4470 transitions.
[2020-11-25 07:32:57,832 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4029 states and 4470 transitions.
[2020-11-25 07:32:57,857 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4029 to 4014.
[2020-11-25 07:32:57,857 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4014 states.
[2020-11-25 07:32:57,861 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4014 states to 4014 states and 4439 transitions.
[2020-11-25 07:32:57,861 INFO  L751         BuchiCegarLoop]: Abstraction has 4014 states and 4439 transitions.
[2020-11-25 07:32:57,861 INFO  L631         BuchiCegarLoop]: Abstraction has 4014 states and 4439 transitions.
[2020-11-25 07:32:57,861 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 07:32:57,861 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4014 states and 4439 transitions.
[2020-11-25 07:32:57,865 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 07:32:57,865 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:32:57,865 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:32:57,867 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:32:57,867 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND TRUE   __exception
[L429]               __tmp__Balance := Balance;
[L430]               __tmp__DType := DType;
[L431]               __tmp__Alloc := Alloc;
[L432]               __tmp__balance_ADDR := balance_ADDR;
[L433]               __tmp__M_Ref_int := M_Ref_int;
[L434]               __tmp__sum__balances0 := sum__balances0;
[L435]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L436]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L437]               __tmp__sum__allowances1 := sum__allowances1;
[L438]               __tmp__M_Ref_bool := M_Ref_bool;
[L439]               __tmp__sum_minters2 := sum_minters2;
[L440]               __tmp__sum_pendingAddMinters3 := sum_pendingAddMinters3;
[L441]               __tmp__Length := Length;
[L442]               __tmp__now := now;
[L443]               __tmp___balances_ERC20 := _balances_ERC20;
[L444]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L445]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L446]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L447]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L448]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L449]               __tmp__governance_ULU := governance_ULU;
[L450]               __tmp__minters_ULU := minters_ULU;
[L451]               __tmp__GRACE_PERIOD_ULU := GRACE_PERIOD_ULU;
[L452]               __tmp__pendingAddMinters_ULU := pendingAddMinters_ULU;
[L453]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2853]  COND TRUE   __tmp__DType[this] == ULU
[L2854]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2758]              __ret_0_ := msgsender_MSG;
[L2854]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2855]  COND FALSE  !(revert)
[L2866]  COND TRUE   __tmp__DType[this] == ULU
[L2867]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3338]              __var_12 := null;
[L3339]  COND FALSE  !(!(sender_s323 != null))
[L3343]              __var_13 := null;
[L3344]  COND FALSE  !(!(recipient_s323 != null))
[L3348]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3681]  COND TRUE   !(b_s561 <= a_s561)
[L3682]              revert := true;
[L3348]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3349]  COND TRUE   revert
[L2867]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2868]  COND TRUE   revert
[L453]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L454]               assume revert || gas < 0;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND TRUE   __exception
[L429]               __tmp__Balance := Balance;
[L430]               __tmp__DType := DType;
[L431]               __tmp__Alloc := Alloc;
[L432]               __tmp__balance_ADDR := balance_ADDR;
[L433]               __tmp__M_Ref_int := M_Ref_int;
[L434]               __tmp__sum__balances0 := sum__balances0;
[L435]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L436]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L437]               __tmp__sum__allowances1 := sum__allowances1;
[L438]               __tmp__M_Ref_bool := M_Ref_bool;
[L439]               __tmp__sum_minters2 := sum_minters2;
[L440]               __tmp__sum_pendingAddMinters3 := sum_pendingAddMinters3;
[L441]               __tmp__Length := Length;
[L442]               __tmp__now := now;
[L443]               __tmp___balances_ERC20 := _balances_ERC20;
[L444]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L445]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L446]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L447]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L448]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L449]               __tmp__governance_ULU := governance_ULU;
[L450]               __tmp__minters_ULU := minters_ULU;
[L451]               __tmp__GRACE_PERIOD_ULU := GRACE_PERIOD_ULU;
[L452]               __tmp__pendingAddMinters_ULU := pendingAddMinters_ULU;
[L453]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2853]  COND TRUE   __tmp__DType[this] == ULU
[L2854]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2758]              __ret_0_ := msgsender_MSG;
[L2854]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2855]  COND FALSE  !(revert)
[L2866]  COND TRUE   __tmp__DType[this] == ULU
[L2867]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3338]              __var_12 := null;
[L3339]  COND FALSE  !(!(sender_s323 != null))
[L3343]              __var_13 := null;
[L3344]  COND FALSE  !(!(recipient_s323 != null))
[L3348]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3681]  COND TRUE   !(b_s561 <= a_s561)
[L3682]              revert := true;
[L3348]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3349]  COND TRUE   revert
[L2867]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2868]  COND TRUE   revert
[L453]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L454]               assume revert || gas < 0;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:32:57,870 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:32:57,870 INFO  L82        PathProgramCache]: Analyzing trace with hash -1229837069, now seen corresponding path program 1 times
[2020-11-25 07:32:57,871 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:32:57,879 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:32:57,929 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 07:32:57,929 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:32:57,929 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 07:32:57,930 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:32:57,930 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 07:32:57,930 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 07:32:57,930 INFO  L87              Difference]: Start difference. First operand 4014 states and 4439 transitions. cyclomatic complexity: 429 Second operand 10 states.
[2020-11-25 07:32:58,900 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:32:58,900 INFO  L93              Difference]: Finished difference Result 4186 states and 4633 transitions.
[2020-11-25 07:32:58,900 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 07:32:58,900 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4186 states and 4633 transitions.
[2020-11-25 07:32:58,907 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 07:32:58,916 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4186 states to 4186 states and 4633 transitions.
[2020-11-25 07:32:58,916 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1288
[2020-11-25 07:32:58,917 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1288
[2020-11-25 07:32:58,917 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4186 states and 4633 transitions.
[2020-11-25 07:32:58,919 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:32:58,919 INFO  L728         BuchiCegarLoop]: Abstraction has 4186 states and 4633 transitions.
[2020-11-25 07:32:58,923 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4186 states and 4633 transitions.
[2020-11-25 07:32:58,946 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4186 to 4073.
[2020-11-25 07:32:58,946 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4073 states.
[2020-11-25 07:32:58,949 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4073 states to 4073 states and 4499 transitions.
[2020-11-25 07:32:58,949 INFO  L751         BuchiCegarLoop]: Abstraction has 4073 states and 4499 transitions.
[2020-11-25 07:32:58,949 INFO  L631         BuchiCegarLoop]: Abstraction has 4073 states and 4499 transitions.
[2020-11-25 07:32:58,949 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 07:32:58,950 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4073 states and 4499 transitions.
[2020-11-25 07:32:58,954 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 07:32:58,954 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:32:58,954 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:32:58,955 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:32:58,955 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND TRUE   __exception
[L429]               __tmp__Balance := Balance;
[L430]               __tmp__DType := DType;
[L431]               __tmp__Alloc := Alloc;
[L432]               __tmp__balance_ADDR := balance_ADDR;
[L433]               __tmp__M_Ref_int := M_Ref_int;
[L434]               __tmp__sum__balances0 := sum__balances0;
[L435]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L436]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L437]               __tmp__sum__allowances1 := sum__allowances1;
[L438]               __tmp__M_Ref_bool := M_Ref_bool;
[L439]               __tmp__sum_minters2 := sum_minters2;
[L440]               __tmp__sum_pendingAddMinters3 := sum_pendingAddMinters3;
[L441]               __tmp__Length := Length;
[L442]               __tmp__now := now;
[L443]               __tmp___balances_ERC20 := _balances_ERC20;
[L444]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L445]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L446]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L447]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L448]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L449]               __tmp__governance_ULU := governance_ULU;
[L450]               __tmp__minters_ULU := minters_ULU;
[L451]               __tmp__GRACE_PERIOD_ULU := GRACE_PERIOD_ULU;
[L452]               __tmp__pendingAddMinters_ULU := pendingAddMinters_ULU;
[L453]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2853]  COND TRUE   __tmp__DType[this] == ULU
[L2854]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2758]              __ret_0_ := msgsender_MSG;
[L2854]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2855]  COND FALSE  !(revert)
[L2866]  COND TRUE   __tmp__DType[this] == ULU
[L2867]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3338]              __var_12 := null;
[L3339]  COND FALSE  !(!(sender_s323 != null))
[L3343]              __var_13 := null;
[L3344]  COND FALSE  !(!(recipient_s323 != null))
[L3348]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3681]  COND FALSE  !(!(b_s561 <= a_s561))
[L3685]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3686]              __ret_0_ := c_s561;
[L3348]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3349]  COND FALSE  !(revert)
[L3352]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L3353]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L3354]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L3355]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3657]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3658]  COND TRUE   !(c_s534 >= a_s534)
[L3659]              revert := true;
[L3355]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3356]  COND TRUE   revert
[L2867]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2868]  COND TRUE   revert
[L453]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L454]               assume revert || gas < 0;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND TRUE   choice == 23
[L5663]              gas := gas - 21000;
[L5664]  COND FALSE  !(gas >= 0)
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:32:58,958 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:32:58,958 INFO  L82        PathProgramCache]: Analyzing trace with hash 377227094, now seen corresponding path program 1 times
[2020-11-25 07:32:58,958 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:32:58,967 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:32:59,065 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 07:32:59,066 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:32:59,066 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [22] imperfect sequences [] total 22
[2020-11-25 07:32:59,066 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:32:59,066 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-11-25 07:32:59,066 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=45, Invalid=461, Unknown=0, NotChecked=0, Total=506
[2020-11-25 07:32:59,066 INFO  L87              Difference]: Start difference. First operand 4073 states and 4499 transitions. cyclomatic complexity: 430 Second operand 23 states.
[2020-11-25 07:33:02,441 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:33:02,441 INFO  L93              Difference]: Finished difference Result 4108 states and 4554 transitions.
[2020-11-25 07:33:02,441 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 07:33:02,441 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4108 states and 4554 transitions.
[2020-11-25 07:33:02,448 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 07:33:02,456 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4108 states to 4108 states and 4554 transitions.
[2020-11-25 07:33:02,456 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1277
[2020-11-25 07:33:02,457 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1277
[2020-11-25 07:33:02,457 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4108 states and 4554 transitions.
[2020-11-25 07:33:02,459 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:33:02,459 INFO  L728         BuchiCegarLoop]: Abstraction has 4108 states and 4554 transitions.
[2020-11-25 07:33:02,462 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4108 states and 4554 transitions.
[2020-11-25 07:33:02,483 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4108 to 4024.
[2020-11-25 07:33:02,483 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4024 states.
[2020-11-25 07:33:02,486 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4024 states to 4024 states and 4452 transitions.
[2020-11-25 07:33:02,486 INFO  L751         BuchiCegarLoop]: Abstraction has 4024 states and 4452 transitions.
[2020-11-25 07:33:02,487 INFO  L631         BuchiCegarLoop]: Abstraction has 4024 states and 4452 transitions.
[2020-11-25 07:33:02,487 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 07:33:02,487 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4024 states and 4452 transitions.
[2020-11-25 07:33:02,491 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 07:33:02,491 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:33:02,491 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:33:02,492 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:33:02,492 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND TRUE   __exception
[L429]               __tmp__Balance := Balance;
[L430]               __tmp__DType := DType;
[L431]               __tmp__Alloc := Alloc;
[L432]               __tmp__balance_ADDR := balance_ADDR;
[L433]               __tmp__M_Ref_int := M_Ref_int;
[L434]               __tmp__sum__balances0 := sum__balances0;
[L435]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L436]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L437]               __tmp__sum__allowances1 := sum__allowances1;
[L438]               __tmp__M_Ref_bool := M_Ref_bool;
[L439]               __tmp__sum_minters2 := sum_minters2;
[L440]               __tmp__sum_pendingAddMinters3 := sum_pendingAddMinters3;
[L441]               __tmp__Length := Length;
[L442]               __tmp__now := now;
[L443]               __tmp___balances_ERC20 := _balances_ERC20;
[L444]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L445]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L446]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L447]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L448]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L449]               __tmp__governance_ULU := governance_ULU;
[L450]               __tmp__minters_ULU := minters_ULU;
[L451]               __tmp__GRACE_PERIOD_ULU := GRACE_PERIOD_ULU;
[L452]               __tmp__pendingAddMinters_ULU := pendingAddMinters_ULU;
[L453]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2853]  COND TRUE   __tmp__DType[this] == ULU
[L2854]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2758]              __ret_0_ := msgsender_MSG;
[L2854]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2855]  COND FALSE  !(revert)
[L2866]  COND TRUE   __tmp__DType[this] == ULU
[L2867]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3338]              __var_12 := null;
[L3339]  COND FALSE  !(!(sender_s323 != null))
[L3343]              __var_13 := null;
[L3344]  COND FALSE  !(!(recipient_s323 != null))
[L3348]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3681]  COND FALSE  !(!(b_s561 <= a_s561))
[L3685]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3686]              __ret_0_ := c_s561;
[L3348]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3349]  COND FALSE  !(revert)
[L3352]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L3353]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L3354]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L3355]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3657]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3658]  COND FALSE  !(!(c_s534 >= a_s534))
[L3662]              __ret_0_ := c_s534;
[L3355]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3356]  COND FALSE  !(revert)
[L3359]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s323];
[L3360]              __tmp___balances_ERC20[this][recipient_s323] := __var_15;
[L3361]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s323];
[L2867]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2868]  COND FALSE  !(revert)
[L2879]              __ret_0_ := true;
[L453]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L454]               assume revert || gas < 0;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND TRUE   choice == 23
[L5663]              gas := gas - 21000;
[L5664]  COND FALSE  !(gas >= 0)
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:33:02,494 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:33:02,494 INFO  L82        PathProgramCache]: Analyzing trace with hash 172876788, now seen corresponding path program 1 times
[2020-11-25 07:33:02,495 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:33:02,503 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:33:02,538 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 07:33:02,539 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:33:02,539 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 07:33:02,539 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:33:02,539 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 07:33:02,539 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 07:33:02,539 INFO  L87              Difference]: Start difference. First operand 4024 states and 4452 transitions. cyclomatic complexity: 432 Second operand 5 states.
[2020-11-25 07:33:03,174 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:33:03,174 INFO  L93              Difference]: Finished difference Result 4908 states and 5507 transitions.
[2020-11-25 07:33:03,174 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 07:33:03,174 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4908 states and 5507 transitions.
[2020-11-25 07:33:03,184 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 07:33:03,194 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4908 states to 3937 states and 4522 transitions.
[2020-11-25 07:33:03,194 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1001
[2020-11-25 07:33:03,195 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1001
[2020-11-25 07:33:03,195 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3937 states and 4522 transitions.
[2020-11-25 07:33:03,197 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:33:03,197 INFO  L728         BuchiCegarLoop]: Abstraction has 3937 states and 4522 transitions.
[2020-11-25 07:33:03,200 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3937 states and 4522 transitions.
[2020-11-25 07:33:03,218 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3937 to 3133.
[2020-11-25 07:33:03,218 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3133 states.
[2020-11-25 07:33:03,221 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3133 states to 3133 states and 3493 transitions.
[2020-11-25 07:33:03,221 INFO  L751         BuchiCegarLoop]: Abstraction has 3133 states and 3493 transitions.
[2020-11-25 07:33:03,221 INFO  L631         BuchiCegarLoop]: Abstraction has 3133 states and 3493 transitions.
[2020-11-25 07:33:03,221 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 07:33:03,221 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3133 states and 3493 transitions.
[2020-11-25 07:33:03,224 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:33:03,224 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:33:03,225 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:33:03,226 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:33:03,226 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND TRUE   choice == 8
[L5758]              gas := gas - 21000;
[L5759]  COND TRUE   gas >= 0
[L5760]              assume amount_s678 >= 0 && amount_s678 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5761]              assume msgvalue_MSG == 0;
[L5762]  CALL        call mint~address~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L1273]              havoc __exception;
[L1274]              revert := false;
[L1275]  COND FALSE  !(__exception)
[L1303]  CALL        call mint~address~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L3852]  COND FALSE  !(!minters_ULU[this][msgsender_MSG])
[L3856]  COND TRUE   DType[this] == ULU
[L3857]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L3426]              __var_16 := null;
[L3427]  COND FALSE  !(!(account_s366 != null))
[L3431]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3431]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3432]  COND FALSE  !(revert)
[L3435]              _totalSupply_ERC20[this] := __var_17;
[L3436]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3436]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3437]  COND FALSE  !(revert)
[L3440]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L3441]              _balances_ERC20[this][account_s366] := __var_18;
[L3442]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L3443]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3857]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L3858]  COND FALSE  !(revert)
[L1303]  RET         call mint~address~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L1304]              assume !revert && gas >= 0;
[L5762]  RET         call mint~address~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:33:03,230 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:33:03,230 INFO  L82        PathProgramCache]: Analyzing trace with hash 1538949059, now seen corresponding path program 1 times
[2020-11-25 07:33:03,230 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:33:03,244 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:33:03,349 INFO  L134       CoverageAnalysis]: Checked inductivity of 110 backedges. 1 proven. 64 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 07:33:03,349 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:33:03,349 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 07:33:03,350 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:33:03,350 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 07:33:03,350 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 07:33:03,350 INFO  L87              Difference]: Start difference. First operand 3133 states and 3493 transitions. cyclomatic complexity: 363 Second operand 10 states.
[2020-11-25 07:33:04,205 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:33:04,205 INFO  L93              Difference]: Finished difference Result 3168 states and 3541 transitions.
[2020-11-25 07:33:04,205 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 07:33:04,205 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3168 states and 3541 transitions.
[2020-11-25 07:33:04,211 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 07:33:04,217 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3168 states to 3168 states and 3541 transitions.
[2020-11-25 07:33:04,217 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 836
[2020-11-25 07:33:04,218 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 836
[2020-11-25 07:33:04,218 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3168 states and 3541 transitions.
[2020-11-25 07:33:04,219 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:33:04,219 INFO  L728         BuchiCegarLoop]: Abstraction has 3168 states and 3541 transitions.
[2020-11-25 07:33:04,222 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3168 states and 3541 transitions.
[2020-11-25 07:33:04,237 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3168 to 3168.
[2020-11-25 07:33:04,237 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3168 states.
[2020-11-25 07:33:04,240 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3168 states to 3168 states and 3541 transitions.
[2020-11-25 07:33:04,240 INFO  L751         BuchiCegarLoop]: Abstraction has 3168 states and 3541 transitions.
[2020-11-25 07:33:04,240 INFO  L631         BuchiCegarLoop]: Abstraction has 3168 states and 3541 transitions.
[2020-11-25 07:33:04,240 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 07:33:04,240 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3168 states and 3541 transitions.
[2020-11-25 07:33:04,243 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 07:33:04,243 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:33:04,243 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:33:04,244 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:33:04,244 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND TRUE   choice == 7
[L5765]              gas := gas - 21000;
[L5766]  COND TRUE   gas >= 0
[L5767]              assume amount_s690 >= 0 && amount_s690 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5768]              assume msgvalue_MSG == 0;
[L5769]  CALL        call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1340]              havoc __exception;
[L1341]              revert := false;
[L1342]  COND FALSE  !(__exception)
[L1370]  CALL        call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L3880]  COND TRUE   DType[this] == ULU
[L3881]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3475]              __var_19 := null;
[L3476]  COND FALSE  !(!(account_s411 != null))
[L3480]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3480]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L3485]              _balances_ERC20[this][account_s411] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L3487]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3487]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3488]  COND FALSE  !(revert)
[L3491]              _totalSupply_ERC20[this] := __var_21;
[L3492]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3881]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3882]  COND FALSE  !(revert)
[L1370]  RET         call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1371]              assume !revert && gas >= 0;
[L5769]  RET         call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:33:04,248 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:33:04,248 INFO  L82        PathProgramCache]: Analyzing trace with hash -1264985277, now seen corresponding path program 1 times
[2020-11-25 07:33:04,249 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:33:04,269 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:33:05,052 INFO  L134       CoverageAnalysis]: Checked inductivity of 110 backedges. 0 proven. 5 refuted. 0 times theorem prover too weak. 105 trivial. 0 not checked.
[2020-11-25 07:33:05,052 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:33:05,052 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-11-25 07:33:05,052 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:33:05,053 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-11-25 07:33:05,053 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=119, Invalid=1141, Unknown=0, NotChecked=0, Total=1260
[2020-11-25 07:33:05,053 INFO  L87              Difference]: Start difference. First operand 3168 states and 3541 transitions. cyclomatic complexity: 379 Second operand 36 states.
[2020-11-25 07:33:09,718 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:33:09,718 INFO  L93              Difference]: Finished difference Result 3216 states and 3665 transitions.
[2020-11-25 07:33:09,718 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 07:33:09,718 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3216 states and 3665 transitions.
[2020-11-25 07:33:09,724 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 07:33:09,732 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3216 states to 3216 states and 3665 transitions.
[2020-11-25 07:33:09,732 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 864
[2020-11-25 07:33:09,732 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 864
[2020-11-25 07:33:09,732 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3216 states and 3665 transitions.
[2020-11-25 07:33:09,734 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:33:09,734 INFO  L728         BuchiCegarLoop]: Abstraction has 3216 states and 3665 transitions.
[2020-11-25 07:33:09,737 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3216 states and 3665 transitions.
[2020-11-25 07:33:09,751 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3216 to 3199.
[2020-11-25 07:33:09,751 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3199 states.
[2020-11-25 07:33:09,755 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3199 states to 3199 states and 3603 transitions.
[2020-11-25 07:33:09,755 INFO  L751         BuchiCegarLoop]: Abstraction has 3199 states and 3603 transitions.
[2020-11-25 07:33:09,755 INFO  L631         BuchiCegarLoop]: Abstraction has 3199 states and 3603 transitions.
[2020-11-25 07:33:09,755 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 07:33:09,755 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3199 states and 3603 transitions.
[2020-11-25 07:33:09,758 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 07:33:09,758 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:33:09,758 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:33:09,759 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:33:09,759 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND TRUE   choice == 7
[L5765]              gas := gas - 21000;
[L5766]  COND TRUE   gas >= 0
[L5767]              assume amount_s690 >= 0 && amount_s690 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5768]              assume msgvalue_MSG == 0;
[L5769]  CALL        call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1340]              havoc __exception;
[L1341]              revert := false;
[L1342]  COND FALSE  !(__exception)
[L1370]  CALL        call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L3880]  COND TRUE   DType[this] == ULU
[L3881]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3475]              __var_19 := null;
[L3476]  COND FALSE  !(!(account_s411 != null))
[L3480]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3480]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L3485]              _balances_ERC20[this][account_s411] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L3487]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3487]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3488]  COND FALSE  !(revert)
[L3491]              _totalSupply_ERC20[this] := __var_21;
[L3492]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3881]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3882]  COND FALSE  !(revert)
[L1370]  RET         call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1371]              assume !revert && gas >= 0;
[L5769]  RET         call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND TRUE   __exception
[L429]               __tmp__Balance := Balance;
[L430]               __tmp__DType := DType;
[L431]               __tmp__Alloc := Alloc;
[L432]               __tmp__balance_ADDR := balance_ADDR;
[L433]               __tmp__M_Ref_int := M_Ref_int;
[L434]               __tmp__sum__balances0 := sum__balances0;
[L435]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L436]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L437]               __tmp__sum__allowances1 := sum__allowances1;
[L438]               __tmp__M_Ref_bool := M_Ref_bool;
[L439]               __tmp__sum_minters2 := sum_minters2;
[L440]               __tmp__sum_pendingAddMinters3 := sum_pendingAddMinters3;
[L441]               __tmp__Length := Length;
[L442]               __tmp__now := now;
[L443]               __tmp___balances_ERC20 := _balances_ERC20;
[L444]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L445]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L446]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L447]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L448]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L449]               __tmp__governance_ULU := governance_ULU;
[L450]               __tmp__minters_ULU := minters_ULU;
[L451]               __tmp__GRACE_PERIOD_ULU := GRACE_PERIOD_ULU;
[L452]               __tmp__pendingAddMinters_ULU := pendingAddMinters_ULU;
[L453]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2853]  COND TRUE   __tmp__DType[this] == ULU
[L2854]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2758]              __ret_0_ := msgsender_MSG;
[L2854]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2855]  COND FALSE  !(revert)
[L2866]  COND TRUE   __tmp__DType[this] == ULU
[L2867]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3338]              __var_12 := null;
[L3339]  COND FALSE  !(!(sender_s323 != null))
[L3343]              __var_13 := null;
[L3344]  COND FALSE  !(!(recipient_s323 != null))
[L3348]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3681]  COND FALSE  !(!(b_s561 <= a_s561))
[L3685]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3686]              __ret_0_ := c_s561;
[L3348]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3349]  COND FALSE  !(revert)
[L3352]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L3353]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L3354]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L3355]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3657]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3658]  COND TRUE   !(c_s534 >= a_s534)
[L3659]              revert := true;
[L3355]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3356]  COND TRUE   revert
[L2867]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2868]  COND TRUE   revert
[L453]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L454]               assume revert || gas < 0;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND TRUE   choice == 23
[L5663]              gas := gas - 21000;
[L5664]  COND FALSE  !(gas >= 0)
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:33:09,762 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:33:09,762 INFO  L82        PathProgramCache]: Analyzing trace with hash -1868770486, now seen corresponding path program 1 times
[2020-11-25 07:33:09,763 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:33:09,775 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:33:09,881 INFO  L134       CoverageAnalysis]: Checked inductivity of 110 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 110 trivial. 0 not checked.
[2020-11-25 07:33:09,881 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:33:09,881 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 07:33:09,881 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:33:09,882 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 07:33:09,882 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=34, Invalid=206, Unknown=0, NotChecked=0, Total=240
[2020-11-25 07:33:09,882 INFO  L87              Difference]: Start difference. First operand 3199 states and 3603 transitions. cyclomatic complexity: 414 Second operand 16 states.
[2020-11-25 07:33:11,526 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:33:11,526 INFO  L93              Difference]: Finished difference Result 3261 states and 3699 transitions.
[2020-11-25 07:33:11,527 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 07:33:11,527 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3261 states and 3699 transitions.
[2020-11-25 07:33:11,533 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 07:33:11,540 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3261 states to 3211 states and 3647 transitions.
[2020-11-25 07:33:11,540 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 881
[2020-11-25 07:33:11,541 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 881
[2020-11-25 07:33:11,541 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3211 states and 3647 transitions.
[2020-11-25 07:33:11,542 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:33:11,543 INFO  L728         BuchiCegarLoop]: Abstraction has 3211 states and 3647 transitions.
[2020-11-25 07:33:11,545 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3211 states and 3647 transitions.
[2020-11-25 07:33:11,559 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3211 to 3104.
[2020-11-25 07:33:11,559 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3104 states.
[2020-11-25 07:33:11,562 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3104 states to 3104 states and 3479 transitions.
[2020-11-25 07:33:11,562 INFO  L751         BuchiCegarLoop]: Abstraction has 3104 states and 3479 transitions.
[2020-11-25 07:33:11,562 INFO  L631         BuchiCegarLoop]: Abstraction has 3104 states and 3479 transitions.
[2020-11-25 07:33:11,562 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 07:33:11,562 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3104 states and 3479 transitions.
[2020-11-25 07:33:11,565 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 07:33:11,565 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:33:11,565 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:33:11,566 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:33:11,566 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:33:11,570 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:33:11,570 INFO  L82        PathProgramCache]: Analyzing trace with hash -508465594, now seen corresponding path program 1 times
[2020-11-25 07:33:11,571 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:33:11,601 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:33:12,431 INFO  L134       CoverageAnalysis]: Checked inductivity of 114 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 111 trivial. 0 not checked.
[2020-11-25 07:33:12,431 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:33:12,432 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 07:33:12,432 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:33:12,432 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 07:33:12,432 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=124, Invalid=1516, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 07:33:12,432 INFO  L87              Difference]: Start difference. First operand 3104 states and 3479 transitions. cyclomatic complexity: 383 Second operand 41 states.
[2020-11-25 07:33:19,838 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:33:19,838 INFO  L93              Difference]: Finished difference Result 3359 states and 3862 transitions.
[2020-11-25 07:33:19,839 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 07:33:19,839 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3359 states and 3862 transitions.
[2020-11-25 07:33:19,845 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 07:33:19,852 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3359 states to 3359 states and 3862 transitions.
[2020-11-25 07:33:19,852 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 958
[2020-11-25 07:33:19,852 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 958
[2020-11-25 07:33:19,853 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3359 states and 3862 transitions.
[2020-11-25 07:33:19,854 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:33:19,854 INFO  L728         BuchiCegarLoop]: Abstraction has 3359 states and 3862 transitions.
[2020-11-25 07:33:19,857 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3359 states and 3862 transitions.
[2020-11-25 07:33:19,872 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3359 to 3339.
[2020-11-25 07:33:19,872 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3339 states.
[2020-11-25 07:33:19,876 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3339 states to 3339 states and 3827 transitions.
[2020-11-25 07:33:19,876 INFO  L751         BuchiCegarLoop]: Abstraction has 3339 states and 3827 transitions.
[2020-11-25 07:33:19,876 INFO  L631         BuchiCegarLoop]: Abstraction has 3339 states and 3827 transitions.
[2020-11-25 07:33:19,876 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 07:33:19,876 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3339 states and 3827 transitions.
[2020-11-25 07:33:19,879 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 07:33:19,879 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:33:19,879 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:33:19,881 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:33:19,881 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND FALSE  !(DType[this] == ULU)
[L3069]  COND TRUE   DType[this] == ERC20
[L3070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3071]  COND FALSE  !(revert)
[L3077]  COND FALSE  !(DType[this] == ULU)
[L3082]  COND TRUE   DType[this] == ERC20
[L3083]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3083]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3084]  COND FALSE  !(revert)
[L3090]  COND FALSE  !(DType[this] == ULU)
[L3095]  COND TRUE   DType[this] == ERC20
[L3096]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3096]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3097]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND TRUE   choice == 23
[L5663]              gas := gas - 21000;
[L5664]  COND FALSE  !(gas >= 0)
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:33:19,884 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:33:19,884 INFO  L82        PathProgramCache]: Analyzing trace with hash -2130061868, now seen corresponding path program 1 times
[2020-11-25 07:33:19,885 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:33:19,896 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:33:19,956 INFO  L134       CoverageAnalysis]: Checked inductivity of 113 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 112 trivial. 0 not checked.
[2020-11-25 07:33:19,956 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:33:19,956 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 07:33:19,956 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:33:19,957 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 07:33:19,957 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 07:33:19,957 INFO  L87              Difference]: Start difference. First operand 3339 states and 3827 transitions. cyclomatic complexity: 502 Second operand 3 states.
[2020-11-25 07:33:19,978 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:33:19,978 INFO  L93              Difference]: Finished difference Result 3357 states and 3847 transitions.
[2020-11-25 07:33:19,978 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 07:33:19,978 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3357 states and 3847 transitions.
[2020-11-25 07:33:19,984 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 07:33:19,991 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3357 states to 3357 states and 3847 transitions.
[2020-11-25 07:33:19,991 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 949
[2020-11-25 07:33:19,992 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 949
[2020-11-25 07:33:19,992 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3357 states and 3847 transitions.
[2020-11-25 07:33:19,994 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:33:19,994 INFO  L728         BuchiCegarLoop]: Abstraction has 3357 states and 3847 transitions.
[2020-11-25 07:33:19,996 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3357 states and 3847 transitions.
[2020-11-25 07:33:20,012 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3357 to 3351.
[2020-11-25 07:33:20,012 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3351 states.
[2020-11-25 07:33:20,016 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3351 states to 3351 states and 3841 transitions.
[2020-11-25 07:33:20,016 INFO  L751         BuchiCegarLoop]: Abstraction has 3351 states and 3841 transitions.
[2020-11-25 07:33:20,016 INFO  L631         BuchiCegarLoop]: Abstraction has 3351 states and 3841 transitions.
[2020-11-25 07:33:20,016 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 07:33:20,016 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3351 states and 3841 transitions.
[2020-11-25 07:33:20,020 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 07:33:20,020 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:33:20,020 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:33:20,021 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:33:20,021 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND TRUE   choice == 7
[L5765]              gas := gas - 21000;
[L5766]  COND TRUE   gas >= 0
[L5767]              assume amount_s690 >= 0 && amount_s690 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5768]              assume msgvalue_MSG == 0;
[L5769]  CALL        call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1340]              havoc __exception;
[L1341]              revert := false;
[L1342]  COND FALSE  !(__exception)
[L1370]  CALL        call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L3880]  COND TRUE   DType[this] == ULU
[L3881]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3475]              __var_19 := null;
[L3476]  COND FALSE  !(!(account_s411 != null))
[L3480]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3480]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L3485]              _balances_ERC20[this][account_s411] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L3487]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3487]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3488]  COND FALSE  !(revert)
[L3491]              _totalSupply_ERC20[this] := __var_21;
[L3492]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3881]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3882]  COND FALSE  !(revert)
[L1370]  RET         call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1371]              assume !revert && gas >= 0;
[L5769]  RET         call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:33:20,025 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:33:20,025 INFO  L82        PathProgramCache]: Analyzing trace with hash -632351744, now seen corresponding path program 1 times
[2020-11-25 07:33:20,025 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:33:20,048 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:33:20,916 INFO  L134       CoverageAnalysis]: Checked inductivity of 113 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 109 trivial. 0 not checked.
[2020-11-25 07:33:20,916 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:33:20,916 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-11-25 07:33:20,917 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:33:20,917 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 07:33:20,917 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=125, Invalid=1435, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 07:33:20,917 INFO  L87              Difference]: Start difference. First operand 3351 states and 3841 transitions. cyclomatic complexity: 504 Second operand 40 states.
[2020-11-25 07:33:28,552 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:33:28,552 INFO  L93              Difference]: Finished difference Result 3388 states and 3950 transitions.
[2020-11-25 07:33:28,552 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 07:33:28,552 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3388 states and 3950 transitions.
[2020-11-25 07:33:28,559 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 07:33:28,567 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3388 states to 3388 states and 3950 transitions.
[2020-11-25 07:33:28,568 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 963
[2020-11-25 07:33:28,568 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 963
[2020-11-25 07:33:28,568 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3388 states and 3950 transitions.
[2020-11-25 07:33:28,570 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:33:28,570 INFO  L728         BuchiCegarLoop]: Abstraction has 3388 states and 3950 transitions.
[2020-11-25 07:33:28,572 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3388 states and 3950 transitions.
[2020-11-25 07:33:28,586 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3388 to 3369.
[2020-11-25 07:33:28,587 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3369 states.
[2020-11-25 07:33:28,591 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3369 states to 3369 states and 3907 transitions.
[2020-11-25 07:33:28,591 INFO  L751         BuchiCegarLoop]: Abstraction has 3369 states and 3907 transitions.
[2020-11-25 07:33:28,591 INFO  L631         BuchiCegarLoop]: Abstraction has 3369 states and 3907 transitions.
[2020-11-25 07:33:28,591 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 07:33:28,591 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3369 states and 3907 transitions.
[2020-11-25 07:33:28,594 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 07:33:28,594 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:33:28,594 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:33:28,595 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:33:28,595 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND TRUE   choice == 7
[L5765]              gas := gas - 21000;
[L5766]  COND TRUE   gas >= 0
[L5767]              assume amount_s690 >= 0 && amount_s690 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5768]              assume msgvalue_MSG == 0;
[L5769]  CALL        call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1340]              havoc __exception;
[L1341]              revert := false;
[L1342]  COND FALSE  !(__exception)
[L1370]  CALL        call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L3880]  COND TRUE   DType[this] == ULU
[L3881]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3475]              __var_19 := null;
[L3476]  COND FALSE  !(!(account_s411 != null))
[L3480]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3480]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L3485]              _balances_ERC20[this][account_s411] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L3487]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3487]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3488]  COND FALSE  !(revert)
[L3491]              _totalSupply_ERC20[this] := __var_21;
[L3492]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3881]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3882]  COND FALSE  !(revert)
[L1370]  RET         call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1371]              assume !revert && gas >= 0;
[L5769]  RET         call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND TRUE   choice == 7
[L5765]              gas := gas - 21000;
[L5766]  COND TRUE   gas >= 0
[L5767]              assume amount_s690 >= 0 && amount_s690 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5768]              assume msgvalue_MSG == 0;
[L5769]  CALL        call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1340]              havoc __exception;
[L1341]              revert := false;
[L1342]  COND FALSE  !(__exception)
[L1370]  CALL        call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L3880]  COND TRUE   DType[this] == ULU
[L3881]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3475]              __var_19 := null;
[L3476]  COND FALSE  !(!(account_s411 != null))
[L3480]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3480]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L3485]              _balances_ERC20[this][account_s411] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L3487]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3487]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3488]  COND FALSE  !(revert)
[L3491]              _totalSupply_ERC20[this] := __var_21;
[L3492]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3881]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3882]  COND FALSE  !(revert)
[L1370]  RET         call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1371]              assume !revert && gas >= 0;
[L5769]  RET         call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND TRUE   choice == 23
[L5663]              gas := gas - 21000;
[L5664]  COND FALSE  !(gas >= 0)
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:33:28,599 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:33:28,599 INFO  L82        PathProgramCache]: Analyzing trace with hash 984367055, now seen corresponding path program 2 times
[2020-11-25 07:33:28,600 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:33:28,630 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:33:28,955 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification. DAG size of input: 52 DAG size of output: 31
[2020-11-25 07:33:30,042 INFO  L134       CoverageAnalysis]: Checked inductivity of 322 backedges. 5 proven. 201 refuted. 0 times theorem prover too weak. 116 trivial. 0 not checked.
[2020-11-25 07:33:30,042 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:33:30,043 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [49] total 49
[2020-11-25 07:33:30,044 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:33:30,044 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 50 interpolants.
[2020-11-25 07:33:30,046 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=191, Invalid=2259, Unknown=0, NotChecked=0, Total=2450
[2020-11-25 07:33:30,046 INFO  L87              Difference]: Start difference. First operand 3369 states and 3907 transitions. cyclomatic complexity: 558 Second operand 50 states.
[2020-11-25 07:33:33,783 WARN  L188               SmtUtils]: Spent 112.00 ms on a formula simplification. DAG size of input: 73 DAG size of output: 66
[2020-11-25 07:33:42,957 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:33:42,957 INFO  L93              Difference]: Finished difference Result 3847 states and 4637 transitions.
[2020-11-25 07:33:42,958 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 45 states. 
[2020-11-25 07:33:42,958 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3847 states and 4637 transitions.
[2020-11-25 07:33:42,966 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 07:33:42,977 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3847 states to 3847 states and 4637 transitions.
[2020-11-25 07:33:42,977 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1194
[2020-11-25 07:33:42,977 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1194
[2020-11-25 07:33:42,977 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3847 states and 4637 transitions.
[2020-11-25 07:33:42,980 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:33:42,980 INFO  L728         BuchiCegarLoop]: Abstraction has 3847 states and 4637 transitions.
[2020-11-25 07:33:42,982 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3847 states and 4637 transitions.
[2020-11-25 07:33:43,005 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3847 to 3828.
[2020-11-25 07:33:43,006 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3828 states.
[2020-11-25 07:33:43,012 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3828 states to 3828 states and 4590 transitions.
[2020-11-25 07:33:43,012 INFO  L751         BuchiCegarLoop]: Abstraction has 3828 states and 4590 transitions.
[2020-11-25 07:33:43,012 INFO  L631         BuchiCegarLoop]: Abstraction has 3828 states and 4590 transitions.
[2020-11-25 07:33:43,012 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 07:33:43,012 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3828 states and 4590 transitions.
[2020-11-25 07:33:43,016 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 07:33:43,016 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:33:43,016 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:33:43,017 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:33:43,017 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND TRUE   choice == 7
[L5765]              gas := gas - 21000;
[L5766]  COND TRUE   gas >= 0
[L5767]              assume amount_s690 >= 0 && amount_s690 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5768]              assume msgvalue_MSG == 0;
[L5769]  CALL        call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1340]              havoc __exception;
[L1341]              revert := false;
[L1342]  COND FALSE  !(__exception)
[L1370]  CALL        call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L3880]  COND TRUE   DType[this] == ULU
[L3881]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3475]              __var_19 := null;
[L3476]  COND FALSE  !(!(account_s411 != null))
[L3480]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3480]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L3485]              _balances_ERC20[this][account_s411] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L3487]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3487]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3488]  COND FALSE  !(revert)
[L3491]              _totalSupply_ERC20[this] := __var_21;
[L3492]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3881]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3882]  COND FALSE  !(revert)
[L1370]  RET         call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1371]              assume !revert && gas >= 0;
[L5769]  RET         call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND FALSE  !(DType[this] == ULU)
[L2904]  COND TRUE   DType[this] == ERC20
[L2905]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2905]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2906]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:33:43,021 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:33:43,021 INFO  L82        PathProgramCache]: Analyzing trace with hash 368690453, now seen corresponding path program 1 times
[2020-11-25 07:33:43,022 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:33:43,035 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:33:43,258 INFO  L134       CoverageAnalysis]: Checked inductivity of 262 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 257 trivial. 0 not checked.
[2020-11-25 07:33:43,259 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:33:43,259 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 07:33:43,259 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:33:43,259 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 07:33:43,259 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 07:33:43,259 INFO  L87              Difference]: Start difference. First operand 3828 states and 4590 transitions. cyclomatic complexity: 792 Second operand 3 states.
[2020-11-25 07:33:43,282 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:33:43,282 INFO  L93              Difference]: Finished difference Result 3836 states and 4600 transitions.
[2020-11-25 07:33:43,282 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 07:33:43,282 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3836 states and 4600 transitions.
[2020-11-25 07:33:43,290 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 07:33:43,299 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3836 states to 3836 states and 4600 transitions.
[2020-11-25 07:33:43,300 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1180
[2020-11-25 07:33:43,300 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1180
[2020-11-25 07:33:43,300 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3836 states and 4600 transitions.
[2020-11-25 07:33:43,303 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:33:43,303 INFO  L728         BuchiCegarLoop]: Abstraction has 3836 states and 4600 transitions.
[2020-11-25 07:33:43,305 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3836 states and 4600 transitions.
[2020-11-25 07:33:43,323 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3836 to 3830.
[2020-11-25 07:33:43,323 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3830 states.
[2020-11-25 07:33:43,328 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3830 states to 3830 states and 4592 transitions.
[2020-11-25 07:33:43,329 INFO  L751         BuchiCegarLoop]: Abstraction has 3830 states and 4592 transitions.
[2020-11-25 07:33:43,329 INFO  L631         BuchiCegarLoop]: Abstraction has 3830 states and 4592 transitions.
[2020-11-25 07:33:43,329 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 07:33:43,329 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3830 states and 4592 transitions.
[2020-11-25 07:33:43,333 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 07:33:43,333 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:33:43,333 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:33:43,334 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:33:43,334 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND TRUE   choice == 7
[L5765]              gas := gas - 21000;
[L5766]  COND TRUE   gas >= 0
[L5767]              assume amount_s690 >= 0 && amount_s690 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5768]              assume msgvalue_MSG == 0;
[L5769]  CALL        call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1340]              havoc __exception;
[L1341]              revert := false;
[L1342]  COND FALSE  !(__exception)
[L1370]  CALL        call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L3880]  COND TRUE   DType[this] == ULU
[L3881]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3475]              __var_19 := null;
[L3476]  COND FALSE  !(!(account_s411 != null))
[L3480]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3480]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L3485]              _balances_ERC20[this][account_s411] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L3487]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3487]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3488]  COND FALSE  !(revert)
[L3491]              _totalSupply_ERC20[this] := __var_21;
[L3492]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3881]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3882]  COND FALSE  !(revert)
[L1370]  RET         call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1371]              assume !revert && gas >= 0;
[L5769]  RET         call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:33:43,338 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:33:43,338 INFO  L82        PathProgramCache]: Analyzing trace with hash -2012539846, now seen corresponding path program 1 times
[2020-11-25 07:33:43,338 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:33:43,375 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:33:44,248 INFO  L134       CoverageAnalysis]: Checked inductivity of 262 backedges. 4 proven. 11 refuted. 0 times theorem prover too weak. 247 trivial. 0 not checked.
[2020-11-25 07:33:44,248 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:33:44,248 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [48] total 48
[2020-11-25 07:33:44,249 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:33:44,249 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 49 interpolants.
[2020-11-25 07:33:44,249 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=184, Invalid=2168, Unknown=0, NotChecked=0, Total=2352
[2020-11-25 07:33:44,249 INFO  L87              Difference]: Start difference. First operand 3830 states and 4592 transitions. cyclomatic complexity: 792 Second operand 49 states.
[2020-11-25 07:33:51,990 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:33:51,991 INFO  L93              Difference]: Finished difference Result 3879 states and 4779 transitions.
[2020-11-25 07:33:51,991 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 07:33:51,991 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3879 states and 4779 transitions.
[2020-11-25 07:33:52,000 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 07:33:52,010 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3879 states to 3879 states and 4779 transitions.
[2020-11-25 07:33:52,010 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1202
[2020-11-25 07:33:52,011 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1202
[2020-11-25 07:33:52,011 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3879 states and 4779 transitions.
[2020-11-25 07:33:52,013 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:33:52,013 INFO  L728         BuchiCegarLoop]: Abstraction has 3879 states and 4779 transitions.
[2020-11-25 07:33:52,016 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3879 states and 4779 transitions.
[2020-11-25 07:33:52,035 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3879 to 3850.
[2020-11-25 07:33:52,035 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3850 states.
[2020-11-25 07:33:52,041 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3850 states to 3850 states and 4677 transitions.
[2020-11-25 07:33:52,041 INFO  L751         BuchiCegarLoop]: Abstraction has 3850 states and 4677 transitions.
[2020-11-25 07:33:52,042 INFO  L631         BuchiCegarLoop]: Abstraction has 3850 states and 4677 transitions.
[2020-11-25 07:33:52,042 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 07:33:52,042 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3850 states and 4677 transitions.
[2020-11-25 07:33:52,046 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 07:33:52,046 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:33:52,046 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:33:52,047 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:33:52,047 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND TRUE   choice == 7
[L5765]              gas := gas - 21000;
[L5766]  COND TRUE   gas >= 0
[L5767]              assume amount_s690 >= 0 && amount_s690 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5768]              assume msgvalue_MSG == 0;
[L5769]  CALL        call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1340]              havoc __exception;
[L1341]              revert := false;
[L1342]  COND FALSE  !(__exception)
[L1370]  CALL        call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L3880]  COND TRUE   DType[this] == ULU
[L3881]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3475]              __var_19 := null;
[L3476]  COND FALSE  !(!(account_s411 != null))
[L3480]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3480]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L3485]              _balances_ERC20[this][account_s411] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L3487]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3487]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3488]  COND FALSE  !(revert)
[L3491]              _totalSupply_ERC20[this] := __var_21;
[L3492]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3881]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3882]  COND FALSE  !(revert)
[L1370]  RET         call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1371]              assume !revert && gas >= 0;
[L5769]  RET         call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND FALSE  !(DType[this] == ULU)
[L3112]  COND TRUE   DType[this] == ERC20
[L3113]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3113]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3114]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND TRUE   choice == 23
[L5663]              gas := gas - 21000;
[L5664]  COND FALSE  !(gas >= 0)
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:33:52,050 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:33:52,050 INFO  L82        PathProgramCache]: Analyzing trace with hash -326865248, now seen corresponding path program 1 times
[2020-11-25 07:33:52,051 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:33:52,062 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:33:52,143 INFO  L134       CoverageAnalysis]: Checked inductivity of 274 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 269 trivial. 0 not checked.
[2020-11-25 07:33:52,143 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:33:52,144 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 07:33:52,144 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:33:52,144 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 07:33:52,144 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 07:33:52,144 INFO  L87              Difference]: Start difference. First operand 3850 states and 4677 transitions. cyclomatic complexity: 867 Second operand 3 states.
[2020-11-25 07:33:52,167 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:33:52,167 INFO  L93              Difference]: Finished difference Result 3856 states and 4677 transitions.
[2020-11-25 07:33:52,167 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 07:33:52,167 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3856 states and 4677 transitions.
[2020-11-25 07:33:52,176 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 07:33:52,185 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3856 states to 3856 states and 4677 transitions.
[2020-11-25 07:33:52,185 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1180
[2020-11-25 07:33:52,185 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1180
[2020-11-25 07:33:52,185 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3856 states and 4677 transitions.
[2020-11-25 07:33:52,188 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:33:52,188 INFO  L728         BuchiCegarLoop]: Abstraction has 3856 states and 4677 transitions.
[2020-11-25 07:33:52,190 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3856 states and 4677 transitions.
[2020-11-25 07:33:52,207 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3856 to 3850.
[2020-11-25 07:33:52,207 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3850 states.
[2020-11-25 07:33:52,213 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3850 states to 3850 states and 4671 transitions.
[2020-11-25 07:33:52,213 INFO  L751         BuchiCegarLoop]: Abstraction has 3850 states and 4671 transitions.
[2020-11-25 07:33:52,213 INFO  L631         BuchiCegarLoop]: Abstraction has 3850 states and 4671 transitions.
[2020-11-25 07:33:52,213 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 07:33:52,213 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3850 states and 4671 transitions.
[2020-11-25 07:33:52,217 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 07:33:52,217 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:33:52,217 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:33:52,218 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:33:52,218 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND TRUE   choice == 7
[L5765]              gas := gas - 21000;
[L5766]  COND TRUE   gas >= 0
[L5767]              assume amount_s690 >= 0 && amount_s690 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5768]              assume msgvalue_MSG == 0;
[L5769]  CALL        call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1340]              havoc __exception;
[L1341]              revert := false;
[L1342]  COND FALSE  !(__exception)
[L1370]  CALL        call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L3880]  COND TRUE   DType[this] == ULU
[L3881]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3475]              __var_19 := null;
[L3476]  COND FALSE  !(!(account_s411 != null))
[L3480]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3480]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L3485]              _balances_ERC20[this][account_s411] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L3487]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3487]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3488]  COND FALSE  !(revert)
[L3491]              _totalSupply_ERC20[this] := __var_21;
[L3492]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3881]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3882]  COND FALSE  !(revert)
[L1370]  RET         call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1371]              assume !revert && gas >= 0;
[L5769]  RET         call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND FALSE  !(DType[this] == ULU)
[L3069]  COND TRUE   DType[this] == ERC20
[L3070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3071]  COND FALSE  !(revert)
[L3077]  COND FALSE  !(DType[this] == ULU)
[L3082]  COND TRUE   DType[this] == ERC20
[L3083]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3083]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3084]  COND FALSE  !(revert)
[L3090]  COND FALSE  !(DType[this] == ULU)
[L3095]  COND TRUE   DType[this] == ERC20
[L3096]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3096]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3097]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND FALSE  !(DType[this] == ULU)
[L3112]  COND TRUE   DType[this] == ERC20
[L3113]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3113]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3114]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND TRUE   choice == 7
[L5765]              gas := gas - 21000;
[L5766]  COND TRUE   gas >= 0
[L5767]              assume amount_s690 >= 0 && amount_s690 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5768]              assume msgvalue_MSG == 0;
[L5769]  CALL        call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1340]              havoc __exception;
[L1341]              revert := false;
[L1342]  COND FALSE  !(__exception)
[L1370]  CALL        call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L3880]  COND TRUE   DType[this] == ULU
[L3881]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3475]              __var_19 := null;
[L3476]  COND FALSE  !(!(account_s411 != null))
[L3480]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3480]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L3485]              _balances_ERC20[this][account_s411] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L3487]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3487]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3488]  COND FALSE  !(revert)
[L3491]              _totalSupply_ERC20[this] := __var_21;
[L3492]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3881]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3882]  COND FALSE  !(revert)
[L1370]  RET         call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1371]              assume !revert && gas >= 0;
[L5769]  RET         call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:33:52,222 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:33:52,222 INFO  L82        PathProgramCache]: Analyzing trace with hash -578120988, now seen corresponding path program 1 times
[2020-11-25 07:33:52,222 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:33:52,233 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:33:52,322 INFO  L134       CoverageAnalysis]: Checked inductivity of 274 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 269 trivial. 0 not checked.
[2020-11-25 07:33:52,322 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:33:52,322 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 07:33:52,322 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:33:52,322 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 07:33:52,322 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 07:33:52,322 INFO  L87              Difference]: Start difference. First operand 3850 states and 4671 transitions. cyclomatic complexity: 861 Second operand 6 states.
[2020-11-25 07:33:52,370 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:33:52,370 INFO  L93              Difference]: Finished difference Result 3870 states and 4692 transitions.
[2020-11-25 07:33:52,371 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 07:33:52,371 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3870 states and 4692 transitions.
[2020-11-25 07:33:52,379 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 07:33:52,389 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3870 states to 3798 states and 4607 transitions.
[2020-11-25 07:33:52,389 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1169
[2020-11-25 07:33:52,389 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1169
[2020-11-25 07:33:52,389 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3798 states and 4607 transitions.
[2020-11-25 07:33:52,392 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:33:52,392 INFO  L728         BuchiCegarLoop]: Abstraction has 3798 states and 4607 transitions.
[2020-11-25 07:33:52,394 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3798 states and 4607 transitions.
[2020-11-25 07:33:52,410 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3798 to 3798.
[2020-11-25 07:33:52,410 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3798 states.
[2020-11-25 07:33:52,416 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3798 states to 3798 states and 4607 transitions.
[2020-11-25 07:33:52,416 INFO  L751         BuchiCegarLoop]: Abstraction has 3798 states and 4607 transitions.
[2020-11-25 07:33:52,416 INFO  L631         BuchiCegarLoop]: Abstraction has 3798 states and 4607 transitions.
[2020-11-25 07:33:52,416 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 07:33:52,416 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3798 states and 4607 transitions.
[2020-11-25 07:33:52,420 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 07:33:52,420 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:33:52,420 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:33:52,421 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:33:52,421 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND FALSE  !(choice == 7)
[L5771]  COND FALSE  !(choice == 6)
[L5777]  COND TRUE   choice == 5
[L5778]              gas := gas - 21000;
[L5779]  COND TRUE   gas >= 0
[L5780]              assume msgvalue_MSG == 0;
[L5781]  CALL        call addMinter~address_ULU(this, msgsender_MSG, msgvalue_MSG, _minter_s735);
[L1470]              havoc __exception;
[L1471]              revert := false;
[L1472]  COND FALSE  !(__exception)
[L1500]  CALL        call addMinter~address_ULU__success(this, msgsender_MSG, msgvalue_MSG, _minter_s735);
[L3923]  COND FALSE  !(!(msgsender_MSG == governance_ULU[this]))
[L3927]  COND FALSE  !(!(now < 1599217200))
[L3931]              minters_ULU[this][_minter_s735] := true;
[L1500]  RET         call addMinter~address_ULU__success(this, msgsender_MSG, msgvalue_MSG, _minter_s735);
[L1501]              assume !revert && gas >= 0;
[L5781]  RET         call addMinter~address_ULU(this, msgsender_MSG, msgvalue_MSG, _minter_s735);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND TRUE   choice == 8
[L5758]              gas := gas - 21000;
[L5759]  COND TRUE   gas >= 0
[L5760]              assume amount_s678 >= 0 && amount_s678 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5761]              assume msgvalue_MSG == 0;
[L5762]  CALL        call mint~address~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L1273]              havoc __exception;
[L1274]              revert := false;
[L1275]  COND FALSE  !(__exception)
[L1303]  CALL        call mint~address~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L3852]  COND FALSE  !(!minters_ULU[this][msgsender_MSG])
[L3856]  COND TRUE   DType[this] == ULU
[L3857]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L3426]              __var_16 := null;
[L3427]  COND FALSE  !(!(account_s366 != null))
[L3431]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3431]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3432]  COND FALSE  !(revert)
[L3435]              _totalSupply_ERC20[this] := __var_17;
[L3436]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3436]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3437]  COND FALSE  !(revert)
[L3440]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L3441]              _balances_ERC20[this][account_s366] := __var_18;
[L3442]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L3443]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3857]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L3858]  COND FALSE  !(revert)
[L1303]  RET         call mint~address~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L1304]              assume !revert && gas >= 0;
[L5762]  RET         call mint~address~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:33:52,424 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:33:52,424 INFO  L82        PathProgramCache]: Analyzing trace with hash 1451155642, now seen corresponding path program 1 times
[2020-11-25 07:33:52,424 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:33:52,453 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:33:53,109 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification. DAG size of input: 89 DAG size of output: 63
[2020-11-25 07:33:53,918 INFO  L134       CoverageAnalysis]: Checked inductivity of 256 backedges. 0 proven. 133 refuted. 0 times theorem prover too weak. 123 trivial. 0 not checked.
[2020-11-25 07:33:53,918 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:33:53,918 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [47] total 47
[2020-11-25 07:33:53,919 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:33:53,919 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 48 interpolants.
[2020-11-25 07:33:53,919 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=165, Invalid=2091, Unknown=0, NotChecked=0, Total=2256
[2020-11-25 07:33:53,919 INFO  L87              Difference]: Start difference. First operand 3798 states and 4607 transitions. cyclomatic complexity: 849 Second operand 48 states.
[2020-11-25 07:34:10,007 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:34:10,007 INFO  L93              Difference]: Finished difference Result 4056 states and 5038 transitions.
[2020-11-25 07:34:10,007 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 51 states. 
[2020-11-25 07:34:10,007 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4056 states and 5038 transitions.
[2020-11-25 07:34:10,017 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 18
[2020-11-25 07:34:10,028 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4056 states to 4056 states and 5038 transitions.
[2020-11-25 07:34:10,028 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1311
[2020-11-25 07:34:10,028 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1311
[2020-11-25 07:34:10,028 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4056 states and 5038 transitions.
[2020-11-25 07:34:10,031 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:34:10,031 INFO  L728         BuchiCegarLoop]: Abstraction has 4056 states and 5038 transitions.
[2020-11-25 07:34:10,033 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4056 states and 5038 transitions.
[2020-11-25 07:34:10,049 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4056 to 4012.
[2020-11-25 07:34:10,050 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4012 states.
[2020-11-25 07:34:10,055 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4012 states to 4012 states and 4917 transitions.
[2020-11-25 07:34:10,056 INFO  L751         BuchiCegarLoop]: Abstraction has 4012 states and 4917 transitions.
[2020-11-25 07:34:10,056 INFO  L631         BuchiCegarLoop]: Abstraction has 4012 states and 4917 transitions.
[2020-11-25 07:34:10,056 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 07:34:10,056 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4012 states and 4917 transitions.
[2020-11-25 07:34:10,060 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 18
[2020-11-25 07:34:10,060 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:34:10,060 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:34:10,061 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:34:10,061 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND TRUE   choice == 7
[L5765]              gas := gas - 21000;
[L5766]  COND TRUE   gas >= 0
[L5767]              assume amount_s690 >= 0 && amount_s690 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5768]              assume msgvalue_MSG == 0;
[L5769]  CALL        call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1340]              havoc __exception;
[L1341]              revert := false;
[L1342]  COND FALSE  !(__exception)
[L1370]  CALL        call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L3880]  COND TRUE   DType[this] == ULU
[L3881]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3475]              __var_19 := null;
[L3476]  COND FALSE  !(!(account_s411 != null))
[L3480]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3480]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L3485]              _balances_ERC20[this][account_s411] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L3487]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3487]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3488]  COND FALSE  !(revert)
[L3491]              _totalSupply_ERC20[this] := __var_21;
[L3492]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3881]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3882]  COND FALSE  !(revert)
[L1370]  RET         call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1371]              assume !revert && gas >= 0;
[L5769]  RET         call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND TRUE   choice == 23
[L5663]              gas := gas - 21000;
[L5664]  COND FALSE  !(gas >= 0)
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:34:10,064 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:34:10,064 INFO  L82        PathProgramCache]: Analyzing trace with hash 1162958220, now seen corresponding path program 1 times
[2020-11-25 07:34:10,065 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:34:10,093 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:34:10,830 WARN  L188               SmtUtils]: Spent 148.00 ms on a formula simplification. DAG size of input: 129 DAG size of output: 54
[2020-11-25 07:34:11,144 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification. DAG size of input: 132 DAG size of output: 56
[2020-11-25 07:34:11,384 WARN  L188               SmtUtils]: Spent 121.00 ms on a formula simplification. DAG size of input: 123 DAG size of output: 52
[2020-11-25 07:34:11,696 WARN  L188               SmtUtils]: Spent 210.00 ms on a formula simplification. DAG size of input: 120 DAG size of output: 49
[2020-11-25 07:34:11,866 WARN  L188               SmtUtils]: Spent 124.00 ms on a formula simplification. DAG size of input: 119 DAG size of output: 52
[2020-11-25 07:34:14,228 INFO  L134       CoverageAnalysis]: Checked inductivity of 274 backedges. 8 proven. 149 refuted. 0 times theorem prover too weak. 117 trivial. 0 not checked.
[2020-11-25 07:34:14,229 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:34:14,229 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [54] total 54
[2020-11-25 07:34:14,229 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:34:14,229 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 55 interpolants.
[2020-11-25 07:34:14,230 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=195, Invalid=2775, Unknown=0, NotChecked=0, Total=2970
[2020-11-25 07:34:14,230 INFO  L87              Difference]: Start difference. First operand 4012 states and 4917 transitions. cyclomatic complexity: 948 Second operand 55 states.
[2020-11-25 07:34:29,898 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:34:29,898 INFO  L93              Difference]: Finished difference Result 4624 states and 6150 transitions.
[2020-11-25 07:34:29,898 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 49 states. 
[2020-11-25 07:34:29,898 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4624 states and 6150 transitions.
[2020-11-25 07:34:29,912 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 26
[2020-11-25 07:34:29,928 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4624 states to 4624 states and 6150 transitions.
[2020-11-25 07:34:29,928 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1588
[2020-11-25 07:34:29,929 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1588
[2020-11-25 07:34:29,929 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4624 states and 6150 transitions.
[2020-11-25 07:34:29,933 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:34:29,933 INFO  L728         BuchiCegarLoop]: Abstraction has 4624 states and 6150 transitions.
[2020-11-25 07:34:29,936 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4624 states and 6150 transitions.
[2020-11-25 07:34:29,957 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4624 to 4284.
[2020-11-25 07:34:29,957 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4284 states.
[2020-11-25 07:34:29,965 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4284 states to 4284 states and 5473 transitions.
[2020-11-25 07:34:29,966 INFO  L751         BuchiCegarLoop]: Abstraction has 4284 states and 5473 transitions.
[2020-11-25 07:34:29,966 INFO  L631         BuchiCegarLoop]: Abstraction has 4284 states and 5473 transitions.
[2020-11-25 07:34:29,966 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 07:34:29,966 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4284 states and 5473 transitions.
[2020-11-25 07:34:29,970 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 07:34:29,970 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:34:29,970 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:34:29,971 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:34:29,972 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND FALSE  !(DType[this] == ULU)
[L2891]  COND TRUE   DType[this] == ERC20
[L2892]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2892]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2893]  COND FALSE  !(revert)
[L2899]  COND FALSE  !(DType[this] == ULU)
[L2904]  COND TRUE   DType[this] == ERC20
[L2905]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2905]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2906]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND TRUE   choice == 7
[L5765]              gas := gas - 21000;
[L5766]  COND TRUE   gas >= 0
[L5767]              assume amount_s690 >= 0 && amount_s690 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5768]              assume msgvalue_MSG == 0;
[L5769]  CALL        call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1340]              havoc __exception;
[L1341]              revert := false;
[L1342]  COND FALSE  !(__exception)
[L1370]  CALL        call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L3880]  COND TRUE   DType[this] == ULU
[L3881]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3475]              __var_19 := null;
[L3476]  COND FALSE  !(!(account_s411 != null))
[L3480]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3480]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L3485]              _balances_ERC20[this][account_s411] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L3487]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3487]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3488]  COND FALSE  !(revert)
[L3491]              _totalSupply_ERC20[this] := __var_21;
[L3492]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3881]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3882]  COND FALSE  !(revert)
[L1370]  RET         call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1371]              assume !revert && gas >= 0;
[L5769]  RET         call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:34:29,975 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:34:29,975 INFO  L82        PathProgramCache]: Analyzing trace with hash -1651315431, now seen corresponding path program 1 times
[2020-11-25 07:34:29,976 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:34:29,987 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:34:30,074 INFO  L134       CoverageAnalysis]: Checked inductivity of 297 backedges. 2 proven. 2 refuted. 0 times theorem prover too weak. 293 trivial. 0 not checked.
[2020-11-25 07:34:30,074 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:34:30,074 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-25 07:34:30,075 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:34:30,075 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 07:34:30,075 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 07:34:30,075 INFO  L87              Difference]: Start difference. First operand 4284 states and 5473 transitions. cyclomatic complexity: 1256 Second operand 6 states.
[2020-11-25 07:34:30,127 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:34:30,127 INFO  L93              Difference]: Finished difference Result 4360 states and 5551 transitions.
[2020-11-25 07:34:30,127 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 07:34:30,127 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4360 states and 5551 transitions.
[2020-11-25 07:34:30,139 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 07:34:30,152 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4360 states to 4262 states and 5443 transitions.
[2020-11-25 07:34:30,152 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1378
[2020-11-25 07:34:30,153 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1378
[2020-11-25 07:34:30,153 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4262 states and 5443 transitions.
[2020-11-25 07:34:30,157 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:34:30,157 INFO  L728         BuchiCegarLoop]: Abstraction has 4262 states and 5443 transitions.
[2020-11-25 07:34:30,159 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4262 states and 5443 transitions.
[2020-11-25 07:34:30,178 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4262 to 4262.
[2020-11-25 07:34:30,178 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4262 states.
[2020-11-25 07:34:30,186 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4262 states to 4262 states and 5443 transitions.
[2020-11-25 07:34:30,186 INFO  L751         BuchiCegarLoop]: Abstraction has 4262 states and 5443 transitions.
[2020-11-25 07:34:30,186 INFO  L631         BuchiCegarLoop]: Abstraction has 4262 states and 5443 transitions.
[2020-11-25 07:34:30,186 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 07:34:30,186 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4262 states and 5443 transitions.
[2020-11-25 07:34:30,191 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 07:34:30,191 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:34:30,191 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:34:30,192 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:34:30,192 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:34:30,195 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:34:30,196 INFO  L82        PathProgramCache]: Analyzing trace with hash -787063217, now seen corresponding path program 1 times
[2020-11-25 07:34:30,196 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:34:30,230 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:34:31,460 INFO  L134       CoverageAnalysis]: Checked inductivity of 297 backedges. 9 proven. 166 refuted. 0 times theorem prover too weak. 122 trivial. 0 not checked.
[2020-11-25 07:34:31,461 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:34:31,461 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [37] total 37
[2020-11-25 07:34:31,461 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:34:31,461 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-11-25 07:34:31,462 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=102, Invalid=1230, Unknown=0, NotChecked=0, Total=1332
[2020-11-25 07:34:31,462 INFO  L87              Difference]: Start difference. First operand 4262 states and 5443 transitions. cyclomatic complexity: 1248 Second operand 37 states.
[2020-11-25 07:34:41,206 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:34:41,206 INFO  L93              Difference]: Finished difference Result 4309 states and 5591 transitions.
[2020-11-25 07:34:41,206 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 07:34:41,206 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4309 states and 5591 transitions.
[2020-11-25 07:34:41,218 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 07:34:41,233 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4309 states to 4309 states and 5591 transitions.
[2020-11-25 07:34:41,233 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1420
[2020-11-25 07:34:41,233 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1420
[2020-11-25 07:34:41,233 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4309 states and 5591 transitions.
[2020-11-25 07:34:41,237 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:34:41,237 INFO  L728         BuchiCegarLoop]: Abstraction has 4309 states and 5591 transitions.
[2020-11-25 07:34:41,239 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4309 states and 5591 transitions.
[2020-11-25 07:34:41,258 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4309 to 4258.
[2020-11-25 07:34:41,259 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4258 states.
[2020-11-25 07:34:41,267 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4258 states to 4258 states and 5420 transitions.
[2020-11-25 07:34:41,267 INFO  L751         BuchiCegarLoop]: Abstraction has 4258 states and 5420 transitions.
[2020-11-25 07:34:41,267 INFO  L631         BuchiCegarLoop]: Abstraction has 4258 states and 5420 transitions.
[2020-11-25 07:34:41,267 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 07:34:41,267 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4258 states and 5420 transitions.
[2020-11-25 07:34:41,272 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 07:34:41,272 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:34:41,272 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:34:41,273 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:34:41,273 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND TRUE   choice == 7
[L5765]              gas := gas - 21000;
[L5766]  COND TRUE   gas >= 0
[L5767]              assume amount_s690 >= 0 && amount_s690 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5768]              assume msgvalue_MSG == 0;
[L5769]  CALL        call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1340]              havoc __exception;
[L1341]              revert := false;
[L1342]  COND FALSE  !(__exception)
[L1370]  CALL        call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L3880]  COND TRUE   DType[this] == ULU
[L3881]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3475]              __var_19 := null;
[L3476]  COND FALSE  !(!(account_s411 != null))
[L3480]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3480]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L3485]              _balances_ERC20[this][account_s411] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L3487]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3487]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3488]  COND FALSE  !(revert)
[L3491]              _totalSupply_ERC20[this] := __var_21;
[L3492]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3881]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3882]  COND FALSE  !(revert)
[L1370]  RET         call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1371]              assume !revert && gas >= 0;
[L5769]  RET         call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:34:41,276 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:34:41,276 INFO  L82        PathProgramCache]: Analyzing trace with hash 1337246557, now seen corresponding path program 2 times
[2020-11-25 07:34:41,277 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:34:41,315 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:34:41,897 INFO  L134       CoverageAnalysis]: Checked inductivity of 297 backedges. 12 proven. 164 refuted. 0 times theorem prover too weak. 121 trivial. 0 not checked.
[2020-11-25 07:34:41,898 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:34:41,898 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 07:34:41,898 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:34:41,898 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 07:34:41,898 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=114, Invalid=1446, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 07:34:41,898 INFO  L87              Difference]: Start difference. First operand 4258 states and 5420 transitions. cyclomatic complexity: 1227 Second operand 40 states.
[2020-11-25 07:34:49,260 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:34:49,260 INFO  L93              Difference]: Finished difference Result 4310 states and 5608 transitions.
[2020-11-25 07:34:49,260 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 07:34:49,261 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4310 states and 5608 transitions.
[2020-11-25 07:34:49,273 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 07:34:49,286 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4310 states to 4310 states and 5608 transitions.
[2020-11-25 07:34:49,286 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1422
[2020-11-25 07:34:49,287 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1422
[2020-11-25 07:34:49,287 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4310 states and 5608 transitions.
[2020-11-25 07:34:49,291 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:34:49,291 INFO  L728         BuchiCegarLoop]: Abstraction has 4310 states and 5608 transitions.
[2020-11-25 07:34:49,294 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4310 states and 5608 transitions.
[2020-11-25 07:34:49,313 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4310 to 4262.
[2020-11-25 07:34:49,313 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4262 states.
[2020-11-25 07:34:49,321 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4262 states to 4262 states and 5435 transitions.
[2020-11-25 07:34:49,321 INFO  L751         BuchiCegarLoop]: Abstraction has 4262 states and 5435 transitions.
[2020-11-25 07:34:49,321 INFO  L631         BuchiCegarLoop]: Abstraction has 4262 states and 5435 transitions.
[2020-11-25 07:34:49,321 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 07:34:49,321 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4262 states and 5435 transitions.
[2020-11-25 07:34:49,325 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 07:34:49,325 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:34:49,325 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:34:49,326 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:34:49,326 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND TRUE   choice == 7
[L5765]              gas := gas - 21000;
[L5766]  COND TRUE   gas >= 0
[L5767]              assume amount_s690 >= 0 && amount_s690 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5768]              assume msgvalue_MSG == 0;
[L5769]  CALL        call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1340]              havoc __exception;
[L1341]              revert := false;
[L1342]  COND FALSE  !(__exception)
[L1370]  CALL        call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L3880]  COND TRUE   DType[this] == ULU
[L3881]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3475]              __var_19 := null;
[L3476]  COND FALSE  !(!(account_s411 != null))
[L3480]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3480]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L3485]              _balances_ERC20[this][account_s411] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L3487]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3487]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3488]  COND FALSE  !(revert)
[L3491]              _totalSupply_ERC20[this] := __var_21;
[L3492]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3881]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3882]  COND FALSE  !(revert)
[L1370]  RET         call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1371]              assume !revert && gas >= 0;
[L5769]  RET         call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:34:49,330 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:34:49,330 INFO  L82        PathProgramCache]: Analyzing trace with hash -959708660, now seen corresponding path program 2 times
[2020-11-25 07:34:49,330 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:34:49,377 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:34:50,082 INFO  L134       CoverageAnalysis]: Checked inductivity of 274 backedges. 9 proven. 12 refuted. 0 times theorem prover too weak. 253 trivial. 0 not checked.
[2020-11-25 07:34:50,083 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:34:50,083 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-11-25 07:34:50,083 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:34:50,083 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-11-25 07:34:50,083 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=183, Invalid=1979, Unknown=0, NotChecked=0, Total=2162
[2020-11-25 07:34:50,084 INFO  L87              Difference]: Start difference. First operand 4262 states and 5435 transitions. cyclomatic complexity: 1240 Second operand 47 states.
[2020-11-25 07:34:57,967 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:34:57,967 INFO  L93              Difference]: Finished difference Result 4564 states and 6073 transitions.
[2020-11-25 07:34:57,967 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 07:34:57,967 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4564 states and 6073 transitions.
[2020-11-25 07:34:57,981 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 07:34:58,000 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4564 states to 4564 states and 6071 transitions.
[2020-11-25 07:34:58,000 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1426
[2020-11-25 07:34:58,001 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1426
[2020-11-25 07:34:58,001 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4564 states and 6071 transitions.
[2020-11-25 07:34:58,005 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:34:58,005 INFO  L728         BuchiCegarLoop]: Abstraction has 4564 states and 6071 transitions.
[2020-11-25 07:34:58,008 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4564 states and 6071 transitions.
[2020-11-25 07:34:58,030 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4564 to 4487.
[2020-11-25 07:34:58,030 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4487 states.
[2020-11-25 07:34:58,039 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4487 states to 4487 states and 5761 transitions.
[2020-11-25 07:34:58,039 INFO  L751         BuchiCegarLoop]: Abstraction has 4487 states and 5761 transitions.
[2020-11-25 07:34:58,039 INFO  L631         BuchiCegarLoop]: Abstraction has 4487 states and 5761 transitions.
[2020-11-25 07:34:58,039 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 07:34:58,039 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4487 states and 5761 transitions.
[2020-11-25 07:34:58,044 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 07:34:58,044 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:34:58,045 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:34:58,046 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:34:58,046 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND TRUE   choice == 7
[L5765]              gas := gas - 21000;
[L5766]  COND TRUE   gas >= 0
[L5767]              assume amount_s690 >= 0 && amount_s690 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5768]              assume msgvalue_MSG == 0;
[L5769]  CALL        call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1340]              havoc __exception;
[L1341]              revert := false;
[L1342]  COND FALSE  !(__exception)
[L1370]  CALL        call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L3880]  COND TRUE   DType[this] == ULU
[L3881]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3475]              __var_19 := null;
[L3476]  COND FALSE  !(!(account_s411 != null))
[L3480]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3480]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 147195951);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L3485]              _balances_ERC20[this][account_s411] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L3487]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3487]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 26060051);
[L3488]  COND FALSE  !(revert)
[L3491]              _totalSupply_ERC20[this] := __var_21;
[L3492]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3881]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s690);
[L3882]  COND FALSE  !(revert)
[L1370]  RET         call burn~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L1371]              assume !revert && gas >= 0;
[L5769]  RET         call burn~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, amount_s690);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND TRUE   choice == 23
[L5663]              gas := gas - 21000;
[L5664]  COND FALSE  !(gas >= 0)
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:34:58,050 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:34:58,050 INFO  L82        PathProgramCache]: Analyzing trace with hash 202681667, now seen corresponding path program 1 times
[2020-11-25 07:34:58,050 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:34:58,123 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:34:59,213 INFO  L134       CoverageAnalysis]: Checked inductivity of 536 backedges. 14 proven. 321 refuted. 0 times theorem prover too weak. 201 trivial. 0 not checked.
[2020-11-25 07:34:59,213 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:34:59,213 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [41] total 41
[2020-11-25 07:34:59,214 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:34:59,214 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 07:34:59,215 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=110, Invalid=1530, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 07:34:59,215 INFO  L87              Difference]: Start difference. First operand 4487 states and 5761 transitions. cyclomatic complexity: 1347 Second operand 41 states.
[2020-11-25 07:35:08,348 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:35:08,348 INFO  L93              Difference]: Finished difference Result 4543 states and 5959 transitions.
[2020-11-25 07:35:08,348 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 07:35:08,348 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4543 states and 5959 transitions.
[2020-11-25 07:35:08,362 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 07:35:08,378 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4543 states to 4543 states and 5959 transitions.
[2020-11-25 07:35:08,379 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1422
[2020-11-25 07:35:08,379 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1422
[2020-11-25 07:35:08,379 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4543 states and 5959 transitions.
[2020-11-25 07:35:08,383 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:35:08,383 INFO  L728         BuchiCegarLoop]: Abstraction has 4543 states and 5959 transitions.
[2020-11-25 07:35:08,385 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4543 states and 5959 transitions.
[2020-11-25 07:35:08,406 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4543 to 4491.
[2020-11-25 07:35:08,406 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4491 states.
[2020-11-25 07:35:08,415 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4491 states to 4491 states and 5768 transitions.
[2020-11-25 07:35:08,416 INFO  L751         BuchiCegarLoop]: Abstraction has 4491 states and 5768 transitions.
[2020-11-25 07:35:08,416 INFO  L631         BuchiCegarLoop]: Abstraction has 4491 states and 5768 transitions.
[2020-11-25 07:35:08,416 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 07:35:08,416 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4491 states and 5768 transitions.
[2020-11-25 07:35:08,421 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 07:35:08,421 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:35:08,421 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:35:08,422 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:35:08,422 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5815]              assume null == 0;
[L5816]  CALL        call this := FreshRefGenerator__success();
[L2686]              havoc newRef;
[L2687]              assume Alloc[newRef] == false;
[L2688]              Alloc[newRef] := true;
[L2689]              assume newRef != null;
[L5816]  RET         call this := FreshRefGenerator__success();
[L5817]              assume now >= 0;
[L5818]              assume DType[this] == ULU;
[L5819]              assume msgvalue_MSG == 0;
[L5820]              gas := gas - 53000;
[L5821]  CALL        call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L1206]              havoc __exception;
[L1207]              revert := false;
[L1208]  COND FALSE  !(__exception)
[L1236]  CALL        call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L3812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L3812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2750]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2751]  COND FALSE  !(revert)
[L2812]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]  COND FALSE  !(revert)
[L2816]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L2816]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2784]              assume msgsender_MSG != null;
[L2785]              Balance[this] := 0;
[L2786]              _balances_ERC20[this] := zeroRefintArr();
[L2787]              sum__balances0[this] := 0;
[L2788]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2789]              sum__allowances1[this] := 0;
[L2790]              _totalSupply_ERC20[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3820]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3576]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2718]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2703]              assume msgsender_MSG != null;
[L2704]              Balance[this] := 0;
[L2718]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2719]  COND FALSE  !(revert)
[L3576]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3577]  COND FALSE  !(revert)
[L3580]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3551]              assume msgsender_MSG != null;
[L3552]              Balance[this] := 0;
[L3553]              _name_ERC20Detailed[this] := 26060051;
[L3554]              _symbol_ERC20Detailed[this] := 26060051;
[L3555]              _decimals_ERC20Detailed[this] := 0;
[L3557]              _name_ERC20Detailed[this] := name_s484;
[L3558]              _symbol_ERC20Detailed[this] := symbol_s484;
[L3559]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3580]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3581]  COND FALSE  !(revert)
[L3824]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1013406997, -534574971, 18);
[L3825]  COND FALSE  !(revert)
[L3828]  CALL        call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3775]              assume msgsender_MSG != null;
[L3776]              Balance[this] := 0;
[L3777]              governance_ULU[this] := null;
[L3778]              minters_ULU[this] := zeroRefboolArr();
[L3779]              GRACE_PERIOD_ULU[this] := 2;
[L3780]              pendingAddMinters_ULU[this] := zeroRefintArr();
[L3781]              sum_pendingAddMinters3[this] := 0;
[L3783]              governance_ULU[this] := msgsender_MSG;
[L3828]  RET         call ULU_ULU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3829]  COND FALSE  !(revert)
[L1236]  RET         call ULU_ULU__success(this, msgsender_MSG, msgvalue_MSG);
[L1237]              assume !revert && gas >= 0;
[L5821]  RET         call ULU_ULU(this, msgsender_MSG, msgvalue_MSG);
[L5822]              assume !revert && gas >= 0;
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND FALSE  !(choice == 8)
[L5764]  COND FALSE  !(choice == 7)
[L5771]  COND FALSE  !(choice == 6)
[L5777]  COND TRUE   choice == 5
[L5778]              gas := gas - 21000;
[L5779]  COND TRUE   gas >= 0
[L5780]              assume msgvalue_MSG == 0;
[L5781]  CALL        call addMinter~address_ULU(this, msgsender_MSG, msgvalue_MSG, _minter_s735);
[L1470]              havoc __exception;
[L1471]              revert := false;
[L1472]  COND FALSE  !(__exception)
[L1500]  CALL        call addMinter~address_ULU__success(this, msgsender_MSG, msgvalue_MSG, _minter_s735);
[L3923]  COND FALSE  !(!(msgsender_MSG == governance_ULU[this]))
[L3927]  COND FALSE  !(!(now < 1599217200))
[L3931]              minters_ULU[this][_minter_s735] := true;
[L1500]  RET         call addMinter~address_ULU__success(this, msgsender_MSG, msgvalue_MSG, _minter_s735);
[L1501]              assume !revert && gas >= 0;
[L5781]  RET         call addMinter~address_ULU(this, msgsender_MSG, msgvalue_MSG, _minter_s735);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND TRUE   choice == 8
[L5758]              gas := gas - 21000;
[L5759]  COND TRUE   gas >= 0
[L5760]              assume amount_s678 >= 0 && amount_s678 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5761]              assume msgvalue_MSG == 0;
[L5762]  CALL        call mint~address~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L1273]              havoc __exception;
[L1274]              revert := false;
[L1275]  COND FALSE  !(__exception)
[L1303]  CALL        call mint~address~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L3852]  COND FALSE  !(!minters_ULU[this][msgsender_MSG])
[L3856]  COND TRUE   DType[this] == ULU
[L3857]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L3426]              __var_16 := null;
[L3427]  COND FALSE  !(!(account_s366 != null))
[L3431]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3431]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3432]  COND FALSE  !(revert)
[L3435]              _totalSupply_ERC20[this] := __var_17;
[L3436]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3436]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3437]  COND FALSE  !(revert)
[L3440]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L3441]              _balances_ERC20[this][account_s366] := __var_18;
[L3442]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L3443]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3857]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L3858]  COND FALSE  !(revert)
[L1303]  RET         call mint~address~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L1304]              assume !revert && gas >= 0;
[L5762]  RET         call mint~address~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND FALSE  !(choice == 18)
[L5701]  COND FALSE  !(choice == 17)
[L5708]  COND FALSE  !(choice == 16)
[L5715]  COND FALSE  !(choice == 15)
[L5721]  COND FALSE  !(choice == 14)
[L5727]  COND FALSE  !(choice == 13)
[L5733]  COND FALSE  !(choice == 12)
[L5739]  COND FALSE  !(choice == 11)
[L5745]  COND FALSE  !(choice == 10)
[L5751]  COND FALSE  !(choice == 9)
[L5757]  COND TRUE   choice == 8
[L5758]              gas := gas - 21000;
[L5759]  COND TRUE   gas >= 0
[L5760]              assume amount_s678 >= 0 && amount_s678 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5761]              assume msgvalue_MSG == 0;
[L5762]  CALL        call mint~address~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L1273]              havoc __exception;
[L1274]              revert := false;
[L1275]  COND FALSE  !(__exception)
[L1303]  CALL        call mint~address~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L3852]  COND FALSE  !(!minters_ULU[this][msgsender_MSG])
[L3856]  COND TRUE   DType[this] == ULU
[L3857]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L3426]              __var_16 := null;
[L3427]  COND FALSE  !(!(account_s366 != null))
[L3431]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3431]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3432]  COND FALSE  !(revert)
[L3435]              _totalSupply_ERC20[this] := __var_17;
[L3436]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3436]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3437]  COND FALSE  !(revert)
[L3440]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L3441]              _balances_ERC20[this][account_s366] := __var_18;
[L3442]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L3443]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3857]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L3858]  COND FALSE  !(revert)
[L1303]  RET         call mint~address~uint256_ULU__success(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L1304]              assume !revert && gas >= 0;
[L5762]  RET         call mint~address~uint256_ULU(this, msgsender_MSG, msgvalue_MSG, account_s678, amount_s678);
[L5825]  RET         call CorralChoice_ULU(this);
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND TRUE   choice == 21
[L5675]              gas := gas - 21000;
[L5676]  COND TRUE   gas >= 0
[L5677]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5678]              assume msgvalue_MSG == 0;
[L5679]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L456]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2886]  COND TRUE   DType[this] == ULU
[L2887]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L2887]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2888]  COND FALSE  !(revert)
[L2899]  COND TRUE   DType[this] == ULU
[L2900]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2900]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2901]  COND FALSE  !(revert)
[L2912]              __ret_0_ := true;
[L456]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L457]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_ULU[this] == old(governance_ULU[this])) && minters_ULU[this] == old(minters_ULU[this])) && pendingAddMinters_ULU[this] == old(pendingAddMinters_ULU[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5679]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5825]  RET         call CorralChoice_ULU(this);

Loop:
[L5825]  CALL        call CorralChoice_ULU(this);
[L5602]              havoc msgsender_MSG;
[L5603]              havoc msgvalue_MSG;
[L5604]              havoc choice;
[L5605]              havoc __ret_0_totalSupply;
[L5606]              havoc account_s121;
[L5607]              havoc __ret_0_balanceOf;
[L5608]              havoc recipient_s140;
[L5609]              havoc amount_s140;
[L5610]              havoc __ret_0_transfer;
[L5611]              havoc owner_s156;
[L5612]              havoc spender_s156;
[L5613]              havoc __ret_0_allowance;
[L5614]              havoc spender_s175;
[L5615]              havoc amount_s175;
[L5616]              havoc __ret_0_approve;
[L5617]              havoc sender_s211;
[L5618]              havoc recipient_s211;
[L5619]              havoc amount_s211;
[L5620]              havoc __ret_0_transferFrom;
[L5621]              havoc spender_s238;
[L5622]              havoc addedValue_s238;
[L5623]              havoc __ret_0_increaseAllowance;
[L5624]              havoc spender_s266;
[L5625]              havoc subtractedValue_s266;
[L5626]              havoc __ret_0_decreaseAllowance;
[L5627]              havoc name_s484;
[L5628]              havoc symbol_s484;
[L5629]              havoc decimals_s484;
[L5630]              havoc __ret_0_name;
[L5631]              havoc __ret_0_symbol;
[L5632]              havoc __ret_0_decimals;
[L5633]              havoc __ret_0_governance;
[L5634]              havoc arg841_s0;
[L5635]              havoc __ret_0_minters;
[L5636]              havoc __ret_0_GRACE_PERIOD;
[L5637]              havoc arg842_s0;
[L5638]              havoc __ret_0_pendingAddMinters;
[L5639]              havoc account_s678;
[L5640]              havoc amount_s678;
[L5641]              havoc amount_s690;
[L5642]              havoc _governance_s708;
[L5643]              havoc _minter_s735;
[L5644]              havoc _minter_s756;
[L5645]              havoc _minter_s776;
[L5646]              havoc _minter_s818;
[L5647]              havoc _minter_s838;
[L5648]              havoc tmpNow;
[L5649]              havoc gas;
[L5650]              assume gas > 4000000 && gas <= 8000000;
[L5651]              tmpNow := now;
[L5652]              havoc now;
[L5653]              assume now > tmpNow;
[L5654]              assume msgsender_MSG != null;
[L5655]              assume DType[msgsender_MSG] != IERC20;
[L5656]              assume DType[msgsender_MSG] != Context;
[L5657]              assume DType[msgsender_MSG] != ERC20;
[L5658]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5659]              assume DType[msgsender_MSG] != SafeMath;
[L5660]              assume DType[msgsender_MSG] != ULU;
[L5661]              Alloc[msgsender_MSG] := true;
[L5662]  COND FALSE  !(choice == 23)
[L5668]  COND FALSE  !(choice == 22)
[L5674]  COND FALSE  !(choice == 21)
[L5681]  COND FALSE  !(choice == 20)
[L5687]  COND FALSE  !(choice == 19)
[L5694]  COND TRUE   choice == 18
[L5695]              gas := gas - 21000;
[L5696]  COND TRUE   gas >= 0
[L5697]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5698]              assume msgvalue_MSG == 0;
[L5699]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L624]               havoc __exception;
[L625]               revert := false;
[L626]   COND FALSE  !(__exception)
[L654]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3064]  COND TRUE   DType[this] == ULU
[L3065]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3370]              __var_12 := null;
[L3371]  COND FALSE  !(!(sender_s323 != null))
[L3375]              __var_13 := null;
[L3376]  COND FALSE  !(!(recipient_s323 != null))
[L3380]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3380]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -185495460);
[L3381]  COND FALSE  !(revert)
[L3384]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L3385]              _balances_ERC20[this][sender_s323] := __var_14;
[L3386]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L3387]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3669]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3670]  COND FALSE  !(!(c_s534 >= a_s534))
[L3674]              __ret_0_ := c_s534;
[L3387]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3388]  COND FALSE  !(revert)
[L3391]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L3392]              _balances_ERC20[this][recipient_s323] := __var_15;
[L3393]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L3394]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3065]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3066]  COND FALSE  !(revert)
[L3077]  COND TRUE   DType[this] == ULU
[L3078]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3078]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3079]  COND FALSE  !(revert)
[L3090]  COND TRUE   DType[this] == ULU
[L3091]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2764]              __ret_0_ := msgsender_MSG;
[L3091]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3092]  COND FALSE  !(revert)
[L3103]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3693]  COND FALSE  !(!(b_s561 <= a_s561))
[L3697]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3698]              __ret_0_ := c_s561;
[L3103]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1700070106);
[L3104]  COND FALSE  !(revert)
[L3107]  COND TRUE   DType[this] == ULU
[L3108]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3518]              __var_22 := null;
[L3519]  COND FALSE  !(!(owner_s453 != null))
[L3523]              __var_23 := null;
[L3524]  COND FALSE  !(!(spender_s453 != null))
[L3528]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L3529]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L3530]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L3531]              assert { :EventEmitted "Approval_ERC20" } true;
[L3108]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3109]  COND FALSE  !(revert)
[L3120]              __ret_0_ := true;
[L654]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L655]               assume !revert && gas >= 0;
[L5699]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5825]  RET         call CorralChoice_ULU(this);

[2020-11-25 07:35:08,425 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:35:08,426 INFO  L82        PathProgramCache]: Analyzing trace with hash -346167738, now seen corresponding path program 2 times
[2020-11-25 07:35:08,426 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:35:08,458 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 07:47:45,010 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 07:47:45,011 INFO  L168              Benchmark]: Toolchain (without parser) took 898532.13 ms. Allocated memory was 1.0 GB in the beginning and 6.6 GB in the end (delta: 5.6 GB). Free memory was 935.2 MB in the beginning and 2.4 GB in the end (delta: -1.5 GB). Peak memory consumption was 6.3 GB. Max. memory is 15.3 GB.
[2020-11-25 07:47:45,011 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 07:47:45,011 INFO  L168              Benchmark]: Boogie Preprocessor took 115.02 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 07:47:45,012 INFO  L168              Benchmark]: UtopiaSpecLang took 67.46 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 07:47:45,012 INFO  L168              Benchmark]: Boogie Printer took 19.90 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 07:47:45,012 INFO  L168              Benchmark]: RCFGBuilder took 840.78 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 763.3 MB in the end (delta: 145.0 MB). Peak memory consumption was 145.0 MB. Max. memory is 15.3 GB.
[2020-11-25 07:47:45,013 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.03 ms. Allocated memory is still 1.0 GB. Free memory was 763.3 MB in the beginning and 754.4 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 07:47:45,013 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1465.52 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 198.2 MB). Free memory was 754.4 MB in the beginning and 791.3 MB in the end (delta: -36.9 MB). Peak memory consumption was 161.3 MB. Max. memory is 15.3 GB.
[2020-11-25 07:47:45,013 INFO  L168              Benchmark]: BlockEncodingV2 took 208.22 ms. Allocated memory is still 1.2 GB. Free memory was 791.3 MB in the beginning and 712.2 MB in the end (delta: 79.1 MB). Peak memory consumption was 79.1 MB. Max. memory is 15.3 GB.
[2020-11-25 07:47:45,014 INFO  L168              Benchmark]: BuchiAutomizer took 895775.13 ms. Allocated memory was 1.2 GB in the beginning and 6.6 GB in the end (delta: 5.4 GB). Free memory was 712.2 MB in the beginning and 2.4 GB in the end (delta: -1.7 GB). Peak memory consumption was 5.9 GB. Max. memory is 15.3 GB.
[2020-11-25 07:47:45,020 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5342 locations, 9464 edges
  - StatisticsResult: Encoded RCFG
    5242 locations, 9187 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 115.02 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 67.46 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 19.90 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 840.78 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 763.3 MB in the end (delta: 145.0 MB). Peak memory consumption was 145.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.03 ms. Allocated memory is still 1.0 GB. Free memory was 763.3 MB in the beginning and 754.4 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1465.52 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 198.2 MB). Free memory was 754.4 MB in the beginning and 791.3 MB in the end (delta: -36.9 MB). Peak memory consumption was 161.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 208.22 ms. Allocated memory is still 1.2 GB. Free memory was 791.3 MB in the beginning and 712.2 MB in the end (delta: 79.1 MB). Peak memory consumption was 79.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 895775.13 ms. Allocated memory was 1.2 GB in the beginning and 6.6 GB in the end (delta: 5.4 GB). Free memory was 712.2 MB in the beginning and 2.4 GB in the end (delta: -1.7 GB). Peak memory consumption was 5.9 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2186 locations, 2926 edges
  - StatisticsResult: BuchiProgram size
    5342 locations, 9464 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
