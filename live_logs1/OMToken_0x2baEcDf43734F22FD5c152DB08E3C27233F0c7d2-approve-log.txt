This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:29:21,122 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:29:21,124 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:29:21,136 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:29:21,136 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:29:21,138 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:29:21,139 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:29:21,141 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:29:21,142 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:29:21,143 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:29:21,144 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:29:21,144 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:29:21,145 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:29:21,146 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:29:21,147 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:29:21,147 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:29:21,148 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:29:21,150 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:29:21,152 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:29:21,153 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:29:21,154 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:29:21,155 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:29:21,157 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:29:21,157 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:29:21,157 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:29:21,158 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:29:21,158 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:29:21,159 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:29:21,159 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:29:21,159 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:29:21,160 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:29:21,160 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:29:21,161 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:29:21,162 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:29:21,162 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:29:21,163 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:29:21,163 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:29:21,163 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:29:21,163 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:29:21,164 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:29:21,165 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:29:21,165 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:29:21,173 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:29:21,173 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:29:21,174 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:29:21,174 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:29:21,174 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:29:21,174 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:29:21,175 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:29:21,175 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:29:21,175 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:29:21,175 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:29:21,175 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:29:21,175 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:29:21,175 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:29:21,175 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:29:21,175 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:29:21,176 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:29:21,176 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:29:21,176 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:29:21,176 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:29:21,176 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:29:21,176 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:29:21,176 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:29:21,176 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:29:21,176 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:29:21,176 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:29:21,177 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:29:21,199 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:29:21,212 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:29:21,215 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:29:21,217 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:29:21,217 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:29:21,218 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl
[2020-11-25 02:29:21,219 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl'
[2020-11-25 02:29:21,340 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:29:21,341 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:29:21,341 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:29:21,341 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:29:21,342 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:29:21,358 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:21" (1/1) ...
[2020-11-25 02:29:21,360 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:21" (1/1) ...
[2020-11-25 02:29:21,407 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:21" (1/1) ...
[2020-11-25 02:29:21,408 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:21" (1/1) ...
[2020-11-25 02:29:21,439 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:21" (1/1) ...
[2020-11-25 02:29:21,457 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:21" (1/1) ...
[2020-11-25 02:29:21,472 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:21" (1/1) ...
[2020-11-25 02:29:21,497 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:29:21,498 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:29:21,498 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:29:21,500 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:29:21,504 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:21" (1/1) ...
[2020-11-25 02:29:21,527 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20Pausable.approve(spender, value), return == true && _allowed_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:29:21,533 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20Pausable.approve(spender, value), return == true && _allowed_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:29:21,541 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20Pausable.approve(spender, value), return == true && _allowed_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:29:21,549 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=spender_s955 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[spender_s955,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]]
[2020-11-25 02:29:21,552 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _allowed_ERC20[this][msg.sender][spender_s955]==value_s955 ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowed_ERC20[this][p1][p2]==( old(_allowed_ERC20[this][p1][p2]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_ERC20Pausable>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],[IdentifierExpression[spender_s955,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],IdentifierExpression[value_s955,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]]]]]
[2020-11-25 02:29:21,560 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20Pausable.approve(spender, value), return == true && _allowed_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:29:21,560 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_ERC20Pausable0) ==> ( <>AP(success_approve_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:29:21,579 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:29:21 PropertyContainer
[2020-11-25 02:29:21,579 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:29:21,580 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:29:21,580 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:29:21,580 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:29:21,581 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:21" (1/2) ...
[2020-11-25 02:29:21,581 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:29:21,581 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:29:21,606 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:29:21" (2/2) ...
[2020-11-25 02:29:21,606 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:29:21,607 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:29:21,607 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:29:21,607 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:29:21,608 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:21" (1/2) ...
[2020-11-25 02:29:21,664 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:29:21,664 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 02:29:21,664 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:29:21,664 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 02:29:21,665 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 02:29:21,665 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 02:29:21,665 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 02:29:21,665 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 02:29:21,665 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 02:29:21,665 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 02:29:21,665 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 02:29:21,665 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:29:21,665 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:29:21,666 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:29:21,666 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:29:21,666 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:29:21,666 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:29:21,667 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:29:21,667 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:29:21,667 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:29:21,667 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 02:29:21,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 02:29:21,667 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 02:29:21,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 02:29:21,667 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 02:29:21,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 02:29:21,668 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 02:29:21,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 02:29:21,668 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 02:29:21,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 02:29:21,668 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 02:29:21,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 02:29:21,668 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:29:21,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:29:21,668 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:29:21,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:29:21,669 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:29:21,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:29:21,669 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:29:21,669 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:29:21,669 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:29:21,669 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:29:21,669 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:29:21,669 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 02:29:21,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 02:29:21,670 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 02:29:21,670 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 02:29:21,670 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 02:29:21,670 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:29:21,670 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 02:29:21,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 02:29:21,670 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 02:29:21,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 02:29:21,670 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 02:29:21,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 02:29:21,671 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 02:29:21,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 02:29:21,671 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:29:21,671 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:29:21,671 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:29:21,671 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 02:29:21,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 02:29:21,671 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 02:29:21,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 02:29:21,671 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 02:29:21,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 02:29:21,672 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 02:29:21,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 02:29:21,672 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:29:21,672 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:29:21,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:29:21,672 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:29:21,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:29:21,672 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:29:21,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:29:21,672 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 02:29:21,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 02:29:21,673 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:29:21,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:29:21,673 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:29:21,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:29:21,673 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:29:21,673 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:29:21,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:29:21,673 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 02:29:21,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 02:29:21,674 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 02:29:21,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 02:29:21,674 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 02:29:21,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 02:29:21,674 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 02:29:21,674 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 02:29:21,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 02:29:21,674 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 02:29:21,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 02:29:21,674 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 02:29:21,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 02:29:21,675 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 02:29:21,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 02:29:21,675 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 02:29:21,675 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 02:29:21,675 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 02:29:21,675 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 02:29:21,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 02:29:21,675 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 02:29:21,675 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 02:29:21,675 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 02:29:21,675 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 02:29:21,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 02:29:21,676 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 02:29:21,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 02:29:21,676 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 02:29:21,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 02:29:21,676 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken_NoBaseCtor__success
[2020-11-25 02:29:21,676 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken
[2020-11-25 02:29:21,676 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken
[2020-11-25 02:29:21,676 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:29:21,677 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:29:21,677 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:29:21,677 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 02:29:21,677 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 02:29:21,677 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 02:29:21,677 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 02:29:21,677 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 02:29:21,677 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 02:29:21,677 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:29:21,678 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:29:21,678 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 02:29:21,678 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 02:29:21,678 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 02:29:21,678 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 02:29:21,678 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 02:29:21,678 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 02:29:21,678 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 02:29:21,678 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 02:29:21,678 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:29:21,679 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:29:21,679 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:29:21,679 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:29:21,679 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 02:29:21,679 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 02:29:21,679 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 02:29:21,679 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 02:29:21,679 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 02:29:21,679 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 02:29:21,680 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_OMToken
[2020-11-25 02:29:21,680 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:29:21,680 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:29:21,680 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 02:29:21,680 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:29:21,680 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 02:29:21,680 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 02:29:21,680 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:29:21,680 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:29:21,680 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:29:21,681 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:21,681 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:21,681 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:21,681 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:21,681 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:21,681 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:29:21,681 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 02:29:21,681 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 02:29:21,681 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 02:29:21,681 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 02:29:21,682 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 02:29:21,682 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:29:21,682 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 02:29:21,682 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:29:21,682 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:29:21,682 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:29:21,682 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:29:21,682 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:29:21,682 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:29:21,682 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:29:21,683 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:29:21,683 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:29:21,683 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:29:21,683 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:29:21,683 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:29:21,683 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:29:21,683 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:29:21,683 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:29:21,683 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:29:21,683 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 02:29:21,683 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 02:29:21,683 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 02:29:21,684 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 02:29:21,684 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 02:29:21,684 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:29:21,684 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 02:29:21,684 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 02:29:21,684 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 02:29:21,684 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:29:21,684 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 02:29:21,684 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:29:21,684 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 02:29:21,684 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:29:21,685 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:29:21,685 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:29:21,685 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:29:21,685 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 02:29:21,685 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 02:29:21,685 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 02:29:21,685 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 02:29:21,685 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 02:29:21,685 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 02:29:21,685 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 02:29:21,685 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 02:29:21,686 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:29:21,686 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:29:21,686 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:29:21,686 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:21,686 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:21,686 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:21,686 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:21,686 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:21,686 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:21,686 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:21,686 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:21,687 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:21,687 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:21,687 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:29:21,687 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:29:21,687 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:29:21,687 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 02:29:21,687 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 02:29:21,687 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 02:29:21,687 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:29:21,687 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 02:29:21,687 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:29:21,688 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 02:29:21,688 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 02:29:21,688 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 02:29:21,688 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 02:29:21,688 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 02:29:21,688 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 02:29:21,688 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 02:29:21,688 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 02:29:21,688 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 02:29:21,688 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 02:29:21,688 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 02:29:21,688 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 02:29:21,689 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 02:29:21,689 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 02:29:21,689 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 02:29:21,689 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 02:29:21,689 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 02:29:21,689 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 02:29:21,689 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 02:29:21,689 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 02:29:21,689 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 02:29:21,689 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 02:29:21,689 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 02:29:21,689 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken_NoBaseCtor__fail
[2020-11-25 02:29:21,690 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken__success
[2020-11-25 02:29:21,690 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken__fail
[2020-11-25 02:29:21,690 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:29:21,690 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:29:21,690 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:29:21,690 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 02:29:21,690 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 02:29:21,690 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 02:29:21,690 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 02:29:21,690 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:29:21,690 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:29:21,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 02:29:21,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 02:29:21,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:29:21,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:29:21,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 02:29:21,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 02:29:21,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:29:21,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:29:21,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:29:21,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:29:21,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:21,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:29:21,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:21,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:29:21,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:21,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:29:21,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:21,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:29:21,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:21,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:29:21,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:29:21,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:29:21,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 02:29:21,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 02:29:21,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 02:29:21,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 02:29:21,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:29:21,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 02:29:21,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:29:21,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 02:29:21,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:29:21,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:29:21,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:29:21,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:29:21,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:29:21,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:29:21,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:29:21,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:29:21,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:29:21,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:29:21,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:29:21,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:29:21,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:29:21,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:29:21,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:29:21,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:29:21,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:29:21,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:29:21,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:29:21,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:29:21,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 02:29:21,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 02:29:21,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 02:29:21,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 02:29:21,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 02:29:21,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 02:29:21,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 02:29:21,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 02:29:21,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:29:21,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:29:21,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 02:29:21,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 02:29:21,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:29:21,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 02:29:21,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:29:21,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 02:29:21,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:29:21,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 02:29:21,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:29:21,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:29:21,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:29:21,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:29:21,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:29:21,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:29:21,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 02:29:21,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 02:29:21,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 02:29:21,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 02:29:21,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 02:29:21,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 02:29:21,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 02:29:21,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 02:29:21,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:29:21,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:29:21,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:29:21,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:29:21,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:21,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:21,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:21,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:21,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:21,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:21,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:21,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:21,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:21,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:21,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:29:21,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:29:21,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:29:21,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:29:21,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 02:29:21,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 02:29:21,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:29:21,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 02:29:21,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:29:21,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 02:29:21,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 02:29:21,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 02:29:21,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 02:29:21,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 02:29:21,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 02:29:21,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 02:29:21,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 02:29:21,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 02:29:21,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 02:29:21,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 02:29:21,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 02:29:21,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 02:29:21,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 02:29:21,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 02:29:21,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 02:29:21,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 02:29:21,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 02:29:21,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 02:29:21,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 02:29:21,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 02:29:21,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 02:29:21,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 02:29:21,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 02:29:21,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 02:29:21,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 02:29:21,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 02:29:21,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 02:29:21,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 02:29:21,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken_NoBaseCtor__fail
[2020-11-25 02:29:21,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken_NoBaseCtor__success
[2020-11-25 02:29:21,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken__fail
[2020-11-25 02:29:21,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken__success
[2020-11-25 02:29:21,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:29:21,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:29:21,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:29:21,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:29:21,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:29:21,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:29:21,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 02:29:21,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 02:29:21,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 02:29:21,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 02:29:21,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 02:29:21,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 02:29:21,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 02:29:21,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 02:29:21,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 02:29:21,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 02:29:21,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:29:21,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:29:21,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 02:29:21,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 02:29:21,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 02:29:21,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 02:29:21,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 02:29:21,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 02:29:21,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 02:29:21,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 02:29:21,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:29:21,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:29:21,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:29:21,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:29:21,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 02:29:21,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 02:29:21,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 02:29:21,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 02:29:21,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 02:29:21,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 02:29:21,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_OMToken
[2020-11-25 02:29:21,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:29:21,705 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:29:21,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:29:22,240 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:29:22,240 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:29:22,241 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:29:22,696 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:29:22,929 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:29:22,929 INFO  L286             CfgBuilder]: Removed 12 assue(true) statements.
[2020-11-25 02:29:22,931 INFO  L202        PluginConnector]: Adding new model OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:29:22 BoogieIcfgContainer
[2020-11-25 02:29:22,931 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:29:21" (2/2) ...
[2020-11-25 02:29:22,931 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:29:22,932 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@7e37c1da and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:29:22, skipping insertion in model container
[2020-11-25 02:29:22,932 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:29:22,932 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:29:22,932 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:29:22,933 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:29:22,933 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:21" (1/3) ...
[2020-11-25 02:29:22,933 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@3399e260 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:29:22, skipping insertion in model container
[2020-11-25 02:29:22,933 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:29:21" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:29:22,970 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:29:22 NWAContainer
[2020-11-25 02:29:22,970 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:29:22,970 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:29:22,970 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:29:22,971 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:29:22,972 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:29:22" (3/4) ...
[2020-11-25 02:29:22,972 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@20490015 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:29:22, skipping insertion in model container
[2020-11-25 02:29:22,973 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:29:22" (4/4) ...
[2020-11-25 02:29:22,975 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:29:22,982 INFO  L110   BuchiProductObserver]: Initial RCFG 3605 locations, 5218 edges
[2020-11-25 02:29:22,982 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:29:22,996 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:29:26,024 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:29:26,036 INFO  L110   BuchiProductObserver]: BuchiProgram size 9266 locations, 17161 edges
[2020-11-25 02:29:26,036 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:29:26 BoogieIcfgContainer
[2020-11-25 02:29:26,036 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:29:26,036 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:29:26,036 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:29:26,038 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:29:26,038 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:29:26" (1/1) ...
[2020-11-25 02:29:26,188 INFO  L313           BlockEncoder]: Initial Icfg 9266 locations, 17161 edges
[2020-11-25 02:29:26,189 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:29:26,189 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:29:26,189 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:29:26,190 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:29:26,206 INFO  L70    emoveInfeasibleEdges]: Removed 234 edges and 27 locations because of local infeasibility
[2020-11-25 02:29:26,223 INFO  L70        RemoveSinkStates]: Removed 116 edges and 77 locations by removing sink states
[2020-11-25 02:29:26,240 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:29:26,245 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:29:26,251 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:29:26,251 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:29:26,254 INFO  L313           BlockEncoder]: Encoded RCFG 9110 locations, 16734 edges
[2020-11-25 02:29:26,255 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:29:26 BasicIcfg
[2020-11-25 02:29:26,255 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:29:26,255 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:29:26,255 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:29:26,257 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:29:26,257 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:29:26,257 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:21" (1/6) ...
[2020-11-25 02:29:26,259 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@11256cae and model type OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:29:26, skipping insertion in model container
[2020-11-25 02:29:26,259 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:29:26,259 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:29:21" (2/6) ...
[2020-11-25 02:29:26,259 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@11256cae and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:29:26, skipping insertion in model container
[2020-11-25 02:29:26,259 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:29:26,259 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:29:22" (3/6) ...
[2020-11-25 02:29:26,259 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@11256cae and model type OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:29:26, skipping insertion in model container
[2020-11-25 02:29:26,259 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:29:26,259 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:29:22" (4/6) ...
[2020-11-25 02:29:26,260 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@11256cae and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:29:26, skipping insertion in model container
[2020-11-25 02:29:26,260 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:29:26,260 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:29:26" (5/6) ...
[2020-11-25 02:29:26,260 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@11256cae and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:29:26, skipping insertion in model container
[2020-11-25 02:29:26,260 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:29:26,260 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:29:26" (6/6) ...
[2020-11-25 02:29:26,261 INFO  L404   chiAutomizerObserver]: Analyzing ICFG OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_approve.bpl_BEv2
[2020-11-25 02:29:26,294 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:29:26,294 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:29:26,294 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:29:26,294 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:29:26,295 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:29:26,295 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:29:26,295 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:29:26,295 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:29:26,295 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:29:26,352 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9110 states.
[2020-11-25 02:29:26,420 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:29:26,420 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:26,420 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:26,427 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:26,427 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:26,427 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:29:26,427 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9110 states.
[2020-11-25 02:29:26,458 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:29:26,458 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:26,458 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:26,459 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:26,459 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND FALSE  !(gas >= 0)
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:26,473 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:26,473 INFO  L82        PathProgramCache]: Analyzing trace with hash -528386125, now seen corresponding path program 1 times
[2020-11-25 02:29:26,478 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:26,496 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:26,536 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:29:26,538 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:26,539 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:29:26,857 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:26,865 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:29:26,865 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:29:26,866 INFO  L87              Difference]: Start difference. First operand 9110 states. Second operand 4 states.
[2020-11-25 02:29:27,735 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:27,735 INFO  L93              Difference]: Finished difference Result 5021 states and 6073 transitions.
[2020-11-25 02:29:27,736 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:29:27,737 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5021 states and 6073 transitions.
[2020-11-25 02:29:27,763 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:29:27,796 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5021 states to 5021 states and 6073 transitions.
[2020-11-25 02:29:27,797 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 02:29:27,800 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 956
[2020-11-25 02:29:27,800 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5021 states and 6073 transitions.
[2020-11-25 02:29:27,813 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:27,813 INFO  L728         BuchiCegarLoop]: Abstraction has 5021 states and 6073 transitions.
[2020-11-25 02:29:27,831 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5021 states and 6073 transitions.
[2020-11-25 02:29:27,896 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5021 to 5021.
[2020-11-25 02:29:27,897 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5021 states.
[2020-11-25 02:29:27,904 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5021 states to 5021 states and 6073 transitions.
[2020-11-25 02:29:27,905 INFO  L751         BuchiCegarLoop]: Abstraction has 5021 states and 6073 transitions.
[2020-11-25 02:29:27,905 INFO  L631         BuchiCegarLoop]: Abstraction has 5021 states and 6073 transitions.
[2020-11-25 02:29:27,905 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:29:27,905 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5021 states and 6073 transitions.
[2020-11-25 02:29:27,915 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:29:27,915 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:27,915 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:27,917 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:27,917 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND TRUE   revert
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND FALSE  !(__exception)
[L1671]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5456]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5456]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5457]  COND TRUE   revert
[L1671]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1672]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s955] == value_s955) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND FALSE  !(__exception)
[L1671]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5456]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5456]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5457]  COND TRUE   revert
[L1671]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1672]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s955] == value_s955) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:27,922 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:27,922 INFO  L82        PathProgramCache]: Analyzing trace with hash -1840294519, now seen corresponding path program 1 times
[2020-11-25 02:29:27,923 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:27,931 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:27,951 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:29:27,952 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:27,952 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:29:27,953 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:27,953 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:29:27,953 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:29:27,953 INFO  L87              Difference]: Start difference. First operand 5021 states and 6073 transitions. cyclomatic complexity: 1054 Second operand 3 states.
[2020-11-25 02:29:28,140 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:28,140 INFO  L93              Difference]: Finished difference Result 6909 states and 8385 transitions.
[2020-11-25 02:29:28,140 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:29:28,140 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6909 states and 8385 transitions.
[2020-11-25 02:29:28,160 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:28,196 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6909 states to 6155 states and 7229 transitions.
[2020-11-25 02:29:28,196 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1266
[2020-11-25 02:29:28,198 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1332
[2020-11-25 02:29:28,198 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6155 states and 7229 transitions.
[2020-11-25 02:29:28,207 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:28,207 INFO  L728         BuchiCegarLoop]: Abstraction has 6155 states and 7229 transitions.
[2020-11-25 02:29:28,214 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6155 states and 7229 transitions.
[2020-11-25 02:29:28,279 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6155 to 5411.
[2020-11-25 02:29:28,279 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5411 states.
[2020-11-25 02:29:28,288 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5411 states to 5411 states and 6305 transitions.
[2020-11-25 02:29:28,288 INFO  L751         BuchiCegarLoop]: Abstraction has 5411 states and 6305 transitions.
[2020-11-25 02:29:28,288 INFO  L631         BuchiCegarLoop]: Abstraction has 5411 states and 6305 transitions.
[2020-11-25 02:29:28,288 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:29:28,288 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5411 states and 6305 transitions.
[2020-11-25 02:29:28,298 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:29:28,298 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:28,298 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:28,305 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:28,305 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND TRUE   __exception
[L2718]              __tmp__Balance := Balance;
[L2719]              __tmp__DType := DType;
[L2720]              __tmp__Alloc := Alloc;
[L2721]              __tmp__balance_ADDR := balance_ADDR;
[L2722]              __tmp__M_Ref_int := M_Ref_int;
[L2723]              __tmp__sum__balances0 := sum__balances0;
[L2724]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2725]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2726]              __tmp__sum__allowed1 := sum__allowed1;
[L2727]              __tmp__M_Ref_bool := M_Ref_bool;
[L2728]              __tmp__sum := sum;
[L2729]              __tmp__Length := Length;
[L2730]              __tmp__now := now;
[L2731]              __tmp___balances_ERC20 := _balances_ERC20;
[L2732]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2733]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2734]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2735]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2736]              __tmp___paused_Pausable := _paused_Pausable;
[L2737]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2738]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2739]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2740]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2741]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6137]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L6137]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6138]  COND FALSE  !(revert)
[L6141]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L6141]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]  COND FALSE  !(revert)
[L6145]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L6145]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6146]  COND FALSE  !(revert)
[L6149]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5175]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5176]  COND FALSE  !(revert)
[L5179]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5156]              assume msgsender_MSG != null;
[L5157]              __tmp__Balance[this] := 0;
[L5158]              __tmp___paused_Pausable[this] := false;
[L5160]              __tmp___paused_Pausable[this] := false;
[L5179]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5180]  COND FALSE  !(revert)
[L6149]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6150]  COND FALSE  !(revert)
[L6153]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5281]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5282]  COND FALSE  !(revert)
[L5285]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L5285]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5286]  COND FALSE  !(revert)
[L5289]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5289]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5290]  COND FALSE  !(revert)
[L5293]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5175]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5176]  COND FALSE  !(revert)
[L5179]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5156]              assume msgsender_MSG != null;
[L5157]              __tmp__Balance[this] := 0;
[L5158]              __tmp___paused_Pausable[this] := false;
[L5160]              __tmp___paused_Pausable[this] := false;
[L5179]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5180]  COND FALSE  !(revert)
[L5293]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5294]  COND FALSE  !(revert)
[L5297]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5266]              assume msgsender_MSG != null;
[L5267]              __tmp__Balance[this] := 0;
[L5297]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5298]  COND FALSE  !(revert)
[L6153]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6154]  COND FALSE  !(revert)
[L6157]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5607]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5607]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5608]  COND FALSE  !(revert)
[L5611]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5580]              assume msgsender_MSG != null;
[L5581]              __tmp__Balance[this] := 0;
[L5582]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5584]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5586]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5587]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5588]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5611]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5612]  COND FALSE  !(revert)
[L6157]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6158]  COND FALSE  !(revert)
[L6161]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5669]              assume msgsender_MSG != null;
[L5670]              __tmp__Balance[this] := 0;
[L5672]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L5672]  RET         call __var_35 := FreshRefGenerator__fail();
[L5673]  COND FALSE  !(revert)
[L5676]              __tmp___minters_MinterRole[this] := __var_35;
[L5678]  COND TRUE   __tmp__DType[this] == OMToken
[L5679]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5869]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5869]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5870]  COND FALSE  !(revert)
[L5679]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5680]  COND FALSE  !(revert)
[L5734]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5735]  COND FALSE  !(revert)
[L6161]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6162]  COND FALSE  !(revert)
[L6165]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5919]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]  COND FALSE  !(revert)
[L5923]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L5923]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5924]  COND FALSE  !(revert)
[L5927]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5669]              assume msgsender_MSG != null;
[L5670]              __tmp__Balance[this] := 0;
[L5672]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L5672]  RET         call __var_35 := FreshRefGenerator__fail();
[L5673]  COND FALSE  !(revert)
[L5676]              __tmp___minters_MinterRole[this] := __var_35;
[L5678]  COND TRUE   __tmp__DType[this] == OMToken
[L5679]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5869]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5869]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5870]  COND FALSE  !(revert)
[L5679]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5680]  COND FALSE  !(revert)
[L5734]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5735]  COND FALSE  !(revert)
[L5927]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5928]  COND FALSE  !(revert)
[L5931]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5904]              assume msgsender_MSG != null;
[L5905]              __tmp__Balance[this] := 0;
[L5931]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5932]  COND FALSE  !(revert)
[L6165]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6166]  COND FALSE  !(revert)
[L6169]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L6021]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6022]  COND FALSE  !(revert)
[L6025]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L6025]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6026]  COND FALSE  !(revert)
[L6029]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6006]              assume msgsender_MSG != null;
[L6007]              __tmp__Balance[this] := 0;
[L6029]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6030]  COND FALSE  !(revert)
[L6169]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6170]  COND FALSE  !(revert)
[L6173]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6122]              assume msgsender_MSG != null;
[L6123]              __tmp__Balance[this] := 0;
[L6173]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6174]  COND FALSE  !(revert)
[L2741]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2742]              assume revert || gas < 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND FALSE  !(__exception)
[L1671]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5456]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5456]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5457]  COND FALSE  !(revert)
[L5460]  COND TRUE   DType[this] == OMToken
[L5461]  CALL        call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4339]              __var_1 := null;
[L4340]  COND FALSE  !(!(spender_s302 != null))
[L4344]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4345]              _allowed_ERC20[this][msgsender_MSG][spender_s302] := value_s302;
[L4346]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4347]              assert { :EventEmitted "Approval_ERC20" } true;
[L4348]              __ret_0_ := true;
[L5461]  RET         call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5462]  COND FALSE  !(revert)
[L5473]              __ret_0_ := __var_29;
[L1671]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1672]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s955] == value_s955) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND FALSE  !(__exception)
[L1671]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5456]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5456]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5457]  COND FALSE  !(revert)
[L5460]  COND TRUE   DType[this] == OMToken
[L5461]  CALL        call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4339]              __var_1 := null;
[L4340]  COND FALSE  !(!(spender_s302 != null))
[L4344]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4345]              _allowed_ERC20[this][msgsender_MSG][spender_s302] := value_s302;
[L4346]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4347]              assert { :EventEmitted "Approval_ERC20" } true;
[L4348]              __ret_0_ := true;
[L5461]  RET         call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5462]  COND FALSE  !(revert)
[L5473]              __ret_0_ := __var_29;
[L1671]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1672]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s955] == value_s955) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:28,315 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:28,316 INFO  L82        PathProgramCache]: Analyzing trace with hash -433137166, now seen corresponding path program 1 times
[2020-11-25 02:29:28,317 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:28,353 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:28,591 INFO  L134       CoverageAnalysis]: Checked inductivity of 987 backedges. 32 proven. 0 refuted. 0 times theorem prover too weak. 955 trivial. 0 not checked.
[2020-11-25 02:29:28,591 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:28,591 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:29:28,592 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:28,592 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:29:28,593 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:29:28,593 INFO  L87              Difference]: Start difference. First operand 5411 states and 6305 transitions. cyclomatic complexity: 896 Second operand 4 states.
[2020-11-25 02:29:29,266 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:29,266 INFO  L93              Difference]: Finished difference Result 6405 states and 7367 transitions.
[2020-11-25 02:29:29,267 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:29:29,267 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6405 states and 7367 transitions.
[2020-11-25 02:29:29,282 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 02:29:29,296 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6405 states to 6126 states and 7063 transitions.
[2020-11-25 02:29:29,297 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1402
[2020-11-25 02:29:29,297 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1402
[2020-11-25 02:29:29,297 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6126 states and 7063 transitions.
[2020-11-25 02:29:29,302 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:29,302 INFO  L728         BuchiCegarLoop]: Abstraction has 6126 states and 7063 transitions.
[2020-11-25 02:29:29,306 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6126 states and 7063 transitions.
[2020-11-25 02:29:29,346 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6126 to 5459.
[2020-11-25 02:29:29,346 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5459 states.
[2020-11-25 02:29:29,355 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5459 states to 5459 states and 6213 transitions.
[2020-11-25 02:29:29,355 INFO  L751         BuchiCegarLoop]: Abstraction has 5459 states and 6213 transitions.
[2020-11-25 02:29:29,355 INFO  L631         BuchiCegarLoop]: Abstraction has 5459 states and 6213 transitions.
[2020-11-25 02:29:29,355 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:29:29,355 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5459 states and 6213 transitions.
[2020-11-25 02:29:29,364 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:29,364 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:29,364 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:29,367 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:29,367 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND TRUE   DType[this] == Pausable
[L4949]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4949]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4950]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND TRUE   DType[this] == Pausable
[L4949]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4949]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4950]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND TRUE   DType[this] == Pausable
[L4949]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4949]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4950]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND TRUE   DType[this] == Pausable
[L4949]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4949]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4950]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND FALSE  !(__exception)
[L1671]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5456]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5456]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5457]  COND FALSE  !(revert)
[L5460]  COND TRUE   DType[this] == OMToken
[L5461]  CALL        call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4339]              __var_1 := null;
[L4340]  COND FALSE  !(!(spender_s302 != null))
[L4344]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4345]              _allowed_ERC20[this][msgsender_MSG][spender_s302] := value_s302;
[L4346]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4347]              assert { :EventEmitted "Approval_ERC20" } true;
[L4348]              __ret_0_ := true;
[L5461]  RET         call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5462]  COND FALSE  !(revert)
[L5473]              __ret_0_ := __var_29;
[L1671]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1672]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s955] == value_s955) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND FALSE  !(__exception)
[L1671]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5456]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5456]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5457]  COND FALSE  !(revert)
[L5460]  COND TRUE   DType[this] == OMToken
[L5461]  CALL        call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4339]              __var_1 := null;
[L4340]  COND FALSE  !(!(spender_s302 != null))
[L4344]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4345]              _allowed_ERC20[this][msgsender_MSG][spender_s302] := value_s302;
[L4346]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4347]              assert { :EventEmitted "Approval_ERC20" } true;
[L4348]              __ret_0_ := true;
[L5461]  RET         call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5462]  COND FALSE  !(revert)
[L5473]              __ret_0_ := __var_29;
[L1671]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1672]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s955] == value_s955) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:29,374 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:29,374 INFO  L82        PathProgramCache]: Analyzing trace with hash -724623099, now seen corresponding path program 1 times
[2020-11-25 02:29:29,375 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:29,391 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:29,628 INFO  L134       CoverageAnalysis]: Checked inductivity of 1042 backedges. 0 proven. 33 refuted. 0 times theorem prover too weak. 1009 trivial. 0 not checked.
[2020-11-25 02:29:29,628 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:29:29,628 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:29:29,629 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:29,629 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:29:29,629 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:29:29,629 INFO  L87              Difference]: Start difference. First operand 5459 states and 6213 transitions. cyclomatic complexity: 756 Second operand 7 states.
[2020-11-25 02:29:29,791 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:29,791 INFO  L93              Difference]: Finished difference Result 5494 states and 6256 transitions.
[2020-11-25 02:29:29,791 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:29:29,791 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5494 states and 6256 transitions.
[2020-11-25 02:29:29,802 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:29,818 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5494 states to 5465 states and 6220 transitions.
[2020-11-25 02:29:29,818 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1359
[2020-11-25 02:29:29,819 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1359
[2020-11-25 02:29:29,819 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5465 states and 6220 transitions.
[2020-11-25 02:29:29,823 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:29,823 INFO  L728         BuchiCegarLoop]: Abstraction has 5465 states and 6220 transitions.
[2020-11-25 02:29:29,827 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5465 states and 6220 transitions.
[2020-11-25 02:29:29,860 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5465 to 5465.
[2020-11-25 02:29:29,860 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5465 states.
[2020-11-25 02:29:29,866 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5465 states to 5465 states and 6220 transitions.
[2020-11-25 02:29:29,866 INFO  L751         BuchiCegarLoop]: Abstraction has 5465 states and 6220 transitions.
[2020-11-25 02:29:29,866 INFO  L631         BuchiCegarLoop]: Abstraction has 5465 states and 6220 transitions.
[2020-11-25 02:29:29,866 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:29:29,866 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5465 states and 6220 transitions.
[2020-11-25 02:29:29,872 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:29,872 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:29,872 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:29,874 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:29,874 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND FALSE  !(DType[this] == Pausable)
[L4953]  COND TRUE   DType[this] == PauserRole
[L4954]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4954]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4955]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND FALSE  !(DType[this] == Pausable)
[L4953]  COND TRUE   DType[this] == PauserRole
[L4954]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4954]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4955]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND FALSE  !(DType[this] == Pausable)
[L4953]  COND TRUE   DType[this] == PauserRole
[L4954]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4954]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4955]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND FALSE  !(__exception)
[L1671]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5456]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5456]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5457]  COND FALSE  !(revert)
[L5460]  COND TRUE   DType[this] == OMToken
[L5461]  CALL        call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4339]              __var_1 := null;
[L4340]  COND FALSE  !(!(spender_s302 != null))
[L4344]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4345]              _allowed_ERC20[this][msgsender_MSG][spender_s302] := value_s302;
[L4346]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4347]              assert { :EventEmitted "Approval_ERC20" } true;
[L4348]              __ret_0_ := true;
[L5461]  RET         call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5462]  COND FALSE  !(revert)
[L5473]              __ret_0_ := __var_29;
[L1671]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1672]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s955] == value_s955) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND FALSE  !(__exception)
[L1671]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5456]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5456]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5457]  COND FALSE  !(revert)
[L5460]  COND TRUE   DType[this] == OMToken
[L5461]  CALL        call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4339]              __var_1 := null;
[L4340]  COND FALSE  !(!(spender_s302 != null))
[L4344]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4345]              _allowed_ERC20[this][msgsender_MSG][spender_s302] := value_s302;
[L4346]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4347]              assert { :EventEmitted "Approval_ERC20" } true;
[L4348]              __ret_0_ := true;
[L5461]  RET         call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5462]  COND FALSE  !(revert)
[L5473]              __ret_0_ := __var_29;
[L1671]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1672]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s955] == value_s955) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:29,879 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:29,880 INFO  L82        PathProgramCache]: Analyzing trace with hash -1286801153, now seen corresponding path program 1 times
[2020-11-25 02:29:29,881 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:29,894 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:30,162 INFO  L134       CoverageAnalysis]: Checked inductivity of 1027 backedges. 6 proven. 31 refuted. 0 times theorem prover too weak. 990 trivial. 0 not checked.
[2020-11-25 02:29:30,163 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:29:30,163 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:29:30,163 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:30,164 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:29:30,164 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:29:30,164 INFO  L87              Difference]: Start difference. First operand 5465 states and 6220 transitions. cyclomatic complexity: 757 Second operand 8 states.
[2020-11-25 02:29:30,351 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:30,351 INFO  L93              Difference]: Finished difference Result 5498 states and 6260 transitions.
[2020-11-25 02:29:30,351 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:29:30,351 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5498 states and 6260 transitions.
[2020-11-25 02:29:30,361 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:30,374 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5498 states to 5472 states and 6228 transitions.
[2020-11-25 02:29:30,374 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1359
[2020-11-25 02:29:30,375 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1359
[2020-11-25 02:29:30,375 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5472 states and 6228 transitions.
[2020-11-25 02:29:30,379 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:30,379 INFO  L728         BuchiCegarLoop]: Abstraction has 5472 states and 6228 transitions.
[2020-11-25 02:29:30,383 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5472 states and 6228 transitions.
[2020-11-25 02:29:30,416 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5472 to 5472.
[2020-11-25 02:29:30,416 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5472 states.
[2020-11-25 02:29:30,422 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5472 states to 5472 states and 6228 transitions.
[2020-11-25 02:29:30,422 INFO  L751         BuchiCegarLoop]: Abstraction has 5472 states and 6228 transitions.
[2020-11-25 02:29:30,422 INFO  L631         BuchiCegarLoop]: Abstraction has 5472 states and 6228 transitions.
[2020-11-25 02:29:30,422 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:29:30,422 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5472 states and 6228 transitions.
[2020-11-25 02:29:30,428 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:30,428 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:30,428 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:30,431 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:30,431 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND TRUE   DType[this] == ERC20Pausable
[L4944]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4944]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4945]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND FALSE  !(__exception)
[L1671]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5456]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5456]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5457]  COND FALSE  !(revert)
[L5460]  COND TRUE   DType[this] == OMToken
[L5461]  CALL        call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4339]              __var_1 := null;
[L4340]  COND FALSE  !(!(spender_s302 != null))
[L4344]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4345]              _allowed_ERC20[this][msgsender_MSG][spender_s302] := value_s302;
[L4346]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4347]              assert { :EventEmitted "Approval_ERC20" } true;
[L4348]              __ret_0_ := true;
[L5461]  RET         call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5462]  COND FALSE  !(revert)
[L5473]              __ret_0_ := __var_29;
[L1671]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1672]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s955] == value_s955) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND FALSE  !(__exception)
[L1671]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5456]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5456]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5457]  COND FALSE  !(revert)
[L5460]  COND TRUE   DType[this] == OMToken
[L5461]  CALL        call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4339]              __var_1 := null;
[L4340]  COND FALSE  !(!(spender_s302 != null))
[L4344]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4345]              _allowed_ERC20[this][msgsender_MSG][spender_s302] := value_s302;
[L4346]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4347]              assert { :EventEmitted "Approval_ERC20" } true;
[L4348]              __ret_0_ := true;
[L5461]  RET         call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5462]  COND FALSE  !(revert)
[L5473]              __ret_0_ := __var_29;
[L1671]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1672]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s955] == value_s955) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:30,436 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:30,436 INFO  L82        PathProgramCache]: Analyzing trace with hash -353644180, now seen corresponding path program 1 times
[2020-11-25 02:29:30,437 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:30,451 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:30,648 INFO  L134       CoverageAnalysis]: Checked inductivity of 1018 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 1000 trivial. 0 not checked.
[2020-11-25 02:29:30,649 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:29:30,649 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:29:30,649 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:30,649 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:29:30,650 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:29:30,650 INFO  L87              Difference]: Start difference. First operand 5472 states and 6228 transitions. cyclomatic complexity: 758 Second operand 8 states.
[2020-11-25 02:29:30,818 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:30,818 INFO  L93              Difference]: Finished difference Result 5511 states and 6275 transitions.
[2020-11-25 02:29:30,818 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:29:30,818 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5511 states and 6275 transitions.
[2020-11-25 02:29:30,827 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:30,837 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5511 states to 5478 states and 6234 transitions.
[2020-11-25 02:29:30,837 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1359
[2020-11-25 02:29:30,838 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1359
[2020-11-25 02:29:30,838 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5478 states and 6234 transitions.
[2020-11-25 02:29:30,841 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:30,841 INFO  L728         BuchiCegarLoop]: Abstraction has 5478 states and 6234 transitions.
[2020-11-25 02:29:30,846 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5478 states and 6234 transitions.
[2020-11-25 02:29:30,873 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5478 to 5478.
[2020-11-25 02:29:30,874 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5478 states.
[2020-11-25 02:29:30,879 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5478 states to 5478 states and 6234 transitions.
[2020-11-25 02:29:30,879 INFO  L751         BuchiCegarLoop]: Abstraction has 5478 states and 6234 transitions.
[2020-11-25 02:29:30,879 INFO  L631         BuchiCegarLoop]: Abstraction has 5478 states and 6234 transitions.
[2020-11-25 02:29:30,879 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:29:30,879 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5478 states and 6234 transitions.
[2020-11-25 02:29:30,885 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:30,885 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:30,885 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:30,886 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:30,886 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND TRUE   DType[this] == Pausable
[L4949]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4949]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4950]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND TRUE   DType[this] == ERC20Pausable
[L4944]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4944]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4945]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND FALSE  !(__exception)
[L1671]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5456]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5456]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5457]  COND FALSE  !(revert)
[L5460]  COND TRUE   DType[this] == OMToken
[L5461]  CALL        call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4339]              __var_1 := null;
[L4340]  COND FALSE  !(!(spender_s302 != null))
[L4344]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4345]              _allowed_ERC20[this][msgsender_MSG][spender_s302] := value_s302;
[L4346]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4347]              assert { :EventEmitted "Approval_ERC20" } true;
[L4348]              __ret_0_ := true;
[L5461]  RET         call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5462]  COND FALSE  !(revert)
[L5473]              __ret_0_ := __var_29;
[L1671]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1672]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s955] == value_s955) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND FALSE  !(__exception)
[L1671]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5456]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5456]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5457]  COND FALSE  !(revert)
[L5460]  COND TRUE   DType[this] == OMToken
[L5461]  CALL        call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4339]              __var_1 := null;
[L4340]  COND FALSE  !(!(spender_s302 != null))
[L4344]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4345]              _allowed_ERC20[this][msgsender_MSG][spender_s302] := value_s302;
[L4346]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4347]              assert { :EventEmitted "Approval_ERC20" } true;
[L4348]              __ret_0_ := true;
[L5461]  RET         call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5462]  COND FALSE  !(revert)
[L5473]              __ret_0_ := __var_29;
[L1671]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1672]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s955] == value_s955) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:30,891 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:30,891 INFO  L82        PathProgramCache]: Analyzing trace with hash 1911592299, now seen corresponding path program 1 times
[2020-11-25 02:29:30,892 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:30,905 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:31,057 INFO  L134       CoverageAnalysis]: Checked inductivity of 1011 backedges. 12 proven. 7 refuted. 0 times theorem prover too weak. 992 trivial. 0 not checked.
[2020-11-25 02:29:31,057 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:29:31,057 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:29:31,058 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:31,058 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:29:31,058 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:29:31,058 INFO  L87              Difference]: Start difference. First operand 5478 states and 6234 transitions. cyclomatic complexity: 758 Second operand 8 states.
[2020-11-25 02:29:31,185 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:31,185 INFO  L93              Difference]: Finished difference Result 5511 states and 6274 transitions.
[2020-11-25 02:29:31,185 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:29:31,185 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5511 states and 6274 transitions.
[2020-11-25 02:29:31,195 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:31,205 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5511 states to 5478 states and 6233 transitions.
[2020-11-25 02:29:31,205 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1359
[2020-11-25 02:29:31,205 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1359
[2020-11-25 02:29:31,206 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5478 states and 6233 transitions.
[2020-11-25 02:29:31,209 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:31,209 INFO  L728         BuchiCegarLoop]: Abstraction has 5478 states and 6233 transitions.
[2020-11-25 02:29:31,213 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5478 states and 6233 transitions.
[2020-11-25 02:29:31,238 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5478 to 5472.
[2020-11-25 02:29:31,238 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5472 states.
[2020-11-25 02:29:31,243 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5472 states to 5472 states and 6227 transitions.
[2020-11-25 02:29:31,243 INFO  L751         BuchiCegarLoop]: Abstraction has 5472 states and 6227 transitions.
[2020-11-25 02:29:31,243 INFO  L631         BuchiCegarLoop]: Abstraction has 5472 states and 6227 transitions.
[2020-11-25 02:29:31,244 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 02:29:31,244 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5472 states and 6227 transitions.
[2020-11-25 02:29:31,249 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:31,249 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:31,250 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:31,251 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:31,251 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND FALSE  !(__exception)
[L1671]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5456]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5456]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5457]  COND FALSE  !(revert)
[L5460]  COND TRUE   DType[this] == OMToken
[L5461]  CALL        call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4339]              __var_1 := null;
[L4340]  COND FALSE  !(!(spender_s302 != null))
[L4344]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4345]              _allowed_ERC20[this][msgsender_MSG][spender_s302] := value_s302;
[L4346]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4347]              assert { :EventEmitted "Approval_ERC20" } true;
[L4348]              __ret_0_ := true;
[L5461]  RET         call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5462]  COND FALSE  !(revert)
[L5473]              __ret_0_ := __var_29;
[L1671]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1672]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s955] == value_s955) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND FALSE  !(__exception)
[L1671]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5456]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5456]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5457]  COND FALSE  !(revert)
[L5460]  COND TRUE   DType[this] == OMToken
[L5461]  CALL        call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4339]              __var_1 := null;
[L4340]  COND FALSE  !(!(spender_s302 != null))
[L4344]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4345]              _allowed_ERC20[this][msgsender_MSG][spender_s302] := value_s302;
[L4346]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s302];
[L4347]              assert { :EventEmitted "Approval_ERC20" } true;
[L4348]              __ret_0_ := true;
[L5461]  RET         call __var_29 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5462]  COND FALSE  !(revert)
[L5473]              __ret_0_ := __var_29;
[L1671]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1672]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s955] == value_s955) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:31,256 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:31,256 INFO  L82        PathProgramCache]: Analyzing trace with hash -1955014779, now seen corresponding path program 1 times
[2020-11-25 02:29:31,257 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:31,303 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:31,688 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 24 proven. 0 refuted. 0 times theorem prover too weak. 1006 trivial. 0 not checked.
[2020-11-25 02:29:31,688 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:31,688 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 02:29:31,689 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:31,689 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 02:29:31,689 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=239, Unknown=0, NotChecked=0, Total=272
[2020-11-25 02:29:31,689 INFO  L87              Difference]: Start difference. First operand 5472 states and 6227 transitions. cyclomatic complexity: 757 Second operand 17 states.
[2020-11-25 02:29:37,591 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:37,591 INFO  L93              Difference]: Finished difference Result 5597 states and 6379 transitions.
[2020-11-25 02:29:37,591 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 02:29:37,591 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5597 states and 6379 transitions.
[2020-11-25 02:29:37,601 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 02:29:37,612 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5597 states to 5597 states and 6379 transitions.
[2020-11-25 02:29:37,612 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1390
[2020-11-25 02:29:37,612 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1390
[2020-11-25 02:29:37,612 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5597 states and 6379 transitions.
[2020-11-25 02:29:37,616 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:37,616 INFO  L728         BuchiCegarLoop]: Abstraction has 5597 states and 6379 transitions.
[2020-11-25 02:29:37,620 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5597 states and 6379 transitions.
[2020-11-25 02:29:37,653 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5597 to 5566.
[2020-11-25 02:29:37,653 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5566 states.
[2020-11-25 02:29:37,659 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5566 states to 5566 states and 6347 transitions.
[2020-11-25 02:29:37,659 INFO  L751         BuchiCegarLoop]: Abstraction has 5566 states and 6347 transitions.
[2020-11-25 02:29:37,659 INFO  L631         BuchiCegarLoop]: Abstraction has 5566 states and 6347 transitions.
[2020-11-25 02:29:37,659 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 02:29:37,659 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5566 states and 6347 transitions.
[2020-11-25 02:29:37,665 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 02:29:37,665 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:37,665 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:37,666 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:37,666 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND FALSE  !(DType[this] == Pausable)
[L4953]  COND TRUE   DType[this] == PauserRole
[L4954]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4954]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4955]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND TRUE   __exception
[L1645]              __tmp__Balance := Balance;
[L1646]              __tmp__DType := DType;
[L1647]              __tmp__Alloc := Alloc;
[L1648]              __tmp__balance_ADDR := balance_ADDR;
[L1649]              __tmp__M_Ref_int := M_Ref_int;
[L1650]              __tmp__sum__balances0 := sum__balances0;
[L1651]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1653]              __tmp__sum__allowed1 := sum__allowed1;
[L1654]              __tmp__M_Ref_bool := M_Ref_bool;
[L1655]              __tmp__sum := sum;
[L1656]              __tmp__Length := Length;
[L1657]              __tmp__now := now;
[L1658]              __tmp___balances_ERC20 := _balances_ERC20;
[L1659]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1660]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1661]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1662]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1663]              __tmp___paused_Pausable := _paused_Pausable;
[L1664]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1665]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1666]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1667]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1668]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5431]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5431]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5432]  COND TRUE   revert
[L1668]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1669]              assume revert || gas < 0;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND TRUE   __exception
[L1645]              __tmp__Balance := Balance;
[L1646]              __tmp__DType := DType;
[L1647]              __tmp__Alloc := Alloc;
[L1648]              __tmp__balance_ADDR := balance_ADDR;
[L1649]              __tmp__M_Ref_int := M_Ref_int;
[L1650]              __tmp__sum__balances0 := sum__balances0;
[L1651]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1653]              __tmp__sum__allowed1 := sum__allowed1;
[L1654]              __tmp__M_Ref_bool := M_Ref_bool;
[L1655]              __tmp__sum := sum;
[L1656]              __tmp__Length := Length;
[L1657]              __tmp__now := now;
[L1658]              __tmp___balances_ERC20 := _balances_ERC20;
[L1659]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1660]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1661]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1662]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1663]              __tmp___paused_Pausable := _paused_Pausable;
[L1664]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1665]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1666]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1667]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1668]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5431]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5431]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5432]  COND TRUE   revert
[L1668]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1669]              assume revert || gas < 0;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:37,671 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:37,671 INFO  L82        PathProgramCache]: Analyzing trace with hash 1105752155, now seen corresponding path program 1 times
[2020-11-25 02:29:37,672 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:37,685 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:37,841 INFO  L134       CoverageAnalysis]: Checked inductivity of 1018 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 993 trivial. 0 not checked.
[2020-11-25 02:29:37,841 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:37,841 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:29:37,842 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:37,842 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:29:37,842 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:29:37,842 INFO  L87              Difference]: Start difference. First operand 5566 states and 6347 transitions. cyclomatic complexity: 785 Second operand 9 states.
[2020-11-25 02:29:38,000 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:38,001 INFO  L93              Difference]: Finished difference Result 5596 states and 6382 transitions.
[2020-11-25 02:29:38,001 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:29:38,001 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5596 states and 6382 transitions.
[2020-11-25 02:29:38,013 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 02:29:38,026 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5596 states to 5538 states and 6312 transitions.
[2020-11-25 02:29:38,026 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1390
[2020-11-25 02:29:38,026 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1390
[2020-11-25 02:29:38,026 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5538 states and 6312 transitions.
[2020-11-25 02:29:38,029 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:38,029 INFO  L728         BuchiCegarLoop]: Abstraction has 5538 states and 6312 transitions.
[2020-11-25 02:29:38,033 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5538 states and 6312 transitions.
[2020-11-25 02:29:38,069 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5538 to 5538.
[2020-11-25 02:29:38,069 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5538 states.
[2020-11-25 02:29:38,076 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5538 states to 5538 states and 6312 transitions.
[2020-11-25 02:29:38,076 INFO  L751         BuchiCegarLoop]: Abstraction has 5538 states and 6312 transitions.
[2020-11-25 02:29:38,076 INFO  L631         BuchiCegarLoop]: Abstraction has 5538 states and 6312 transitions.
[2020-11-25 02:29:38,076 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 02:29:38,077 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5538 states and 6312 transitions.
[2020-11-25 02:29:38,085 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 02:29:38,085 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:38,085 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:38,087 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:38,087 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND TRUE   __exception
[L1645]              __tmp__Balance := Balance;
[L1646]              __tmp__DType := DType;
[L1647]              __tmp__Alloc := Alloc;
[L1648]              __tmp__balance_ADDR := balance_ADDR;
[L1649]              __tmp__M_Ref_int := M_Ref_int;
[L1650]              __tmp__sum__balances0 := sum__balances0;
[L1651]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1653]              __tmp__sum__allowed1 := sum__allowed1;
[L1654]              __tmp__M_Ref_bool := M_Ref_bool;
[L1655]              __tmp__sum := sum;
[L1656]              __tmp__Length := Length;
[L1657]              __tmp__now := now;
[L1658]              __tmp___balances_ERC20 := _balances_ERC20;
[L1659]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1660]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1661]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1662]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1663]              __tmp___paused_Pausable := _paused_Pausable;
[L1664]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1665]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1666]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1667]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1668]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5431]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5431]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5432]  COND TRUE   revert
[L1668]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1669]              assume revert || gas < 0;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND TRUE   __exception
[L1645]              __tmp__Balance := Balance;
[L1646]              __tmp__DType := DType;
[L1647]              __tmp__Alloc := Alloc;
[L1648]              __tmp__balance_ADDR := balance_ADDR;
[L1649]              __tmp__M_Ref_int := M_Ref_int;
[L1650]              __tmp__sum__balances0 := sum__balances0;
[L1651]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1653]              __tmp__sum__allowed1 := sum__allowed1;
[L1654]              __tmp__M_Ref_bool := M_Ref_bool;
[L1655]              __tmp__sum := sum;
[L1656]              __tmp__Length := Length;
[L1657]              __tmp__now := now;
[L1658]              __tmp___balances_ERC20 := _balances_ERC20;
[L1659]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1660]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1661]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1662]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1663]              __tmp___paused_Pausable := _paused_Pausable;
[L1664]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1665]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1666]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1667]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1668]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5431]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5431]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5432]  COND TRUE   revert
[L1668]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1669]              assume revert || gas < 0;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:38,092 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:38,092 INFO  L82        PathProgramCache]: Analyzing trace with hash 1315030871, now seen corresponding path program 1 times
[2020-11-25 02:29:38,093 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:38,114 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:38,352 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1024 trivial. 0 not checked.
[2020-11-25 02:29:38,352 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:38,352 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 02:29:38,352 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:38,353 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 02:29:38,353 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-25 02:29:38,353 INFO  L87              Difference]: Start difference. First operand 5538 states and 6312 transitions. cyclomatic complexity: 778 Second operand 14 states.
[2020-11-25 02:29:44,063 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:44,064 INFO  L93              Difference]: Finished difference Result 8721 states and 10095 transitions.
[2020-11-25 02:29:44,064 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 02:29:44,064 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8721 states and 10095 transitions.
[2020-11-25 02:29:44,088 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-25 02:29:44,111 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8721 states to 8721 states and 10095 transitions.
[2020-11-25 02:29:44,112 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2042
[2020-11-25 02:29:44,113 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2042
[2020-11-25 02:29:44,113 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8721 states and 10095 transitions.
[2020-11-25 02:29:44,118 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:44,118 INFO  L728         BuchiCegarLoop]: Abstraction has 8721 states and 10095 transitions.
[2020-11-25 02:29:44,122 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8721 states and 10095 transitions.
[2020-11-25 02:29:44,173 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8721 to 7802.
[2020-11-25 02:29:44,173 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7802 states.
[2020-11-25 02:29:44,185 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7802 states to 7802 states and 9176 transitions.
[2020-11-25 02:29:44,185 INFO  L751         BuchiCegarLoop]: Abstraction has 7802 states and 9176 transitions.
[2020-11-25 02:29:44,185 INFO  L631         BuchiCegarLoop]: Abstraction has 7802 states and 9176 transitions.
[2020-11-25 02:29:44,185 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 02:29:44,185 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7802 states and 9176 transitions.
[2020-11-25 02:29:44,197 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-25 02:29:44,197 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:44,197 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:44,199 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:44,199 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND TRUE   DType[this] == ERC20Mintable
[L5717]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5717]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5718]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND TRUE   DType[this] == ERC20Mintable
[L5717]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5717]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5718]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND TRUE   __exception
[L1645]              __tmp__Balance := Balance;
[L1646]              __tmp__DType := DType;
[L1647]              __tmp__Alloc := Alloc;
[L1648]              __tmp__balance_ADDR := balance_ADDR;
[L1649]              __tmp__M_Ref_int := M_Ref_int;
[L1650]              __tmp__sum__balances0 := sum__balances0;
[L1651]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1653]              __tmp__sum__allowed1 := sum__allowed1;
[L1654]              __tmp__M_Ref_bool := M_Ref_bool;
[L1655]              __tmp__sum := sum;
[L1656]              __tmp__Length := Length;
[L1657]              __tmp__now := now;
[L1658]              __tmp___balances_ERC20 := _balances_ERC20;
[L1659]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1660]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1661]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1662]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1663]              __tmp___paused_Pausable := _paused_Pausable;
[L1664]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1665]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1666]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1667]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1668]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5431]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5431]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5432]  COND FALSE  !(revert)
[L5435]  COND TRUE   __tmp__DType[this] == OMToken
[L5436]  CALL        call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4324]              __var_1 := null;
[L4325]  COND TRUE   !(spender_s302 != null)
[L4326]              revert := true;
[L5436]  RET         call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5437]  COND TRUE   revert
[L1668]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1669]              assume revert || gas < 0;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND TRUE   __exception
[L1645]              __tmp__Balance := Balance;
[L1646]              __tmp__DType := DType;
[L1647]              __tmp__Alloc := Alloc;
[L1648]              __tmp__balance_ADDR := balance_ADDR;
[L1649]              __tmp__M_Ref_int := M_Ref_int;
[L1650]              __tmp__sum__balances0 := sum__balances0;
[L1651]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1653]              __tmp__sum__allowed1 := sum__allowed1;
[L1654]              __tmp__M_Ref_bool := M_Ref_bool;
[L1655]              __tmp__sum := sum;
[L1656]              __tmp__Length := Length;
[L1657]              __tmp__now := now;
[L1658]              __tmp___balances_ERC20 := _balances_ERC20;
[L1659]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1660]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1661]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1662]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1663]              __tmp___paused_Pausable := _paused_Pausable;
[L1664]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1665]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1666]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1667]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1668]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5431]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5431]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5432]  COND FALSE  !(revert)
[L5435]  COND TRUE   __tmp__DType[this] == OMToken
[L5436]  CALL        call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4324]              __var_1 := null;
[L4325]  COND TRUE   !(spender_s302 != null)
[L4326]              revert := true;
[L5436]  RET         call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5437]  COND TRUE   revert
[L1668]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1669]              assume revert || gas < 0;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:44,204 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:44,204 INFO  L82        PathProgramCache]: Analyzing trace with hash -1460722405, now seen corresponding path program 1 times
[2020-11-25 02:29:44,205 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:44,225 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:44,420 INFO  L134       CoverageAnalysis]: Checked inductivity of 1031 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 1022 trivial. 0 not checked.
[2020-11-25 02:29:44,420 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:29:44,420 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:29:44,421 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:44,421 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:29:44,421 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:29:44,421 INFO  L87              Difference]: Start difference. First operand 7802 states and 9176 transitions. cyclomatic complexity: 1382 Second operand 7 states.
[2020-11-25 02:29:44,553 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:44,553 INFO  L93              Difference]: Finished difference Result 7825 states and 9202 transitions.
[2020-11-25 02:29:44,553 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:29:44,554 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7825 states and 9202 transitions.
[2020-11-25 02:29:44,568 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-25 02:29:44,584 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7825 states to 7808 states and 9182 transitions.
[2020-11-25 02:29:44,584 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1896
[2020-11-25 02:29:44,585 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1896
[2020-11-25 02:29:44,585 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7808 states and 9182 transitions.
[2020-11-25 02:29:44,589 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:44,589 INFO  L728         BuchiCegarLoop]: Abstraction has 7808 states and 9182 transitions.
[2020-11-25 02:29:44,593 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7808 states and 9182 transitions.
[2020-11-25 02:29:44,633 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7808 to 7808.
[2020-11-25 02:29:44,634 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7808 states.
[2020-11-25 02:29:44,643 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7808 states to 7808 states and 9182 transitions.
[2020-11-25 02:29:44,643 INFO  L751         BuchiCegarLoop]: Abstraction has 7808 states and 9182 transitions.
[2020-11-25 02:29:44,643 INFO  L631         BuchiCegarLoop]: Abstraction has 7808 states and 9182 transitions.
[2020-11-25 02:29:44,643 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 02:29:44,643 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7808 states and 9182 transitions.
[2020-11-25 02:29:44,651 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-25 02:29:44,651 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:44,652 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:44,653 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:44,653 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND TRUE   DType[this] == ERC20Mintable
[L5717]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5717]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5718]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND TRUE   __exception
[L1645]              __tmp__Balance := Balance;
[L1646]              __tmp__DType := DType;
[L1647]              __tmp__Alloc := Alloc;
[L1648]              __tmp__balance_ADDR := balance_ADDR;
[L1649]              __tmp__M_Ref_int := M_Ref_int;
[L1650]              __tmp__sum__balances0 := sum__balances0;
[L1651]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1653]              __tmp__sum__allowed1 := sum__allowed1;
[L1654]              __tmp__M_Ref_bool := M_Ref_bool;
[L1655]              __tmp__sum := sum;
[L1656]              __tmp__Length := Length;
[L1657]              __tmp__now := now;
[L1658]              __tmp___balances_ERC20 := _balances_ERC20;
[L1659]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1660]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1661]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1662]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1663]              __tmp___paused_Pausable := _paused_Pausable;
[L1664]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1665]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1666]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1667]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1668]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5431]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5431]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5432]  COND FALSE  !(revert)
[L5435]  COND TRUE   __tmp__DType[this] == OMToken
[L5436]  CALL        call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4324]              __var_1 := null;
[L4325]  COND TRUE   !(spender_s302 != null)
[L4326]              revert := true;
[L5436]  RET         call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5437]  COND TRUE   revert
[L1668]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1669]              assume revert || gas < 0;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND TRUE   __exception
[L1645]              __tmp__Balance := Balance;
[L1646]              __tmp__DType := DType;
[L1647]              __tmp__Alloc := Alloc;
[L1648]              __tmp__balance_ADDR := balance_ADDR;
[L1649]              __tmp__M_Ref_int := M_Ref_int;
[L1650]              __tmp__sum__balances0 := sum__balances0;
[L1651]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1653]              __tmp__sum__allowed1 := sum__allowed1;
[L1654]              __tmp__M_Ref_bool := M_Ref_bool;
[L1655]              __tmp__sum := sum;
[L1656]              __tmp__Length := Length;
[L1657]              __tmp__now := now;
[L1658]              __tmp___balances_ERC20 := _balances_ERC20;
[L1659]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1660]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1661]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1662]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1663]              __tmp___paused_Pausable := _paused_Pausable;
[L1664]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1665]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1666]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1667]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1668]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5431]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5431]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5432]  COND FALSE  !(revert)
[L5435]  COND TRUE   __tmp__DType[this] == OMToken
[L5436]  CALL        call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4324]              __var_1 := null;
[L4325]  COND TRUE   !(spender_s302 != null)
[L4326]              revert := true;
[L5436]  RET         call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5437]  COND TRUE   revert
[L1668]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1669]              assume revert || gas < 0;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:44,657 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:44,657 INFO  L82        PathProgramCache]: Analyzing trace with hash 1904048838, now seen corresponding path program 1 times
[2020-11-25 02:29:44,658 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:44,674 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:44,824 INFO  L134       CoverageAnalysis]: Checked inductivity of 1026 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1020 trivial. 0 not checked.
[2020-11-25 02:29:44,824 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:44,824 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:29:44,824 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:44,824 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:29:44,824 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:29:44,825 INFO  L87              Difference]: Start difference. First operand 7808 states and 9182 transitions. cyclomatic complexity: 1382 Second operand 8 states.
[2020-11-25 02:29:44,949 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:44,949 INFO  L93              Difference]: Finished difference Result 7829 states and 9205 transitions.
[2020-11-25 02:29:44,949 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:29:44,949 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7829 states and 9205 transitions.
[2020-11-25 02:29:44,963 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-25 02:29:44,978 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7829 states to 7798 states and 9170 transitions.
[2020-11-25 02:29:44,979 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1896
[2020-11-25 02:29:44,979 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1896
[2020-11-25 02:29:44,979 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7798 states and 9170 transitions.
[2020-11-25 02:29:44,984 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:44,984 INFO  L728         BuchiCegarLoop]: Abstraction has 7798 states and 9170 transitions.
[2020-11-25 02:29:44,987 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7798 states and 9170 transitions.
[2020-11-25 02:29:45,024 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7798 to 7798.
[2020-11-25 02:29:45,025 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7798 states.
[2020-11-25 02:29:45,033 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7798 states to 7798 states and 9170 transitions.
[2020-11-25 02:29:45,034 INFO  L751         BuchiCegarLoop]: Abstraction has 7798 states and 9170 transitions.
[2020-11-25 02:29:45,034 INFO  L631         BuchiCegarLoop]: Abstraction has 7798 states and 9170 transitions.
[2020-11-25 02:29:45,034 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 02:29:45,034 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7798 states and 9170 transitions.
[2020-11-25 02:29:45,041 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-25 02:29:45,041 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:45,041 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:45,042 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:45,043 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND TRUE   __exception
[L1645]              __tmp__Balance := Balance;
[L1646]              __tmp__DType := DType;
[L1647]              __tmp__Alloc := Alloc;
[L1648]              __tmp__balance_ADDR := balance_ADDR;
[L1649]              __tmp__M_Ref_int := M_Ref_int;
[L1650]              __tmp__sum__balances0 := sum__balances0;
[L1651]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1653]              __tmp__sum__allowed1 := sum__allowed1;
[L1654]              __tmp__M_Ref_bool := M_Ref_bool;
[L1655]              __tmp__sum := sum;
[L1656]              __tmp__Length := Length;
[L1657]              __tmp__now := now;
[L1658]              __tmp___balances_ERC20 := _balances_ERC20;
[L1659]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1660]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1661]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1662]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1663]              __tmp___paused_Pausable := _paused_Pausable;
[L1664]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1665]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1666]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1667]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1668]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5431]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5431]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5432]  COND FALSE  !(revert)
[L5435]  COND TRUE   __tmp__DType[this] == OMToken
[L5436]  CALL        call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4324]              __var_1 := null;
[L4325]  COND TRUE   !(spender_s302 != null)
[L4326]              revert := true;
[L5436]  RET         call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5437]  COND TRUE   revert
[L1668]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1669]              assume revert || gas < 0;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND TRUE   __exception
[L1645]              __tmp__Balance := Balance;
[L1646]              __tmp__DType := DType;
[L1647]              __tmp__Alloc := Alloc;
[L1648]              __tmp__balance_ADDR := balance_ADDR;
[L1649]              __tmp__M_Ref_int := M_Ref_int;
[L1650]              __tmp__sum__balances0 := sum__balances0;
[L1651]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1653]              __tmp__sum__allowed1 := sum__allowed1;
[L1654]              __tmp__M_Ref_bool := M_Ref_bool;
[L1655]              __tmp__sum := sum;
[L1656]              __tmp__Length := Length;
[L1657]              __tmp__now := now;
[L1658]              __tmp___balances_ERC20 := _balances_ERC20;
[L1659]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1660]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1661]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1662]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1663]              __tmp___paused_Pausable := _paused_Pausable;
[L1664]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1665]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1666]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1667]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1668]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5431]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5431]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5432]  COND FALSE  !(revert)
[L5435]  COND TRUE   __tmp__DType[this] == OMToken
[L5436]  CALL        call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4324]              __var_1 := null;
[L4325]  COND TRUE   !(spender_s302 != null)
[L4326]              revert := true;
[L5436]  RET         call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5437]  COND TRUE   revert
[L1668]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1669]              assume revert || gas < 0;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:45,047 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:45,047 INFO  L82        PathProgramCache]: Analyzing trace with hash -2139224385, now seen corresponding path program 1 times
[2020-11-25 02:29:45,048 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:45,064 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:45,285 INFO  L134       CoverageAnalysis]: Checked inductivity of 1032 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 1023 trivial. 0 not checked.
[2020-11-25 02:29:45,285 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:29:45,286 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:29:45,286 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:45,286 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:29:45,286 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:29:45,287 INFO  L87              Difference]: Start difference. First operand 7798 states and 9170 transitions. cyclomatic complexity: 1380 Second operand 7 states.
[2020-11-25 02:29:45,429 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:45,429 INFO  L93              Difference]: Finished difference Result 7821 states and 9196 transitions.
[2020-11-25 02:29:45,429 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:29:45,429 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7821 states and 9196 transitions.
[2020-11-25 02:29:45,444 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-25 02:29:45,460 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7821 states to 7804 states and 9176 transitions.
[2020-11-25 02:29:45,460 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1896
[2020-11-25 02:29:45,461 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1896
[2020-11-25 02:29:45,461 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7804 states and 9176 transitions.
[2020-11-25 02:29:45,466 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:45,466 INFO  L728         BuchiCegarLoop]: Abstraction has 7804 states and 9176 transitions.
[2020-11-25 02:29:45,470 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7804 states and 9176 transitions.
[2020-11-25 02:29:45,507 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7804 to 7804.
[2020-11-25 02:29:45,507 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7804 states.
[2020-11-25 02:29:45,516 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7804 states to 7804 states and 9176 transitions.
[2020-11-25 02:29:45,516 INFO  L751         BuchiCegarLoop]: Abstraction has 7804 states and 9176 transitions.
[2020-11-25 02:29:45,516 INFO  L631         BuchiCegarLoop]: Abstraction has 7804 states and 9176 transitions.
[2020-11-25 02:29:45,516 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 02:29:45,517 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7804 states and 9176 transitions.
[2020-11-25 02:29:45,524 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-25 02:29:45,524 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:45,524 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:45,526 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:45,526 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND TRUE   __exception
[L1645]              __tmp__Balance := Balance;
[L1646]              __tmp__DType := DType;
[L1647]              __tmp__Alloc := Alloc;
[L1648]              __tmp__balance_ADDR := balance_ADDR;
[L1649]              __tmp__M_Ref_int := M_Ref_int;
[L1650]              __tmp__sum__balances0 := sum__balances0;
[L1651]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1653]              __tmp__sum__allowed1 := sum__allowed1;
[L1654]              __tmp__M_Ref_bool := M_Ref_bool;
[L1655]              __tmp__sum := sum;
[L1656]              __tmp__Length := Length;
[L1657]              __tmp__now := now;
[L1658]              __tmp___balances_ERC20 := _balances_ERC20;
[L1659]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1660]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1661]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1662]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1663]              __tmp___paused_Pausable := _paused_Pausable;
[L1664]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1665]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1666]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1667]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1668]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5431]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5431]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5432]  COND FALSE  !(revert)
[L5435]  COND TRUE   __tmp__DType[this] == OMToken
[L5436]  CALL        call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4324]              __var_1 := null;
[L4325]  COND TRUE   !(spender_s302 != null)
[L4326]              revert := true;
[L5436]  RET         call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5437]  COND TRUE   revert
[L1668]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1669]              assume revert || gas < 0;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND TRUE   __exception
[L1645]              __tmp__Balance := Balance;
[L1646]              __tmp__DType := DType;
[L1647]              __tmp__Alloc := Alloc;
[L1648]              __tmp__balance_ADDR := balance_ADDR;
[L1649]              __tmp__M_Ref_int := M_Ref_int;
[L1650]              __tmp__sum__balances0 := sum__balances0;
[L1651]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1653]              __tmp__sum__allowed1 := sum__allowed1;
[L1654]              __tmp__M_Ref_bool := M_Ref_bool;
[L1655]              __tmp__sum := sum;
[L1656]              __tmp__Length := Length;
[L1657]              __tmp__now := now;
[L1658]              __tmp___balances_ERC20 := _balances_ERC20;
[L1659]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1660]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1661]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1662]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1663]              __tmp___paused_Pausable := _paused_Pausable;
[L1664]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1665]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1666]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1667]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1668]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5431]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5431]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5432]  COND FALSE  !(revert)
[L5435]  COND TRUE   __tmp__DType[this] == OMToken
[L5436]  CALL        call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4324]              __var_1 := null;
[L4325]  COND TRUE   !(spender_s302 != null)
[L4326]              revert := true;
[L5436]  RET         call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5437]  COND TRUE   revert
[L1668]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1669]              assume revert || gas < 0;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:45,530 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:45,530 INFO  L82        PathProgramCache]: Analyzing trace with hash -1822495339, now seen corresponding path program 1 times
[2020-11-25 02:29:45,531 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:45,548 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:45,712 INFO  L134       CoverageAnalysis]: Checked inductivity of 1026 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1020 trivial. 0 not checked.
[2020-11-25 02:29:45,712 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:45,712 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:29:45,713 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:45,713 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:29:45,713 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:29:45,713 INFO  L87              Difference]: Start difference. First operand 7804 states and 9176 transitions. cyclomatic complexity: 1380 Second operand 8 states.
[2020-11-25 02:29:45,844 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:45,844 INFO  L93              Difference]: Finished difference Result 7825 states and 9199 transitions.
[2020-11-25 02:29:45,844 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:29:45,844 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7825 states and 9199 transitions.
[2020-11-25 02:29:45,859 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-25 02:29:45,874 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7825 states to 7792 states and 9162 transitions.
[2020-11-25 02:29:45,874 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1896
[2020-11-25 02:29:45,875 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1896
[2020-11-25 02:29:45,875 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7792 states and 9162 transitions.
[2020-11-25 02:29:45,880 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:45,880 INFO  L728         BuchiCegarLoop]: Abstraction has 7792 states and 9162 transitions.
[2020-11-25 02:29:45,884 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7792 states and 9162 transitions.
[2020-11-25 02:29:45,920 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7792 to 7792.
[2020-11-25 02:29:45,921 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7792 states.
[2020-11-25 02:29:45,930 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7792 states to 7792 states and 9162 transitions.
[2020-11-25 02:29:45,930 INFO  L751         BuchiCegarLoop]: Abstraction has 7792 states and 9162 transitions.
[2020-11-25 02:29:45,930 INFO  L631         BuchiCegarLoop]: Abstraction has 7792 states and 9162 transitions.
[2020-11-25 02:29:45,930 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 02:29:45,930 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7792 states and 9162 transitions.
[2020-11-25 02:29:45,938 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-25 02:29:45,938 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:45,938 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:45,939 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:45,939 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND TRUE   __exception
[L1645]              __tmp__Balance := Balance;
[L1646]              __tmp__DType := DType;
[L1647]              __tmp__Alloc := Alloc;
[L1648]              __tmp__balance_ADDR := balance_ADDR;
[L1649]              __tmp__M_Ref_int := M_Ref_int;
[L1650]              __tmp__sum__balances0 := sum__balances0;
[L1651]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1653]              __tmp__sum__allowed1 := sum__allowed1;
[L1654]              __tmp__M_Ref_bool := M_Ref_bool;
[L1655]              __tmp__sum := sum;
[L1656]              __tmp__Length := Length;
[L1657]              __tmp__now := now;
[L1658]              __tmp___balances_ERC20 := _balances_ERC20;
[L1659]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1660]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1661]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1662]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1663]              __tmp___paused_Pausable := _paused_Pausable;
[L1664]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1665]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1666]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1667]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1668]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5431]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5431]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5432]  COND FALSE  !(revert)
[L5435]  COND TRUE   __tmp__DType[this] == OMToken
[L5436]  CALL        call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4324]              __var_1 := null;
[L4325]  COND TRUE   !(spender_s302 != null)
[L4326]              revert := true;
[L5436]  RET         call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5437]  COND TRUE   revert
[L1668]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1669]              assume revert || gas < 0;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND FALSE  !(choice == 23)
[L9764]  COND TRUE   choice == 22
[L9765]              gas := gas - 21000;
[L9766]  COND TRUE   gas >= 0
[L9767]              assume value_s955 >= 0 && value_s955 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9768]              assume msgvalue_MSG == 0;
[L9769]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND TRUE   __exception
[L1645]              __tmp__Balance := Balance;
[L1646]              __tmp__DType := DType;
[L1647]              __tmp__Alloc := Alloc;
[L1648]              __tmp__balance_ADDR := balance_ADDR;
[L1649]              __tmp__M_Ref_int := M_Ref_int;
[L1650]              __tmp__sum__balances0 := sum__balances0;
[L1651]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1653]              __tmp__sum__allowed1 := sum__allowed1;
[L1654]              __tmp__M_Ref_bool := M_Ref_bool;
[L1655]              __tmp__sum := sum;
[L1656]              __tmp__Length := Length;
[L1657]              __tmp__now := now;
[L1658]              __tmp___balances_ERC20 := _balances_ERC20;
[L1659]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1660]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1661]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1662]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1663]              __tmp___paused_Pausable := _paused_Pausable;
[L1664]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1665]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1666]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1667]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1668]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5431]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5431]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5432]  COND FALSE  !(revert)
[L5435]  COND TRUE   __tmp__DType[this] == OMToken
[L5436]  CALL        call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4324]              __var_1 := null;
[L4325]  COND TRUE   !(spender_s302 != null)
[L4326]              revert := true;
[L5436]  RET         call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5437]  COND TRUE   revert
[L1668]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1669]              assume revert || gas < 0;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:45,943 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:45,943 INFO  L82        PathProgramCache]: Analyzing trace with hash 1398895935, now seen corresponding path program 1 times
[2020-11-25 02:29:45,944 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:45,961 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:29:45,981 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:29:46,124 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:46,124 INFO  L82        PathProgramCache]: Analyzing trace with hash -764534035, now seen corresponding path program 1 times
[2020-11-25 02:29:46,125 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:46,129 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:29:46,132 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:29:46,142 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:46,142 INFO  L82        PathProgramCache]: Analyzing trace with hash 376095403, now seen corresponding path program 1 times
[2020-11-25 02:29:46,143 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:46,164 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:29:46,188 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 139 to 277
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #6: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #7: 2503 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2503 to 5003
[2020-11-25 02:29:46,636 WARN  L188               SmtUtils]: Spent 111.00 ms on a formula simplification that was a NOOP. DAG size: 261
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3137 to 6271
[2020-11-25 02:29:47,081 WARN  L188               SmtUtils]: Spent 432.00 ms on a formula simplification. DAG size of input: 209 DAG size of output: 209
[2020-11-25 02:29:47,679 WARN  L188               SmtUtils]: Spent 594.00 ms on a formula simplification. DAG size of input: 278 DAG size of output: 273
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.002s / 0.005s total
Resizing node table from 12541 to 25073
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8053 to 16103
[2020-11-25 02:29:47,886 WARN  L188               SmtUtils]: Spent 176.00 ms on a formula simplification. DAG size of input: 172 DAG size of output: 166
[2020-11-25 02:29:48,116 WARN  L188               SmtUtils]: Spent 228.00 ms on a formula simplification that was a NOOP. DAG size: 343
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
[2020-11-25 02:29:48,562 WARN  L188               SmtUtils]: Spent 437.00 ms on a formula simplification. DAG size of input: 278 DAG size of output: 278
[2020-11-25 02:29:48,771 WARN  L188               SmtUtils]: Spent 206.00 ms on a formula simplification that was a NOOP. DAG size: 278
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6271 to 12541
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
[2020-11-25 02:29:49,100 WARN  L188               SmtUtils]: Spent 310.00 ms on a formula simplification. DAG size of input: 220 DAG size of output: 191
[2020-11-25 02:29:49,109 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
[2020-11-25 02:29:51,266 WARN  L188               SmtUtils]: Spent 1.03 s on a formula simplification. DAG size of input: 476 DAG size of output: 445
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 02:29:51,611 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification that was a NOOP. DAG size: 342
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #6: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #7: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-25 02:29:52,295 WARN  L188               SmtUtils]: Spent 368.00 ms on a formula simplification. DAG size of input: 209 DAG size of output: 209
[2020-11-25 02:29:52,979 WARN  L188               SmtUtils]: Spent 681.00 ms on a formula simplification. DAG size of input: 277 DAG size of output: 273
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 02:29:53,155 WARN  L188               SmtUtils]: Spent 162.00 ms on a formula simplification. DAG size of input: 172 DAG size of output: 166
[2020-11-25 02:29:53,393 WARN  L188               SmtUtils]: Spent 236.00 ms on a formula simplification that was a NOOP. DAG size: 343
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
[2020-11-25 02:29:53,881 WARN  L188               SmtUtils]: Spent 480.00 ms on a formula simplification. DAG size of input: 278 DAG size of output: 278
[2020-11-25 02:29:55,139 WARN  L188               SmtUtils]: Spent 1.26 s on a formula simplification. DAG size of input: 564 DAG size of output: 555
Garbage collection #1: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #2: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #3: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #4: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #5: 3517 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3517 to 7027
Garbage collection #6: 7027 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7027 to 14051
Garbage collection #7: 14051 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 14051 to 28099
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
[2020-11-25 02:29:56,010 WARN  L188               SmtUtils]: Spent 840.00 ms on a formula simplification. DAG size of input: 320 DAG size of output: 305
[2020-11-25 02:29:56,404 WARN  L188               SmtUtils]: Spent 372.00 ms on a formula simplification that was a NOOP. DAG size: 424
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 13313 to 26597
Garbage collection #9: 26597 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 26597 to 53189
Garbage collection #10: 53189 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 53189 to 103183
[2020-11-25 02:29:57,381 WARN  L188               SmtUtils]: Spent 901.00 ms on a formula simplification. DAG size of input: 320 DAG size of output: 305
[2020-11-25 02:29:58,003 WARN  L188               SmtUtils]: Spent 620.00 ms on a formula simplification. DAG size of input: 426 DAG size of output: 425
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #8: 18353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 18353 to 36697
Garbage collection #9: 36697 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 36697 to 73387
Garbage collection #10: 73387 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 73387 to 123379
[2020-11-25 02:29:58,972 WARN  L188               SmtUtils]: Spent 931.00 ms on a formula simplification. DAG size of input: 446 DAG size of output: 420
[2020-11-25 02:29:58,993 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:29:59,017 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:29:59,029 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:29:59 BasicIcfg
[2020-11-25 02:29:59,029 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:29:59,030 INFO  L168              Benchmark]: Toolchain (without parser) took 37689.72 ms. Allocated memory was 1.0 GB in the beginning and 3.7 GB in the end (delta: 2.7 GB). Free memory was 929.8 MB in the beginning and 1.4 GB in the end (delta: -436.1 MB). Peak memory consumption was 2.9 GB. Max. memory is 15.3 GB.
[2020-11-25 02:29:59,031 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.32 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:29:59,031 INFO  L168              Benchmark]: Boogie Preprocessor took 155.92 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 903.0 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-25 02:29:59,031 INFO  L168              Benchmark]: UtopiaSpecLang took 81.87 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:29:59,032 INFO  L168              Benchmark]: Boogie Printer took 26.85 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 886.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:29:59,032 INFO  L168              Benchmark]: RCFGBuilder took 1324.84 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 55.6 MB). Free memory was 886.8 MB in the beginning and 822.6 MB in the end (delta: 64.3 MB). Peak memory consumption was 176.1 MB. Max. memory is 15.3 GB.
[2020-11-25 02:29:59,033 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.11 ms. Allocated memory is still 1.1 GB. Free memory was 822.6 MB in the beginning and 819.2 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:29:59,033 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3066.00 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 453.0 MB). Free memory was 819.2 MB in the beginning and 1.3 GB in the end (delta: -433.7 MB). Peak memory consumption was 408.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:29:59,034 INFO  L168              Benchmark]: BlockEncodingV2 took 218.83 ms. Allocated memory is still 1.5 GB. Free memory was 1.3 GB in the beginning and 1.1 GB in the end (delta: 137.7 MB). Peak memory consumption was 137.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:29:59,034 INFO  L168              Benchmark]: BuchiAutomizer took 32774.27 ms. Allocated memory was 1.5 GB in the beginning and 3.7 GB in the end (delta: 2.2 GB). Free memory was 1.1 GB in the beginning and 1.4 GB in the end (delta: -250.8 MB). Peak memory consumption was 2.6 GB. Max. memory is 15.3 GB.
[2020-11-25 02:29:59,037 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    9266 locations, 17161 edges
  - StatisticsResult: Encoded RCFG
    9110 locations, 16734 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.32 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 155.92 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 903.0 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 81.87 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 26.85 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 886.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1324.84 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 55.6 MB). Free memory was 886.8 MB in the beginning and 822.6 MB in the end (delta: 64.3 MB). Peak memory consumption was 176.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.11 ms. Allocated memory is still 1.1 GB. Free memory was 822.6 MB in the beginning and 819.2 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3066.00 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 453.0 MB). Free memory was 819.2 MB in the beginning and 1.3 GB in the end (delta: -433.7 MB). Peak memory consumption was 408.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 218.83 ms. Allocated memory is still 1.5 GB. Free memory was 1.3 GB in the beginning and 1.1 GB in the end (delta: 137.7 MB). Peak memory consumption was 137.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 32774.27 ms. Allocated memory was 1.5 GB in the beginning and 3.7 GB in the end (delta: 2.2 GB). Free memory was 1.1 GB in the beginning and 1.4 GB in the end (delta: -250.8 MB). Peak memory consumption was 2.6 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3605 locations, 5218 edges
  - StatisticsResult: BuchiProgram size
    9266 locations, 17161 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 14 terminating modules (14 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.14 modules have a trivial ranking function, the largest among these consists of 17 locations. The remainder module has 7792 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 32.7s and 15 iterations.  TraceHistogramMax:9. Analysis of lassos took 16.4s. Construction of modules took 10.7s. BÃ¼chi inclusion checks took 3.9s. Highest rank in rank-based complementation 0. Minimization of det autom 14. Minimization of nondet autom 0. Automata minimization 0.7s AutomataMinimizationTime, 14 MinimizatonAttempts, 2367 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 7808 states and ocurred in iteration 11.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 79455 SDtfs, 28008 SDslu, 314070 SDs, 0 SdLazy, 146338 SolverSat, 6430 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 10.7s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU14 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(3979038) = (new OMToken)({from : 3979026, name : 3979034, symbol : 3979035, decimals : 3979023});
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
ERC20Pausable(3979038).approve~address~uint256.gas(3979002)({from : 3979032, spender : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND TRUE   __exception
[L1645]              __tmp__Balance := Balance;
[L1646]              __tmp__DType := DType;
[L1647]              __tmp__Alloc := Alloc;
[L1648]              __tmp__balance_ADDR := balance_ADDR;
[L1649]              __tmp__M_Ref_int := M_Ref_int;
[L1650]              __tmp__sum__balances0 := sum__balances0;
[L1651]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1653]              __tmp__sum__allowed1 := sum__allowed1;
[L1654]              __tmp__M_Ref_bool := M_Ref_bool;
[L1655]              __tmp__sum := sum;
[L1656]              __tmp__Length := Length;
[L1657]              __tmp__now := now;
[L1658]              __tmp___balances_ERC20 := _balances_ERC20;
[L1659]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1660]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1661]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1662]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1663]              __tmp___paused_Pausable := _paused_Pausable;
[L1664]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1665]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1666]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1667]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1668]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5431]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5431]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5432]  COND FALSE  !(revert)
[L5435]  COND TRUE   __tmp__DType[this] == OMToken
[L5436]  CALL        call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4324]              __var_1 := null;
[L4325]  COND TRUE   !(spender_s302 != null)
[L4326]              revert := true;
[L5436]  RET         call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5437]  COND TRUE   revert
[L1668]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1669]              assume revert || gas < 0;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);

Loop:
ERC20Pausable(3979038).approve~address~uint256.gas(3979001)({from : 3979039, spender : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s955;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1642]              havoc __exception;
[L1643]              revert := false;
[L1644]  COND TRUE   __exception
[L1645]              __tmp__Balance := Balance;
[L1646]              __tmp__DType := DType;
[L1647]              __tmp__Alloc := Alloc;
[L1648]              __tmp__balance_ADDR := balance_ADDR;
[L1649]              __tmp__M_Ref_int := M_Ref_int;
[L1650]              __tmp__sum__balances0 := sum__balances0;
[L1651]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1653]              __tmp__sum__allowed1 := sum__allowed1;
[L1654]              __tmp__M_Ref_bool := M_Ref_bool;
[L1655]              __tmp__sum := sum;
[L1656]              __tmp__Length := Length;
[L1657]              __tmp__now := now;
[L1658]              __tmp___balances_ERC20 := _balances_ERC20;
[L1659]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1660]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1661]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1662]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1663]              __tmp___paused_Pausable := _paused_Pausable;
[L1664]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1665]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1666]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1667]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1668]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5431]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5431]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5432]  COND FALSE  !(revert)
[L5435]  COND TRUE   __tmp__DType[this] == OMToken
[L5436]  CALL        call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L4324]              __var_1 := null;
[L4325]  COND TRUE   !(spender_s302 != null)
[L4326]              revert := true;
[L5436]  RET         call __var_29 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L5437]  COND TRUE   revert
[L1668]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);
[L1669]              assume revert || gas < 0;
[L9769]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s955, value_s955);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
