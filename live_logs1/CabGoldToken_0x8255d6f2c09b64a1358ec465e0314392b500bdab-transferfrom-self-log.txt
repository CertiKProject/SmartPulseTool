This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 11:53:56,676 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 11:53:56,677 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 11:53:56,687 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 11:53:56,687 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 11:53:56,688 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 11:53:56,689 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 11:53:56,690 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 11:53:56,691 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 11:53:56,692 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 11:53:56,693 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 11:53:56,693 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 11:53:56,694 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 11:53:56,694 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 11:53:56,695 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 11:53:56,696 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 11:53:56,696 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 11:53:56,697 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 11:53:56,698 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 11:53:56,700 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 11:53:56,700 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 11:53:56,701 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 11:53:56,703 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 11:53:56,703 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 11:53:56,703 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 11:53:56,704 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 11:53:56,704 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 11:53:56,704 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 11:53:56,705 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 11:53:56,705 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 11:53:56,705 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 11:53:56,706 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 11:53:56,706 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 11:53:56,707 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 11:53:56,707 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 11:53:56,707 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 11:53:56,708 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 11:53:56,708 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 11:53:56,708 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 11:53:56,709 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 11:53:56,709 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 11:53:56,709 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 11:53:56,717 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 11:53:56,717 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 11:53:56,718 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 11:53:56,718 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 11:53:56,718 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 11:53:56,718 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 11:53:56,718 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 11:53:56,718 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 11:53:56,718 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 11:53:56,719 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 11:53:56,719 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 11:53:56,719 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 11:53:56,719 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 11:53:56,719 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 11:53:56,719 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 11:53:56,719 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 11:53:56,719 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 11:53:56,719 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 11:53:56,720 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 11:53:56,720 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 11:53:56,720 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 11:53:56,720 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 11:53:56,720 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 11:53:56,720 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 11:53:56,720 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 11:53:56,720 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 11:53:56,743 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 11:53:56,755 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 11:53:56,757 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 11:53:56,758 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 11:53:56,759 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 11:53:56,759 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl
[2020-11-25 11:53:56,760 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl'
[2020-11-25 11:53:56,849 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 11:53:56,851 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 11:53:56,851 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 11:53:56,851 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 11:53:56,851 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 11:53:56,867 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:56" (1/1) ...
[2020-11-25 11:53:56,869 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:56" (1/1) ...
[2020-11-25 11:53:56,903 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:56" (1/1) ...
[2020-11-25 11:53:56,903 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:56" (1/1) ...
[2020-11-25 11:53:56,925 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:56" (1/1) ...
[2020-11-25 11:53:56,938 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:56" (1/1) ...
[2020-11-25 11:53:56,948 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:56" (1/1) ...
[2020-11-25 11:53:56,965 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 11:53:56,966 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 11:53:56,966 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 11:53:56,968 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 11:53:56,971 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:56" (1/1) ...
[2020-11-25 11:53:56,989 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transferFrom(from, to, value), return == true && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:53:56,994 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transferFrom(from, to, value), return == true && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:53:57,002 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transferFrom(from, to, value), return == true && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:53:57,009 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=sender_s325 || p2!=msg.sender ) && sender_s325==recipient_s325 ) && amount_s325<=_balances_ERC20[this][sender_s325] ) && amount_s325<=_allowances_ERC20[this][sender_s325][msg.sender] ) && amount_s325>=0 ) && amount_s325<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s325]>=0 ) && _balances_ERC20[this][recipient_s325]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][sender_s325]>=0 ) && _balances_ERC20[this][sender_s325]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][sender_s325][msg.sender]>=0 ) && _allowances_ERC20[this][sender_s325][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],BinaryExpression[COMPEQ,IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IdentifierExpression[recipient_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 11:53:57,012 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && _allowances_ERC20[this][sender_s325][msg.sender]==( ( old(_allowances_ERC20[this][sender_s325][msg.sender]) ) - amount_s325 ) ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this][p1][p2]==( old(_allowances_ERC20[this][p1][p2]) ) ) && name_CabGoldToken[this]==( old(name_CabGoldToken[this]) ) ) && symbol_CabGoldToken[this]==( old(symbol_CabGoldToken[this]) ) ) && decimals_CabGoldToken[this]==( old(decimals_CabGoldToken[this]) ) ) && active_CabGoldToken[this]==( old(active_CabGoldToken[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],IdentifierExpression[amount_s325,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[active_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[active_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]]
[2020-11-25 11:53:57,020 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transferFrom(from, to, value), return == true && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:53:57,020 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC200) ==> ( <>AP(success_transferFrom_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 11:53:57,031 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:53:57 PropertyContainer
[2020-11-25 11:53:57,032 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 11:53:57,032 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 11:53:57,032 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 11:53:57,032 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 11:53:57,033 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:56" (1/2) ...
[2020-11-25 11:53:57,033 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 11:53:57,033 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 11:53:57,051 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:53:57" (2/2) ...
[2020-11-25 11:53:57,051 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 11:53:57,052 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 11:53:57,052 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 11:53:57,052 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 11:53:57,052 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:56" (1/2) ...
[2020-11-25 11:53:57,103 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 11:53:57,103 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 11:53:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:53:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 11:53:57,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 11:53:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:53:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 11:53:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:53:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 11:53:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 11:53:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:53:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 11:53:57,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 11:53:57,105 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 11:53:57,105 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 11:53:57,105 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 11:53:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 11:53:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 11:53:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 11:53:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:53:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 11:53:57,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 11:53:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 11:53:57,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 11:53:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 11:53:57,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 11:53:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 11:53:57,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 11:53:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 11:53:57,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 11:53:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 11:53:57,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 11:53:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:53:57,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:53:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:53:57,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:53:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:53:57,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:53:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:53:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:53:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:53:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:53:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 11:53:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 11:53:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 11:53:57,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 11:53:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 11:53:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 11:53:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 11:53:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 11:53:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 11:53:57,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 11:53:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 11:53:57,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 11:53:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 11:53:57,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 11:53:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 11:53:57,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 11:53:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 11:53:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 11:53:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 11:53:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 11:53:57,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 11:53:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 11:53:57,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 11:53:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 11:53:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 11:53:57,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 11:53:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 11:53:57,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 11:53:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 11:53:57,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 11:53:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken_NoBaseCtor__success
[2020-11-25 11:53:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken
[2020-11-25 11:53:57,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken
[2020-11-25 11:53:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken
[2020-11-25 11:53:57,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken
[2020-11-25 11:53:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken
[2020-11-25 11:53:57,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken
[2020-11-25 11:53:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken
[2020-11-25 11:53:57,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken
[2020-11-25 11:53:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken
[2020-11-25 11:53:57,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken
[2020-11-25 11:53:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 11:53:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 11:53:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 11:53:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 11:53:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 11:53:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 11:53:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 11:53:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 11:53:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 11:53:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 11:53:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 11:53:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 11:53:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 11:53:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 11:53:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 11:53:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 11:53:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 11:53:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 11:53:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CabGoldToken
[2020-11-25 11:53:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 11:53:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 11:53:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 11:53:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:53:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 11:53:57,115 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 11:53:57,115 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:57,115 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:57,115 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:57,115 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:57,115 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:57,115 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:53:57,115 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 11:53:57,115 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 11:53:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:53:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 11:53:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 11:53:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 11:53:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 11:53:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 11:53:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:53:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:53:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:53:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 11:53:57,117 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:53:57,117 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:53:57,117 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:53:57,117 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:53:57,117 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:53:57,117 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:53:57,117 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:53:57,117 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:53:57,117 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:53:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:53:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:53:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:53:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:53:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 11:53:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 11:53:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 11:53:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 11:53:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 11:53:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 11:53:57,119 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 11:53:57,119 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 11:53:57,119 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 11:53:57,119 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 11:53:57,119 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 11:53:57,119 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 11:53:57,119 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 11:53:57,119 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 11:53:57,119 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 11:53:57,119 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 11:53:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 11:53:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 11:53:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 11:53:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 11:53:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 11:53:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 11:53:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 11:53:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 11:53:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 11:53:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 11:53:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 11:53:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 11:53:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 11:53:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 11:53:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken_NoBaseCtor__fail
[2020-11-25 11:53:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken__success
[2020-11-25 11:53:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken__fail
[2020-11-25 11:53:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken__success
[2020-11-25 11:53:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken__fail
[2020-11-25 11:53:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken__success
[2020-11-25 11:53:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken__fail
[2020-11-25 11:53:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken__success
[2020-11-25 11:53:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken__fail
[2020-11-25 11:53:57,122 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken__success
[2020-11-25 11:53:57,122 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken__fail
[2020-11-25 11:53:57,122 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 11:53:57,122 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 11:53:57,122 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 11:53:57,122 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 11:53:57,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 11:53:57,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 11:53:57,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 11:53:57,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 11:53:57,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:53:57,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:53:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 11:53:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 11:53:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:53:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 11:53:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:53:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 11:53:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 11:53:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:53:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:53:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 11:53:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 11:53:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:53:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:53:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 11:53:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 11:53:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 11:53:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 11:53:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:53:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 11:53:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:53:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:53:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:53:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 11:53:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:53:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:53:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:53:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:53:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:53:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:53:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:53:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:53:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:53:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:53:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:53:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:53:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:53:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:53:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:53:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:53:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 11:53:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 11:53:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 11:53:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 11:53:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 11:53:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 11:53:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 11:53:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 11:53:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 11:53:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 11:53:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 11:53:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 11:53:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 11:53:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 11:53:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 11:53:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 11:53:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 11:53:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 11:53:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 11:53:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 11:53:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 11:53:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 11:53:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 11:53:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 11:53:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 11:53:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 11:53:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 11:53:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 11:53:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 11:53:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 11:53:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 11:53:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 11:53:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 11:53:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 11:53:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 11:53:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 11:53:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 11:53:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 11:53:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 11:53:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 11:53:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken_NoBaseCtor__fail
[2020-11-25 11:53:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken_NoBaseCtor__success
[2020-11-25 11:53:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken__fail
[2020-11-25 11:53:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken__success
[2020-11-25 11:53:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken__fail
[2020-11-25 11:53:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken__success
[2020-11-25 11:53:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken__fail
[2020-11-25 11:53:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken__success
[2020-11-25 11:53:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken__fail
[2020-11-25 11:53:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken__success
[2020-11-25 11:53:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken__fail
[2020-11-25 11:53:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken__success
[2020-11-25 11:53:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 11:53:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 11:53:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 11:53:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 11:53:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 11:53:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 11:53:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 11:53:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 11:53:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 11:53:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 11:53:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 11:53:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 11:53:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 11:53:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 11:53:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 11:53:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 11:53:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 11:53:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 11:53:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 11:53:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 11:53:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 11:53:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 11:53:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CabGoldToken
[2020-11-25 11:53:57,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 11:53:57,133 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 11:53:57,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 11:53:57,540 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:53:57,541 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:53:57,541 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:53:57,700 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:53:58,036 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 11:53:58,036 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 11:53:58,038 INFO  L202        PluginConnector]: Adding new model CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:53:58 BoogieIcfgContainer
[2020-11-25 11:53:58,038 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:53:57" (2/2) ...
[2020-11-25 11:53:58,039 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 11:53:58,039 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@58bcf84b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:53:58, skipping insertion in model container
[2020-11-25 11:53:58,039 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 11:53:58,039 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 11:53:58,039 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 11:53:58,041 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 11:53:58,041 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:56" (1/3) ...
[2020-11-25 11:53:58,041 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4260ecc5 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:53:58, skipping insertion in model container
[2020-11-25 11:53:58,041 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:53:57" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 11:53:58,076 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:53:58 NWAContainer
[2020-11-25 11:53:58,076 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 11:53:58,076 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 11:53:58,076 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 11:53:58,077 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 11:53:58,078 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:53:58" (3/4) ...
[2020-11-25 11:53:58,078 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@1a85c0a8 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:53:58, skipping insertion in model container
[2020-11-25 11:53:58,078 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:53:58" (4/4) ...
[2020-11-25 11:53:58,081 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 11:53:58,086 INFO  L110   BuchiProductObserver]: Initial RCFG 2281 locations, 3355 edges
[2020-11-25 11:53:58,086 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 11:53:58,098 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 11:53:59,745 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 11:53:59,753 INFO  L110   BuchiProductObserver]: BuchiProgram size 5920 locations, 11057 edges
[2020-11-25 11:53:59,753 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:53:59 BoogieIcfgContainer
[2020-11-25 11:53:59,753 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 11:53:59,753 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 11:53:59,753 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 11:53:59,755 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 11:53:59,755 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:53:59" (1/1) ...
[2020-11-25 11:53:59,865 INFO  L313           BlockEncoder]: Initial Icfg 5920 locations, 11057 edges
[2020-11-25 11:53:59,865 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 11:53:59,866 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 11:53:59,866 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 11:53:59,866 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 11:53:59,879 INFO  L70    emoveInfeasibleEdges]: Removed 162 edges and 19 locations because of local infeasibility
[2020-11-25 11:53:59,889 INFO  L70        RemoveSinkStates]: Removed 92 edges and 61 locations by removing sink states
[2020-11-25 11:53:59,902 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 11:53:59,906 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 11:53:59,910 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 11:53:59,911 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 11:53:59,914 INFO  L313           BlockEncoder]: Encoded RCFG 5812 locations, 10762 edges
[2020-11-25 11:53:59,915 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:53:59 BasicIcfg
[2020-11-25 11:53:59,915 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 11:53:59,915 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 11:53:59,915 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 11:53:59,917 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 11:53:59,917 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:53:59,917 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:56" (1/6) ...
[2020-11-25 11:53:59,919 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5686102c and model type CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:53:59, skipping insertion in model container
[2020-11-25 11:53:59,919 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:53:59,919 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:53:57" (2/6) ...
[2020-11-25 11:53:59,919 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5686102c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:53:59, skipping insertion in model container
[2020-11-25 11:53:59,919 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:53:59,919 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:53:58" (3/6) ...
[2020-11-25 11:53:59,919 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5686102c and model type CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:53:59, skipping insertion in model container
[2020-11-25 11:53:59,919 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:53:59,919 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:53:58" (4/6) ...
[2020-11-25 11:53:59,920 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5686102c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:53:59, skipping insertion in model container
[2020-11-25 11:53:59,920 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:53:59,920 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:53:59" (5/6) ...
[2020-11-25 11:53:59,920 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5686102c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 11:53:59, skipping insertion in model container
[2020-11-25 11:53:59,920 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:53:59,920 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:53:59" (6/6) ...
[2020-11-25 11:53:59,921 INFO  L404   chiAutomizerObserver]: Analyzing ICFG CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transferfrom-self.bpl_BEv2
[2020-11-25 11:53:59,955 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 11:53:59,955 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 11:53:59,955 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 11:53:59,955 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 11:53:59,955 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 11:53:59,955 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 11:53:59,955 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 11:53:59,955 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 11:53:59,955 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 11:54:00,000 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5812 states.
[2020-11-25 11:54:00,052 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:00,052 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:00,052 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:00,059 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:00,059 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:00,059 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 11:54:00,059 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5812 states.
[2020-11-25 11:54:00,081 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:00,081 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:00,081 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:00,082 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:00,082 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND TRUE   revert
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND TRUE   choice == 18
[L6339]              gas := gas - 21000;
[L6340]  COND FALSE  !(gas >= 0)
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:00,095 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:00,096 INFO  L82        PathProgramCache]: Analyzing trace with hash 843223111, now seen corresponding path program 1 times
[2020-11-25 11:54:00,101 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:00,127 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:00,166 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:54:00,167 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:54:00,168 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:54:00,537 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:00,546 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:54:00,546 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:54:00,547 INFO  L87              Difference]: Start difference. First operand 5812 states. Second operand 4 states.
[2020-11-25 11:54:01,161 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:01,161 INFO  L93              Difference]: Finished difference Result 3572 states and 4359 transitions.
[2020-11-25 11:54:01,161 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:54:01,162 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3572 states and 4359 transitions.
[2020-11-25 11:54:01,181 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:01,204 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3572 states to 3572 states and 4359 transitions.
[2020-11-25 11:54:01,205 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 11:54:01,207 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 887
[2020-11-25 11:54:01,208 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3572 states and 4359 transitions.
[2020-11-25 11:54:01,218 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:01,218 INFO  L728         BuchiCegarLoop]: Abstraction has 3572 states and 4359 transitions.
[2020-11-25 11:54:01,233 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3572 states and 4359 transitions.
[2020-11-25 11:54:01,294 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3572 to 3572.
[2020-11-25 11:54:01,294 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3572 states.
[2020-11-25 11:54:01,301 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3572 states to 3572 states and 4359 transitions.
[2020-11-25 11:54:01,302 INFO  L751         BuchiCegarLoop]: Abstraction has 3572 states and 4359 transitions.
[2020-11-25 11:54:01,302 INFO  L631         BuchiCegarLoop]: Abstraction has 3572 states and 4359 transitions.
[2020-11-25 11:54:01,302 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 11:54:01,302 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3572 states and 4359 transitions.
[2020-11-25 11:54:01,310 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:01,310 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:01,310 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:01,312 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:01,312 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND TRUE   revert
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND FALSE  !(choice == 14)
[L6370]  COND TRUE   choice == 13
[L6371]              gas := gas - 21000;
[L6372]  COND TRUE   gas >= 0
[L6373]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6374]              assume msgvalue_MSG == 0;
[L6375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s325 || p2 != msgsender_MSG) && sender_s325 == recipient_s325) && amount_s325 <= _balances_ERC20[this][sender_s325]) && amount_s325 <= _allowances_ERC20[this][sender_s325][msgsender_MSG]) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L604]               havoc __exception;
[L605]               revert := false;
[L606]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3017]  COND TRUE   DType[this] == CabGoldToken
[L3018]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3245]              __var_4 := null;
[L3246]  COND TRUE   !(sender_s435 != null)
[L3247]              revert := true;
[L3018]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3019]  COND TRUE   revert
[L632]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L633]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][sender_s325][msgsender_MSG] == old(_allowances_ERC20[this][sender_s325][msgsender_MSG]) - amount_s325) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L3]                 revert := revert_hold;
[L6375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND FALSE  !(choice == 14)
[L6370]  COND TRUE   choice == 13
[L6371]              gas := gas - 21000;
[L6372]  COND TRUE   gas >= 0
[L6373]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6374]              assume msgvalue_MSG == 0;
[L6375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s325 || p2 != msgsender_MSG) && sender_s325 == recipient_s325) && amount_s325 <= _balances_ERC20[this][sender_s325]) && amount_s325 <= _allowances_ERC20[this][sender_s325][msgsender_MSG]) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L604]               havoc __exception;
[L605]               revert := false;
[L606]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3017]  COND TRUE   DType[this] == CabGoldToken
[L3018]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3245]              __var_4 := null;
[L3246]  COND TRUE   !(sender_s435 != null)
[L3247]              revert := true;
[L3018]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3019]  COND TRUE   revert
[L632]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L633]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][sender_s325][msgsender_MSG] == old(_allowances_ERC20[this][sender_s325][msgsender_MSG]) - amount_s325) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L3]                 revert := revert_hold;
[L6375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:01,316 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:01,316 INFO  L82        PathProgramCache]: Analyzing trace with hash 2127725730, now seen corresponding path program 1 times
[2020-11-25 11:54:01,317 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:01,327 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:01,348 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:54:01,349 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:54:01,349 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:54:01,350 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:01,350 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:54:01,350 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:54:01,350 INFO  L87              Difference]: Start difference. First operand 3572 states and 4359 transitions. cyclomatic complexity: 789 Second operand 3 states.
[2020-11-25 11:54:01,469 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:01,470 INFO  L93              Difference]: Finished difference Result 4894 states and 6016 transitions.
[2020-11-25 11:54:01,470 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:54:01,470 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4894 states and 6016 transitions.
[2020-11-25 11:54:01,487 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:54:01,508 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4894 states to 4894 states and 6016 transitions.
[2020-11-25 11:54:01,508 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1285
[2020-11-25 11:54:01,509 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1285
[2020-11-25 11:54:01,509 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4894 states and 6016 transitions.
[2020-11-25 11:54:01,515 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:01,515 INFO  L728         BuchiCegarLoop]: Abstraction has 4894 states and 6016 transitions.
[2020-11-25 11:54:01,519 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4894 states and 6016 transitions.
[2020-11-25 11:54:01,567 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4894 to 4234.
[2020-11-25 11:54:01,567 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4234 states.
[2020-11-25 11:54:01,572 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4234 states to 4234 states and 5216 transitions.
[2020-11-25 11:54:01,572 INFO  L751         BuchiCegarLoop]: Abstraction has 4234 states and 5216 transitions.
[2020-11-25 11:54:01,572 INFO  L631         BuchiCegarLoop]: Abstraction has 4234 states and 5216 transitions.
[2020-11-25 11:54:01,572 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 11:54:01,572 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4234 states and 5216 transitions.
[2020-11-25 11:54:01,579 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:01,580 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:01,580 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:01,581 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:01,581 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND TRUE   revert
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND TRUE   revert
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND FALSE  !(choice == 14)
[L6370]  COND TRUE   choice == 13
[L6371]              gas := gas - 21000;
[L6372]  COND TRUE   gas >= 0
[L6373]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6374]              assume msgvalue_MSG == 0;
[L6375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s325 || p2 != msgsender_MSG) && sender_s325 == recipient_s325) && amount_s325 <= _balances_ERC20[this][sender_s325]) && amount_s325 <= _allowances_ERC20[this][sender_s325][msgsender_MSG]) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L604]               havoc __exception;
[L605]               revert := false;
[L606]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3017]  COND TRUE   DType[this] == CabGoldToken
[L3018]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3245]              __var_4 := null;
[L3246]  COND TRUE   !(sender_s435 != null)
[L3247]              revert := true;
[L3018]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3019]  COND TRUE   revert
[L632]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L633]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][sender_s325][msgsender_MSG] == old(_allowances_ERC20[this][sender_s325][msgsender_MSG]) - amount_s325) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L3]                 revert := revert_hold;
[L6375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND FALSE  !(choice == 14)
[L6370]  COND TRUE   choice == 13
[L6371]              gas := gas - 21000;
[L6372]  COND TRUE   gas >= 0
[L6373]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6374]              assume msgvalue_MSG == 0;
[L6375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s325 || p2 != msgsender_MSG) && sender_s325 == recipient_s325) && amount_s325 <= _balances_ERC20[this][sender_s325]) && amount_s325 <= _allowances_ERC20[this][sender_s325][msgsender_MSG]) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L604]               havoc __exception;
[L605]               revert := false;
[L606]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3017]  COND TRUE   DType[this] == CabGoldToken
[L3018]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3245]              __var_4 := null;
[L3246]  COND TRUE   !(sender_s435 != null)
[L3247]              revert := true;
[L3018]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3019]  COND TRUE   revert
[L632]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L633]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && _allowances_ERC20[this][sender_s325][msgsender_MSG] == old(_allowances_ERC20[this][sender_s325][msgsender_MSG]) - amount_s325) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L3]                 revert := revert_hold;
[L6375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:01,584 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:01,584 INFO  L82        PathProgramCache]: Analyzing trace with hash -519878624, now seen corresponding path program 1 times
[2020-11-25 11:54:01,585 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:01,590 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:01,604 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:54:01,605 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:54:01,605 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:54:01,605 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:01,605 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:54:01,605 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:54:01,605 INFO  L87              Difference]: Start difference. First operand 4234 states and 5216 transitions. cyclomatic complexity: 984 Second operand 3 states.
[2020-11-25 11:54:01,694 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:01,694 INFO  L93              Difference]: Finished difference Result 4894 states and 5729 transitions.
[2020-11-25 11:54:01,695 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:54:01,695 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4894 states and 5729 transitions.
[2020-11-25 11:54:01,711 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:54:01,732 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4894 states to 4446 states and 5173 transitions.
[2020-11-25 11:54:01,732 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1134
[2020-11-25 11:54:01,733 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1193
[2020-11-25 11:54:01,733 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4446 states and 5173 transitions.
[2020-11-25 11:54:01,738 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:01,738 INFO  L728         BuchiCegarLoop]: Abstraction has 4446 states and 5173 transitions.
[2020-11-25 11:54:01,743 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4446 states and 5173 transitions.
[2020-11-25 11:54:01,785 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4446 to 3866.
[2020-11-25 11:54:01,785 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3866 states.
[2020-11-25 11:54:01,790 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3866 states to 3866 states and 4453 transitions.
[2020-11-25 11:54:01,791 INFO  L751         BuchiCegarLoop]: Abstraction has 3866 states and 4453 transitions.
[2020-11-25 11:54:01,791 INFO  L631         BuchiCegarLoop]: Abstraction has 3866 states and 4453 transitions.
[2020-11-25 11:54:01,791 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 11:54:01,791 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3866 states and 4453 transitions.
[2020-11-25 11:54:01,798 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:01,798 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:01,798 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:01,801 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:01,801 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND FALSE  !(DType[this] == CabGoldToken)
[L3682]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3687]  COND TRUE   DType[this] == MinterRole
[L3688]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3688]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3689]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND FALSE  !(DType[this] == CabGoldToken)
[L3682]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3687]  COND TRUE   DType[this] == MinterRole
[L3688]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3688]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3689]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND FALSE  !(choice == 14)
[L6370]  COND TRUE   choice == 13
[L6371]              gas := gas - 21000;
[L6372]  COND TRUE   gas >= 0
[L6373]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6374]              assume msgvalue_MSG == 0;
[L6375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s325 || p2 != msgsender_MSG) && sender_s325 == recipient_s325) && amount_s325 <= _balances_ERC20[this][sender_s325]) && amount_s325 <= _allowances_ERC20[this][sender_s325][msgsender_MSG]) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L604]               havoc __exception;
[L605]               revert := false;
[L606]   COND TRUE   __exception
[L607]               __tmp__Balance := Balance;
[L608]               __tmp__DType := DType;
[L609]               __tmp__Alloc := Alloc;
[L610]               __tmp__balance_ADDR := balance_ADDR;
[L611]               __tmp__M_Ref_int := M_Ref_int;
[L612]               __tmp__sum__balances0 := sum__balances0;
[L613]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L614]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L615]               __tmp__sum__allowances1 := sum__allowances1;
[L616]               __tmp__M_Ref_bool := M_Ref_bool;
[L617]               __tmp__sum := sum;
[L618]               __tmp__Length := Length;
[L619]               __tmp__now := now;
[L620]               __tmp___balances_ERC20 := _balances_ERC20;
[L621]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L622]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L623]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L624]               __tmp___minters_MinterRole := _minters_MinterRole;
[L625]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L626]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L627]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L628]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L629]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2960]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2961]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2961]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2962]  COND TRUE   revert
[L629]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L630]               assume revert || gas < 0;
[L6375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND FALSE  !(choice == 14)
[L6370]  COND TRUE   choice == 13
[L6371]              gas := gas - 21000;
[L6372]  COND TRUE   gas >= 0
[L6373]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6374]              assume msgvalue_MSG == 0;
[L6375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s325 || p2 != msgsender_MSG) && sender_s325 == recipient_s325) && amount_s325 <= _balances_ERC20[this][sender_s325]) && amount_s325 <= _allowances_ERC20[this][sender_s325][msgsender_MSG]) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L604]               havoc __exception;
[L605]               revert := false;
[L606]   COND TRUE   __exception
[L607]               __tmp__Balance := Balance;
[L608]               __tmp__DType := DType;
[L609]               __tmp__Alloc := Alloc;
[L610]               __tmp__balance_ADDR := balance_ADDR;
[L611]               __tmp__M_Ref_int := M_Ref_int;
[L612]               __tmp__sum__balances0 := sum__balances0;
[L613]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L614]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L615]               __tmp__sum__allowances1 := sum__allowances1;
[L616]               __tmp__M_Ref_bool := M_Ref_bool;
[L617]               __tmp__sum := sum;
[L618]               __tmp__Length := Length;
[L619]               __tmp__now := now;
[L620]               __tmp___balances_ERC20 := _balances_ERC20;
[L621]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L622]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L623]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L624]               __tmp___minters_MinterRole := _minters_MinterRole;
[L625]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L626]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L627]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L628]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L629]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2960]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2961]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2961]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2962]  COND TRUE   revert
[L629]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L630]               assume revert || gas < 0;
[L6375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:01,813 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:01,813 INFO  L82        PathProgramCache]: Analyzing trace with hash 1907248403, now seen corresponding path program 1 times
[2020-11-25 11:54:01,814 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:01,844 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:01,961 INFO  L134       CoverageAnalysis]: Checked inductivity of 267 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 258 trivial. 0 not checked.
[2020-11-25 11:54:01,961 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:54:01,962 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-25 11:54:01,962 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:01,962 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:54:01,963 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:54:01,963 INFO  L87              Difference]: Start difference. First operand 3866 states and 4453 transitions. cyclomatic complexity: 589 Second operand 6 states.
[2020-11-25 11:54:02,098 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:02,098 INFO  L93              Difference]: Finished difference Result 3885 states and 4475 transitions.
[2020-11-25 11:54:02,098 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:54:02,098 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3885 states and 4475 transitions.
[2020-11-25 11:54:02,110 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:02,128 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3885 states to 3872 states and 4459 transitions.
[2020-11-25 11:54:02,128 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1045
[2020-11-25 11:54:02,130 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1045
[2020-11-25 11:54:02,130 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3872 states and 4459 transitions.
[2020-11-25 11:54:02,138 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:02,138 INFO  L728         BuchiCegarLoop]: Abstraction has 3872 states and 4459 transitions.
[2020-11-25 11:54:02,145 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3872 states and 4459 transitions.
[2020-11-25 11:54:02,174 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3872 to 3872.
[2020-11-25 11:54:02,175 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3872 states.
[2020-11-25 11:54:02,180 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3872 states to 3872 states and 4459 transitions.
[2020-11-25 11:54:02,180 INFO  L751         BuchiCegarLoop]: Abstraction has 3872 states and 4459 transitions.
[2020-11-25 11:54:02,180 INFO  L631         BuchiCegarLoop]: Abstraction has 3872 states and 4459 transitions.
[2020-11-25 11:54:02,180 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 11:54:02,180 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3872 states and 4459 transitions.
[2020-11-25 11:54:02,185 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:02,185 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:02,185 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:02,188 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:02,188 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND FALSE  !(DType[this] == CabGoldToken)
[L3682]  COND TRUE   DType[this] == ERC20Mintable
[L3683]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3683]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3684]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND FALSE  !(DType[this] == CabGoldToken)
[L3682]  COND TRUE   DType[this] == ERC20Mintable
[L3683]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3683]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3684]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND FALSE  !(choice == 14)
[L6370]  COND TRUE   choice == 13
[L6371]              gas := gas - 21000;
[L6372]  COND TRUE   gas >= 0
[L6373]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6374]              assume msgvalue_MSG == 0;
[L6375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s325 || p2 != msgsender_MSG) && sender_s325 == recipient_s325) && amount_s325 <= _balances_ERC20[this][sender_s325]) && amount_s325 <= _allowances_ERC20[this][sender_s325][msgsender_MSG]) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L604]               havoc __exception;
[L605]               revert := false;
[L606]   COND TRUE   __exception
[L607]               __tmp__Balance := Balance;
[L608]               __tmp__DType := DType;
[L609]               __tmp__Alloc := Alloc;
[L610]               __tmp__balance_ADDR := balance_ADDR;
[L611]               __tmp__M_Ref_int := M_Ref_int;
[L612]               __tmp__sum__balances0 := sum__balances0;
[L613]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L614]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L615]               __tmp__sum__allowances1 := sum__allowances1;
[L616]               __tmp__M_Ref_bool := M_Ref_bool;
[L617]               __tmp__sum := sum;
[L618]               __tmp__Length := Length;
[L619]               __tmp__now := now;
[L620]               __tmp___balances_ERC20 := _balances_ERC20;
[L621]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L622]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L623]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L624]               __tmp___minters_MinterRole := _minters_MinterRole;
[L625]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L626]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L627]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L628]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L629]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2960]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2961]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2961]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2962]  COND TRUE   revert
[L629]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L630]               assume revert || gas < 0;
[L6375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND FALSE  !(choice == 14)
[L6370]  COND TRUE   choice == 13
[L6371]              gas := gas - 21000;
[L6372]  COND TRUE   gas >= 0
[L6373]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6374]              assume msgvalue_MSG == 0;
[L6375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s325 || p2 != msgsender_MSG) && sender_s325 == recipient_s325) && amount_s325 <= _balances_ERC20[this][sender_s325]) && amount_s325 <= _allowances_ERC20[this][sender_s325][msgsender_MSG]) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L604]               havoc __exception;
[L605]               revert := false;
[L606]   COND TRUE   __exception
[L607]               __tmp__Balance := Balance;
[L608]               __tmp__DType := DType;
[L609]               __tmp__Alloc := Alloc;
[L610]               __tmp__balance_ADDR := balance_ADDR;
[L611]               __tmp__M_Ref_int := M_Ref_int;
[L612]               __tmp__sum__balances0 := sum__balances0;
[L613]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L614]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L615]               __tmp__sum__allowances1 := sum__allowances1;
[L616]               __tmp__M_Ref_bool := M_Ref_bool;
[L617]               __tmp__sum := sum;
[L618]               __tmp__Length := Length;
[L619]               __tmp__now := now;
[L620]               __tmp___balances_ERC20 := _balances_ERC20;
[L621]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L622]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L623]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L624]               __tmp___minters_MinterRole := _minters_MinterRole;
[L625]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L626]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L627]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L628]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L629]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2960]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2961]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2961]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2962]  COND TRUE   revert
[L629]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L630]               assume revert || gas < 0;
[L6375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:02,192 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:02,192 INFO  L82        PathProgramCache]: Analyzing trace with hash 161065339, now seen corresponding path program 1 times
[2020-11-25 11:54:02,193 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:02,201 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:02,267 INFO  L134       CoverageAnalysis]: Checked inductivity of 266 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 257 trivial. 0 not checked.
[2020-11-25 11:54:02,267 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:54:02,267 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-25 11:54:02,268 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:02,268 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:54:02,268 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:54:02,268 INFO  L87              Difference]: Start difference. First operand 3872 states and 4459 transitions. cyclomatic complexity: 589 Second operand 6 states.
[2020-11-25 11:54:02,355 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:02,355 INFO  L93              Difference]: Finished difference Result 3891 states and 4481 transitions.
[2020-11-25 11:54:02,355 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:54:02,355 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3891 states and 4481 transitions.
[2020-11-25 11:54:02,366 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:02,379 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3891 states to 3878 states and 4465 transitions.
[2020-11-25 11:54:02,379 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1045
[2020-11-25 11:54:02,380 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1045
[2020-11-25 11:54:02,380 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3878 states and 4465 transitions.
[2020-11-25 11:54:02,383 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:02,383 INFO  L728         BuchiCegarLoop]: Abstraction has 3878 states and 4465 transitions.
[2020-11-25 11:54:02,387 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3878 states and 4465 transitions.
[2020-11-25 11:54:02,414 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3878 to 3872.
[2020-11-25 11:54:02,414 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3872 states.
[2020-11-25 11:54:02,419 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3872 states to 3872 states and 4459 transitions.
[2020-11-25 11:54:02,419 INFO  L751         BuchiCegarLoop]: Abstraction has 3872 states and 4459 transitions.
[2020-11-25 11:54:02,419 INFO  L631         BuchiCegarLoop]: Abstraction has 3872 states and 4459 transitions.
[2020-11-25 11:54:02,419 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 11:54:02,419 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3872 states and 4459 transitions.
[2020-11-25 11:54:02,430 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:02,430 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:02,430 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:02,433 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:02,433 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND FALSE  !(DType[this] == CabGoldToken)
[L3682]  COND TRUE   DType[this] == ERC20Mintable
[L3683]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3683]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3684]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND FALSE  !(choice == 14)
[L6370]  COND TRUE   choice == 13
[L6371]              gas := gas - 21000;
[L6372]  COND TRUE   gas >= 0
[L6373]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6374]              assume msgvalue_MSG == 0;
[L6375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s325 || p2 != msgsender_MSG) && sender_s325 == recipient_s325) && amount_s325 <= _balances_ERC20[this][sender_s325]) && amount_s325 <= _allowances_ERC20[this][sender_s325][msgsender_MSG]) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L604]               havoc __exception;
[L605]               revert := false;
[L606]   COND TRUE   __exception
[L607]               __tmp__Balance := Balance;
[L608]               __tmp__DType := DType;
[L609]               __tmp__Alloc := Alloc;
[L610]               __tmp__balance_ADDR := balance_ADDR;
[L611]               __tmp__M_Ref_int := M_Ref_int;
[L612]               __tmp__sum__balances0 := sum__balances0;
[L613]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L614]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L615]               __tmp__sum__allowances1 := sum__allowances1;
[L616]               __tmp__M_Ref_bool := M_Ref_bool;
[L617]               __tmp__sum := sum;
[L618]               __tmp__Length := Length;
[L619]               __tmp__now := now;
[L620]               __tmp___balances_ERC20 := _balances_ERC20;
[L621]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L622]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L623]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L624]               __tmp___minters_MinterRole := _minters_MinterRole;
[L625]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L626]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L627]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L628]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L629]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2960]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2961]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2961]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2962]  COND TRUE   revert
[L629]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L630]               assume revert || gas < 0;
[L6375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND FALSE  !(choice == 14)
[L6370]  COND TRUE   choice == 13
[L6371]              gas := gas - 21000;
[L6372]  COND TRUE   gas >= 0
[L6373]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6374]              assume msgvalue_MSG == 0;
[L6375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s325 || p2 != msgsender_MSG) && sender_s325 == recipient_s325) && amount_s325 <= _balances_ERC20[this][sender_s325]) && amount_s325 <= _allowances_ERC20[this][sender_s325][msgsender_MSG]) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L604]               havoc __exception;
[L605]               revert := false;
[L606]   COND TRUE   __exception
[L607]               __tmp__Balance := Balance;
[L608]               __tmp__DType := DType;
[L609]               __tmp__Alloc := Alloc;
[L610]               __tmp__balance_ADDR := balance_ADDR;
[L611]               __tmp__M_Ref_int := M_Ref_int;
[L612]               __tmp__sum__balances0 := sum__balances0;
[L613]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L614]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L615]               __tmp__sum__allowances1 := sum__allowances1;
[L616]               __tmp__M_Ref_bool := M_Ref_bool;
[L617]               __tmp__sum := sum;
[L618]               __tmp__Length := Length;
[L619]               __tmp__now := now;
[L620]               __tmp___balances_ERC20 := _balances_ERC20;
[L621]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L622]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L623]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L624]               __tmp___minters_MinterRole := _minters_MinterRole;
[L625]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L626]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L627]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L628]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L629]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2960]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2961]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2961]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2962]  COND TRUE   revert
[L629]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L630]               assume revert || gas < 0;
[L6375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:02,440 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:02,440 INFO  L82        PathProgramCache]: Analyzing trace with hash 1086420580, now seen corresponding path program 1 times
[2020-11-25 11:54:02,442 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:02,452 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:02,512 INFO  L134       CoverageAnalysis]: Checked inductivity of 261 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 255 trivial. 0 not checked.
[2020-11-25 11:54:02,512 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:54:02,512 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 11:54:02,513 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:02,513 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 11:54:02,513 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 11:54:02,513 INFO  L87              Difference]: Start difference. First operand 3872 states and 4459 transitions. cyclomatic complexity: 589 Second operand 7 states.
[2020-11-25 11:54:02,591 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:02,591 INFO  L93              Difference]: Finished difference Result 3895 states and 4484 transitions.
[2020-11-25 11:54:02,591 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 11:54:02,592 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3895 states and 4484 transitions.
[2020-11-25 11:54:02,599 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:02,607 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3895 states to 3868 states and 4453 transitions.
[2020-11-25 11:54:02,608 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1045
[2020-11-25 11:54:02,608 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1045
[2020-11-25 11:54:02,608 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3868 states and 4453 transitions.
[2020-11-25 11:54:02,611 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:02,611 INFO  L728         BuchiCegarLoop]: Abstraction has 3868 states and 4453 transitions.
[2020-11-25 11:54:02,614 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3868 states and 4453 transitions.
[2020-11-25 11:54:02,636 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3868 to 3868.
[2020-11-25 11:54:02,636 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3868 states.
[2020-11-25 11:54:02,639 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3868 states to 3868 states and 4453 transitions.
[2020-11-25 11:54:02,640 INFO  L751         BuchiCegarLoop]: Abstraction has 3868 states and 4453 transitions.
[2020-11-25 11:54:02,640 INFO  L631         BuchiCegarLoop]: Abstraction has 3868 states and 4453 transitions.
[2020-11-25 11:54:02,640 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 11:54:02,640 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3868 states and 4453 transitions.
[2020-11-25 11:54:02,644 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:02,644 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:02,644 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:02,645 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:02,645 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND FALSE  !(DType[this] == CabGoldToken)
[L3682]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3687]  COND TRUE   DType[this] == MinterRole
[L3688]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3688]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3689]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND FALSE  !(choice == 14)
[L6370]  COND TRUE   choice == 13
[L6371]              gas := gas - 21000;
[L6372]  COND TRUE   gas >= 0
[L6373]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6374]              assume msgvalue_MSG == 0;
[L6375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s325 || p2 != msgsender_MSG) && sender_s325 == recipient_s325) && amount_s325 <= _balances_ERC20[this][sender_s325]) && amount_s325 <= _allowances_ERC20[this][sender_s325][msgsender_MSG]) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L604]               havoc __exception;
[L605]               revert := false;
[L606]   COND TRUE   __exception
[L607]               __tmp__Balance := Balance;
[L608]               __tmp__DType := DType;
[L609]               __tmp__Alloc := Alloc;
[L610]               __tmp__balance_ADDR := balance_ADDR;
[L611]               __tmp__M_Ref_int := M_Ref_int;
[L612]               __tmp__sum__balances0 := sum__balances0;
[L613]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L614]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L615]               __tmp__sum__allowances1 := sum__allowances1;
[L616]               __tmp__M_Ref_bool := M_Ref_bool;
[L617]               __tmp__sum := sum;
[L618]               __tmp__Length := Length;
[L619]               __tmp__now := now;
[L620]               __tmp___balances_ERC20 := _balances_ERC20;
[L621]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L622]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L623]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L624]               __tmp___minters_MinterRole := _minters_MinterRole;
[L625]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L626]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L627]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L628]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L629]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2960]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2961]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2961]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2962]  COND TRUE   revert
[L629]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L630]               assume revert || gas < 0;
[L6375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND FALSE  !(choice == 14)
[L6370]  COND TRUE   choice == 13
[L6371]              gas := gas - 21000;
[L6372]  COND TRUE   gas >= 0
[L6373]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6374]              assume msgvalue_MSG == 0;
[L6375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s325 || p2 != msgsender_MSG) && sender_s325 == recipient_s325) && amount_s325 <= _balances_ERC20[this][sender_s325]) && amount_s325 <= _allowances_ERC20[this][sender_s325][msgsender_MSG]) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L604]               havoc __exception;
[L605]               revert := false;
[L606]   COND TRUE   __exception
[L607]               __tmp__Balance := Balance;
[L608]               __tmp__DType := DType;
[L609]               __tmp__Alloc := Alloc;
[L610]               __tmp__balance_ADDR := balance_ADDR;
[L611]               __tmp__M_Ref_int := M_Ref_int;
[L612]               __tmp__sum__balances0 := sum__balances0;
[L613]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L614]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L615]               __tmp__sum__allowances1 := sum__allowances1;
[L616]               __tmp__M_Ref_bool := M_Ref_bool;
[L617]               __tmp__sum := sum;
[L618]               __tmp__Length := Length;
[L619]               __tmp__now := now;
[L620]               __tmp___balances_ERC20 := _balances_ERC20;
[L621]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L622]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L623]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L624]               __tmp___minters_MinterRole := _minters_MinterRole;
[L625]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L626]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L627]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L628]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L629]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2960]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2961]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2961]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2962]  COND TRUE   revert
[L629]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L630]               assume revert || gas < 0;
[L6375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:02,649 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:02,649 INFO  L82        PathProgramCache]: Analyzing trace with hash 1042104882, now seen corresponding path program 1 times
[2020-11-25 11:54:02,650 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:02,659 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:54:02,723 INFO  L134       CoverageAnalysis]: Checked inductivity of 261 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 255 trivial. 0 not checked.
[2020-11-25 11:54:02,724 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:54:02,724 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 11:54:02,724 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:54:02,724 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 11:54:02,724 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 11:54:02,724 INFO  L87              Difference]: Start difference. First operand 3868 states and 4453 transitions. cyclomatic complexity: 587 Second operand 7 states.
[2020-11-25 11:54:02,799 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:54:02,799 INFO  L93              Difference]: Finished difference Result 3885 states and 4472 transitions.
[2020-11-25 11:54:02,799 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 11:54:02,799 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3885 states and 4472 transitions.
[2020-11-25 11:54:02,806 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:02,814 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3885 states to 3856 states and 4439 transitions.
[2020-11-25 11:54:02,814 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1045
[2020-11-25 11:54:02,814 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1045
[2020-11-25 11:54:02,815 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3856 states and 4439 transitions.
[2020-11-25 11:54:02,817 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:54:02,817 INFO  L728         BuchiCegarLoop]: Abstraction has 3856 states and 4439 transitions.
[2020-11-25 11:54:02,820 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3856 states and 4439 transitions.
[2020-11-25 11:54:02,858 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3856 to 3856.
[2020-11-25 11:54:02,858 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3856 states.
[2020-11-25 11:54:02,861 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3856 states to 3856 states and 4439 transitions.
[2020-11-25 11:54:02,861 INFO  L751         BuchiCegarLoop]: Abstraction has 3856 states and 4439 transitions.
[2020-11-25 11:54:02,861 INFO  L631         BuchiCegarLoop]: Abstraction has 3856 states and 4439 transitions.
[2020-11-25 11:54:02,861 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 11:54:02,861 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3856 states and 4439 transitions.
[2020-11-25 11:54:02,865 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:54:02,865 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:54:02,865 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:54:02,866 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:54:02,866 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND FALSE  !(choice == 14)
[L6370]  COND TRUE   choice == 13
[L6371]              gas := gas - 21000;
[L6372]  COND TRUE   gas >= 0
[L6373]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6374]              assume msgvalue_MSG == 0;
[L6375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s325 || p2 != msgsender_MSG) && sender_s325 == recipient_s325) && amount_s325 <= _balances_ERC20[this][sender_s325]) && amount_s325 <= _allowances_ERC20[this][sender_s325][msgsender_MSG]) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L604]               havoc __exception;
[L605]               revert := false;
[L606]   COND TRUE   __exception
[L607]               __tmp__Balance := Balance;
[L608]               __tmp__DType := DType;
[L609]               __tmp__Alloc := Alloc;
[L610]               __tmp__balance_ADDR := balance_ADDR;
[L611]               __tmp__M_Ref_int := M_Ref_int;
[L612]               __tmp__sum__balances0 := sum__balances0;
[L613]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L614]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L615]               __tmp__sum__allowances1 := sum__allowances1;
[L616]               __tmp__M_Ref_bool := M_Ref_bool;
[L617]               __tmp__sum := sum;
[L618]               __tmp__Length := Length;
[L619]               __tmp__now := now;
[L620]               __tmp___balances_ERC20 := _balances_ERC20;
[L621]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L622]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L623]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L624]               __tmp___minters_MinterRole := _minters_MinterRole;
[L625]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L626]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L627]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L628]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L629]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2960]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2961]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2961]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2962]  COND TRUE   revert
[L629]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L630]               assume revert || gas < 0;
[L6375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND FALSE  !(choice == 16)
[L6357]  COND FALSE  !(choice == 15)
[L6363]  COND FALSE  !(choice == 14)
[L6370]  COND TRUE   choice == 13
[L6371]              gas := gas - 21000;
[L6372]  COND TRUE   gas >= 0
[L6373]              assume amount_s325 >= 0 && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6374]              assume msgvalue_MSG == 0;
[L6375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s325 || p2 != msgsender_MSG) && sender_s325 == recipient_s325) && amount_s325 <= _balances_ERC20[this][sender_s325]) && amount_s325 <= _allowances_ERC20[this][sender_s325][msgsender_MSG]) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L604]               havoc __exception;
[L605]               revert := false;
[L606]   COND TRUE   __exception
[L607]               __tmp__Balance := Balance;
[L608]               __tmp__DType := DType;
[L609]               __tmp__Alloc := Alloc;
[L610]               __tmp__balance_ADDR := balance_ADDR;
[L611]               __tmp__M_Ref_int := M_Ref_int;
[L612]               __tmp__sum__balances0 := sum__balances0;
[L613]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L614]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L615]               __tmp__sum__allowances1 := sum__allowances1;
[L616]               __tmp__M_Ref_bool := M_Ref_bool;
[L617]               __tmp__sum := sum;
[L618]               __tmp__Length := Length;
[L619]               __tmp__now := now;
[L620]               __tmp___balances_ERC20 := _balances_ERC20;
[L621]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L622]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L623]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L624]               __tmp___minters_MinterRole := _minters_MinterRole;
[L625]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L626]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L627]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L628]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L629]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2960]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2961]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2961]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2962]  COND TRUE   revert
[L629]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L630]               assume revert || gas < 0;
[L6375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:54:02,871 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:02,871 INFO  L82        PathProgramCache]: Analyzing trace with hash -860129677, now seen corresponding path program 1 times
[2020-11-25 11:54:02,871 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:02,886 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:54:02,907 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:54:02,994 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:02,994 INFO  L82        PathProgramCache]: Analyzing trace with hash 1825946412, now seen corresponding path program 1 times
[2020-11-25 11:54:02,995 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:03,000 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:54:03,004 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:54:03,013 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:54:03,014 INFO  L82        PathProgramCache]: Analyzing trace with hash -2019434246, now seen corresponding path program 1 times
[2020-11-25 11:54:03,014 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:54:03,031 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:54:03,051 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 11:54:03,278 WARN  L188               SmtUtils]: Spent 125.00 ms on a formula simplification. DAG size of input: 167 DAG size of output: 159
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2647 to 5281
Garbage collection #8: 5281 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 5281 to 10559
[2020-11-25 11:54:03,467 WARN  L188               SmtUtils]: Spent 158.00 ms on a formula simplification. DAG size of input: 117 DAG size of output: 111
[2020-11-25 11:54:03,688 WARN  L188               SmtUtils]: Spent 219.00 ms on a formula simplification that was a NOOP. DAG size: 276
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3331 to 6661
[2020-11-25 11:54:04,384 WARN  L188               SmtUtils]: Spent 680.00 ms on a formula simplification. DAG size of input: 226 DAG size of output: 226
[2020-11-25 11:54:05,201 WARN  L188               SmtUtils]: Spent 813.00 ms on a formula simplification. DAG size of input: 293 DAG size of output: 274
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.003s / 0.006s total
Resizing node table from 12541 to 25073
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 11:54:05,440 WARN  L188               SmtUtils]: Spent 206.00 ms on a formula simplification. DAG size of input: 170 DAG size of output: 164
[2020-11-25 11:54:05,687 WARN  L188               SmtUtils]: Spent 245.00 ms on a formula simplification that was a NOOP. DAG size: 332
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4027 to 8053
[2020-11-25 11:54:06,187 WARN  L188               SmtUtils]: Spent 491.00 ms on a formula simplification. DAG size of input: 265 DAG size of output: 265
[2020-11-25 11:54:06,478 WARN  L188               SmtUtils]: Spent 289.00 ms on a formula simplification that was a NOOP. DAG size: 265
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 11:54:06,605 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification that was a NOOP. DAG size: 161
[2020-11-25 11:54:06,615 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-25 11:54:07,293 WARN  L188               SmtUtils]: Spent 326.00 ms on a formula simplification. DAG size of input: 270 DAG size of output: 256
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #8: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
[2020-11-25 11:54:07,681 WARN  L188               SmtUtils]: Spent 138.00 ms on a formula simplification that was a NOOP. DAG size: 276
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3331 to 6661
[2020-11-25 11:54:08,251 WARN  L188               SmtUtils]: Spent 562.00 ms on a formula simplification. DAG size of input: 226 DAG size of output: 226
[2020-11-25 11:54:09,072 WARN  L188               SmtUtils]: Spent 819.00 ms on a formula simplification. DAG size of input: 292 DAG size of output: 274
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 11:54:09,280 WARN  L188               SmtUtils]: Spent 191.00 ms on a formula simplification. DAG size of input: 169 DAG size of output: 163
[2020-11-25 11:54:09,477 WARN  L188               SmtUtils]: Spent 195.00 ms on a formula simplification that was a NOOP. DAG size: 331
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 11:54:09,887 WARN  L188               SmtUtils]: Spent 402.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 264
[2020-11-25 11:54:10,496 WARN  L188               SmtUtils]: Spent 607.00 ms on a formula simplification. DAG size of input: 397 DAG size of output: 384
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 11:54:10,921 WARN  L188               SmtUtils]: Spent 402.00 ms on a formula simplification. DAG size of input: 251 DAG size of output: 232
[2020-11-25 11:54:11,157 WARN  L188               SmtUtils]: Spent 216.00 ms on a formula simplification that was a NOOP. DAG size: 345
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9973 to 19937
Garbage collection #9: 19937 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 19937 to 39869
[2020-11-25 11:54:11,439 WARN  L188               SmtUtils]: Spent 251.00 ms on a formula simplification. DAG size of input: 243 DAG size of output: 232
[2020-11-25 11:54:11,827 WARN  L188               SmtUtils]: Spent 386.00 ms on a formula simplification. DAG size of input: 347 DAG size of output: 346
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
Garbage collection #9: 31699 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 31699 to 63397
Garbage collection #10: 63397 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 63397 to 113383
[2020-11-25 11:54:12,741 WARN  L188               SmtUtils]: Spent 892.00 ms on a formula simplification. DAG size of input: 357 DAG size of output: 341
[2020-11-25 11:54:12,758 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:54:12,778 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:54:12,787 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:54:12 BasicIcfg
[2020-11-25 11:54:12,787 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 11:54:12,787 INFO  L168              Benchmark]: Toolchain (without parser) took 15937.12 ms. Allocated memory was 1.0 GB in the beginning and 2.3 GB in the end (delta: 1.3 GB). Free memory was 929.8 MB in the beginning and 2.1 GB in the end (delta: -1.1 GB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-11-25 11:54:12,787 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:54:12,788 INFO  L168              Benchmark]: Boogie Preprocessor took 114.61 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:54:12,788 INFO  L168              Benchmark]: UtopiaSpecLang took 65.79 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 903.0 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 11:54:12,788 INFO  L168              Benchmark]: Boogie Printer took 19.56 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:54:12,789 INFO  L168              Benchmark]: RCFGBuilder took 987.44 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 46.1 MB). Free memory was 897.6 MB in the beginning and 980.7 MB in the end (delta: -83.1 MB). Peak memory consumption was 184.2 MB. Max. memory is 15.3 GB.
[2020-11-25 11:54:12,789 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.73 ms. Allocated memory is still 1.1 GB. Free memory was 980.7 MB in the beginning and 974.1 MB in the end (delta: 6.6 MB). Peak memory consumption was 6.6 MB. Max. memory is 15.3 GB.
[2020-11-25 11:54:12,789 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1676.84 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 178.3 MB). Free memory was 974.1 MB in the beginning and 916.9 MB in the end (delta: 57.2 MB). Peak memory consumption was 461.0 MB. Max. memory is 15.3 GB.
[2020-11-25 11:54:12,790 INFO  L168              Benchmark]: BlockEncodingV2 took 161.72 ms. Allocated memory is still 1.3 GB. Free memory was 916.9 MB in the beginning and 813.7 MB in the end (delta: 103.1 MB). Peak memory consumption was 103.1 MB. Max. memory is 15.3 GB.
[2020-11-25 11:54:12,790 INFO  L168              Benchmark]: BuchiAutomizer took 12871.63 ms. Allocated memory was 1.3 GB in the beginning and 2.3 GB in the end (delta: 1.1 GB). Free memory was 813.7 MB in the beginning and 2.1 GB in the end (delta: -1.3 GB). Peak memory consumption was 1.0 GB. Max. memory is 15.3 GB.
[2020-11-25 11:54:12,793 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5920 locations, 11057 edges
  - StatisticsResult: Encoded RCFG
    5812 locations, 10762 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 114.61 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 65.79 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 903.0 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 19.56 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 987.44 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 46.1 MB). Free memory was 897.6 MB in the beginning and 980.7 MB in the end (delta: -83.1 MB). Peak memory consumption was 184.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.73 ms. Allocated memory is still 1.1 GB. Free memory was 980.7 MB in the beginning and 974.1 MB in the end (delta: 6.6 MB). Peak memory consumption was 6.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1676.84 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 178.3 MB). Free memory was 974.1 MB in the beginning and 916.9 MB in the end (delta: 57.2 MB). Peak memory consumption was 461.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 161.72 ms. Allocated memory is still 1.3 GB. Free memory was 916.9 MB in the beginning and 813.7 MB in the end (delta: 103.1 MB). Peak memory consumption was 103.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 12871.63 ms. Allocated memory was 1.3 GB in the beginning and 2.3 GB in the end (delta: 1.1 GB). Free memory was 813.7 MB in the beginning and 2.1 GB in the end (delta: -1.3 GB). Peak memory consumption was 1.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2281 locations, 3355 edges
  - StatisticsResult: BuchiProgram size
    5920 locations, 11057 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.7 modules have a trivial ranking function, the largest among these consists of 7 locations. The remainder module has 3856 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 12.8s and 8 iterations.  TraceHistogramMax:6. Analysis of lassos took 10.8s. Construction of modules took 0.6s. BÃ¼chi inclusion checks took 0.5s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 7 MinimizatonAttempts, 1246 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 4234 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 30753 SDtfs, 9630 SDslu, 79349 SDs, 0 SdLazy, 6413 SolverSat, 2609 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 0.6s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1094563890) = (new CabGoldToken)({from : 1094563880});
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
ERC20(1094563890).transferFrom~address~address~uint256.gas(3979002)({from : 1094563881, sender : 0, recipient : 0, amount : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((((p1 != sender_s325 || p2 != msgsender_MSG) && sender_s325 == recipient_s325) && amount_s325 <= _balances_ERC20[this][sender_s325]) && amount_s325 <= _allowances_ERC20[this][sender_s325][msgsender_MSG]) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transferFrom_ERC200 := true;
[L3]                call_transferFrom_ERC200 := false;
[L3]                revert := revert_hold;
[L604]              havoc __exception;
[L605]              revert := false;
[L606]   COND TRUE  __exception
[L607]              __tmp__Balance := Balance;
[L608]              __tmp__DType := DType;
[L609]              __tmp__Alloc := Alloc;
[L610]              __tmp__balance_ADDR := balance_ADDR;
[L611]              __tmp__M_Ref_int := M_Ref_int;
[L612]              __tmp__sum__balances0 := sum__balances0;
[L613]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L614]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L615]              __tmp__sum__allowances1 := sum__allowances1;
[L616]              __tmp__M_Ref_bool := M_Ref_bool;
[L617]              __tmp__sum := sum;
[L618]              __tmp__Length := Length;
[L619]              __tmp__now := now;
[L620]              __tmp___balances_ERC20 := _balances_ERC20;
[L621]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L622]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L623]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L624]              __tmp___minters_MinterRole := _minters_MinterRole;
[L625]              __tmp__name_CabGoldToken := name_CabGoldToken;
[L626]              __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L627]              __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L628]              __tmp__active_CabGoldToken := active_CabGoldToken;
[L629]   CALL       call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2960]  COND TRUE  __tmp__DType[this] == CabGoldToken
[L2961]  CALL       call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3213]             __var_4 := null;
[L3214]  COND TRUE  !(sender_s435 != null)
[L3215]             revert := true;
[L2961]  RET        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2962]  COND TRUE  revert
[L629]   RET        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L630]              assume revert || gas < 0;
[L6375]  RET        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);

Loop:
ERC20(1094563890).transferFrom~address~address~uint256.gas(3979001)({from : 1094563882, sender : 0, recipient : 0, amount : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((((p1 != sender_s325 || p2 != msgsender_MSG) && sender_s325 == recipient_s325) && amount_s325 <= _balances_ERC20[this][sender_s325]) && amount_s325 <= _allowances_ERC20[this][sender_s325][msgsender_MSG]) && amount_s325 >= 0) && amount_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s325] >= 0) && _balances_ERC20[this][recipient_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s325] >= 0) && _balances_ERC20[this][sender_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s325][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s325][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transferFrom_ERC200 := true;
[L3]                call_transferFrom_ERC200 := false;
[L3]                revert := revert_hold;
[L604]              havoc __exception;
[L605]              revert := false;
[L606]   COND TRUE  __exception
[L607]              __tmp__Balance := Balance;
[L608]              __tmp__DType := DType;
[L609]              __tmp__Alloc := Alloc;
[L610]              __tmp__balance_ADDR := balance_ADDR;
[L611]              __tmp__M_Ref_int := M_Ref_int;
[L612]              __tmp__sum__balances0 := sum__balances0;
[L613]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L614]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L615]              __tmp__sum__allowances1 := sum__allowances1;
[L616]              __tmp__M_Ref_bool := M_Ref_bool;
[L617]              __tmp__sum := sum;
[L618]              __tmp__Length := Length;
[L619]              __tmp__now := now;
[L620]              __tmp___balances_ERC20 := _balances_ERC20;
[L621]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L622]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L623]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L624]              __tmp___minters_MinterRole := _minters_MinterRole;
[L625]              __tmp__name_CabGoldToken := name_CabGoldToken;
[L626]              __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L627]              __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L628]              __tmp__active_CabGoldToken := active_CabGoldToken;
[L629]   CALL       call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2960]  COND TRUE  __tmp__DType[this] == CabGoldToken
[L2961]  CALL       call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L3213]             __var_4 := null;
[L3214]  COND TRUE  !(sender_s435 != null)
[L3215]             revert := true;
[L2961]  RET        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L2962]  COND TRUE  revert
[L629]   RET        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);
[L630]              assume revert || gas < 0;
[L6375]  RET        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s325, recipient_s325, amount_s325);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
