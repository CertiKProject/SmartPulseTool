This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:04:19,543 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:04:19,545 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:04:19,553 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:04:19,553 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:04:19,554 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:04:19,554 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:04:19,555 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:04:19,556 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:04:19,557 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:04:19,557 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:04:19,557 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:04:19,558 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:04:19,558 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:04:19,559 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:04:19,560 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:04:19,560 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:04:19,561 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:04:19,562 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:04:19,562 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:04:19,563 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:04:19,563 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:04:19,565 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:04:19,565 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:04:19,565 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:04:19,565 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:04:19,566 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:04:19,566 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:04:19,566 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:04:19,566 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:04:19,567 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:04:19,567 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:04:19,567 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:04:19,568 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:04:19,568 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:04:19,568 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:04:19,569 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:04:19,569 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:04:19,569 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:04:19,570 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:04:19,570 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:04:19,570 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:04:19,576 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:04:19,577 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:04:19,577 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:04:19,577 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:04:19,577 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:04:19,577 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:04:19,577 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:04:19,578 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:04:19,578 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:04:19,578 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:04:19,578 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:04:19,578 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:04:19,578 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:04:19,578 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:04:19,578 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:04:19,578 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:04:19,578 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:04:19,578 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:04:19,578 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:04:19,578 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:04:19,579 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:04:19,579 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:04:19,579 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:04:19,579 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:04:19,579 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:04:19,579 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:04:19,594 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:04:19,603 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:04:19,605 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:04:19,606 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:04:19,607 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:04:19,607 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl
[2020-11-24 20:04:19,608 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl'
[2020-11-24 20:04:19,708 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:04:19,709 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:04:19,710 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:04:19,710 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:04:19,710 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:04:19,726 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:19" (1/1) ...
[2020-11-24 20:04:19,728 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:19" (1/1) ...
[2020-11-24 20:04:19,760 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:19" (1/1) ...
[2020-11-24 20:04:19,760 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:19" (1/1) ...
[2020-11-24 20:04:19,783 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:19" (1/1) ...
[2020-11-24 20:04:19,800 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:19" (1/1) ...
[2020-11-24 20:04:19,810 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:19" (1/1) ...
[2020-11-24 20:04:19,818 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:04:19,819 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:04:19,819 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:04:19,820 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:04:19,823 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:19" (1/1) ...
[2020-11-24 20:04:19,837 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3]) && paused_Pausable[this] == old(paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-24 20:04:19,842 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3]) && paused_Pausable[this] == old(paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-24 20:04:19,850 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3]) && paused_Pausable[this] == old(paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-24 20:04:19,859 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s747 && p1!=to_s747 ) && ( p2!=from_s747 || p3!=msg.sender ) ) && from_s747!=to_s747 ) && value_s747<=_balances_ERC20[this][from_s747] ) && value_s747<=_allowances_ERC20[this][from_s747][msg.sender] ) && ( _balances_ERC20[this][to_s747] + value_s747 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && value_s747>=0 ) && value_s747<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s747]>=0 ) && _balances_ERC20[this][to_s747]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s747]>=0 ) && _balances_ERC20[this][from_s747]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][from_s747][msg.sender]>=0 ) && _allowances_ERC20[this][from_s747][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IdentifierExpression[value_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:04:19,862 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==true && _balances_ERC20[this][from_s747]==( ( old(_balances_ERC20[this][from_s747]) ) - value_s747 ) ) && _balances_ERC20[this][to_s747]==( ( old(_balances_ERC20[this][to_s747]) ) + value_s747 ) ) && _allowances_ERC20[this][from_s747][msg.sender]==( ( old(_allowances_ERC20[this][from_s747][msg.sender]) ) - value_s747 ) ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this][p1]==( old(_balances_ERC20[this][p1]) ) ) && _allowances_ERC20[this][p2][p3]==( old(_allowances_ERC20[this][p2][p3]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && _owner_Ownable[this]==( old(_owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_ERC20Pausable>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],IdentifierExpression[value_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],IdentifierExpression[value_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],IdentifierExpression[value_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]]
[2020-11-24 20:04:19,868 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3]) && paused_Pausable[this] == old(paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-24 20:04:19,868 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC20Pausable0) ==> ( <>AP(success_transferFrom_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:04:19,879 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:04:19 PropertyContainer
[2020-11-24 20:04:19,879 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:04:19,879 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:04:19,880 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:04:19,880 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:04:19,881 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:19" (1/2) ...
[2020-11-24 20:04:19,881 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:04:19,881 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:04:19,898 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:04:19" (2/2) ...
[2020-11-24 20:04:19,898 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:04:19,898 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:04:19,898 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:04:19,899 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:04:19,899 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:19" (1/2) ...
[2020-11-24 20:04:19,948 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:04:19,948 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:04:19,948 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:04:19,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:04:19,948 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:04:19,948 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:04:19,948 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:04:19,949 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:04:19,949 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:04:19,949 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-24 20:04:19,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-24 20:04:19,949 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-24 20:04:19,949 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-24 20:04:19,949 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-24 20:04:19,949 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-24 20:04:19,950 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-24 20:04:19,950 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-24 20:04:19,950 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:04:19,950 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 20:04:19,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 20:04:19,950 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-24 20:04:19,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-24 20:04:19,950 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-24 20:04:19,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-24 20:04:19,950 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-24 20:04:19,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-24 20:04:19,951 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 20:04:19,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-24 20:04:19,951 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 20:04:19,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-24 20:04:19,951 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:04:19,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:04:19,951 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-24 20:04:19,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-24 20:04:19,951 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-24 20:04:19,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-24 20:04:19,951 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 20:04:19,951 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-24 20:04:19,951 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-24 20:04:19,952 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 20:04:19,952 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-24 20:04:19,952 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:04:19,952 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 20:04:19,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 20:04:19,952 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 20:04:19,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 20:04:19,952 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-24 20:04:19,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-24 20:04:19,952 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 20:04:19,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 20:04:19,952 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:04:19,953 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 20:04:19,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 20:04:19,953 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 20:04:19,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 20:04:19,953 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 20:04:19,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 20:04:19,953 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 20:04:19,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 20:04:19,953 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-24 20:04:19,953 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-24 20:04:19,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-24 20:04:19,953 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-24 20:04:19,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-24 20:04:19,954 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-24 20:04:19,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-24 20:04:19,954 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-24 20:04:19,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-24 20:04:19,954 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:04:19,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:04:19,954 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:04:19,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:04:19,954 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken_NoBaseCtor__success
[2020-11-24 20:04:19,954 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken
[2020-11-24 20:04:19,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken
[2020-11-24 20:04:19,955 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_KardiachainToken
[2020-11-24 20:04:19,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_KardiachainToken
[2020-11-24 20:04:19,955 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_KardiachainToken
[2020-11-24 20:04:19,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_KardiachainToken
[2020-11-24 20:04:19,955 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KardiachainToken
[2020-11-24 20:04:19,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KardiachainToken
[2020-11-24 20:04:19,955 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KardiachainToken
[2020-11-24 20:04:19,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KardiachainToken
[2020-11-24 20:04:19,955 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KardiachainToken
[2020-11-24 20:04:19,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KardiachainToken
[2020-11-24 20:04:19,956 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KardiachainToken
[2020-11-24 20:04:19,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KardiachainToken
[2020-11-24 20:04:19,956 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:04:19,956 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:04:19,956 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:04:19,956 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 20:04:19,956 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 20:04:19,956 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 20:04:19,956 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:04:19,956 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:04:19,956 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-24 20:04:19,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-24 20:04:19,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 20:04:19,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 20:04:19,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 20:04:19,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 20:04:19,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 20:04:19,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 20:04:19,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-24 20:04:19,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-24 20:04:19,957 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_KardiachainToken
[2020-11-24 20:04:19,957 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:04:19,957 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:04:19,957 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:04:19,957 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:04:19,958 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:04:19,958 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:19,958 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:19,958 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:19,958 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:19,958 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:04:19,958 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-24 20:04:19,958 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-24 20:04:19,958 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:04:19,958 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 20:04:19,958 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 20:04:19,958 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-24 20:04:19,959 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-24 20:04:19,959 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-24 20:04:19,959 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-24 20:04:19,959 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-24 20:04:19,959 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 20:04:19,959 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-24 20:04:19,959 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-24 20:04:19,959 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-24 20:04:19,959 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-24 20:04:19,959 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 20:04:19,959 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 20:04:19,959 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:04:19,960 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:04:19,960 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:04:19,960 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:04:19,960 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 20:04:19,960 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-24 20:04:19,960 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-24 20:04:19,960 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 20:04:19,960 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-24 20:04:19,960 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:04:19,960 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 20:04:19,960 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 20:04:19,960 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 20:04:19,960 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 20:04:19,961 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-24 20:04:19,961 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-24 20:04:19,961 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:04:19,961 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:04:19,961 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:04:19,961 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 20:04:19,961 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 20:04:19,961 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 20:04:19,961 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 20:04:19,961 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 20:04:19,961 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 20:04:19,961 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 20:04:19,961 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 20:04:19,961 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-24 20:04:19,962 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-24 20:04:19,962 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-24 20:04:19,962 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:19,962 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:19,962 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:19,962 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:19,962 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:19,962 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:19,962 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:19,962 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:19,962 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:19,962 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:19,962 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken_NoBaseCtor__fail
[2020-11-24 20:04:19,962 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken__success
[2020-11-24 20:04:19,962 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken__fail
[2020-11-24 20:04:19,963 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_KardiachainToken__success
[2020-11-24 20:04:19,963 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_KardiachainToken__fail
[2020-11-24 20:04:19,963 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_KardiachainToken__success
[2020-11-24 20:04:19,963 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_KardiachainToken__fail
[2020-11-24 20:04:19,963 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KardiachainToken__success
[2020-11-24 20:04:19,963 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KardiachainToken__fail
[2020-11-24 20:04:19,963 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KardiachainToken__success
[2020-11-24 20:04:19,963 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KardiachainToken__fail
[2020-11-24 20:04:19,963 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KardiachainToken__success
[2020-11-24 20:04:19,963 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KardiachainToken__fail
[2020-11-24 20:04:19,963 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KardiachainToken__success
[2020-11-24 20:04:19,963 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KardiachainToken__fail
[2020-11-24 20:04:19,963 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:04:19,963 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:04:19,964 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:04:19,964 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 20:04:19,964 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 20:04:19,964 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 20:04:19,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:04:19,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:04:19,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:04:19,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:04:19,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:04:19,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:04:19,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:19,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:04:19,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:19,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:04:19,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:19,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:04:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:04:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:04:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:04:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-24 20:04:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-24 20:04:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:04:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:04:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 20:04:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 20:04:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-24 20:04:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-24 20:04:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-24 20:04:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-24 20:04:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 20:04:19,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-24 20:04:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-24 20:04:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-24 20:04:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-24 20:04:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-24 20:04:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 20:04:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 20:04:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:04:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:04:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:04:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:04:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 20:04:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 20:04:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-24 20:04:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-24 20:04:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-24 20:04:19,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-24 20:04:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 20:04:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 20:04:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-24 20:04:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-24 20:04:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:04:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:04:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 20:04:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 20:04:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 20:04:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 20:04:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-24 20:04:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-24 20:04:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:04:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:04:19,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:04:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:04:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 20:04:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 20:04:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 20:04:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 20:04:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 20:04:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 20:04:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 20:04:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 20:04:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-24 20:04:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-24 20:04:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-24 20:04:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-24 20:04:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:19,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:19,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:19,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:19,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:19,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:19,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:19,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:19,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:19,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken_NoBaseCtor__fail
[2020-11-24 20:04:19,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken_NoBaseCtor__success
[2020-11-24 20:04:19,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken__fail
[2020-11-24 20:04:19,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken__success
[2020-11-24 20:04:19,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_KardiachainToken__fail
[2020-11-24 20:04:19,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_KardiachainToken__success
[2020-11-24 20:04:19,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_KardiachainToken__fail
[2020-11-24 20:04:19,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_KardiachainToken__success
[2020-11-24 20:04:19,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KardiachainToken__fail
[2020-11-24 20:04:19,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KardiachainToken__success
[2020-11-24 20:04:19,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KardiachainToken__fail
[2020-11-24 20:04:19,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KardiachainToken__success
[2020-11-24 20:04:19,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KardiachainToken__fail
[2020-11-24 20:04:19,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KardiachainToken__success
[2020-11-24 20:04:19,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KardiachainToken__fail
[2020-11-24 20:04:19,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KardiachainToken__success
[2020-11-24 20:04:19,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:04:19,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:04:19,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:04:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:04:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:04:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:04:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 20:04:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 20:04:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 20:04:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 20:04:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 20:04:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 20:04:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:04:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:04:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-24 20:04:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-24 20:04:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 20:04:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 20:04:19,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 20:04:19,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 20:04:19,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 20:04:19,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 20:04:19,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-24 20:04:19,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-24 20:04:19,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_KardiachainToken
[2020-11-24 20:04:19,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:04:19,972 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:04:19,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:04:20,461 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:04:20,503 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:04:20,503 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:04:20,503 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:04:20,759 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:04:20,759 INFO  L286             CfgBuilder]: Removed 7 assue(true) statements.
[2020-11-24 20:04:20,762 INFO  L202        PluginConnector]: Adding new model KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:04:20 BoogieIcfgContainer
[2020-11-24 20:04:20,762 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:04:19" (2/2) ...
[2020-11-24 20:04:20,762 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:04:20,763 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@635a8999 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:04:20, skipping insertion in model container
[2020-11-24 20:04:20,763 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:04:20,763 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:04:20,763 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:04:20,765 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:04:20,765 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:19" (1/3) ...
[2020-11-24 20:04:20,765 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@3ad37010 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:04:20, skipping insertion in model container
[2020-11-24 20:04:20,765 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:04:19" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:04:20,803 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:04:20 NWAContainer
[2020-11-24 20:04:20,803 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:04:20,803 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:04:20,803 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:04:20,804 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:04:20,805 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:04:20" (3/4) ...
[2020-11-24 20:04:20,806 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5abbf210 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:04:20, skipping insertion in model container
[2020-11-24 20:04:20,806 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:04:20" (4/4) ...
[2020-11-24 20:04:20,809 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:04:20,814 INFO  L110   BuchiProductObserver]: Initial RCFG 2377 locations, 3411 edges
[2020-11-24 20:04:20,814 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:04:20,827 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:04:22,461 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:04:22,472 INFO  L110   BuchiProductObserver]: BuchiProgram size 6102 locations, 11207 edges
[2020-11-24 20:04:22,473 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:04:22 BoogieIcfgContainer
[2020-11-24 20:04:22,473 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:04:22,473 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:04:22,473 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:04:22,475 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:04:22,476 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:04:22" (1/1) ...
[2020-11-24 20:04:22,624 INFO  L313           BlockEncoder]: Initial Icfg 6102 locations, 11207 edges
[2020-11-24 20:04:22,624 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:04:22,625 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:04:22,625 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:04:22,626 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:04:22,643 INFO  L70    emoveInfeasibleEdges]: Removed 174 edges and 17 locations because of local infeasibility
[2020-11-24 20:04:22,658 INFO  L70        RemoveSinkStates]: Removed 104 edges and 69 locations by removing sink states
[2020-11-24 20:04:22,677 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:04:22,682 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:04:22,688 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:04:22,688 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:04:22,692 INFO  L313           BlockEncoder]: Encoded RCFG 5986 locations, 10885 edges
[2020-11-24 20:04:22,693 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:04:22 BasicIcfg
[2020-11-24 20:04:22,693 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:04:22,693 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:04:22,693 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:04:22,696 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:04:22,696 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:04:22,696 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:19" (1/6) ...
[2020-11-24 20:04:22,698 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@42dcc03 and model type KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:04:22, skipping insertion in model container
[2020-11-24 20:04:22,698 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:04:22,698 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:04:19" (2/6) ...
[2020-11-24 20:04:22,698 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@42dcc03 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:04:22, skipping insertion in model container
[2020-11-24 20:04:22,698 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:04:22,699 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:04:20" (3/6) ...
[2020-11-24 20:04:22,699 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@42dcc03 and model type KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:04:22, skipping insertion in model container
[2020-11-24 20:04:22,699 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:04:22,699 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:04:20" (4/6) ...
[2020-11-24 20:04:22,699 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@42dcc03 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:04:22, skipping insertion in model container
[2020-11-24 20:04:22,700 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:04:22,700 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:04:22" (5/6) ...
[2020-11-24 20:04:22,700 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@42dcc03 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:04:22, skipping insertion in model container
[2020-11-24 20:04:22,700 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:04:22,700 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:04:22" (6/6) ...
[2020-11-24 20:04:22,701 INFO  L404   chiAutomizerObserver]: Analyzing ICFG KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-normal.bpl_BEv2
[2020-11-24 20:04:22,740 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:04:22,741 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:04:22,741 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:04:22,741 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:04:22,741 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:04:22,741 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:04:22,741 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:04:22,741 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:04:22,741 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:04:22,795 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5986 states.
[2020-11-24 20:04:22,863 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:04:22,863 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:04:22,863 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:04:22,873 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:22,873 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:22,873 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:04:22,873 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5986 states.
[2020-11-24 20:04:22,906 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:04:22,906 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:04:22,906 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:04:22,908 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:22,908 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND TRUE   revert
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND TRUE   choice == 20
[L6343]              gas := gas - 21000;
[L6344]  COND FALSE  !(gas >= 0)
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:04:22,926 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:22,926 INFO  L82        PathProgramCache]: Analyzing trace with hash 1940812604, now seen corresponding path program 1 times
[2020-11-24 20:04:22,931 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:22,953 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:04:22,990 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:04:22,993 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:04:22,993 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:04:23,311 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:04:23,320 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:04:23,320 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:04:23,321 INFO  L87              Difference]: Start difference. First operand 5986 states. Second operand 3 states.
[2020-11-24 20:04:23,606 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:04:23,606 INFO  L93              Difference]: Finished difference Result 3725 states and 4458 transitions.
[2020-11-24 20:04:23,606 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:04:23,608 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3725 states and 4458 transitions.
[2020-11-24 20:04:23,627 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:04:23,652 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3725 states to 3725 states and 4458 transitions.
[2020-11-24 20:04:23,653 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 20:04:23,655 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 894
[2020-11-24 20:04:23,655 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3725 states and 4458 transitions.
[2020-11-24 20:04:23,664 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:04:23,665 INFO  L728         BuchiCegarLoop]: Abstraction has 3725 states and 4458 transitions.
[2020-11-24 20:04:23,680 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3725 states and 4458 transitions.
[2020-11-24 20:04:23,732 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3725 to 3725.
[2020-11-24 20:04:23,733 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3725 states.
[2020-11-24 20:04:23,740 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3725 states to 3725 states and 4458 transitions.
[2020-11-24 20:04:23,741 INFO  L751         BuchiCegarLoop]: Abstraction has 3725 states and 4458 transitions.
[2020-11-24 20:04:23,741 INFO  L631         BuchiCegarLoop]: Abstraction has 3725 states and 4458 transitions.
[2020-11-24 20:04:23,741 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:04:23,741 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3725 states and 4458 transitions.
[2020-11-24 20:04:23,750 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:04:23,750 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:04:23,750 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:04:23,752 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:23,752 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND TRUE   revert
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND FALSE  !(choice == 16)
[L6374]  COND TRUE   choice == 15
[L6375]              gas := gas - 21000;
[L6376]  COND TRUE   gas >= 0
[L6377]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6378]              assume msgvalue_MSG == 0;
[L6379]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && value_s747 <= _balances_ERC20[this][from_s747]) && value_s747 <= _allowances_ERC20[this][from_s747][msgsender_MSG]) && _balances_ERC20[this][to_s747] + value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1350]              havoc __exception;
[L1351]              revert := false;
[L1352]  COND FALSE  !(__exception)
[L1376]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3933]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5650]  COND FALSE  !(!!paused_Pausable[this])
[L3933]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]  COND TRUE   revert
[L1376]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1377]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && _balances_ERC20[this][from_s747] == old(_balances_ERC20[this][from_s747]) - value_s747) && _balances_ERC20[this][to_s747] == old(_balances_ERC20[this][to_s747]) + value_s747) && _allowances_ERC20[this][from_s747][msgsender_MSG] == old(_allowances_ERC20[this][from_s747][msgsender_MSG]) - value_s747) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6379]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND FALSE  !(choice == 16)
[L6374]  COND TRUE   choice == 15
[L6375]              gas := gas - 21000;
[L6376]  COND TRUE   gas >= 0
[L6377]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6378]              assume msgvalue_MSG == 0;
[L6379]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && value_s747 <= _balances_ERC20[this][from_s747]) && value_s747 <= _allowances_ERC20[this][from_s747][msgsender_MSG]) && _balances_ERC20[this][to_s747] + value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1350]              havoc __exception;
[L1351]              revert := false;
[L1352]  COND FALSE  !(__exception)
[L1376]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3933]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5650]  COND FALSE  !(!!paused_Pausable[this])
[L3933]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]  COND TRUE   revert
[L1376]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1377]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && _balances_ERC20[this][from_s747] == old(_balances_ERC20[this][from_s747]) - value_s747) && _balances_ERC20[this][to_s747] == old(_balances_ERC20[this][to_s747]) + value_s747) && _allowances_ERC20[this][from_s747][msgsender_MSG] == old(_allowances_ERC20[this][from_s747][msgsender_MSG]) - value_s747) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6379]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:04:23,756 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:23,756 INFO  L82        PathProgramCache]: Analyzing trace with hash 545762026, now seen corresponding path program 1 times
[2020-11-24 20:04:23,757 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:23,766 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:04:23,784 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:04:23,785 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:04:23,785 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:04:23,786 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:04:23,786 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:04:23,786 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:04:23,786 INFO  L87              Difference]: Start difference. First operand 3725 states and 4458 transitions. cyclomatic complexity: 735 Second operand 3 states.
[2020-11-24 20:04:23,891 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:04:23,891 INFO  L93              Difference]: Finished difference Result 4971 states and 5970 transitions.
[2020-11-24 20:04:23,891 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:04:23,892 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4971 states and 5970 transitions.
[2020-11-24 20:04:23,908 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:04:23,928 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4971 states to 4971 states and 5970 transitions.
[2020-11-24 20:04:23,928 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1267
[2020-11-24 20:04:23,929 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1267
[2020-11-24 20:04:23,929 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4971 states and 5970 transitions.
[2020-11-24 20:04:23,936 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:04:23,936 INFO  L728         BuchiCegarLoop]: Abstraction has 4971 states and 5970 transitions.
[2020-11-24 20:04:23,940 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4971 states and 5970 transitions.
[2020-11-24 20:04:23,982 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4971 to 4293.
[2020-11-24 20:04:23,982 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4293 states.
[2020-11-24 20:04:23,987 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4293 states to 4293 states and 5142 transitions.
[2020-11-24 20:04:23,987 INFO  L751         BuchiCegarLoop]: Abstraction has 4293 states and 5142 transitions.
[2020-11-24 20:04:23,987 INFO  L631         BuchiCegarLoop]: Abstraction has 4293 states and 5142 transitions.
[2020-11-24 20:04:23,987 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:04:23,987 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4293 states and 5142 transitions.
[2020-11-24 20:04:23,993 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:04:23,993 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:04:23,993 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:04:23,996 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:23,996 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L4184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L4188]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L4192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L3832]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3833]  COND FALSE  !(revert)
[L3836]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L3836]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3837]  COND FALSE  !(revert)
[L3840]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3840]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3841]  COND FALSE  !(revert)
[L3844]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3844]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3845]  COND FALSE  !(revert)
[L3848]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]              assume msgsender_MSG != null;
[L3802]              Balance[this] := 0;
[L3848]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3849]  COND FALSE  !(revert)
[L4196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4130]              assume msgsender_MSG != null;
[L4131]              Balance[this] := 0;
[L4132]              name_KardiachainToken[this] := -505187484;
[L4133]              symbol_KardiachainToken[this] := 1585535741;
[L4134]              decimals_KardiachainToken[this] := 18;
[L4135]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4136]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND TRUE   DType[this] == KardiachainToken
[L4139]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3392]              __var_8 := null;
[L3393]  COND TRUE   !(account_s453 != null)
[L3394]              revert := true;
[L4139]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4140]  COND TRUE   revert
[L4200]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND FALSE  !(choice == 16)
[L6374]  COND TRUE   choice == 15
[L6375]              gas := gas - 21000;
[L6376]  COND TRUE   gas >= 0
[L6377]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6378]              assume msgvalue_MSG == 0;
[L6379]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && value_s747 <= _balances_ERC20[this][from_s747]) && value_s747 <= _allowances_ERC20[this][from_s747][msgsender_MSG]) && _balances_ERC20[this][to_s747] + value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1350]              havoc __exception;
[L1351]              revert := false;
[L1352]  COND FALSE  !(__exception)
[L1376]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3933]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5650]  COND TRUE   !!paused_Pausable[this]
[L5651]              revert := true;
[L3933]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]  COND TRUE   revert
[L1376]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1377]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && _balances_ERC20[this][from_s747] == old(_balances_ERC20[this][from_s747]) - value_s747) && _balances_ERC20[this][to_s747] == old(_balances_ERC20[this][to_s747]) + value_s747) && _allowances_ERC20[this][from_s747][msgsender_MSG] == old(_allowances_ERC20[this][from_s747][msgsender_MSG]) - value_s747) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6379]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND FALSE  !(choice == 16)
[L6374]  COND TRUE   choice == 15
[L6375]              gas := gas - 21000;
[L6376]  COND TRUE   gas >= 0
[L6377]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6378]              assume msgvalue_MSG == 0;
[L6379]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && value_s747 <= _balances_ERC20[this][from_s747]) && value_s747 <= _allowances_ERC20[this][from_s747][msgsender_MSG]) && _balances_ERC20[this][to_s747] + value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1350]              havoc __exception;
[L1351]              revert := false;
[L1352]  COND FALSE  !(__exception)
[L1376]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3933]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5650]  COND TRUE   !!paused_Pausable[this]
[L5651]              revert := true;
[L3933]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]  COND TRUE   revert
[L1376]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1377]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && _balances_ERC20[this][from_s747] == old(_balances_ERC20[this][from_s747]) - value_s747) && _balances_ERC20[this][to_s747] == old(_balances_ERC20[this][to_s747]) + value_s747) && _allowances_ERC20[this][from_s747][msgsender_MSG] == old(_allowances_ERC20[this][from_s747][msgsender_MSG]) - value_s747) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6379]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:04:24,000 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:24,000 INFO  L82        PathProgramCache]: Analyzing trace with hash -1363942653, now seen corresponding path program 1 times
[2020-11-24 20:04:24,001 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:24,016 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:04:24,087 INFO  L134       CoverageAnalysis]: Checked inductivity of 172 backedges. 0 proven. 21 refuted. 0 times theorem prover too weak. 151 trivial. 0 not checked.
[2020-11-24 20:04:24,088 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:04:24,088 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-24 20:04:24,088 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:04:24,089 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:04:24,089 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:04:24,089 INFO  L87              Difference]: Start difference. First operand 4293 states and 5142 transitions. cyclomatic complexity: 851 Second operand 7 states.
[2020-11-24 20:04:24,150 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:04:24,150 INFO  L93              Difference]: Finished difference Result 4301 states and 5149 transitions.
[2020-11-24 20:04:24,150 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:04:24,150 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4301 states and 5149 transitions.
[2020-11-24 20:04:24,163 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:04:24,177 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4301 states to 4292 states and 5140 transitions.
[2020-11-24 20:04:24,177 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1082
[2020-11-24 20:04:24,178 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1082
[2020-11-24 20:04:24,178 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4292 states and 5140 transitions.
[2020-11-24 20:04:24,182 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:04:24,182 INFO  L728         BuchiCegarLoop]: Abstraction has 4292 states and 5140 transitions.
[2020-11-24 20:04:24,186 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4292 states and 5140 transitions.
[2020-11-24 20:04:24,238 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4292 to 4292.
[2020-11-24 20:04:24,239 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4292 states.
[2020-11-24 20:04:24,244 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4292 states to 4292 states and 5140 transitions.
[2020-11-24 20:04:24,244 INFO  L751         BuchiCegarLoop]: Abstraction has 4292 states and 5140 transitions.
[2020-11-24 20:04:24,244 INFO  L631         BuchiCegarLoop]: Abstraction has 4292 states and 5140 transitions.
[2020-11-24 20:04:24,244 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:04:24,244 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4292 states and 5140 transitions.
[2020-11-24 20:04:24,250 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:04:24,250 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:04:24,250 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:04:24,252 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:24,252 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L4184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L4188]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L4192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L3832]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3833]  COND FALSE  !(revert)
[L3836]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L3836]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3837]  COND FALSE  !(revert)
[L3840]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3840]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3841]  COND FALSE  !(revert)
[L3844]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3844]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3845]  COND FALSE  !(revert)
[L3848]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]              assume msgsender_MSG != null;
[L3802]              Balance[this] := 0;
[L3848]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3849]  COND FALSE  !(revert)
[L4196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4130]              assume msgsender_MSG != null;
[L4131]              Balance[this] := 0;
[L4132]              name_KardiachainToken[this] := -505187484;
[L4133]              symbol_KardiachainToken[this] := 1585535741;
[L4134]              decimals_KardiachainToken[this] := 18;
[L4135]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4136]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND TRUE   DType[this] == KardiachainToken
[L4139]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3392]              __var_8 := null;
[L3393]  COND FALSE  !(!(account_s453 != null))
[L3397]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND TRUE   !(c_s26 >= a_s26)
[L2791]              revert := true;
[L3397]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3398]  COND TRUE   revert
[L4139]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4140]  COND TRUE   revert
[L4200]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND FALSE  !(choice == 16)
[L6374]  COND TRUE   choice == 15
[L6375]              gas := gas - 21000;
[L6376]  COND TRUE   gas >= 0
[L6377]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6378]              assume msgvalue_MSG == 0;
[L6379]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && value_s747 <= _balances_ERC20[this][from_s747]) && value_s747 <= _allowances_ERC20[this][from_s747][msgsender_MSG]) && _balances_ERC20[this][to_s747] + value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1350]              havoc __exception;
[L1351]              revert := false;
[L1352]  COND FALSE  !(__exception)
[L1376]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3933]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5650]  COND TRUE   !!paused_Pausable[this]
[L5651]              revert := true;
[L3933]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]  COND TRUE   revert
[L1376]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1377]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && _balances_ERC20[this][from_s747] == old(_balances_ERC20[this][from_s747]) - value_s747) && _balances_ERC20[this][to_s747] == old(_balances_ERC20[this][to_s747]) + value_s747) && _allowances_ERC20[this][from_s747][msgsender_MSG] == old(_allowances_ERC20[this][from_s747][msgsender_MSG]) - value_s747) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6379]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND FALSE  !(choice == 16)
[L6374]  COND TRUE   choice == 15
[L6375]              gas := gas - 21000;
[L6376]  COND TRUE   gas >= 0
[L6377]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6378]              assume msgvalue_MSG == 0;
[L6379]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && value_s747 <= _balances_ERC20[this][from_s747]) && value_s747 <= _allowances_ERC20[this][from_s747][msgsender_MSG]) && _balances_ERC20[this][to_s747] + value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1350]              havoc __exception;
[L1351]              revert := false;
[L1352]  COND FALSE  !(__exception)
[L1376]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3933]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5650]  COND TRUE   !!paused_Pausable[this]
[L5651]              revert := true;
[L3933]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]  COND TRUE   revert
[L1376]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1377]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && _balances_ERC20[this][from_s747] == old(_balances_ERC20[this][from_s747]) - value_s747) && _balances_ERC20[this][to_s747] == old(_balances_ERC20[this][to_s747]) + value_s747) && _allowances_ERC20[this][from_s747][msgsender_MSG] == old(_allowances_ERC20[this][from_s747][msgsender_MSG]) - value_s747) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6379]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:04:24,256 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:24,256 INFO  L82        PathProgramCache]: Analyzing trace with hash -602567705, now seen corresponding path program 1 times
[2020-11-24 20:04:24,257 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:24,268 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:04:24,314 INFO  L134       CoverageAnalysis]: Checked inductivity of 172 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 172 trivial. 0 not checked.
[2020-11-24 20:04:24,314 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:04:24,314 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:04:24,314 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:04:24,314 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:04:24,315 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:04:24,315 INFO  L87              Difference]: Start difference. First operand 4292 states and 5140 transitions. cyclomatic complexity: 850 Second operand 3 states.
[2020-11-24 20:04:24,386 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:04:24,386 INFO  L93              Difference]: Finished difference Result 4970 states and 5722 transitions.
[2020-11-24 20:04:24,386 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:04:24,386 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4970 states and 5722 transitions.
[2020-11-24 20:04:24,398 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:04:24,413 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4970 states to 4559 states and 5226 transitions.
[2020-11-24 20:04:24,413 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1129
[2020-11-24 20:04:24,414 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1178
[2020-11-24 20:04:24,414 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4559 states and 5226 transitions.
[2020-11-24 20:04:24,418 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:04:24,418 INFO  L728         BuchiCegarLoop]: Abstraction has 4559 states and 5226 transitions.
[2020-11-24 20:04:24,422 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4559 states and 5226 transitions.
[2020-11-24 20:04:24,453 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4559 to 3973.
[2020-11-24 20:04:24,453 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3973 states.
[2020-11-24 20:04:24,457 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3973 states to 3973 states and 4490 transitions.
[2020-11-24 20:04:24,457 INFO  L751         BuchiCegarLoop]: Abstraction has 3973 states and 4490 transitions.
[2020-11-24 20:04:24,457 INFO  L631         BuchiCegarLoop]: Abstraction has 3973 states and 4490 transitions.
[2020-11-24 20:04:24,457 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:04:24,457 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3973 states and 4490 transitions.
[2020-11-24 20:04:24,462 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:04:24,462 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:04:24,462 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:04:24,463 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:24,463 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L4184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L4188]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L4192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L3832]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3833]  COND FALSE  !(revert)
[L3836]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L3836]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3837]  COND FALSE  !(revert)
[L3840]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3840]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3841]  COND FALSE  !(revert)
[L3844]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3844]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3845]  COND FALSE  !(revert)
[L3848]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]              assume msgsender_MSG != null;
[L3802]              Balance[this] := 0;
[L3848]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3849]  COND FALSE  !(revert)
[L4196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4130]              assume msgsender_MSG != null;
[L4131]              Balance[this] := 0;
[L4132]              name_KardiachainToken[this] := -505187484;
[L4133]              symbol_KardiachainToken[this] := 1585535741;
[L4134]              decimals_KardiachainToken[this] := 18;
[L4135]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4136]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND TRUE   DType[this] == KardiachainToken
[L4139]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3392]              __var_8 := null;
[L3393]  COND FALSE  !(!(account_s453 != null))
[L3397]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3397]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3398]  COND FALSE  !(revert)
[L3401]              _totalSupply_ERC20[this] := __var_9;
[L3402]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3402]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3403]  COND FALSE  !(revert)
[L3406]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3407]              _balances_ERC20[this][account_s453] := __var_10;
[L3408]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3409]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4139]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4140]  COND FALSE  !(revert)
[L4200]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND FALSE  !(choice == 16)
[L6374]  COND TRUE   choice == 15
[L6375]              gas := gas - 21000;
[L6376]  COND TRUE   gas >= 0
[L6377]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6378]              assume msgvalue_MSG == 0;
[L6379]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && value_s747 <= _balances_ERC20[this][from_s747]) && value_s747 <= _allowances_ERC20[this][from_s747][msgsender_MSG]) && _balances_ERC20[this][to_s747] + value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1350]              havoc __exception;
[L1351]              revert := false;
[L1352]  COND TRUE   __exception
[L1353]              __tmp__Balance := Balance;
[L1354]              __tmp__DType := DType;
[L1355]              __tmp__Alloc := Alloc;
[L1356]              __tmp__balance_ADDR := balance_ADDR;
[L1357]              __tmp__M_Ref_int := M_Ref_int;
[L1358]              __tmp__sum__balances0 := sum__balances0;
[L1359]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1360]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1361]              __tmp__sum__allowances1 := sum__allowances1;
[L1362]              __tmp__Length := Length;
[L1363]              __tmp__now := now;
[L1364]              __tmp___balances_ERC20 := _balances_ERC20;
[L1365]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1366]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1367]              __tmp___owner_Ownable := _owner_Ownable;
[L1368]              __tmp__paused_Pausable := paused_Pausable;
[L1369]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1370]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1371]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1372]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1373]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3908]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5642]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5643]              revert := true;
[L3908]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND TRUE   revert
[L1373]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1374]              assume revert || gas < 0;
[L6379]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND FALSE  !(choice == 16)
[L6374]  COND TRUE   choice == 15
[L6375]              gas := gas - 21000;
[L6376]  COND TRUE   gas >= 0
[L6377]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6378]              assume msgvalue_MSG == 0;
[L6379]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && value_s747 <= _balances_ERC20[this][from_s747]) && value_s747 <= _allowances_ERC20[this][from_s747][msgsender_MSG]) && _balances_ERC20[this][to_s747] + value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1350]              havoc __exception;
[L1351]              revert := false;
[L1352]  COND TRUE   __exception
[L1353]              __tmp__Balance := Balance;
[L1354]              __tmp__DType := DType;
[L1355]              __tmp__Alloc := Alloc;
[L1356]              __tmp__balance_ADDR := balance_ADDR;
[L1357]              __tmp__M_Ref_int := M_Ref_int;
[L1358]              __tmp__sum__balances0 := sum__balances0;
[L1359]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1360]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1361]              __tmp__sum__allowances1 := sum__allowances1;
[L1362]              __tmp__Length := Length;
[L1363]              __tmp__now := now;
[L1364]              __tmp___balances_ERC20 := _balances_ERC20;
[L1365]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1366]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1367]              __tmp___owner_Ownable := _owner_Ownable;
[L1368]              __tmp__paused_Pausable := paused_Pausable;
[L1369]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1370]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1371]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1372]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1373]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3908]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5642]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5643]              revert := true;
[L3908]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND TRUE   revert
[L1373]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1374]              assume revert || gas < 0;
[L6379]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:04:24,467 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:24,467 INFO  L82        PathProgramCache]: Analyzing trace with hash -1698389374, now seen corresponding path program 1 times
[2020-11-24 20:04:24,468 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:24,480 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:04:24,561 INFO  L134       CoverageAnalysis]: Checked inductivity of 177 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 171 trivial. 0 not checked.
[2020-11-24 20:04:24,561 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:04:24,563 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-24 20:04:24,563 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:04:24,564 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-24 20:04:24,564 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-24 20:04:24,564 INFO  L87              Difference]: Start difference. First operand 3973 states and 4490 transitions. cyclomatic complexity: 519 Second operand 14 states.
[2020-11-24 20:04:27,838 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:04:27,838 INFO  L93              Difference]: Finished difference Result 6327 states and 7209 transitions.
[2020-11-24 20:04:27,838 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-24 20:04:27,839 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6327 states and 7209 transitions.
[2020-11-24 20:04:27,851 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-24 20:04:27,868 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6327 states to 6324 states and 7206 transitions.
[2020-11-24 20:04:27,869 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1631
[2020-11-24 20:04:27,869 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1631
[2020-11-24 20:04:27,870 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6324 states and 7206 transitions.
[2020-11-24 20:04:27,875 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:04:27,875 INFO  L728         BuchiCegarLoop]: Abstraction has 6324 states and 7206 transitions.
[2020-11-24 20:04:27,879 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6324 states and 7206 transitions.
[2020-11-24 20:04:27,926 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6324 to 5643.
[2020-11-24 20:04:27,927 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5643 states.
[2020-11-24 20:04:27,933 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5643 states to 5643 states and 6503 transitions.
[2020-11-24 20:04:27,933 INFO  L751         BuchiCegarLoop]: Abstraction has 5643 states and 6503 transitions.
[2020-11-24 20:04:27,933 INFO  L631         BuchiCegarLoop]: Abstraction has 5643 states and 6503 transitions.
[2020-11-24 20:04:27,934 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:04:27,934 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5643 states and 6503 transitions.
[2020-11-24 20:04:27,941 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 20:04:27,941 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:04:27,941 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:04:27,943 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:27,944 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND TRUE   __exception
[L1609]              __tmp__Balance := Balance;
[L1610]              __tmp__DType := DType;
[L1611]              __tmp__Alloc := Alloc;
[L1612]              __tmp__balance_ADDR := balance_ADDR;
[L1613]              __tmp__M_Ref_int := M_Ref_int;
[L1614]              __tmp__sum__balances0 := sum__balances0;
[L1615]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1616]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1617]              __tmp__sum__allowances1 := sum__allowances1;
[L1618]              __tmp__Length := Length;
[L1619]              __tmp__now := now;
[L1620]              __tmp___balances_ERC20 := _balances_ERC20;
[L1621]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1622]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1623]              __tmp___owner_Ownable := _owner_Ownable;
[L1624]              __tmp__paused_Pausable := paused_Pausable;
[L1625]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1626]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1627]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1628]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1629]  CALL        call KardiachainToken_KardiachainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4151]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2892]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2877]              assume msgsender_MSG != null;
[L2878]              __tmp__Balance[this] := 0;
[L2892]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2893]  COND FALSE  !(revert)
[L4151]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2934]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2892]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2877]              assume msgsender_MSG != null;
[L2878]              __tmp__Balance[this] := 0;
[L2892]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2893]  COND FALSE  !(revert)
[L2934]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2935]  COND FALSE  !(revert)
[L2938]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2909]              assume msgsender_MSG != null;
[L2910]              __tmp__Balance[this] := 0;
[L2911]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2912]              __tmp__sum__balances0[this] := 0;
[L2913]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2914]              __tmp__sum__allowances1[this] := 0;
[L2915]              __tmp___totalSupply_ERC20[this] := 0;
[L2938]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2939]  COND FALSE  !(revert)
[L4155]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3593]              assume msgsender_MSG != null;
[L3594]              __tmp__Balance[this] := 0;
[L3595]              __tmp___owner_Ownable[this] := null;
[L3597]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3613]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3614]  COND FALSE  !(revert)
[L4159]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L4163]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3702]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3593]              assume msgsender_MSG != null;
[L3594]              __tmp__Balance[this] := 0;
[L3595]              __tmp___owner_Ownable[this] := null;
[L3597]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3613]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3614]  COND FALSE  !(revert)
[L3702]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3703]  COND FALSE  !(revert)
[L3706]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3685]              assume msgsender_MSG != null;
[L3686]              __tmp__Balance[this] := 0;
[L3687]              __tmp__paused_Pausable[this] := false;
[L3706]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3707]  COND FALSE  !(revert)
[L4163]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4164]  COND FALSE  !(revert)
[L4167]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3808]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2892]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2877]              assume msgsender_MSG != null;
[L2878]              __tmp__Balance[this] := 0;
[L2892]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2893]  COND FALSE  !(revert)
[L3808]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3809]  COND FALSE  !(revert)
[L3812]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2934]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2892]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2877]              assume msgsender_MSG != null;
[L2878]              __tmp__Balance[this] := 0;
[L2892]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2893]  COND FALSE  !(revert)
[L2934]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2935]  COND FALSE  !(revert)
[L2938]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2909]              assume msgsender_MSG != null;
[L2910]              __tmp__Balance[this] := 0;
[L2911]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2912]              __tmp__sum__balances0[this] := 0;
[L2913]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2914]              __tmp__sum__allowances1[this] := 0;
[L2915]              __tmp___totalSupply_ERC20[this] := 0;
[L2938]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2939]  COND FALSE  !(revert)
[L3812]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3593]              assume msgsender_MSG != null;
[L3594]              __tmp__Balance[this] := 0;
[L3595]              __tmp___owner_Ownable[this] := null;
[L3597]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3613]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3614]  COND FALSE  !(revert)
[L3816]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3702]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3593]              assume msgsender_MSG != null;
[L3594]              __tmp__Balance[this] := 0;
[L3595]              __tmp___owner_Ownable[this] := null;
[L3597]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3613]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3614]  COND FALSE  !(revert)
[L3702]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3703]  COND FALSE  !(revert)
[L3706]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3685]              assume msgsender_MSG != null;
[L3686]              __tmp__Balance[this] := 0;
[L3687]              __tmp__paused_Pausable[this] := false;
[L3706]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3707]  COND FALSE  !(revert)
[L3820]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              __tmp__Balance[this] := 0;
[L3824]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3825]  COND FALSE  !(revert)
[L4167]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4168]  COND FALSE  !(revert)
[L4171]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4108]              assume msgsender_MSG != null;
[L4109]              __tmp__Balance[this] := 0;
[L4110]              __tmp__name_KardiachainToken[this] := -505187484;
[L4111]              __tmp__symbol_KardiachainToken[this] := 1585535741;
[L4112]              __tmp__decimals_KardiachainToken[this] := 18;
[L4113]              __var_29 := __tmp__decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4114]              __tmp__initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, __tmp__decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4116]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L4117]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__initialSupply_KardiachainToken[this]);
[L3368]              __var_8 := null;
[L3369]  COND FALSE  !(!(account_s453 != null))
[L3373]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s453);
[L2777]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2778]  COND FALSE  !(!(c_s26 >= a_s26))
[L2782]              __ret_0_ := c_s26;
[L3373]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s453);
[L3374]  COND FALSE  !(revert)
[L3377]              __tmp___totalSupply_ERC20[this] := __var_9;
[L3378]  CALL        call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s453], amount_s453);
[L2777]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2778]  COND FALSE  !(!(c_s26 >= a_s26))
[L2782]              __ret_0_ := c_s26;
[L3378]  RET         call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s453], amount_s453);
[L3379]  COND FALSE  !(revert)
[L3382]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s453];
[L3383]              __tmp___balances_ERC20[this][account_s453] := __var_10;
[L3384]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s453];
[L4117]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__initialSupply_KardiachainToken[this]);
[L4118]  COND FALSE  !(revert)
[L4171]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4172]  COND FALSE  !(revert)
[L1629]  RET         call KardiachainToken_KardiachainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1630]              assume revert || gas < 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND FALSE  !(choice == 16)
[L6374]  COND TRUE   choice == 15
[L6375]              gas := gas - 21000;
[L6376]  COND TRUE   gas >= 0
[L6377]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6378]              assume msgvalue_MSG == 0;
[L6379]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && value_s747 <= _balances_ERC20[this][from_s747]) && value_s747 <= _allowances_ERC20[this][from_s747][msgsender_MSG]) && _balances_ERC20[this][to_s747] + value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1350]              havoc __exception;
[L1351]              revert := false;
[L1352]  COND TRUE   __exception
[L1353]              __tmp__Balance := Balance;
[L1354]              __tmp__DType := DType;
[L1355]              __tmp__Alloc := Alloc;
[L1356]              __tmp__balance_ADDR := balance_ADDR;
[L1357]              __tmp__M_Ref_int := M_Ref_int;
[L1358]              __tmp__sum__balances0 := sum__balances0;
[L1359]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1360]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1361]              __tmp__sum__allowances1 := sum__allowances1;
[L1362]              __tmp__Length := Length;
[L1363]              __tmp__now := now;
[L1364]              __tmp___balances_ERC20 := _balances_ERC20;
[L1365]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1366]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1367]              __tmp___owner_Ownable := _owner_Ownable;
[L1368]              __tmp__paused_Pausable := paused_Pausable;
[L1369]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1370]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1371]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1372]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1373]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3908]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5642]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5643]              revert := true;
[L3908]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND TRUE   revert
[L1373]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1374]              assume revert || gas < 0;
[L6379]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND FALSE  !(choice == 16)
[L6374]  COND TRUE   choice == 15
[L6375]              gas := gas - 21000;
[L6376]  COND TRUE   gas >= 0
[L6377]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6378]              assume msgvalue_MSG == 0;
[L6379]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && value_s747 <= _balances_ERC20[this][from_s747]) && value_s747 <= _allowances_ERC20[this][from_s747][msgsender_MSG]) && _balances_ERC20[this][to_s747] + value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1350]              havoc __exception;
[L1351]              revert := false;
[L1352]  COND TRUE   __exception
[L1353]              __tmp__Balance := Balance;
[L1354]              __tmp__DType := DType;
[L1355]              __tmp__Alloc := Alloc;
[L1356]              __tmp__balance_ADDR := balance_ADDR;
[L1357]              __tmp__M_Ref_int := M_Ref_int;
[L1358]              __tmp__sum__balances0 := sum__balances0;
[L1359]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1360]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1361]              __tmp__sum__allowances1 := sum__allowances1;
[L1362]              __tmp__Length := Length;
[L1363]              __tmp__now := now;
[L1364]              __tmp___balances_ERC20 := _balances_ERC20;
[L1365]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1366]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1367]              __tmp___owner_Ownable := _owner_Ownable;
[L1368]              __tmp__paused_Pausable := paused_Pausable;
[L1369]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1370]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1371]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1372]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1373]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3908]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5642]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5643]              revert := true;
[L3908]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND TRUE   revert
[L1373]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1374]              assume revert || gas < 0;
[L6379]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:04:27,948 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:27,948 INFO  L82        PathProgramCache]: Analyzing trace with hash 1902947499, now seen corresponding path program 1 times
[2020-11-24 20:04:27,948 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:27,960 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:04:28,011 INFO  L134       CoverageAnalysis]: Checked inductivity of 171 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 171 trivial. 0 not checked.
[2020-11-24 20:04:28,011 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:04:28,011 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:04:28,011 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:04:28,012 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:04:28,012 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:04:28,012 INFO  L87              Difference]: Start difference. First operand 5643 states and 6503 transitions. cyclomatic complexity: 864 Second operand 4 states.
[2020-11-24 20:04:28,206 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:04:28,206 INFO  L93              Difference]: Finished difference Result 7117 states and 8571 transitions.
[2020-11-24 20:04:28,206 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 20:04:28,207 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7117 states and 8571 transitions.
[2020-11-24 20:04:28,225 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 32
[2020-11-24 20:04:28,248 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7117 states to 6903 states and 8351 transitions.
[2020-11-24 20:04:28,248 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1755
[2020-11-24 20:04:28,249 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1755
[2020-11-24 20:04:28,250 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6903 states and 8351 transitions.
[2020-11-24 20:04:28,255 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:04:28,255 INFO  L728         BuchiCegarLoop]: Abstraction has 6903 states and 8351 transitions.
[2020-11-24 20:04:28,259 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6903 states and 8351 transitions.
[2020-11-24 20:04:28,334 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6903 to 6131.
[2020-11-24 20:04:28,334 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6131 states.
[2020-11-24 20:04:28,343 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6131 states to 6131 states and 7242 transitions.
[2020-11-24 20:04:28,343 INFO  L751         BuchiCegarLoop]: Abstraction has 6131 states and 7242 transitions.
[2020-11-24 20:04:28,343 INFO  L631         BuchiCegarLoop]: Abstraction has 6131 states and 7242 transitions.
[2020-11-24 20:04:28,343 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:04:28,343 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6131 states and 7242 transitions.
[2020-11-24 20:04:28,350 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 20:04:28,350 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:04:28,351 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:04:28,352 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:28,352 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L4184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L4188]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L4192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L3832]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3833]  COND FALSE  !(revert)
[L3836]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L3836]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3837]  COND FALSE  !(revert)
[L3840]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3840]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3841]  COND FALSE  !(revert)
[L3844]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3844]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3845]  COND FALSE  !(revert)
[L3848]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]              assume msgsender_MSG != null;
[L3802]              Balance[this] := 0;
[L3848]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3849]  COND FALSE  !(revert)
[L4196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4130]              assume msgsender_MSG != null;
[L4131]              Balance[this] := 0;
[L4132]              name_KardiachainToken[this] := -505187484;
[L4133]              symbol_KardiachainToken[this] := 1585535741;
[L4134]              decimals_KardiachainToken[this] := 18;
[L4135]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4136]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND TRUE   DType[this] == KardiachainToken
[L4139]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3392]              __var_8 := null;
[L3393]  COND FALSE  !(!(account_s453 != null))
[L3397]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3397]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3398]  COND FALSE  !(revert)
[L3401]              _totalSupply_ERC20[this] := __var_9;
[L3402]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3402]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3403]  COND FALSE  !(revert)
[L3406]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3407]              _balances_ERC20[this][account_s453] := __var_10;
[L3408]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3409]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4139]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4140]  COND FALSE  !(revert)
[L4200]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND FALSE  !(choice == 16)
[L6374]  COND TRUE   choice == 15
[L6375]              gas := gas - 21000;
[L6376]  COND TRUE   gas >= 0
[L6377]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6378]              assume msgvalue_MSG == 0;
[L6379]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && value_s747 <= _balances_ERC20[this][from_s747]) && value_s747 <= _allowances_ERC20[this][from_s747][msgsender_MSG]) && _balances_ERC20[this][to_s747] + value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1350]              havoc __exception;
[L1351]              revert := false;
[L1352]  COND TRUE   __exception
[L1353]              __tmp__Balance := Balance;
[L1354]              __tmp__DType := DType;
[L1355]              __tmp__Alloc := Alloc;
[L1356]              __tmp__balance_ADDR := balance_ADDR;
[L1357]              __tmp__M_Ref_int := M_Ref_int;
[L1358]              __tmp__sum__balances0 := sum__balances0;
[L1359]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1360]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1361]              __tmp__sum__allowances1 := sum__allowances1;
[L1362]              __tmp__Length := Length;
[L1363]              __tmp__now := now;
[L1364]              __tmp___balances_ERC20 := _balances_ERC20;
[L1365]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1366]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1367]              __tmp___owner_Ownable := _owner_Ownable;
[L1368]              __tmp__paused_Pausable := paused_Pausable;
[L1369]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1370]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1371]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1372]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1373]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3908]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5642]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3908]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3913]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3091]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3092]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3304]              __var_4 := null;
[L3305]  COND TRUE   !(sender_s410 != null)
[L3306]              revert := true;
[L3092]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3093]  COND TRUE   revert
[L3913]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3914]  COND TRUE   revert
[L1373]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1374]              assume revert || gas < 0;
[L6379]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND TRUE   choice == 20
[L6343]              gas := gas - 21000;
[L6344]  COND FALSE  !(gas >= 0)
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:04:28,359 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:28,359 INFO  L82        PathProgramCache]: Analyzing trace with hash -1989296341, now seen corresponding path program 1 times
[2020-11-24 20:04:28,360 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:28,382 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:04:28,405 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:04:28,487 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:28,487 INFO  L82        PathProgramCache]: Analyzing trace with hash -1711487222, now seen corresponding path program 1 times
[2020-11-24 20:04:28,489 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:28,494 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:04:28,506 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:04:28,506 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:04:28,506 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:04:28,507 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-24 20:04:28,507 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:04:28,507 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:04:28,507 INFO  L87              Difference]: Start difference. First operand 6131 states and 7242 transitions. cyclomatic complexity: 1115 Second operand 4 states.
[2020-11-24 20:04:28,879 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:04:28,879 INFO  L93              Difference]: Finished difference Result 6528 states and 7628 transitions.
[2020-11-24 20:04:28,879 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:04:28,879 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6528 states and 7628 transitions.
[2020-11-24 20:04:28,904 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 32
[2020-11-24 20:04:28,928 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6528 states to 6528 states and 7628 transitions.
[2020-11-24 20:04:28,928 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1657
[2020-11-24 20:04:28,929 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1657
[2020-11-24 20:04:28,929 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6528 states and 7628 transitions.
[2020-11-24 20:04:28,935 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:04:28,935 INFO  L728         BuchiCegarLoop]: Abstraction has 6528 states and 7628 transitions.
[2020-11-24 20:04:28,940 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6528 states and 7628 transitions.
[2020-11-24 20:04:28,981 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6528 to 3935.
[2020-11-24 20:04:28,982 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3935 states.
[2020-11-24 20:04:28,985 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3935 states to 3935 states and 4410 transitions.
[2020-11-24 20:04:28,985 INFO  L751         BuchiCegarLoop]: Abstraction has 3935 states and 4410 transitions.
[2020-11-24 20:04:28,985 INFO  L631         BuchiCegarLoop]: Abstraction has 3935 states and 4410 transitions.
[2020-11-24 20:04:28,985 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:04:28,985 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3935 states and 4410 transitions.
[2020-11-24 20:04:28,991 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:04:28,991 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:04:28,991 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:04:28,992 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:28,992 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC20Pausable0 := false;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L4184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L4188]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L4192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L3832]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3833]  COND FALSE  !(revert)
[L3836]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L3836]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3837]  COND FALSE  !(revert)
[L3840]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3840]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3841]  COND FALSE  !(revert)
[L3844]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3844]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3845]  COND FALSE  !(revert)
[L3848]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]              assume msgsender_MSG != null;
[L3802]              Balance[this] := 0;
[L3848]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3849]  COND FALSE  !(revert)
[L4196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4130]              assume msgsender_MSG != null;
[L4131]              Balance[this] := 0;
[L4132]              name_KardiachainToken[this] := -505187484;
[L4133]              symbol_KardiachainToken[this] := 1585535741;
[L4134]              decimals_KardiachainToken[this] := 18;
[L4135]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4136]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND TRUE   DType[this] == KardiachainToken
[L4139]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3392]              __var_8 := null;
[L3393]  COND FALSE  !(!(account_s453 != null))
[L3397]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3397]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3398]  COND FALSE  !(revert)
[L3401]              _totalSupply_ERC20[this] := __var_9;
[L3402]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3402]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3403]  COND FALSE  !(revert)
[L3406]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3407]              _balances_ERC20[this][account_s453] := __var_10;
[L3408]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3409]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4139]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4140]  COND FALSE  !(revert)
[L4200]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND FALSE  !(choice == 16)
[L6374]  COND TRUE   choice == 15
[L6375]              gas := gas - 21000;
[L6376]  COND TRUE   gas >= 0
[L6377]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6378]              assume msgvalue_MSG == 0;
[L6379]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && value_s747 <= _balances_ERC20[this][from_s747]) && value_s747 <= _allowances_ERC20[this][from_s747][msgsender_MSG]) && _balances_ERC20[this][to_s747] + value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1350]              havoc __exception;
[L1351]              revert := false;
[L1352]  COND TRUE   __exception
[L1353]              __tmp__Balance := Balance;
[L1354]              __tmp__DType := DType;
[L1355]              __tmp__Alloc := Alloc;
[L1356]              __tmp__balance_ADDR := balance_ADDR;
[L1357]              __tmp__M_Ref_int := M_Ref_int;
[L1358]              __tmp__sum__balances0 := sum__balances0;
[L1359]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1360]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1361]              __tmp__sum__allowances1 := sum__allowances1;
[L1362]              __tmp__Length := Length;
[L1363]              __tmp__now := now;
[L1364]              __tmp___balances_ERC20 := _balances_ERC20;
[L1365]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1366]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1367]              __tmp___owner_Ownable := _owner_Ownable;
[L1368]              __tmp__paused_Pausable := paused_Pausable;
[L1369]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1370]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1371]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1372]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1373]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3908]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5642]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3908]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3913]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3091]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3092]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3304]              __var_4 := null;
[L3305]  COND TRUE   !(sender_s410 != null)
[L3306]              revert := true;
[L3092]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3093]  COND TRUE   revert
[L3913]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3914]  COND TRUE   revert
[L1373]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1374]              assume revert || gas < 0;
[L6379]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND TRUE   choice == 20
[L6343]              gas := gas - 21000;
[L6344]  COND TRUE   gas >= 0
[L6345]              assume msgvalue_MSG == 0;
[L6346]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L273]               havoc __exception;
[L274]               revert := false;
[L275]   COND FALSE  !(__exception)
[L299]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]              __ret_0_ := _totalSupply_ERC20[this];
[L299]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L300]               assume !revert && gas >= 0;
[L6346]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:04:28,996 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:28,996 INFO  L82        PathProgramCache]: Analyzing trace with hash -1989296341, now seen corresponding path program 2 times
[2020-11-24 20:04:28,996 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:29,012 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:04:29,027 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:04:29,066 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:29,066 INFO  L82        PathProgramCache]: Analyzing trace with hash 148763871, now seen corresponding path program 1 times
[2020-11-24 20:04:29,066 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:29,069 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:04:29,071 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:04:29,076 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:29,076 INFO  L82        PathProgramCache]: Analyzing trace with hash 1408780149, now seen corresponding path program 1 times
[2020-11-24 20:04:29,076 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:29,091 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:04:29,108 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 619 to 1237
[2020-11-24 20:04:29,424 WARN  L188               SmtUtils]: Spent 111.00 ms on a formula simplification that was a NOOP. DAG size: 266
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3331 to 6661
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2647 to 5281
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-24 20:04:29,603 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-24 20:04:30,505 WARN  L188               SmtUtils]: Spent 306.00 ms on a formula simplification. DAG size of input: 251 DAG size of output: 238
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-24 20:04:31,172 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification. DAG size of input: 122 DAG size of output: 116
[2020-11-24 20:04:31,301 WARN  L188               SmtUtils]: Spent 127.00 ms on a formula simplification that was a NOOP. DAG size: 271
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3331 to 6661
[2020-11-24 20:04:31,829 WARN  L188               SmtUtils]: Spent 519.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 225
[2020-11-24 20:04:32,543 WARN  L188               SmtUtils]: Spent 712.00 ms on a formula simplification. DAG size of input: 288 DAG size of output: 270
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 12541 to 25073
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-24 20:04:32,817 WARN  L188               SmtUtils]: Spent 251.00 ms on a formula simplification. DAG size of input: 175 DAG size of output: 169
[2020-11-24 20:04:33,088 WARN  L188               SmtUtils]: Spent 269.00 ms on a formula simplification that was a NOOP. DAG size: 331
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
[2020-11-24 20:04:33,553 WARN  L188               SmtUtils]: Spent 452.00 ms on a formula simplification. DAG size of input: 274 DAG size of output: 265
[2020-11-24 20:04:34,825 WARN  L188               SmtUtils]: Spent 1.27 s on a formula simplification. DAG size of input: 470 DAG size of output: 451
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 11177 to 22349
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-24 20:04:35,226 WARN  L188               SmtUtils]: Spent 382.00 ms on a formula simplification. DAG size of input: 229 DAG size of output: 216
[2020-11-24 20:04:35,600 WARN  L188               SmtUtils]: Spent 357.00 ms on a formula simplification that was a NOOP. DAG size: 327
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #8: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
[2020-11-24 20:04:36,378 WARN  L188               SmtUtils]: Spent 753.00 ms on a formula simplification. DAG size of input: 228 DAG size of output: 216
[2020-11-24 20:04:37,074 WARN  L188               SmtUtils]: Spent 694.00 ms on a formula simplification. DAG size of input: 329 DAG size of output: 328
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
Garbage collection #9: 31699 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 31699 to 63397
[2020-11-24 20:04:38,108 WARN  L188               SmtUtils]: Spent 1.02 s on a formula simplification. DAG size of input: 340 DAG size of output: 323
[2020-11-24 20:04:38,123 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:04:38,141 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:04:38,151 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:04:38 BasicIcfg
[2020-11-24 20:04:38,151 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:04:38,151 INFO  L168              Benchmark]: Toolchain (without parser) took 18442.73 ms. Allocated memory was 1.0 GB in the beginning and 2.4 GB in the end (delta: 1.3 GB). Free memory was 935.2 MB in the beginning and 1.2 GB in the end (delta: -233.2 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-11-24 20:04:38,152 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:04:38,152 INFO  L168              Benchmark]: Boogie Preprocessor took 108.71 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:04:38,153 INFO  L168              Benchmark]: UtopiaSpecLang took 60.66 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:04:38,153 INFO  L168              Benchmark]: Boogie Printer took 18.69 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:04:38,154 INFO  L168              Benchmark]: RCFGBuilder took 864.50 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.3 MB). Free memory was 903.0 MB in the beginning and 1.0 GB in the end (delta: -107.0 MB). Peak memory consumption was 190.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:04:38,154 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.15 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
[2020-11-24 20:04:38,155 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1669.58 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 164.1 MB). Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: -32.6 MB). Peak memory consumption was 502.2 MB. Max. memory is 15.3 GB.
[2020-11-24 20:04:38,155 INFO  L168              Benchmark]: BlockEncodingV2 took 219.73 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 937.6 MB in the end (delta: 98.1 MB). Peak memory consumption was 98.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:04:38,156 INFO  L168              Benchmark]: BuchiAutomizer took 15457.60 ms. Allocated memory was 1.3 GB in the beginning and 2.4 GB in the end (delta: 1.1 GB). Free memory was 937.6 MB in the beginning and 1.2 GB in the end (delta: -230.8 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-11-24 20:04:38,159 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6102 locations, 11207 edges
  - StatisticsResult: Encoded RCFG
    5986 locations, 10885 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 108.71 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 60.66 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 18.69 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 864.50 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.3 MB). Free memory was 903.0 MB in the beginning and 1.0 GB in the end (delta: -107.0 MB). Peak memory consumption was 190.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.15 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1669.58 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 164.1 MB). Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: -32.6 MB). Peak memory consumption was 502.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 219.73 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 937.6 MB in the end (delta: 98.1 MB). Peak memory consumption was 98.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 15457.60 ms. Allocated memory was 1.3 GB in the beginning and 2.4 GB in the end (delta: 1.1 GB). Free memory was 937.6 MB in the beginning and 1.2 GB in the end (delta: -230.8 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2377 locations, 3411 edges
  - StatisticsResult: BuchiProgram size
    6102 locations, 11207 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.7 modules have a trivial ranking function, the largest among these consists of 14 locations. The remainder module has 3935 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 15.4s and 8 iterations.  TraceHistogramMax:4. Analysis of lassos took 10.0s. Construction of modules took 3.0s. BÃ¼chi inclusion checks took 1.3s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 7 MinimizatonAttempts, 5310 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 6131 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 32434 SDtfs, 25543 SDslu, 45519 SDs, 0 SdLazy, 55217 SolverSat, 4773 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.0s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115792089237316195423570985008687907853269984665640564039457584007913129639956) = (new KardiachainToken)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639953});
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L4184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L4188]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L4192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L3832]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3833]  COND FALSE  !(revert)
[L3836]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L3836]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3837]  COND FALSE  !(revert)
[L3840]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3840]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3841]  COND FALSE  !(revert)
[L3844]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3844]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3845]  COND FALSE  !(revert)
[L3848]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]              assume msgsender_MSG != null;
[L3802]              Balance[this] := 0;
[L3848]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3849]  COND FALSE  !(revert)
[L4196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4130]              assume msgsender_MSG != null;
[L4131]              Balance[this] := 0;
[L4132]              name_KardiachainToken[this] := -505187484;
[L4133]              symbol_KardiachainToken[this] := 1585535741;
[L4134]              decimals_KardiachainToken[this] := 18;
[L4135]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4136]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND TRUE   DType[this] == KardiachainToken
[L4139]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3392]              __var_8 := null;
[L3393]  COND FALSE  !(!(account_s453 != null))
[L3397]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3397]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3398]  COND FALSE  !(revert)
[L3401]              _totalSupply_ERC20[this] := __var_9;
[L3402]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3402]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3403]  COND FALSE  !(revert)
[L3406]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3407]              _balances_ERC20[this][account_s453] := __var_10;
[L3408]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3409]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4139]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4140]  COND FALSE  !(revert)
[L4200]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
ERC20Pausable(115792089237316195423570985008687907853269984665640564039457584007913129639956).transferFrom~address~address~uint256.gas(3979002)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639951, from : 0, to : 115792089237316195423570985008687907853269984665640564039457584007913129639953, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s747 && p1 != to_s747) && (p2 != from_s747 || p3 != msgsender_MSG)) && from_s747 != to_s747) && value_s747 <= _balances_ERC20[this][from_s747]) && value_s747 <= _allowances_ERC20[this][from_s747][msgsender_MSG]) && _balances_ERC20[this][to_s747] + value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC20Pausable0 := true;
[L3]                 call_transferFrom_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1350]              havoc __exception;
[L1351]              revert := false;
[L1352]  COND TRUE   __exception
[L1353]              __tmp__Balance := Balance;
[L1354]              __tmp__DType := DType;
[L1355]              __tmp__Alloc := Alloc;
[L1356]              __tmp__balance_ADDR := balance_ADDR;
[L1357]              __tmp__M_Ref_int := M_Ref_int;
[L1358]              __tmp__sum__balances0 := sum__balances0;
[L1359]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1360]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1361]              __tmp__sum__allowances1 := sum__allowances1;
[L1362]              __tmp__Length := Length;
[L1363]              __tmp__now := now;
[L1364]              __tmp___balances_ERC20 := _balances_ERC20;
[L1365]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1366]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1367]              __tmp___owner_Ownable := _owner_Ownable;
[L1368]              __tmp__paused_Pausable := paused_Pausable;
[L1369]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1370]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1371]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1372]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1373]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3908]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5642]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3908]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3913]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3091]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3092]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3304]              __var_4 := null;
[L3305]  COND TRUE   !(sender_s410 != null)
[L3306]              revert := true;
[L3092]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3093]  COND TRUE   revert
[L3913]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3914]  COND TRUE   revert
[L1373]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1374]              assume revert || gas < 0;
[L6379]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);

Loop:
ERC20(115792089237316195423570985008687907853269984665640564039457584007913129639956).totalSupply.gas(3979001)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639955});
[L273]               havoc __exception;
[L274]               revert := false;
[L275]   COND FALSE  !(__exception)
[L299]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]              __ret_0_ := _totalSupply_ERC20[this];
[L299]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L300]               assume !revert && gas >= 0;
[L6346]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
