This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 18:32:56,540 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 18:32:56,542 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 18:32:56,554 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 18:32:56,554 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 18:32:56,555 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 18:32:56,556 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 18:32:56,558 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 18:32:56,559 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 18:32:56,560 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 18:32:56,561 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 18:32:56,561 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 18:32:56,562 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 18:32:56,562 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 18:32:56,563 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 18:32:56,564 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 18:32:56,565 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 18:32:56,566 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 18:32:56,567 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 18:32:56,568 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 18:32:56,569 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 18:32:56,570 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 18:32:56,571 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 18:32:56,572 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 18:32:56,572 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 18:32:56,572 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 18:32:56,573 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 18:32:56,573 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 18:32:56,573 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 18:32:56,574 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 18:32:56,574 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 18:32:56,575 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 18:32:56,575 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 18:32:56,576 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 18:32:56,576 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 18:32:56,577 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 18:32:56,577 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 18:32:56,577 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 18:32:56,577 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 18:32:56,578 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 18:32:56,578 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 18:32:56,579 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 18:32:56,587 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 18:32:56,587 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 18:32:56,588 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 18:32:56,588 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 18:32:56,588 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 18:32:56,588 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 18:32:56,588 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 18:32:56,588 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 18:32:56,588 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 18:32:56,588 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 18:32:56,589 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 18:32:56,589 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 18:32:56,589 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 18:32:56,589 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 18:32:56,589 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 18:32:56,589 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 18:32:56,589 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 18:32:56,589 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 18:32:56,589 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 18:32:56,589 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 18:32:56,590 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 18:32:56,590 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 18:32:56,590 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 18:32:56,590 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 18:32:56,590 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 18:32:56,590 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 18:32:56,618 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 18:32:56,632 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 18:32:56,635 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 18:32:56,636 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 18:32:56,636 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 18:32:56,637 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl
[2020-11-25 18:32:56,637 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl'
[2020-11-25 18:32:56,733 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 18:32:56,735 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 18:32:56,735 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 18:32:56,735 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 18:32:56,735 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 18:32:56,752 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:32:56" (1/1) ...
[2020-11-25 18:32:56,753 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:32:56" (1/1) ...
[2020-11-25 18:32:56,797 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:32:56" (1/1) ...
[2020-11-25 18:32:56,799 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:32:56" (1/1) ...
[2020-11-25 18:32:56,827 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:32:56" (1/1) ...
[2020-11-25 18:32:56,840 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:32:56" (1/1) ...
[2020-11-25 18:32:56,852 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:32:56" (1/1) ...
[2020-11-25 18:32:56,865 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 18:32:56,866 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 18:32:56,866 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 18:32:56,868 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 18:32:56,872 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:32:56" (1/1) ...
[2020-11-25 18:32:56,890 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Protected.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Protected.transferFrom)))
[2020-11-25 18:32:56,896 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Protected.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Protected.transferFrom)))
[2020-11-25 18:32:56,903 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Protected.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Protected.transferFrom)))
[2020-11-25 18:32:56,912 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s744==to_s744 && ( value_s744>_balances_ERC20[this][from_s744] || value_s744>_allowed_ERC20[this][from_s744][msg.sender] ) ) && value_s744>=0 ) && value_s744<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s744]>=0 ) && _balances_ERC20[this][to_s744]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s744]>=0 ) && _balances_ERC20[this][from_s744]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_ERC20[this][from_s744][msg.sender]>=0 ) && _allowed_ERC20[this][from_s744][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[from_s744,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>],IdentifierExpression[to_s744,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s744,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],[IdentifierExpression[from_s744,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]]],BinaryExpression[COMPGT,IdentifierExpression[value_s744,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],[IdentifierExpression[from_s744,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s744,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s744,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],[IdentifierExpression[to_s744,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],[IdentifierExpression[to_s744,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],[IdentifierExpression[from_s744,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],[IdentifierExpression[from_s744,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],[IdentifierExpression[from_s744,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],[IdentifierExpression[from_s744,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Protected>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 18:32:56,918 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Protected.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Protected.transferFrom)))
[2020-11-25 18:32:56,918 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC20Protected0) ==> ( <>AP(fail_transferFrom_ERC20Protected0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 18:32:56,930 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:32:56 PropertyContainer
[2020-11-25 18:32:56,930 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 18:32:56,931 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 18:32:56,931 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 18:32:56,931 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 18:32:56,932 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:32:56" (1/2) ...
[2020-11-25 18:32:56,932 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 18:32:56,932 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 18:32:56,952 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:32:56" (2/2) ...
[2020-11-25 18:32:56,952 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 18:32:56,953 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 18:32:56,953 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 18:32:56,953 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 18:32:56,954 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:32:56" (1/2) ...
[2020-11-25 18:32:57,009 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 18:32:57,009 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 18:32:57,010 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 18:32:57,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 18:32:57,010 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 18:32:57,010 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 18:32:57,010 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 18:32:57,010 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 18:32:57,010 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 18:32:57,010 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 18:32:57,010 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 18:32:57,011 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 18:32:57,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 18:32:57,011 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 18:32:57,011 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 18:32:57,012 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 18:32:57,012 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 18:32:57,012 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 18:32:57,012 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 18:32:57,012 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 18:32:57,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 18:32:57,012 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 18:32:57,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 18:32:57,013 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 18:32:57,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 18:32:57,013 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 18:32:57,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 18:32:57,013 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 18:32:57,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 18:32:57,013 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 18:32:57,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 18:32:57,013 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 18:32:57,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 18:32:57,014 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 18:32:57,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 18:32:57,014 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 18:32:57,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 18:32:57,014 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 18:32:57,014 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 18:32:57,014 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 18:32:57,014 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 18:32:57,014 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 18:32:57,014 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 18:32:57,014 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 18:32:57,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 18:32:57,015 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 18:32:57,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 18:32:57,015 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-25 18:32:57,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-25 18:32:57,015 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 18:32:57,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 18:32:57,015 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 18:32:57,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 18:32:57,015 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 18:32:57,016 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Protected_ERC20Protected_NoBaseCtor__success
[2020-11-25 18:32:57,016 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Protected_ERC20Protected
[2020-11-25 18:32:57,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Protected_ERC20Protected
[2020-11-25 18:32:57,016 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ERC20Protected__success
[2020-11-25 18:32:57,016 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Protected
[2020-11-25 18:32:57,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Protected
[2020-11-25 18:32:57,016 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Protected
[2020-11-25 18:32:57,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Protected
[2020-11-25 18:32:57,016 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success
[2020-11-25 18:32:57,016 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20DetailedChangeable_ERC20DetailedChangeable
[2020-11-25 18:32:57,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20DetailedChangeable_ERC20DetailedChangeable
[2020-11-25 18:32:57,016 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20DetailedChangeable
[2020-11-25 18:32:57,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20DetailedChangeable
[2020-11-25 18:32:57,017 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20DetailedChangeable
[2020-11-25 18:32:57,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20DetailedChangeable
[2020-11-25 18:32:57,017 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20DetailedChangeable
[2020-11-25 18:32:57,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20DetailedChangeable
[2020-11-25 18:32:57,017 INFO  L130     BoogieDeclarations]: Found specification of procedure setName~string_ERC20DetailedChangeable
[2020-11-25 18:32:57,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure setName~string_ERC20DetailedChangeable
[2020-11-25 18:32:57,017 INFO  L130     BoogieDeclarations]: Found specification of procedure setSymbol~string_ERC20DetailedChangeable
[2020-11-25 18:32:57,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure setSymbol~string_ERC20DetailedChangeable
[2020-11-25 18:32:57,017 INFO  L130     BoogieDeclarations]: Found specification of procedure ISF_ISF_NoBaseCtor__success
[2020-11-25 18:32:57,017 INFO  L130     BoogieDeclarations]: Found specification of procedure ISF_ISF
[2020-11-25 18:32:57,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure ISF_ISF
[2020-11-25 18:32:57,017 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_ISF
[2020-11-25 18:32:57,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_ISF
[2020-11-25 18:32:57,018 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_ISF
[2020-11-25 18:32:57,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_ISF
[2020-11-25 18:32:57,018 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_ISF
[2020-11-25 18:32:57,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_ISF
[2020-11-25 18:32:57,018 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 18:32:57,018 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 18:32:57,018 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 18:32:57,018 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 18:32:57,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 18:32:57,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 18:32:57,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 18:32:57,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 18:32:57,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 18:32:57,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 18:32:57,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 18:32:57,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 18:32:57,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Protected
[2020-11-25 18:32:57,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Protected
[2020-11-25 18:32:57,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20DetailedChangeable
[2020-11-25 18:32:57,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20DetailedChangeable
[2020-11-25 18:32:57,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ISF
[2020-11-25 18:32:57,019 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 18:32:57,019 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 18:32:57,019 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 18:32:57,019 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 18:32:57,019 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 18:32:57,020 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 18:32:57,020 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 18:32:57,020 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 18:32:57,020 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 18:32:57,020 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 18:32:57,020 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 18:32:57,020 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 18:32:57,020 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 18:32:57,020 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 18:32:57,020 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 18:32:57,021 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 18:32:57,021 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 18:32:57,021 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 18:32:57,021 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 18:32:57,021 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 18:32:57,021 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 18:32:57,021 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 18:32:57,021 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 18:32:57,022 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 18:32:57,022 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 18:32:57,022 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 18:32:57,022 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 18:32:57,022 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 18:32:57,022 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 18:32:57,022 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 18:32:57,022 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 18:32:57,022 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 18:32:57,022 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 18:32:57,023 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 18:32:57,023 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 18:32:57,023 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 18:32:57,023 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 18:32:57,023 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 18:32:57,023 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 18:32:57,023 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 18:32:57,023 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 18:32:57,023 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 18:32:57,023 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-25 18:32:57,024 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-25 18:32:57,024 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 18:32:57,024 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 18:32:57,024 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 18:32:57,024 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 18:32:57,024 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 18:32:57,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Protected_ERC20Protected_NoBaseCtor__fail
[2020-11-25 18:32:57,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Protected_ERC20Protected__success
[2020-11-25 18:32:57,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Protected_ERC20Protected__fail
[2020-11-25 18:32:57,025 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ERC20Protected__fail
[2020-11-25 18:32:57,025 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Protected__success
[2020-11-25 18:32:57,025 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Protected__fail
[2020-11-25 18:32:57,025 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Protected__success
[2020-11-25 18:32:57,025 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Protected__fail
[2020-11-25 18:32:57,025 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__fail
[2020-11-25 18:32:57,025 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20DetailedChangeable_ERC20DetailedChangeable__success
[2020-11-25 18:32:57,025 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20DetailedChangeable_ERC20DetailedChangeable__fail
[2020-11-25 18:32:57,025 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20DetailedChangeable__success
[2020-11-25 18:32:57,025 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20DetailedChangeable__fail
[2020-11-25 18:32:57,025 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20DetailedChangeable__success
[2020-11-25 18:32:57,026 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20DetailedChangeable__fail
[2020-11-25 18:32:57,026 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20DetailedChangeable__success
[2020-11-25 18:32:57,026 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20DetailedChangeable__fail
[2020-11-25 18:32:57,026 INFO  L130     BoogieDeclarations]: Found specification of procedure setName~string_ERC20DetailedChangeable__success
[2020-11-25 18:32:57,026 INFO  L130     BoogieDeclarations]: Found specification of procedure setName~string_ERC20DetailedChangeable__fail
[2020-11-25 18:32:57,026 INFO  L130     BoogieDeclarations]: Found specification of procedure setSymbol~string_ERC20DetailedChangeable__success
[2020-11-25 18:32:57,026 INFO  L130     BoogieDeclarations]: Found specification of procedure setSymbol~string_ERC20DetailedChangeable__fail
[2020-11-25 18:32:57,026 INFO  L130     BoogieDeclarations]: Found specification of procedure ISF_ISF_NoBaseCtor__fail
[2020-11-25 18:32:57,026 INFO  L130     BoogieDeclarations]: Found specification of procedure ISF_ISF__success
[2020-11-25 18:32:57,026 INFO  L130     BoogieDeclarations]: Found specification of procedure ISF_ISF__fail
[2020-11-25 18:32:57,027 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_ISF__success
[2020-11-25 18:32:57,027 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_ISF__fail
[2020-11-25 18:32:57,027 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_ISF__success
[2020-11-25 18:32:57,027 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_ISF__fail
[2020-11-25 18:32:57,027 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_ISF__success
[2020-11-25 18:32:57,027 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_ISF__fail
[2020-11-25 18:32:57,027 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 18:32:57,027 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 18:32:57,027 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 18:32:57,027 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 18:32:57,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 18:32:57,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 18:32:57,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 18:32:57,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 18:32:57,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 18:32:57,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 18:32:57,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 18:32:57,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 18:32:57,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 18:32:57,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 18:32:57,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 18:32:57,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 18:32:57,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 18:32:57,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 18:32:57,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 18:32:57,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 18:32:57,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 18:32:57,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 18:32:57,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 18:32:57,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 18:32:57,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 18:32:57,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 18:32:57,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 18:32:57,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 18:32:57,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 18:32:57,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 18:32:57,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 18:32:57,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 18:32:57,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 18:32:57,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 18:32:57,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 18:32:57,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 18:32:57,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 18:32:57,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 18:32:57,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 18:32:57,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 18:32:57,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 18:32:57,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 18:32:57,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 18:32:57,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 18:32:57,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 18:32:57,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 18:32:57,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 18:32:57,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 18:32:57,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 18:32:57,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 18:32:57,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 18:32:57,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 18:32:57,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 18:32:57,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 18:32:57,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 18:32:57,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 18:32:57,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 18:32:57,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 18:32:57,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 18:32:57,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 18:32:57,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-25 18:32:57,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-25 18:32:57,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 18:32:57,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 18:32:57,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 18:32:57,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 18:32:57,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 18:32:57,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 18:32:57,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Protected_ERC20Protected_NoBaseCtor__fail
[2020-11-25 18:32:57,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Protected_ERC20Protected_NoBaseCtor__success
[2020-11-25 18:32:57,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Protected_ERC20Protected__fail
[2020-11-25 18:32:57,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Protected_ERC20Protected__success
[2020-11-25 18:32:57,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ERC20Protected__fail
[2020-11-25 18:32:57,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ERC20Protected__success
[2020-11-25 18:32:57,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Protected__fail
[2020-11-25 18:32:57,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Protected__success
[2020-11-25 18:32:57,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Protected__fail
[2020-11-25 18:32:57,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Protected__success
[2020-11-25 18:32:57,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__fail
[2020-11-25 18:32:57,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success
[2020-11-25 18:32:57,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20DetailedChangeable_ERC20DetailedChangeable__fail
[2020-11-25 18:32:57,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20DetailedChangeable_ERC20DetailedChangeable__success
[2020-11-25 18:32:57,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20DetailedChangeable__fail
[2020-11-25 18:32:57,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20DetailedChangeable__success
[2020-11-25 18:32:57,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20DetailedChangeable__fail
[2020-11-25 18:32:57,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20DetailedChangeable__success
[2020-11-25 18:32:57,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20DetailedChangeable__fail
[2020-11-25 18:32:57,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20DetailedChangeable__success
[2020-11-25 18:32:57,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure setName~string_ERC20DetailedChangeable__fail
[2020-11-25 18:32:57,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure setName~string_ERC20DetailedChangeable__success
[2020-11-25 18:32:57,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure setSymbol~string_ERC20DetailedChangeable__fail
[2020-11-25 18:32:57,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure setSymbol~string_ERC20DetailedChangeable__success
[2020-11-25 18:32:57,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure ISF_ISF_NoBaseCtor__fail
[2020-11-25 18:32:57,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure ISF_ISF_NoBaseCtor__success
[2020-11-25 18:32:57,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure ISF_ISF__fail
[2020-11-25 18:32:57,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure ISF_ISF__success
[2020-11-25 18:32:57,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_ISF__fail
[2020-11-25 18:32:57,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_ISF__success
[2020-11-25 18:32:57,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_ISF__fail
[2020-11-25 18:32:57,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_ISF__success
[2020-11-25 18:32:57,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_ISF__fail
[2020-11-25 18:32:57,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_ISF__success
[2020-11-25 18:32:57,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 18:32:57,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 18:32:57,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 18:32:57,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 18:32:57,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 18:32:57,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 18:32:57,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 18:32:57,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 18:32:57,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 18:32:57,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 18:32:57,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 18:32:57,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 18:32:57,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 18:32:57,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 18:32:57,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 18:32:57,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 18:32:57,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Protected
[2020-11-25 18:32:57,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Protected
[2020-11-25 18:32:57,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20DetailedChangeable
[2020-11-25 18:32:57,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20DetailedChangeable
[2020-11-25 18:32:57,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ISF
[2020-11-25 18:32:57,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 18:32:57,043 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 18:32:57,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 18:32:57,412 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:32:57,412 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:32:57,921 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 18:32:57,922 INFO  L286             CfgBuilder]: Removed 7 assue(true) statements.
[2020-11-25 18:32:57,924 INFO  L202        PluginConnector]: Adding new model ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:32:57 BoogieIcfgContainer
[2020-11-25 18:32:57,924 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:32:56" (2/2) ...
[2020-11-25 18:32:57,924 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 18:32:57,925 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@343df2cf and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:32:57, skipping insertion in model container
[2020-11-25 18:32:57,925 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 18:32:57,925 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 18:32:57,925 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 18:32:57,926 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 18:32:57,927 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:32:56" (1/3) ...
[2020-11-25 18:32:57,927 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@394613dc and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:32:57, skipping insertion in model container
[2020-11-25 18:32:57,927 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:32:56" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 18:32:57,970 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:32:57 NWAContainer
[2020-11-25 18:32:57,970 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 18:32:57,971 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 18:32:57,972 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 18:32:57,973 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 18:32:57,974 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:32:57" (3/4) ...
[2020-11-25 18:32:57,976 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@92c8b6b and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:32:57, skipping insertion in model container
[2020-11-25 18:32:57,976 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:32:57" (4/4) ...
[2020-11-25 18:32:57,981 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 18:32:57,987 INFO  L110   BuchiProductObserver]: Initial RCFG 2326 locations, 3362 edges
[2020-11-25 18:32:57,987 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 18:32:58,000 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 18:32:59,634 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 18:32:59,641 INFO  L110   BuchiProductObserver]: BuchiProgram size 5976 locations, 11090 edges
[2020-11-25 18:32:59,642 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:32:59 BoogieIcfgContainer
[2020-11-25 18:32:59,642 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 18:32:59,642 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 18:32:59,642 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 18:32:59,643 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 18:32:59,644 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:32:59" (1/1) ...
[2020-11-25 18:32:59,747 INFO  L313           BlockEncoder]: Initial Icfg 5976 locations, 11090 edges
[2020-11-25 18:32:59,747 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 18:32:59,747 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 18:32:59,748 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 18:32:59,748 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 18:32:59,760 INFO  L70    emoveInfeasibleEdges]: Removed 147 edges and 17 locations because of local infeasibility
[2020-11-25 18:32:59,769 INFO  L70        RemoveSinkStates]: Removed 118 edges and 71 locations by removing sink states
[2020-11-25 18:32:59,780 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 18:32:59,783 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 18:32:59,787 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 18:32:59,787 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 18:32:59,790 INFO  L313           BlockEncoder]: Encoded RCFG 5856 locations, 10778 edges
[2020-11-25 18:32:59,791 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:32:59 BasicIcfg
[2020-11-25 18:32:59,791 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 18:32:59,791 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 18:32:59,791 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 18:32:59,793 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 18:32:59,793 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:32:59,793 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:32:56" (1/6) ...
[2020-11-25 18:32:59,795 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5328dab7 and model type ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:32:59, skipping insertion in model container
[2020-11-25 18:32:59,795 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:32:59,795 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:32:56" (2/6) ...
[2020-11-25 18:32:59,795 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5328dab7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:32:59, skipping insertion in model container
[2020-11-25 18:32:59,795 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:32:59,795 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:32:57" (3/6) ...
[2020-11-25 18:32:59,796 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5328dab7 and model type ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:32:59, skipping insertion in model container
[2020-11-25 18:32:59,796 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:32:59,796 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:32:57" (4/6) ...
[2020-11-25 18:32:59,796 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5328dab7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:32:59, skipping insertion in model container
[2020-11-25 18:32:59,796 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:32:59,796 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:32:59" (5/6) ...
[2020-11-25 18:32:59,796 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5328dab7 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 06:32:59, skipping insertion in model container
[2020-11-25 18:32:59,796 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:32:59,796 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:32:59" (6/6) ...
[2020-11-25 18:32:59,797 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transferfrom-self-fail.bpl_BEv2
[2020-11-25 18:32:59,823 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 18:32:59,823 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 18:32:59,823 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 18:32:59,823 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 18:32:59,823 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 18:32:59,823 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 18:32:59,823 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 18:32:59,823 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 18:32:59,823 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 18:32:59,864 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5856 states.
[2020-11-25 18:32:59,917 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:32:59,917 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:32:59,917 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:32:59,924 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:32:59,925 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:32:59,925 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 18:32:59,925 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5856 states.
[2020-11-25 18:32:59,948 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:32:59,948 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:32:59,948 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:32:59,949 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:32:59,949 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Protected0 := false;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND TRUE   revert
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND FALSE  !(gas >= 0)
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:32:59,963 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:32:59,963 INFO  L82        PathProgramCache]: Analyzing trace with hash 817563530, now seen corresponding path program 1 times
[2020-11-25 18:32:59,967 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:32:59,984 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:33:00,026 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 18:33:00,029 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:33:00,029 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 18:33:00,404 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:33:00,414 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 18:33:00,414 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 18:33:00,416 INFO  L87              Difference]: Start difference. First operand 5856 states. Second operand 4 states.
[2020-11-25 18:33:00,961 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:33:00,961 INFO  L93              Difference]: Finished difference Result 3198 states and 3790 transitions.
[2020-11-25 18:33:00,961 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 18:33:00,962 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3198 states and 3790 transitions.
[2020-11-25 18:33:00,980 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:33:01,004 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3198 states to 3198 states and 3790 transitions.
[2020-11-25 18:33:01,005 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 18:33:01,007 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1197
[2020-11-25 18:33:01,008 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3198 states and 3790 transitions.
[2020-11-25 18:33:01,016 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:33:01,016 INFO  L728         BuchiCegarLoop]: Abstraction has 3198 states and 3790 transitions.
[2020-11-25 18:33:01,031 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3198 states and 3790 transitions.
[2020-11-25 18:33:01,077 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3198 to 3198.
[2020-11-25 18:33:01,078 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3198 states.
[2020-11-25 18:33:01,082 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3198 states to 3198 states and 3790 transitions.
[2020-11-25 18:33:01,083 INFO  L751         BuchiCegarLoop]: Abstraction has 3198 states and 3790 transitions.
[2020-11-25 18:33:01,083 INFO  L631         BuchiCegarLoop]: Abstraction has 3198 states and 3790 transitions.
[2020-11-25 18:33:01,083 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 18:33:01,083 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3198 states and 3790 transitions.
[2020-11-25 18:33:01,090 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:33:01,090 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:33:01,091 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:33:01,092 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:33:01,092 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Protected0 := false;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND TRUE   revert
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND FALSE  !(choice == 19)
[L6307]  COND FALSE  !(choice == 18)
[L6314]  COND TRUE   choice == 17
[L6315]              gas := gas - 21000;
[L6316]  COND TRUE   gas >= 0
[L6317]              assume value_s744 >= 0 && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6318]              assume msgvalue_MSG == 0;
[L6319]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s744 == to_s744 && (value_s744 > _balances_ERC20[this][from_s744] || value_s744 > _allowed_ERC20[this][from_s744][msgsender_MSG])) && value_s744 >= 0) && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s744] >= 0) && _balances_ERC20[this][to_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s744] >= 0) && _balances_ERC20[this][from_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s744][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s744][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Protected0 := true;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1179]              havoc __exception;
[L1180]              revert := false;
[L1181]  COND FALSE  !(__exception)
[L1205]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3808]              __var_22 := this;
[L3809]  COND TRUE   !(to_s744 != this)
[L3810]              revert := true;
[L1205]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L1206]              assume !revert && gas >= 0;
[L6319]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND FALSE  !(choice == 19)
[L6307]  COND FALSE  !(choice == 18)
[L6314]  COND TRUE   choice == 17
[L6315]              gas := gas - 21000;
[L6316]  COND TRUE   gas >= 0
[L6317]              assume value_s744 >= 0 && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6318]              assume msgvalue_MSG == 0;
[L6319]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s744 == to_s744 && (value_s744 > _balances_ERC20[this][from_s744] || value_s744 > _allowed_ERC20[this][from_s744][msgsender_MSG])) && value_s744 >= 0) && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s744] >= 0) && _balances_ERC20[this][to_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s744] >= 0) && _balances_ERC20[this][from_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s744][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s744][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Protected0 := true;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1179]              havoc __exception;
[L1180]              revert := false;
[L1181]  COND FALSE  !(__exception)
[L1205]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3808]              __var_22 := this;
[L3809]  COND TRUE   !(to_s744 != this)
[L3810]              revert := true;
[L1205]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L1206]              assume !revert && gas >= 0;
[L6319]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:33:01,096 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:33:01,096 INFO  L82        PathProgramCache]: Analyzing trace with hash -1158763702, now seen corresponding path program 1 times
[2020-11-25 18:33:01,097 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:33:01,106 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:33:01,124 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 18:33:01,124 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:33:01,124 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 18:33:01,126 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:33:01,126 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 18:33:01,127 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 18:33:01,127 INFO  L87              Difference]: Start difference. First operand 3198 states and 3790 transitions. cyclomatic complexity: 594 Second operand 3 states.
[2020-11-25 18:33:01,219 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:33:01,219 INFO  L93              Difference]: Finished difference Result 4208 states and 5018 transitions.
[2020-11-25 18:33:01,219 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 18:33:01,219 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4208 states and 5018 transitions.
[2020-11-25 18:33:01,239 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:33:01,256 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4208 states to 4208 states and 5018 transitions.
[2020-11-25 18:33:01,256 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1560
[2020-11-25 18:33:01,257 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1560
[2020-11-25 18:33:01,257 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4208 states and 5018 transitions.
[2020-11-25 18:33:01,262 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:33:01,262 INFO  L728         BuchiCegarLoop]: Abstraction has 4208 states and 5018 transitions.
[2020-11-25 18:33:01,266 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4208 states and 5018 transitions.
[2020-11-25 18:33:01,300 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4208 to 3756.
[2020-11-25 18:33:01,300 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3756 states.
[2020-11-25 18:33:01,305 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3756 states to 3756 states and 4469 transitions.
[2020-11-25 18:33:01,305 INFO  L751         BuchiCegarLoop]: Abstraction has 3756 states and 4469 transitions.
[2020-11-25 18:33:01,305 INFO  L631         BuchiCegarLoop]: Abstraction has 3756 states and 4469 transitions.
[2020-11-25 18:33:01,305 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 18:33:01,305 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3756 states and 4469 transitions.
[2020-11-25 18:33:01,312 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:33:01,312 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:33:01,312 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:33:01,314 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:33:01,314 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Protected0 := false;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND TRUE   !(account_s464 != null)
[L3277]              revert := true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND TRUE   revert
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND FALSE  !(choice == 19)
[L6307]  COND FALSE  !(choice == 18)
[L6314]  COND TRUE   choice == 17
[L6315]              gas := gas - 21000;
[L6316]  COND TRUE   gas >= 0
[L6317]              assume value_s744 >= 0 && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6318]              assume msgvalue_MSG == 0;
[L6319]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s744 == to_s744 && (value_s744 > _balances_ERC20[this][from_s744] || value_s744 > _allowed_ERC20[this][from_s744][msgsender_MSG])) && value_s744 >= 0) && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s744] >= 0) && _balances_ERC20[this][to_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s744] >= 0) && _balances_ERC20[this][from_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s744][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s744][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Protected0 := true;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1179]              havoc __exception;
[L1180]              revert := false;
[L1181]  COND FALSE  !(__exception)
[L1205]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3808]              __var_22 := this;
[L3809]  COND TRUE   !(to_s744 != this)
[L3810]              revert := true;
[L1205]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L1206]              assume !revert && gas >= 0;
[L6319]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND FALSE  !(choice == 19)
[L6307]  COND FALSE  !(choice == 18)
[L6314]  COND TRUE   choice == 17
[L6315]              gas := gas - 21000;
[L6316]  COND TRUE   gas >= 0
[L6317]              assume value_s744 >= 0 && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6318]              assume msgvalue_MSG == 0;
[L6319]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s744 == to_s744 && (value_s744 > _balances_ERC20[this][from_s744] || value_s744 > _allowed_ERC20[this][from_s744][msgsender_MSG])) && value_s744 >= 0) && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s744] >= 0) && _balances_ERC20[this][to_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s744] >= 0) && _balances_ERC20[this][from_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s744][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s744][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Protected0 := true;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1179]              havoc __exception;
[L1180]              revert := false;
[L1181]  COND FALSE  !(__exception)
[L1205]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3808]              __var_22 := this;
[L3809]  COND TRUE   !(to_s744 != this)
[L3810]              revert := true;
[L1205]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L1206]              assume !revert && gas >= 0;
[L6319]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:33:01,319 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:33:01,319 INFO  L82        PathProgramCache]: Analyzing trace with hash -822979120, now seen corresponding path program 1 times
[2020-11-25 18:33:01,320 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:33:01,333 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:33:01,404 INFO  L134       CoverageAnalysis]: Checked inductivity of 220 backedges. 0 proven. 35 refuted. 0 times theorem prover too weak. 185 trivial. 0 not checked.
[2020-11-25 18:33:01,404 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 18:33:01,404 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 18:33:01,405 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:33:01,405 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 18:33:01,405 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 18:33:01,405 INFO  L87              Difference]: Start difference. First operand 3756 states and 4469 transitions. cyclomatic complexity: 715 Second operand 7 states.
[2020-11-25 18:33:01,474 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:33:01,475 INFO  L93              Difference]: Finished difference Result 3764 states and 4476 transitions.
[2020-11-25 18:33:01,475 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 18:33:01,475 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3764 states and 4476 transitions.
[2020-11-25 18:33:01,486 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:33:01,520 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3764 states to 3755 states and 4467 transitions.
[2020-11-25 18:33:01,521 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1446
[2020-11-25 18:33:01,521 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1446
[2020-11-25 18:33:01,521 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3755 states and 4467 transitions.
[2020-11-25 18:33:01,525 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:33:01,525 INFO  L728         BuchiCegarLoop]: Abstraction has 3755 states and 4467 transitions.
[2020-11-25 18:33:01,528 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3755 states and 4467 transitions.
[2020-11-25 18:33:01,558 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3755 to 3755.
[2020-11-25 18:33:01,558 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3755 states.
[2020-11-25 18:33:01,563 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3755 states to 3755 states and 4467 transitions.
[2020-11-25 18:33:01,563 INFO  L751         BuchiCegarLoop]: Abstraction has 3755 states and 4467 transitions.
[2020-11-25 18:33:01,563 INFO  L631         BuchiCegarLoop]: Abstraction has 3755 states and 4467 transitions.
[2020-11-25 18:33:01,563 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 18:33:01,563 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3755 states and 4467 transitions.
[2020-11-25 18:33:01,568 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:33:01,568 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:33:01,568 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:33:01,570 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:33:01,570 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Protected0 := false;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND TRUE   !(c_s174 >= a_s174)
[L2714]              revert := true;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND TRUE   revert
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND TRUE   revert
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND FALSE  !(choice == 19)
[L6307]  COND FALSE  !(choice == 18)
[L6314]  COND TRUE   choice == 17
[L6315]              gas := gas - 21000;
[L6316]  COND TRUE   gas >= 0
[L6317]              assume value_s744 >= 0 && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6318]              assume msgvalue_MSG == 0;
[L6319]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s744 == to_s744 && (value_s744 > _balances_ERC20[this][from_s744] || value_s744 > _allowed_ERC20[this][from_s744][msgsender_MSG])) && value_s744 >= 0) && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s744] >= 0) && _balances_ERC20[this][to_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s744] >= 0) && _balances_ERC20[this][from_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s744][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s744][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Protected0 := true;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1179]              havoc __exception;
[L1180]              revert := false;
[L1181]  COND FALSE  !(__exception)
[L1205]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3808]              __var_22 := this;
[L3809]  COND TRUE   !(to_s744 != this)
[L3810]              revert := true;
[L1205]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L1206]              assume !revert && gas >= 0;
[L6319]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND FALSE  !(choice == 19)
[L6307]  COND FALSE  !(choice == 18)
[L6314]  COND TRUE   choice == 17
[L6315]              gas := gas - 21000;
[L6316]  COND TRUE   gas >= 0
[L6317]              assume value_s744 >= 0 && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6318]              assume msgvalue_MSG == 0;
[L6319]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s744 == to_s744 && (value_s744 > _balances_ERC20[this][from_s744] || value_s744 > _allowed_ERC20[this][from_s744][msgsender_MSG])) && value_s744 >= 0) && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s744] >= 0) && _balances_ERC20[this][to_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s744] >= 0) && _balances_ERC20[this][from_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s744][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s744][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Protected0 := true;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1179]              havoc __exception;
[L1180]              revert := false;
[L1181]  COND FALSE  !(__exception)
[L1205]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3808]              __var_22 := this;
[L3809]  COND TRUE   !(to_s744 != this)
[L3810]              revert := true;
[L1205]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L1206]              assume !revert && gas >= 0;
[L6319]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:33:01,576 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:33:01,576 INFO  L82        PathProgramCache]: Analyzing trace with hash 1649069649, now seen corresponding path program 1 times
[2020-11-25 18:33:01,577 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:33:01,587 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:33:01,629 INFO  L134       CoverageAnalysis]: Checked inductivity of 220 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 220 trivial. 0 not checked.
[2020-11-25 18:33:01,630 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:33:01,630 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 18:33:01,630 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:33:01,630 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 18:33:01,630 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 18:33:01,630 INFO  L87              Difference]: Start difference. First operand 3755 states and 4467 transitions. cyclomatic complexity: 714 Second operand 3 states.
[2020-11-25 18:33:01,682 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:33:01,682 INFO  L93              Difference]: Finished difference Result 4203 states and 4834 transitions.
[2020-11-25 18:33:01,682 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 18:33:01,682 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4203 states and 4834 transitions.
[2020-11-25 18:33:01,691 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:33:01,701 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4203 states to 3870 states and 4430 transitions.
[2020-11-25 18:33:01,702 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1430
[2020-11-25 18:33:01,703 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1430
[2020-11-25 18:33:01,703 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3870 states and 4430 transitions.
[2020-11-25 18:33:01,706 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:33:01,706 INFO  L728         BuchiCegarLoop]: Abstraction has 3870 states and 4430 transitions.
[2020-11-25 18:33:01,709 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3870 states and 4430 transitions.
[2020-11-25 18:33:01,734 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3870 to 3499.
[2020-11-25 18:33:01,734 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3499 states.
[2020-11-25 18:33:01,738 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3499 states to 3499 states and 3964 transitions.
[2020-11-25 18:33:01,738 INFO  L751         BuchiCegarLoop]: Abstraction has 3499 states and 3964 transitions.
[2020-11-25 18:33:01,738 INFO  L631         BuchiCegarLoop]: Abstraction has 3499 states and 3964 transitions.
[2020-11-25 18:33:01,738 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 18:33:01,738 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3499 states and 3964 transitions.
[2020-11-25 18:33:01,742 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:33:01,743 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:33:01,743 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:33:01,744 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:33:01,744 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Protected0 := false;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND FALSE  !(choice == 19)
[L6307]  COND FALSE  !(choice == 18)
[L6314]  COND TRUE   choice == 17
[L6315]              gas := gas - 21000;
[L6316]  COND TRUE   gas >= 0
[L6317]              assume value_s744 >= 0 && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6318]              assume msgvalue_MSG == 0;
[L6319]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s744 == to_s744 && (value_s744 > _balances_ERC20[this][from_s744] || value_s744 > _allowed_ERC20[this][from_s744][msgsender_MSG])) && value_s744 >= 0) && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s744] >= 0) && _balances_ERC20[this][to_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s744] >= 0) && _balances_ERC20[this][from_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s744][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s744][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Protected0 := true;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1179]              havoc __exception;
[L1180]              revert := false;
[L1181]  COND FALSE  !(__exception)
[L1205]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3808]              __var_22 := this;
[L3809]  COND FALSE  !(!(to_s744 != this))
[L3813]  COND FALSE  !(DType[this] == ISF)
[L3818]  COND TRUE   DType[this] == ERC20Protected
[L3819]  CALL        call __var_23 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3003]  COND TRUE   DType[this] == ISF
[L3004]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3004]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L3005]  COND FALSE  !(revert)
[L3026]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3026]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L3027]  COND FALSE  !(revert)
[L3030]  COND TRUE   DType[this] == ISF
[L3031]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L3367]              __var_13 := null;
[L3368]  COND FALSE  !(!(spender_s546 != null))
[L3372]              __var_14 := null;
[L3373]  COND FALSE  !(!(owner_s546 != null))
[L3377]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L3378]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L3379]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L3380]              assert { :EventEmitted "Approval_ERC20" } true;
[L3031]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L3032]  COND FALSE  !(revert)
[L3053]              __ret_0_ := true;
[L3819]  RET         call __var_23 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3820]  COND FALSE  !(revert)
[L3826]              __ret_0_ := __var_23;
[L1205]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L1206]              assume !revert && gas >= 0;
[L6319]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND FALSE  !(choice == 19)
[L6307]  COND FALSE  !(choice == 18)
[L6314]  COND TRUE   choice == 17
[L6315]              gas := gas - 21000;
[L6316]  COND TRUE   gas >= 0
[L6317]              assume value_s744 >= 0 && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6318]              assume msgvalue_MSG == 0;
[L6319]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s744 == to_s744 && (value_s744 > _balances_ERC20[this][from_s744] || value_s744 > _allowed_ERC20[this][from_s744][msgsender_MSG])) && value_s744 >= 0) && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s744] >= 0) && _balances_ERC20[this][to_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s744] >= 0) && _balances_ERC20[this][from_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s744][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s744][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Protected0 := true;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1179]              havoc __exception;
[L1180]              revert := false;
[L1181]  COND FALSE  !(__exception)
[L1205]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3808]              __var_22 := this;
[L3809]  COND FALSE  !(!(to_s744 != this))
[L3813]  COND FALSE  !(DType[this] == ISF)
[L3818]  COND TRUE   DType[this] == ERC20Protected
[L3819]  CALL        call __var_23 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3003]  COND TRUE   DType[this] == ISF
[L3004]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3004]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L3005]  COND FALSE  !(revert)
[L3026]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3026]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L3027]  COND FALSE  !(revert)
[L3030]  COND TRUE   DType[this] == ISF
[L3031]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L3367]              __var_13 := null;
[L3368]  COND FALSE  !(!(spender_s546 != null))
[L3372]              __var_14 := null;
[L3373]  COND FALSE  !(!(owner_s546 != null))
[L3377]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L3378]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L3379]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L3380]              assert { :EventEmitted "Approval_ERC20" } true;
[L3031]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L3032]  COND FALSE  !(revert)
[L3053]              __ret_0_ := true;
[L3819]  RET         call __var_23 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3820]  COND FALSE  !(revert)
[L3826]              __ret_0_ := __var_23;
[L1205]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L1206]              assume !revert && gas >= 0;
[L6319]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:33:01,749 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:33:01,749 INFO  L82        PathProgramCache]: Analyzing trace with hash 592424079, now seen corresponding path program 1 times
[2020-11-25 18:33:01,749 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:33:01,763 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:33:01,837 INFO  L134       CoverageAnalysis]: Checked inductivity of 230 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 230 trivial. 0 not checked.
[2020-11-25 18:33:01,837 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:33:01,837 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 18:33:01,837 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:33:01,838 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 18:33:01,838 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 18:33:01,838 INFO  L87              Difference]: Start difference. First operand 3499 states and 3964 transitions. cyclomatic complexity: 467 Second operand 6 states.
[2020-11-25 18:33:01,907 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:33:01,907 INFO  L93              Difference]: Finished difference Result 3519 states and 3983 transitions.
[2020-11-25 18:33:01,907 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 18:33:01,907 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3519 states and 3983 transitions.
[2020-11-25 18:33:01,917 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:33:01,927 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3519 states to 3489 states and 3950 transitions.
[2020-11-25 18:33:01,927 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1346
[2020-11-25 18:33:01,928 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1346
[2020-11-25 18:33:01,928 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3489 states and 3950 transitions.
[2020-11-25 18:33:01,930 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:33:01,930 INFO  L728         BuchiCegarLoop]: Abstraction has 3489 states and 3950 transitions.
[2020-11-25 18:33:01,934 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3489 states and 3950 transitions.
[2020-11-25 18:33:01,970 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3489 to 3489.
[2020-11-25 18:33:01,970 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3489 states.
[2020-11-25 18:33:01,975 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3489 states to 3489 states and 3950 transitions.
[2020-11-25 18:33:01,976 INFO  L751         BuchiCegarLoop]: Abstraction has 3489 states and 3950 transitions.
[2020-11-25 18:33:01,976 INFO  L631         BuchiCegarLoop]: Abstraction has 3489 states and 3950 transitions.
[2020-11-25 18:33:01,976 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 18:33:01,976 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3489 states and 3950 transitions.
[2020-11-25 18:33:01,984 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:33:01,984 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:33:01,984 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:33:01,987 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:33:01,987 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Protected0 := false;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND FALSE  !(choice == 19)
[L6307]  COND FALSE  !(choice == 18)
[L6314]  COND TRUE   choice == 17
[L6315]              gas := gas - 21000;
[L6316]  COND TRUE   gas >= 0
[L6317]              assume value_s744 >= 0 && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6318]              assume msgvalue_MSG == 0;
[L6319]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s744 == to_s744 && (value_s744 > _balances_ERC20[this][from_s744] || value_s744 > _allowed_ERC20[this][from_s744][msgsender_MSG])) && value_s744 >= 0) && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s744] >= 0) && _balances_ERC20[this][to_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s744] >= 0) && _balances_ERC20[this][from_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s744][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s744][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Protected0 := true;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1179]              havoc __exception;
[L1180]              revert := false;
[L1181]  COND FALSE  !(__exception)
[L1205]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3808]              __var_22 := this;
[L3809]  COND FALSE  !(!(to_s744 != this))
[L3813]  COND TRUE   DType[this] == ISF
[L3814]  CALL        call __var_23 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3003]  COND TRUE   DType[this] == ISF
[L3004]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3004]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L3005]  COND FALSE  !(revert)
[L3026]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3026]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L3027]  COND FALSE  !(revert)
[L3030]  COND TRUE   DType[this] == ISF
[L3031]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L3367]              __var_13 := null;
[L3368]  COND FALSE  !(!(spender_s546 != null))
[L3372]              __var_14 := null;
[L3373]  COND FALSE  !(!(owner_s546 != null))
[L3377]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L3378]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L3379]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L3380]              assert { :EventEmitted "Approval_ERC20" } true;
[L3031]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L3032]  COND FALSE  !(revert)
[L3053]              __ret_0_ := true;
[L3814]  RET         call __var_23 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3815]  COND FALSE  !(revert)
[L3826]              __ret_0_ := __var_23;
[L1205]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L1206]              assume !revert && gas >= 0;
[L6319]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND FALSE  !(choice == 19)
[L6307]  COND FALSE  !(choice == 18)
[L6314]  COND TRUE   choice == 17
[L6315]              gas := gas - 21000;
[L6316]  COND TRUE   gas >= 0
[L6317]              assume value_s744 >= 0 && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6318]              assume msgvalue_MSG == 0;
[L6319]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s744 == to_s744 && (value_s744 > _balances_ERC20[this][from_s744] || value_s744 > _allowed_ERC20[this][from_s744][msgsender_MSG])) && value_s744 >= 0) && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s744] >= 0) && _balances_ERC20[this][to_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s744] >= 0) && _balances_ERC20[this][from_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s744][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s744][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Protected0 := true;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1179]              havoc __exception;
[L1180]              revert := false;
[L1181]  COND FALSE  !(__exception)
[L1205]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3808]              __var_22 := this;
[L3809]  COND FALSE  !(!(to_s744 != this))
[L3813]  COND TRUE   DType[this] == ISF
[L3814]  CALL        call __var_23 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3003]  COND TRUE   DType[this] == ISF
[L3004]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3004]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L3005]  COND FALSE  !(revert)
[L3026]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3026]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L3027]  COND FALSE  !(revert)
[L3030]  COND TRUE   DType[this] == ISF
[L3031]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L3367]              __var_13 := null;
[L3368]  COND FALSE  !(!(spender_s546 != null))
[L3372]              __var_14 := null;
[L3373]  COND FALSE  !(!(owner_s546 != null))
[L3377]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L3378]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L3379]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L3380]              assert { :EventEmitted "Approval_ERC20" } true;
[L3031]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L3032]  COND FALSE  !(revert)
[L3053]              __ret_0_ := true;
[L3814]  RET         call __var_23 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3815]  COND FALSE  !(revert)
[L3826]              __ret_0_ := __var_23;
[L1205]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L1206]              assume !revert && gas >= 0;
[L6319]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:33:01,994 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:33:01,994 INFO  L82        PathProgramCache]: Analyzing trace with hash 1174662121, now seen corresponding path program 1 times
[2020-11-25 18:33:01,995 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:33:02,025 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:33:02,223 INFO  L134       CoverageAnalysis]: Checked inductivity of 230 backedges. 20 proven. 0 refuted. 0 times theorem prover too weak. 210 trivial. 0 not checked.
[2020-11-25 18:33:02,223 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:33:02,223 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 18:33:02,224 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:33:02,224 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 18:33:02,224 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-11-25 18:33:02,224 INFO  L87              Difference]: Start difference. First operand 3489 states and 3950 transitions. cyclomatic complexity: 463 Second operand 16 states.
[2020-11-25 18:33:04,326 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:33:04,326 INFO  L93              Difference]: Finished difference Result 3576 states and 4049 transitions.
[2020-11-25 18:33:04,326 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 18:33:04,326 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3576 states and 4049 transitions.
[2020-11-25 18:33:04,335 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:33:04,347 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3576 states to 3576 states and 4049 transitions.
[2020-11-25 18:33:04,347 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1365
[2020-11-25 18:33:04,348 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1365
[2020-11-25 18:33:04,348 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3576 states and 4049 transitions.
[2020-11-25 18:33:04,350 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:33:04,350 INFO  L728         BuchiCegarLoop]: Abstraction has 3576 states and 4049 transitions.
[2020-11-25 18:33:04,353 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3576 states and 4049 transitions.
[2020-11-25 18:33:04,377 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3576 to 3369.
[2020-11-25 18:33:04,377 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3369 states.
[2020-11-25 18:33:04,383 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3369 states to 3369 states and 3795 transitions.
[2020-11-25 18:33:04,383 INFO  L751         BuchiCegarLoop]: Abstraction has 3369 states and 3795 transitions.
[2020-11-25 18:33:04,383 INFO  L631         BuchiCegarLoop]: Abstraction has 3369 states and 3795 transitions.
[2020-11-25 18:33:04,383 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 18:33:04,383 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3369 states and 3795 transitions.
[2020-11-25 18:33:04,388 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:33:04,388 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:33:04,388 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:33:04,391 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:33:04,391 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Protected0 := false;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND FALSE  !(choice == 19)
[L6307]  COND TRUE   choice == 18
[L6308]              gas := gas - 21000;
[L6309]  COND TRUE   gas >= 0
[L6310]              assume value_s287 >= 0 && value_s287 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6311]              assume msgvalue_MSG == 0;
[L6312]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s287, value_s287);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L528]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s287, value_s287);
[L2916]  COND TRUE   DType[this] == ISF
[L2917]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s287, value_s287);
[L3367]              __var_13 := null;
[L3368]  COND FALSE  !(!(spender_s546 != null))
[L3372]              __var_14 := null;
[L3373]  COND FALSE  !(!(owner_s546 != null))
[L3377]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L3378]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L3379]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L3380]              assert { :EventEmitted "Approval_ERC20" } true;
[L2917]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s287, value_s287);
[L2918]  COND FALSE  !(revert)
[L2939]              __ret_0_ := true;
[L528]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s287, value_s287);
[L529]               assume !revert && gas >= 0;
[L6312]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s287, value_s287);
[L6437]  RET         call CorralChoice_ISF(this);
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND FALSE  !(choice == 19)
[L6307]  COND FALSE  !(choice == 18)
[L6314]  COND TRUE   choice == 17
[L6315]              gas := gas - 21000;
[L6316]  COND TRUE   gas >= 0
[L6317]              assume value_s744 >= 0 && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6318]              assume msgvalue_MSG == 0;
[L6319]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s744 == to_s744 && (value_s744 > _balances_ERC20[this][from_s744] || value_s744 > _allowed_ERC20[this][from_s744][msgsender_MSG])) && value_s744 >= 0) && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s744] >= 0) && _balances_ERC20[this][to_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s744] >= 0) && _balances_ERC20[this][from_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s744][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s744][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Protected0 := true;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1179]              havoc __exception;
[L1180]              revert := false;
[L1181]  COND FALSE  !(__exception)
[L1205]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3808]              __var_22 := this;
[L3809]  COND FALSE  !(!(to_s744 != this))
[L3813]  COND TRUE   DType[this] == ISF
[L3814]  CALL        call __var_23 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3003]  COND TRUE   DType[this] == ISF
[L3004]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3004]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L3005]  COND FALSE  !(revert)
[L3026]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3026]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L3027]  COND FALSE  !(revert)
[L3030]  COND TRUE   DType[this] == ISF
[L3031]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L3367]              __var_13 := null;
[L3368]  COND FALSE  !(!(spender_s546 != null))
[L3372]              __var_14 := null;
[L3373]  COND FALSE  !(!(owner_s546 != null))
[L3377]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L3378]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L3379]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L3380]              assert { :EventEmitted "Approval_ERC20" } true;
[L3031]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L3032]  COND FALSE  !(revert)
[L3053]              __ret_0_ := true;
[L3814]  RET         call __var_23 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3815]  COND FALSE  !(revert)
[L3826]              __ret_0_ := __var_23;
[L1205]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L1206]              assume !revert && gas >= 0;
[L6319]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND FALSE  !(choice == 19)
[L6307]  COND FALSE  !(choice == 18)
[L6314]  COND TRUE   choice == 17
[L6315]              gas := gas - 21000;
[L6316]  COND TRUE   gas >= 0
[L6317]              assume value_s744 >= 0 && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6318]              assume msgvalue_MSG == 0;
[L6319]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s744 == to_s744 && (value_s744 > _balances_ERC20[this][from_s744] || value_s744 > _allowed_ERC20[this][from_s744][msgsender_MSG])) && value_s744 >= 0) && value_s744 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s744] >= 0) && _balances_ERC20[this][to_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s744] >= 0) && _balances_ERC20[this][from_s744] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s744][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s744][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Protected0 := true;
[L2]                 call_transferFrom_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1179]              havoc __exception;
[L1180]              revert := false;
[L1181]  COND FALSE  !(__exception)
[L1205]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3808]              __var_22 := this;
[L3809]  COND FALSE  !(!(to_s744 != this))
[L3813]  COND TRUE   DType[this] == ISF
[L3814]  CALL        call __var_23 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3003]  COND TRUE   DType[this] == ISF
[L3004]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3004]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L3005]  COND FALSE  !(revert)
[L3026]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3026]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L3027]  COND FALSE  !(revert)
[L3030]  COND TRUE   DType[this] == ISF
[L3031]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L3367]              __var_13 := null;
[L3368]  COND FALSE  !(!(spender_s546 != null))
[L3372]              __var_14 := null;
[L3373]  COND FALSE  !(!(owner_s546 != null))
[L3377]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L3378]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L3379]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L3380]              assert { :EventEmitted "Approval_ERC20" } true;
[L3031]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L3032]  COND FALSE  !(revert)
[L3053]              __ret_0_ := true;
[L3814]  RET         call __var_23 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L3815]  COND FALSE  !(revert)
[L3826]              __ret_0_ := __var_23;
[L1205]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L1206]              assume !revert && gas >= 0;
[L6319]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, from_s744, to_s744, value_s744);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:33:04,396 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:33:04,396 INFO  L82        PathProgramCache]: Analyzing trace with hash -1993827437, now seen corresponding path program 1 times
[2020-11-25 18:33:04,397 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:33:04,419 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:33:04,634 INFO  L134       CoverageAnalysis]: Checked inductivity of 287 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 287 trivial. 0 not checked.
[2020-11-25 18:33:04,634 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:33:04,634 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 18:33:04,635 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:33:04,635 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 18:33:04,635 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=106, Unknown=0, NotChecked=0, Total=132
[2020-11-25 18:33:04,635 INFO  L87              Difference]: Start difference. First operand 3369 states and 3795 transitions. cyclomatic complexity: 429 Second operand 12 states.
[2020-11-25 18:33:05,626 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:33:05,627 INFO  L93              Difference]: Finished difference Result 2064 states and 2325 transitions.
[2020-11-25 18:33:05,627 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 18:33:05,627 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2064 states and 2325 transitions.
[2020-11-25 18:33:05,630 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 18:33:05,630 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2064 states to 0 states and 0 transitions.
[2020-11-25 18:33:05,630 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 18:33:05,630 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 18:33:05,630 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 18:33:05,630 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:33:05,630 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 18:33:05,631 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 18:33:05,631 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 18:33:05,631 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 18:33:05,631 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 18:33:05,631 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 18:33:05,631 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 18:33:05,634 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:33:05 BasicIcfg
[2020-11-25 18:33:05,634 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 18:33:05,634 INFO  L168              Benchmark]: Toolchain (without parser) took 8900.74 ms. Allocated memory was 1.0 GB in the beginning and 2.0 GB in the end (delta: 960.5 MB). Free memory was 929.8 MB in the beginning and 1.6 GB in the end (delta: -681.9 MB). Peak memory consumption was 278.6 MB. Max. memory is 15.3 GB.
[2020-11-25 18:33:05,635 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 18:33:05,635 INFO  L168              Benchmark]: Boogie Preprocessor took 130.63 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 18:33:05,635 INFO  L168              Benchmark]: UtopiaSpecLang took 64.49 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 18:33:05,636 INFO  L168              Benchmark]: Boogie Printer took 21.79 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 18:33:05,636 INFO  L168              Benchmark]: RCFGBuilder took 971.98 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.8 MB). Free memory was 908.4 MB in the beginning and 1.0 GB in the end (delta: -105.7 MB). Peak memory consumption was 196.2 MB. Max. memory is 15.3 GB.
[2020-11-25 18:33:05,636 INFO  L168              Benchmark]: UtopiaLTL2Aut took 46.29 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
[2020-11-25 18:33:05,637 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1670.33 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 163.6 MB). Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: -35.4 MB). Peak memory consumption was 523.9 MB. Max. memory is 15.3 GB.
[2020-11-25 18:33:05,637 INFO  L168              Benchmark]: BlockEncodingV2 took 148.85 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 955.9 MB in the end (delta: 86.6 MB). Peak memory consumption was 86.6 MB. Max. memory is 15.3 GB.
[2020-11-25 18:33:05,638 INFO  L168              Benchmark]: BuchiAutomizer took 5842.83 ms. Allocated memory was 1.3 GB in the beginning and 2.0 GB in the end (delta: 736.1 MB). Free memory was 955.9 MB in the beginning and 1.6 GB in the end (delta: -655.8 MB). Peak memory consumption was 80.3 MB. Max. memory is 15.3 GB.
[2020-11-25 18:33:05,640 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5976 locations, 11090 edges
  - StatisticsResult: Encoded RCFG
    5856 locations, 10778 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 130.63 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 64.49 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.79 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 971.98 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.8 MB). Free memory was 908.4 MB in the beginning and 1.0 GB in the end (delta: -105.7 MB). Peak memory consumption was 196.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 46.29 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1670.33 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 163.6 MB). Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: -35.4 MB). Peak memory consumption was 523.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 148.85 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 955.9 MB in the end (delta: 86.6 MB). Peak memory consumption was 86.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 5842.83 ms. Allocated memory was 1.3 GB in the beginning and 2.0 GB in the end (delta: 736.1 MB). Free memory was 955.9 MB in the beginning and 1.6 GB in the end (delta: -655.8 MB). Peak memory consumption was 80.3 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2326 locations, 3362 edges
  - StatisticsResult: BuchiProgram size
    5976 locations, 11090 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 16 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 5.8s and 8 iterations.  TraceHistogramMax:6. Analysis of lassos took 1.2s. Construction of modules took 2.7s. BÃ¼chi inclusion checks took 1.2s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 6 MinimizatonAttempts, 1030 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3756 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 24638 SDtfs, 12822 SDslu, 56337 SDs, 0 SdLazy, 49099 SolverSat, 2837 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.7s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC20Protected0) ==> ( <>(fail_transferFrom_ERC20Protected0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
