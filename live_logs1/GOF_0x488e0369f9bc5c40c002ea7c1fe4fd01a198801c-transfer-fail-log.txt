This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 17:17:55,117 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 17:17:55,118 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 17:17:55,129 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 17:17:55,129 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 17:17:55,129 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 17:17:55,130 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 17:17:55,132 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 17:17:55,133 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 17:17:55,134 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 17:17:55,135 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 17:17:55,135 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 17:17:55,135 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 17:17:55,136 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 17:17:55,137 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 17:17:55,138 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 17:17:55,138 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 17:17:55,139 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 17:17:55,141 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 17:17:55,142 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 17:17:55,143 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 17:17:55,144 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 17:17:55,145 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 17:17:55,145 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 17:17:55,145 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 17:17:55,146 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 17:17:55,146 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 17:17:55,147 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 17:17:55,147 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 17:17:55,147 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 17:17:55,148 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 17:17:55,148 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 17:17:55,149 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 17:17:55,149 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 17:17:55,150 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 17:17:55,150 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 17:17:55,151 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 17:17:55,151 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 17:17:55,151 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 17:17:55,152 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 17:17:55,152 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 17:17:55,152 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 17:17:55,160 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 17:17:55,160 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 17:17:55,161 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 17:17:55,161 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 17:17:55,161 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 17:17:55,162 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 17:17:55,162 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 17:17:55,162 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 17:17:55,162 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 17:17:55,162 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 17:17:55,162 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 17:17:55,162 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 17:17:55,162 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 17:17:55,162 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 17:17:55,162 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 17:17:55,163 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 17:17:55,163 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 17:17:55,163 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 17:17:55,163 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 17:17:55,163 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 17:17:55,163 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 17:17:55,163 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 17:17:55,163 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 17:17:55,163 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 17:17:55,164 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 17:17:55,164 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 17:17:55,186 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 17:17:55,197 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 17:17:55,199 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 17:17:55,200 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 17:17:55,201 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 17:17:55,201 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl
[2020-11-25 17:17:55,201 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl'
[2020-11-25 17:17:55,291 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 17:17:55,292 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 17:17:55,293 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 17:17:55,293 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 17:17:55,293 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 17:17:55,310 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:17:55" (1/1) ...
[2020-11-25 17:17:55,311 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:17:55" (1/1) ...
[2020-11-25 17:17:55,347 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:17:55" (1/1) ...
[2020-11-25 17:17:55,347 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:17:55" (1/1) ...
[2020-11-25 17:17:55,371 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:17:55" (1/1) ...
[2020-11-25 17:17:55,382 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:17:55" (1/1) ...
[2020-11-25 17:17:55,392 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:17:55" (1/1) ...
[2020-11-25 17:17:55,402 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 17:17:55,402 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 17:17:55,403 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 17:17:55,405 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 17:17:55,408 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:17:55" (1/1) ...
[2020-11-25 17:17:55,431 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 17:17:55,437 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 17:17:55,446 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 17:17:55,453 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=recipient_s140 && ( amount_s140>_balances_ERC20[this][msg.sender] || ( _balances_ERC20[this][recipient_s140] + amount_s140 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && amount_s140>=0 ) && amount_s140<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s140]>=0 ) && _balances_ERC20[this][recipient_s140]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 17:17:55,460 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 17:17:55,460 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(fail_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 17:17:55,471 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:17:55 PropertyContainer
[2020-11-25 17:17:55,471 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 17:17:55,472 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 17:17:55,472 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 17:17:55,472 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 17:17:55,473 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:17:55" (1/2) ...
[2020-11-25 17:17:55,473 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 17:17:55,473 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 17:17:55,490 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:17:55" (2/2) ...
[2020-11-25 17:17:55,490 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 17:17:55,490 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 17:17:55,491 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 17:17:55,491 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 17:17:55,491 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:17:55" (1/2) ...
[2020-11-25 17:17:55,545 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 17:17:55,545 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 17:17:55,545 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 17:17:55,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 17:17:55,546 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 17:17:55,546 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 17:17:55,546 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 17:17:55,546 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 17:17:55,546 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 17:17:55,546 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 17:17:55,546 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 17:17:55,546 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 17:17:55,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 17:17:55,547 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 17:17:55,547 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 17:17:55,547 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 17:17:55,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 17:17:55,548 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 17:17:55,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 17:17:55,548 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 17:17:55,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 17:17:55,548 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 17:17:55,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 17:17:55,548 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 17:17:55,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 17:17:55,549 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 17:17:55,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 17:17:55,549 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 17:17:55,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 17:17:55,549 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 17:17:55,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 17:17:55,549 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 17:17:55,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 17:17:55,549 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 17:17:55,550 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 17:17:55,550 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 17:17:55,550 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 17:17:55,550 INFO  L130     BoogieDeclarations]: Found specification of procedure _beforeTokenTransfer~address~address~uint256_ERC20__success
[2020-11-25 17:17:55,550 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 17:17:55,550 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 17:17:55,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 17:17:55,550 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 17:17:55,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 17:17:55,550 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 17:17:55,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 17:17:55,551 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 17:17:55,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 17:17:55,551 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Detailed
[2020-11-25 17:17:55,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Detailed
[2020-11-25 17:17:55,551 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:17:55,551 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 17:17:55,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 17:17:55,551 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 17:17:55,551 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 17:17:55,551 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 17:17:55,551 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 17:17:55,552 INFO  L130     BoogieDeclarations]: Found specification of procedure GOF_GOF_NoBaseCtor__success
[2020-11-25 17:17:55,552 INFO  L130     BoogieDeclarations]: Found specification of procedure GOF_GOF
[2020-11-25 17:17:55,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure GOF_GOF
[2020-11-25 17:17:55,552 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_GOF
[2020-11-25 17:17:55,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_GOF
[2020-11-25 17:17:55,552 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_GOF
[2020-11-25 17:17:55,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_GOF
[2020-11-25 17:17:55,552 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_GOF
[2020-11-25 17:17:55,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_GOF
[2020-11-25 17:17:55,552 INFO  L130     BoogieDeclarations]: Found specification of procedure setPendingGov~address_GOF
[2020-11-25 17:17:55,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPendingGov~address_GOF
[2020-11-25 17:17:55,553 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptGov_GOF
[2020-11-25 17:17:55,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptGov_GOF
[2020-11-25 17:17:55,553 INFO  L130     BoogieDeclarations]: Found specification of procedure _beforeTokenTransfer~address~address~uint256_GOF__success
[2020-11-25 17:17:55,553 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_GOF
[2020-11-25 17:17:55,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_GOF
[2020-11-25 17:17:55,553 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingGov_GOF
[2020-11-25 17:17:55,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingGov_GOF
[2020-11-25 17:17:55,553 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_GOF
[2020-11-25 17:17:55,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_GOF
[2020-11-25 17:17:55,554 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 17:17:55,554 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 17:17:55,554 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 17:17:55,554 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyGov_pre__success
[2020-11-25 17:17:55,554 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 17:17:55,554 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 17:17:55,554 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 17:17:55,554 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 17:17:55,555 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 17:17:55,555 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 17:17:55,555 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 17:17:55,555 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 17:17:55,555 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 17:17:55,555 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 17:17:55,555 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_GOF
[2020-11-25 17:17:55,555 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 17:17:55,555 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 17:17:55,555 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 17:17:55,556 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 17:17:55,556 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 17:17:55,556 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 17:17:55,556 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 17:17:55,556 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 17:17:55,556 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 17:17:55,556 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 17:17:55,556 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 17:17:55,556 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 17:17:55,557 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 17:17:55,557 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 17:17:55,557 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 17:17:55,557 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 17:17:55,557 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 17:17:55,557 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 17:17:55,557 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 17:17:55,557 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 17:17:55,557 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 17:17:55,557 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 17:17:55,558 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 17:17:55,558 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 17:17:55,558 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 17:17:55,558 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 17:17:55,558 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 17:17:55,558 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 17:17:55,558 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 17:17:55,558 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 17:17:55,558 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 17:17:55,559 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 17:17:55,559 INFO  L130     BoogieDeclarations]: Found specification of procedure _beforeTokenTransfer~address~address~uint256_ERC20__fail
[2020-11-25 17:17:55,559 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 17:17:55,559 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 17:17:55,559 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 17:17:55,559 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 17:17:55,559 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 17:17:55,559 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 17:17:55,559 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 17:17:55,559 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 17:17:55,560 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 17:17:55,560 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Detailed__success
[2020-11-25 17:17:55,560 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Detailed__fail
[2020-11-25 17:17:55,560 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:17:55,560 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 17:17:55,560 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 17:17:55,560 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 17:17:55,560 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:17:55,560 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 17:17:55,561 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:17:55,561 INFO  L130     BoogieDeclarations]: Found specification of procedure GOF_GOF_NoBaseCtor__fail
[2020-11-25 17:17:55,561 INFO  L130     BoogieDeclarations]: Found specification of procedure GOF_GOF__success
[2020-11-25 17:17:55,561 INFO  L130     BoogieDeclarations]: Found specification of procedure GOF_GOF__fail
[2020-11-25 17:17:55,561 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_GOF__success
[2020-11-25 17:17:55,561 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_GOF__fail
[2020-11-25 17:17:55,561 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_GOF__success
[2020-11-25 17:17:55,561 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_GOF__fail
[2020-11-25 17:17:55,562 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_GOF__success
[2020-11-25 17:17:55,562 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_GOF__fail
[2020-11-25 17:17:55,562 INFO  L130     BoogieDeclarations]: Found specification of procedure setPendingGov~address_GOF__success
[2020-11-25 17:17:55,562 INFO  L130     BoogieDeclarations]: Found specification of procedure setPendingGov~address_GOF__fail
[2020-11-25 17:17:55,562 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptGov_GOF__success
[2020-11-25 17:17:55,562 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptGov_GOF__fail
[2020-11-25 17:17:55,562 INFO  L130     BoogieDeclarations]: Found specification of procedure _beforeTokenTransfer~address~address~uint256_GOF__fail
[2020-11-25 17:17:55,562 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_GOF__success
[2020-11-25 17:17:55,562 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_GOF__fail
[2020-11-25 17:17:55,562 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingGov_GOF__success
[2020-11-25 17:17:55,562 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingGov_GOF__fail
[2020-11-25 17:17:55,562 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_GOF__success
[2020-11-25 17:17:55,562 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_GOF__fail
[2020-11-25 17:17:55,562 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 17:17:55,563 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 17:17:55,563 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 17:17:55,563 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyGov_pre__fail
[2020-11-25 17:17:55,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 17:17:55,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 17:17:55,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 17:17:55,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 17:17:55,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 17:17:55,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 17:17:55,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 17:17:55,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 17:17:55,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 17:17:55,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 17:17:55,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 17:17:55,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 17:17:55,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 17:17:55,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 17:17:55,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 17:17:55,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 17:17:55,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 17:17:55,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 17:17:55,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 17:17:55,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 17:17:55,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 17:17:55,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 17:17:55,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 17:17:55,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 17:17:55,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 17:17:55,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 17:17:55,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 17:17:55,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 17:17:55,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 17:17:55,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 17:17:55,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 17:17:55,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 17:17:55,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 17:17:55,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 17:17:55,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 17:17:55,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 17:17:55,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 17:17:55,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 17:17:55,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 17:17:55,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 17:17:55,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure _beforeTokenTransfer~address~address~uint256_ERC20__fail
[2020-11-25 17:17:55,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure _beforeTokenTransfer~address~address~uint256_ERC20__success
[2020-11-25 17:17:55,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 17:17:55,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 17:17:55,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 17:17:55,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 17:17:55,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 17:17:55,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 17:17:55,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 17:17:55,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 17:17:55,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 17:17:55,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 17:17:55,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Detailed__fail
[2020-11-25 17:17:55,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Detailed__success
[2020-11-25 17:17:55,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:17:55,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:17:55,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 17:17:55,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 17:17:55,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 17:17:55,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 17:17:55,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:17:55,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 17:17:55,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 17:17:55,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 17:17:55,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:17:55,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 17:17:55,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure GOF_GOF_NoBaseCtor__fail
[2020-11-25 17:17:55,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure GOF_GOF_NoBaseCtor__success
[2020-11-25 17:17:55,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure GOF_GOF__fail
[2020-11-25 17:17:55,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure GOF_GOF__success
[2020-11-25 17:17:55,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_GOF__fail
[2020-11-25 17:17:55,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_GOF__success
[2020-11-25 17:17:55,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_GOF__fail
[2020-11-25 17:17:55,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_GOF__success
[2020-11-25 17:17:55,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_GOF__fail
[2020-11-25 17:17:55,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_GOF__success
[2020-11-25 17:17:55,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPendingGov~address_GOF__fail
[2020-11-25 17:17:55,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPendingGov~address_GOF__success
[2020-11-25 17:17:55,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptGov_GOF__fail
[2020-11-25 17:17:55,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptGov_GOF__success
[2020-11-25 17:17:55,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure _beforeTokenTransfer~address~address~uint256_GOF__fail
[2020-11-25 17:17:55,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure _beforeTokenTransfer~address~address~uint256_GOF__success
[2020-11-25 17:17:55,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_GOF__fail
[2020-11-25 17:17:55,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_GOF__success
[2020-11-25 17:17:55,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingGov_GOF__fail
[2020-11-25 17:17:55,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingGov_GOF__success
[2020-11-25 17:17:55,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_GOF__fail
[2020-11-25 17:17:55,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_GOF__success
[2020-11-25 17:17:55,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 17:17:55,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 17:17:55,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 17:17:55,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 17:17:55,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 17:17:55,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 17:17:55,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyGov_pre__fail
[2020-11-25 17:17:55,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyGov_pre__success
[2020-11-25 17:17:55,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 17:17:55,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 17:17:55,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 17:17:55,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 17:17:55,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 17:17:55,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 17:17:55,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 17:17:55,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 17:17:55,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 17:17:55,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 17:17:55,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_GOF
[2020-11-25 17:17:55,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 17:17:55,571 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 17:17:55,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 17:17:55,798 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:17:55,799 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:17:56,299 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 17:17:56,300 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 17:17:56,302 INFO  L202        PluginConnector]: Adding new model GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:17:56 BoogieIcfgContainer
[2020-11-25 17:17:56,302 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:17:55" (2/2) ...
[2020-11-25 17:17:56,302 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 17:17:56,302 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@29e5e484 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:17:56, skipping insertion in model container
[2020-11-25 17:17:56,302 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 17:17:56,303 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 17:17:56,303 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 17:17:56,304 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 17:17:56,304 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:17:55" (1/3) ...
[2020-11-25 17:17:56,304 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@38771f92 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:17:56, skipping insertion in model container
[2020-11-25 17:17:56,305 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:17:55" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 17:17:56,340 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:17:56 NWAContainer
[2020-11-25 17:17:56,340 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 17:17:56,340 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 17:17:56,341 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 17:17:56,341 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 17:17:56,342 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:17:56" (3/4) ...
[2020-11-25 17:17:56,343 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@710abe62 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:17:56, skipping insertion in model container
[2020-11-25 17:17:56,343 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:17:56" (4/4) ...
[2020-11-25 17:17:56,346 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 17:17:56,350 INFO  L110   BuchiProductObserver]: Initial RCFG 2090 locations, 2871 edges
[2020-11-25 17:17:56,351 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 17:17:56,362 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 17:17:57,660 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 17:17:57,667 INFO  L110   BuchiProductObserver]: BuchiProgram size 5198 locations, 9335 edges
[2020-11-25 17:17:57,667 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:17:57 BoogieIcfgContainer
[2020-11-25 17:17:57,667 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 17:17:57,667 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 17:17:57,667 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 17:17:57,669 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 17:17:57,669 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:17:57" (1/1) ...
[2020-11-25 17:17:57,792 INFO  L313           BlockEncoder]: Initial Icfg 5198 locations, 9335 edges
[2020-11-25 17:17:57,793 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 17:17:57,793 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 17:17:57,793 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 17:17:57,794 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 17:17:57,807 INFO  L70    emoveInfeasibleEdges]: Removed 183 edges and 16 locations because of local infeasibility
[2020-11-25 17:17:57,819 INFO  L70        RemoveSinkStates]: Removed 224 edges and 132 locations by removing sink states
[2020-11-25 17:17:57,832 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 17:17:57,837 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 17:17:57,841 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 17:17:57,841 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 17:17:57,845 INFO  L313           BlockEncoder]: Encoded RCFG 5026 locations, 8893 edges
[2020-11-25 17:17:57,845 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:17:57 BasicIcfg
[2020-11-25 17:17:57,845 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 17:17:57,845 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 17:17:57,845 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 17:17:57,847 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 17:17:57,847 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:17:57,847 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:17:55" (1/6) ...
[2020-11-25 17:17:57,849 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@49a539c8 and model type GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:17:57, skipping insertion in model container
[2020-11-25 17:17:57,849 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:17:57,849 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:17:55" (2/6) ...
[2020-11-25 17:17:57,849 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@49a539c8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:17:57, skipping insertion in model container
[2020-11-25 17:17:57,849 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:17:57,849 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:17:56" (3/6) ...
[2020-11-25 17:17:57,850 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@49a539c8 and model type GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:17:57, skipping insertion in model container
[2020-11-25 17:17:57,850 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:17:57,850 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:17:56" (4/6) ...
[2020-11-25 17:17:57,850 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@49a539c8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:17:57, skipping insertion in model container
[2020-11-25 17:17:57,850 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:17:57,850 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:17:57" (5/6) ...
[2020-11-25 17:17:57,850 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@49a539c8 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 05:17:57, skipping insertion in model container
[2020-11-25 17:17:57,850 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:17:57,850 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:17:57" (6/6) ...
[2020-11-25 17:17:57,851 INFO  L404   chiAutomizerObserver]: Analyzing ICFG GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-fail.bpl_BEv2
[2020-11-25 17:17:57,878 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 17:17:57,878 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 17:17:57,878 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 17:17:57,878 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 17:17:57,878 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 17:17:57,878 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 17:17:57,878 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 17:17:57,879 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 17:17:57,879 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 17:17:57,923 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5026 states.
[2020-11-25 17:17:57,999 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:17:57,999 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:17:57,999 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:17:58,006 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:17:58,007 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:17:58,007 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 17:17:58,007 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5026 states.
[2020-11-25 17:17:58,062 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:17:58,062 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:17:58,062 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:17:58,064 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:17:58,064 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND TRUE   revert
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND TRUE   revert
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND TRUE   choice == 20
[L5459]              gas := gas - 21000;
[L5460]  COND FALSE  !(gas >= 0)
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:17:58,080 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:17:58,080 INFO  L82        PathProgramCache]: Analyzing trace with hash 330159844, now seen corresponding path program 1 times
[2020-11-25 17:17:58,084 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:17:58,103 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:17:58,131 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:17:58,132 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:17:58,132 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 17:17:58,415 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:17:58,426 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 17:17:58,426 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 17:17:58,428 INFO  L87              Difference]: Start difference. First operand 5026 states. Second operand 3 states.
[2020-11-25 17:17:58,673 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:17:58,673 INFO  L93              Difference]: Finished difference Result 3391 states and 3955 transitions.
[2020-11-25 17:17:58,674 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 17:17:58,675 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3391 states and 3955 transitions.
[2020-11-25 17:17:58,693 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:17:58,721 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3391 states to 3391 states and 3955 transitions.
[2020-11-25 17:17:58,722 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 17:17:58,724 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 872
[2020-11-25 17:17:58,724 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3391 states and 3955 transitions.
[2020-11-25 17:17:58,732 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:17:58,732 INFO  L728         BuchiCegarLoop]: Abstraction has 3391 states and 3955 transitions.
[2020-11-25 17:17:58,747 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3391 states and 3955 transitions.
[2020-11-25 17:17:58,801 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3391 to 3391.
[2020-11-25 17:17:58,802 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3391 states.
[2020-11-25 17:17:58,808 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3391 states to 3391 states and 3955 transitions.
[2020-11-25 17:17:58,808 INFO  L751         BuchiCegarLoop]: Abstraction has 3391 states and 3955 transitions.
[2020-11-25 17:17:58,809 INFO  L631         BuchiCegarLoop]: Abstraction has 3391 states and 3955 transitions.
[2020-11-25 17:17:58,809 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 17:17:58,809 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3391 states and 3955 transitions.
[2020-11-25 17:17:58,817 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:17:58,817 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:17:58,817 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:17:58,819 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:17:58,819 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND TRUE   revert
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND TRUE   revert
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND TRUE   revert
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:17:58,823 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:17:58,823 INFO  L82        PathProgramCache]: Analyzing trace with hash 1561605875, now seen corresponding path program 1 times
[2020-11-25 17:17:58,824 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:17:58,832 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:17:58,855 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:17:58,855 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:17:58,855 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:17:58,856 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:17:58,856 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:17:58,856 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:17:58,856 INFO  L87              Difference]: Start difference. First operand 3391 states and 3955 transitions. cyclomatic complexity: 566 Second operand 4 states.
[2020-11-25 17:17:59,435 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:17:59,435 INFO  L93              Difference]: Finished difference Result 4317 states and 4886 transitions.
[2020-11-25 17:17:59,436 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:17:59,437 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4317 states and 4886 transitions.
[2020-11-25 17:17:59,459 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:17:59,486 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4317 states to 4083 states and 4612 transitions.
[2020-11-25 17:17:59,487 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1056
[2020-11-25 17:17:59,489 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1068
[2020-11-25 17:17:59,489 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4083 states and 4612 transitions.
[2020-11-25 17:17:59,498 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:17:59,498 INFO  L728         BuchiCegarLoop]: Abstraction has 4083 states and 4612 transitions.
[2020-11-25 17:17:59,503 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4083 states and 4612 transitions.
[2020-11-25 17:17:59,562 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4083 to 3678.
[2020-11-25 17:17:59,562 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3678 states.
[2020-11-25 17:17:59,568 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3678 states to 3678 states and 4105 transitions.
[2020-11-25 17:17:59,569 INFO  L751         BuchiCegarLoop]: Abstraction has 3678 states and 4105 transitions.
[2020-11-25 17:17:59,569 INFO  L631         BuchiCegarLoop]: Abstraction has 3678 states and 4105 transitions.
[2020-11-25 17:17:59,569 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 17:17:59,569 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3678 states and 4105 transitions.
[2020-11-25 17:17:59,577 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:17:59,578 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:17:59,578 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:17:59,581 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:17:59,581 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND FALSE  !(DType[this] == GOF)
[L3109]  COND TRUE   DType[this] == ERC20
[L3110]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3110]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3111]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND FALSE  !(DType[this] == GOF)
[L3109]  COND TRUE   DType[this] == ERC20
[L3110]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3110]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3111]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:17:59,587 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:17:59,587 INFO  L82        PathProgramCache]: Analyzing trace with hash 1417169235, now seen corresponding path program 1 times
[2020-11-25 17:17:59,588 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:17:59,606 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:17:59,705 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 17:17:59,705 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:17:59,705 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 17:17:59,706 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:17:59,706 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 17:17:59,706 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 17:17:59,706 INFO  L87              Difference]: Start difference. First operand 3678 states and 4105 transitions. cyclomatic complexity: 429 Second operand 7 states.
[2020-11-25 17:17:59,887 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:17:59,888 INFO  L93              Difference]: Finished difference Result 3744 states and 4178 transitions.
[2020-11-25 17:17:59,888 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:17:59,888 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3744 states and 4178 transitions.
[2020-11-25 17:17:59,895 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:17:59,905 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3744 states to 3688 states and 4113 transitions.
[2020-11-25 17:17:59,905 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1000
[2020-11-25 17:17:59,905 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1000
[2020-11-25 17:17:59,906 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3688 states and 4113 transitions.
[2020-11-25 17:17:59,908 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:17:59,908 INFO  L728         BuchiCegarLoop]: Abstraction has 3688 states and 4113 transitions.
[2020-11-25 17:17:59,911 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3688 states and 4113 transitions.
[2020-11-25 17:17:59,934 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3688 to 3688.
[2020-11-25 17:17:59,935 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3688 states.
[2020-11-25 17:17:59,938 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3688 states to 3688 states and 4113 transitions.
[2020-11-25 17:17:59,938 INFO  L751         BuchiCegarLoop]: Abstraction has 3688 states and 4113 transitions.
[2020-11-25 17:17:59,938 INFO  L631         BuchiCegarLoop]: Abstraction has 3688 states and 4113 transitions.
[2020-11-25 17:17:59,938 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 17:17:59,938 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3688 states and 4113 transitions.
[2020-11-25 17:17:59,943 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:17:59,943 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:17:59,943 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:17:59,945 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:17:59,945 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:17:59,948 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:17:59,949 INFO  L82        PathProgramCache]: Analyzing trace with hash 2117941347, now seen corresponding path program 1 times
[2020-11-25 17:17:59,949 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:17:59,961 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:18:00,076 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 17:18:00,076 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:18:00,076 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 17:18:00,077 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:18:00,077 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 17:18:00,077 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=34, Invalid=238, Unknown=0, NotChecked=0, Total=272
[2020-11-25 17:18:00,077 INFO  L87              Difference]: Start difference. First operand 3688 states and 4113 transitions. cyclomatic complexity: 427 Second operand 17 states.
[2020-11-25 17:18:02,504 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:18:02,505 INFO  L93              Difference]: Finished difference Result 3769 states and 4206 transitions.
[2020-11-25 17:18:02,505 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 17:18:02,505 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3769 states and 4206 transitions.
[2020-11-25 17:18:02,511 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:18:02,520 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3769 states to 3769 states and 4206 transitions.
[2020-11-25 17:18:02,520 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1013
[2020-11-25 17:18:02,520 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1013
[2020-11-25 17:18:02,521 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3769 states and 4206 transitions.
[2020-11-25 17:18:02,523 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:18:02,523 INFO  L728         BuchiCegarLoop]: Abstraction has 3769 states and 4206 transitions.
[2020-11-25 17:18:02,526 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3769 states and 4206 transitions.
[2020-11-25 17:18:02,547 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3769 to 3552.
[2020-11-25 17:18:02,547 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3552 states.
[2020-11-25 17:18:02,550 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3552 states to 3552 states and 3940 transitions.
[2020-11-25 17:18:02,550 INFO  L751         BuchiCegarLoop]: Abstraction has 3552 states and 3940 transitions.
[2020-11-25 17:18:02,550 INFO  L631         BuchiCegarLoop]: Abstraction has 3552 states and 3940 transitions.
[2020-11-25 17:18:02,550 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 17:18:02,550 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3552 states and 3940 transitions.
[2020-11-25 17:18:02,554 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:18:02,554 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:18:02,554 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:18:02,555 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:18:02,555 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND TRUE   __exception
[L1237]              __tmp__Balance := Balance;
[L1238]              __tmp__DType := DType;
[L1239]              __tmp__Alloc := Alloc;
[L1240]              __tmp__balance_ADDR := balance_ADDR;
[L1241]              __tmp__M_Ref_int := M_Ref_int;
[L1242]              __tmp__sum__balances0 := sum__balances0;
[L1243]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1244]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1245]              __tmp__sum__allowances1 := sum__allowances1;
[L1246]              __tmp__M_Ref_bool := M_Ref_bool;
[L1247]              __tmp__sum_minters2 := sum_minters2;
[L1248]              __tmp__Length := Length;
[L1249]              __tmp__now := now;
[L1250]              __tmp___balances_ERC20 := _balances_ERC20;
[L1251]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1252]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1253]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1254]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1255]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1256]              __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L1257]              __tmp__governance_GOF := governance_GOF;
[L1258]              __tmp__pendingGov_GOF := pendingGov_GOF;
[L1259]              __tmp__minters_GOF := minters_GOF;
[L1260]  CALL        call GOF_GOF__fail(this, msgsender_MSG, msgvalue_MSG);
[L3612]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2453]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2438]              assume msgsender_MSG != null;
[L2439]              __tmp__Balance[this] := 0;
[L2453]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2454]  COND FALSE  !(revert)
[L3612]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  COND FALSE  !(revert)
[L3616]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2421]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2406]              assume msgsender_MSG != null;
[L2407]              __tmp__Balance[this] := 0;
[L2421]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2422]  COND FALSE  !(revert)
[L3616]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3617]  COND FALSE  !(revert)
[L3620]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2507]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2453]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2438]              assume msgsender_MSG != null;
[L2439]              __tmp__Balance[this] := 0;
[L2453]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2454]  COND FALSE  !(revert)
[L2507]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2508]  COND FALSE  !(revert)
[L2511]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2421]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2406]              assume msgsender_MSG != null;
[L2407]              __tmp__Balance[this] := 0;
[L2421]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2422]  COND FALSE  !(revert)
[L2511]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2512]  COND FALSE  !(revert)
[L2515]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2482]              assume msgsender_MSG != null;
[L2483]              __tmp__Balance[this] := 0;
[L2484]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2485]              __tmp__sum__balances0[this] := 0;
[L2486]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2487]              __tmp__sum__allowances1[this] := 0;
[L2488]              __tmp___totalSupply_ERC20[this] := 0;
[L2515]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2516]  COND FALSE  !(revert)
[L3620]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3624]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3373]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2421]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2406]              assume msgsender_MSG != null;
[L2407]              __tmp__Balance[this] := 0;
[L2421]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2422]  COND FALSE  !(revert)
[L3373]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3374]  COND FALSE  !(revert)
[L3377]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3342]              assume msgsender_MSG != null;
[L3343]              __tmp__Balance[this] := 0;
[L3344]              __tmp___name_ERC20Detailed[this] := -1192880992;
[L3345]              __tmp___symbol_ERC20Detailed[this] := -1192880992;
[L3346]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3347]              __tmp___cap_ERC20Detailed[this] := 0;
[L3349]              __tmp___name_ERC20Detailed[this] := name_s524;
[L3350]              __tmp___symbol_ERC20Detailed[this] := symbol_s524;
[L3351]              __tmp___decimals_ERC20Detailed[this] := decimals_s524;
[L3352]              __tmp___cap_ERC20Detailed[this] := cap_s524;
[L3377]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3378]  COND FALSE  !(revert)
[L3624]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3625]  COND FALSE  !(revert)
[L3628]  CALL        call GOF_GOF_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3583]              assume msgsender_MSG != null;
[L3584]              __tmp__Balance[this] := 0;
[L3585]              __tmp__governance_GOF[this] := null;
[L3586]              __tmp__pendingGov_GOF[this] := null;
[L3587]              __tmp__minters_GOF[this] := zeroRefboolArr();
[L3590]              havoc __var_26;
[L3591]              __tmp__governance_GOF[this] := __var_26;
[L3628]  RET         call GOF_GOF_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  COND FALSE  !(revert)
[L1260]  RET         call GOF_GOF__fail(this, msgsender_MSG, msgvalue_MSG);
[L1261]              assume revert || gas < 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND TRUE   choice == 20
[L5459]              gas := gas - 21000;
[L5460]  COND FALSE  !(gas >= 0)
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:18:02,559 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:18:02,559 INFO  L82        PathProgramCache]: Analyzing trace with hash -919408886, now seen corresponding path program 1 times
[2020-11-25 17:18:02,559 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:18:02,567 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:18:02,604 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 17:18:02,604 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:18:02,605 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:18:02,605 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:18:02,605 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:18:02,605 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:18:02,605 INFO  L87              Difference]: Start difference. First operand 3552 states and 3940 transitions. cyclomatic complexity: 391 Second operand 4 states.
[2020-11-25 17:18:02,908 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:18:02,908 INFO  L93              Difference]: Finished difference Result 4341 states and 4937 transitions.
[2020-11-25 17:18:02,908 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:18:02,908 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4341 states and 4937 transitions.
[2020-11-25 17:18:02,917 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 17:18:02,928 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4341 states to 4214 states and 4807 transitions.
[2020-11-25 17:18:02,928 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1132
[2020-11-25 17:18:02,928 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1132
[2020-11-25 17:18:02,928 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4214 states and 4807 transitions.
[2020-11-25 17:18:02,932 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:18:02,932 INFO  L728         BuchiCegarLoop]: Abstraction has 4214 states and 4807 transitions.
[2020-11-25 17:18:02,934 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4214 states and 4807 transitions.
[2020-11-25 17:18:02,954 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4214 to 3425.
[2020-11-25 17:18:02,954 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3425 states.
[2020-11-25 17:18:02,957 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3425 states to 3425 states and 3809 transitions.
[2020-11-25 17:18:02,957 INFO  L751         BuchiCegarLoop]: Abstraction has 3425 states and 3809 transitions.
[2020-11-25 17:18:02,957 INFO  L631         BuchiCegarLoop]: Abstraction has 3425 states and 3809 transitions.
[2020-11-25 17:18:02,957 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 17:18:02,957 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3425 states and 3809 transitions.
[2020-11-25 17:18:02,961 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:18:02,961 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:18:02,961 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:18:02,962 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:18:02,962 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND FALSE  !(choice == 18)
[L5477]  COND FALSE  !(choice == 17)
[L5483]  COND FALSE  !(choice == 16)
[L5490]  COND FALSE  !(choice == 15)
[L5497]  COND FALSE  !(choice == 14)
[L5504]  COND FALSE  !(choice == 13)
[L5511]  COND FALSE  !(choice == 12)
[L5517]  COND FALSE  !(choice == 11)
[L5523]  COND FALSE  !(choice == 10)
[L5529]  COND FALSE  !(choice == 9)
[L5535]  COND FALSE  !(choice == 8)
[L5541]  COND FALSE  !(choice == 7)
[L5547]  COND FALSE  !(choice == 6)
[L5553]  COND TRUE   choice == 5
[L5554]              gas := gas - 21000;
[L5555]  COND TRUE   gas >= 0
[L5556]              assume _amount_s750 >= 0 && _amount_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5557]              assume msgvalue_MSG == 0;
[L5558]  CALL        call mint~address~uint256_GOF(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L1299]              havoc __exception;
[L1300]              revert := false;
[L1301]  COND FALSE  !(__exception)
[L1328]  CALL        call mint~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3677]  COND FALSE  !(!minters_GOF[this][msgsender_MSG])
[L3681]  COND TRUE   DType[this] == GOF
[L3682]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3179]              __var_16 := null;
[L3180]  COND FALSE  !(!(account_s380 != null))
[L3184]              __var_17 := null;
[L3185]  COND FALSE  !(DType[this] == GOF)
[L3190]  COND TRUE   DType[this] == ERC20
[L3191]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, null, account_s380, amount_s380);
[L3191]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, null, account_s380, amount_s380);
[L3192]  COND FALSE  !(revert)
[L3198]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s380);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3198]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s380);
[L3199]  COND FALSE  !(revert)
[L3202]              _totalSupply_ERC20[this] := __var_18;
[L3203]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s380], amount_s380);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3203]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s380], amount_s380);
[L3204]  COND FALSE  !(revert)
[L3207]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s380];
[L3208]              _balances_ERC20[this][account_s380] := __var_19;
[L3209]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s380];
[L3210]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3682]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3683]  COND FALSE  !(revert)
[L1328]  RET         call mint~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L1329]              assume !revert && gas >= 0;
[L5558]  RET         call mint~address~uint256_GOF(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L5602]  RET         call CorralChoice_GOF(this);
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND TRUE   choice == 20
[L5459]              gas := gas - 21000;
[L5460]  COND FALSE  !(gas >= 0)
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:18:02,967 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:18:02,967 INFO  L82        PathProgramCache]: Analyzing trace with hash 1101912030, now seen corresponding path program 1 times
[2020-11-25 17:18:02,967 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:18:02,980 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:18:03,049 INFO  L134       CoverageAnalysis]: Checked inductivity of 106 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 105 trivial. 0 not checked.
[2020-11-25 17:18:03,049 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:18:03,049 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 17:18:03,049 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:18:03,050 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 17:18:03,050 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 17:18:03,050 INFO  L87              Difference]: Start difference. First operand 3425 states and 3809 transitions. cyclomatic complexity: 387 Second operand 7 states.
[2020-11-25 17:18:03,125 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:18:03,125 INFO  L93              Difference]: Finished difference Result 3473 states and 3859 transitions.
[2020-11-25 17:18:03,125 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:18:03,125 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3473 states and 3859 transitions.
[2020-11-25 17:18:03,131 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:18:03,138 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3473 states to 3415 states and 3795 transitions.
[2020-11-25 17:18:03,138 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 918
[2020-11-25 17:18:03,138 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 918
[2020-11-25 17:18:03,138 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3415 states and 3795 transitions.
[2020-11-25 17:18:03,141 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:18:03,141 INFO  L728         BuchiCegarLoop]: Abstraction has 3415 states and 3795 transitions.
[2020-11-25 17:18:03,144 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3415 states and 3795 transitions.
[2020-11-25 17:18:03,162 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3415 to 3415.
[2020-11-25 17:18:03,162 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3415 states.
[2020-11-25 17:18:03,165 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3415 states to 3415 states and 3795 transitions.
[2020-11-25 17:18:03,165 INFO  L751         BuchiCegarLoop]: Abstraction has 3415 states and 3795 transitions.
[2020-11-25 17:18:03,165 INFO  L631         BuchiCegarLoop]: Abstraction has 3415 states and 3795 transitions.
[2020-11-25 17:18:03,165 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 17:18:03,165 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3415 states and 3795 transitions.
[2020-11-25 17:18:03,170 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:18:03,170 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:18:03,170 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:18:03,172 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:18:03,172 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND FALSE  !(choice == 18)
[L5477]  COND FALSE  !(choice == 17)
[L5483]  COND FALSE  !(choice == 16)
[L5490]  COND FALSE  !(choice == 15)
[L5497]  COND FALSE  !(choice == 14)
[L5504]  COND FALSE  !(choice == 13)
[L5511]  COND FALSE  !(choice == 12)
[L5517]  COND FALSE  !(choice == 11)
[L5523]  COND FALSE  !(choice == 10)
[L5529]  COND FALSE  !(choice == 9)
[L5535]  COND FALSE  !(choice == 8)
[L5541]  COND FALSE  !(choice == 7)
[L5547]  COND FALSE  !(choice == 6)
[L5553]  COND TRUE   choice == 5
[L5554]              gas := gas - 21000;
[L5555]  COND TRUE   gas >= 0
[L5556]              assume _amount_s750 >= 0 && _amount_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5557]              assume msgvalue_MSG == 0;
[L5558]  CALL        call mint~address~uint256_GOF(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L1299]              havoc __exception;
[L1300]              revert := false;
[L1301]  COND FALSE  !(__exception)
[L1328]  CALL        call mint~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3677]  COND FALSE  !(!minters_GOF[this][msgsender_MSG])
[L3681]  COND TRUE   DType[this] == GOF
[L3682]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3179]              __var_16 := null;
[L3180]  COND FALSE  !(!(account_s380 != null))
[L3184]              __var_17 := null;
[L3185]  COND TRUE   DType[this] == GOF
[L3186]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, null, account_s380, amount_s380);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3186]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, null, account_s380, amount_s380);
[L3187]  COND FALSE  !(revert)
[L3198]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s380);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3198]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s380);
[L3199]  COND FALSE  !(revert)
[L3202]              _totalSupply_ERC20[this] := __var_18;
[L3203]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s380], amount_s380);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3203]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s380], amount_s380);
[L3204]  COND FALSE  !(revert)
[L3207]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s380];
[L3208]              _balances_ERC20[this][account_s380] := __var_19;
[L3209]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s380];
[L3210]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3682]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3683]  COND FALSE  !(revert)
[L1328]  RET         call mint~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L1329]              assume !revert && gas >= 0;
[L5558]  RET         call mint~address~uint256_GOF(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L5602]  RET         call CorralChoice_GOF(this);
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:18:03,176 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:18:03,177 INFO  L82        PathProgramCache]: Analyzing trace with hash -2028076576, now seen corresponding path program 1 times
[2020-11-25 17:18:03,177 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:18:03,191 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:18:03,305 INFO  L134       CoverageAnalysis]: Checked inductivity of 106 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 105 trivial. 0 not checked.
[2020-11-25 17:18:03,305 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:18:03,305 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 17:18:03,306 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:18:03,306 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 17:18:03,306 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 17:18:03,306 INFO  L87              Difference]: Start difference. First operand 3415 states and 3795 transitions. cyclomatic complexity: 383 Second operand 3 states.
[2020-11-25 17:18:03,323 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:18:03,323 INFO  L93              Difference]: Finished difference Result 3419 states and 3799 transitions.
[2020-11-25 17:18:03,323 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 17:18:03,324 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3419 states and 3799 transitions.
[2020-11-25 17:18:03,329 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:18:03,336 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3419 states to 3419 states and 3799 transitions.
[2020-11-25 17:18:03,336 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 918
[2020-11-25 17:18:03,337 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 918
[2020-11-25 17:18:03,337 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3419 states and 3799 transitions.
[2020-11-25 17:18:03,339 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:18:03,339 INFO  L728         BuchiCegarLoop]: Abstraction has 3419 states and 3799 transitions.
[2020-11-25 17:18:03,343 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3419 states and 3799 transitions.
[2020-11-25 17:18:03,361 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3419 to 3419.
[2020-11-25 17:18:03,362 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3419 states.
[2020-11-25 17:18:03,365 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3419 states to 3419 states and 3799 transitions.
[2020-11-25 17:18:03,365 INFO  L751         BuchiCegarLoop]: Abstraction has 3419 states and 3799 transitions.
[2020-11-25 17:18:03,365 INFO  L631         BuchiCegarLoop]: Abstraction has 3419 states and 3799 transitions.
[2020-11-25 17:18:03,365 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 17:18:03,365 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3419 states and 3799 transitions.
[2020-11-25 17:18:03,368 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:18:03,368 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:18:03,368 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:18:03,370 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:18:03,370 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND FALSE  !(choice == 18)
[L5477]  COND FALSE  !(choice == 17)
[L5483]  COND FALSE  !(choice == 16)
[L5490]  COND TRUE   choice == 15
[L5491]              gas := gas - 21000;
[L5492]  COND TRUE   gas >= 0
[L5493]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5494]              assume msgvalue_MSG == 0;
[L5495]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L635]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2775]  COND TRUE   DType[this] == GOF
[L2776]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND FALSE  !(DType[this] == GOF)
[L3109]  COND TRUE   DType[this] == ERC20
[L3110]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3110]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3111]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2776]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2777]  COND FALSE  !(revert)
[L2788]  COND FALSE  !(DType[this] == GOF)
[L2793]  COND TRUE   DType[this] == ERC20
[L2794]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2794]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2801]  COND TRUE   DType[this] == GOF
[L2802]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2802]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2803]  COND FALSE  !(revert)
[L2814]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 865270858);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L2814]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 865270858);
[L2815]  COND FALSE  !(revert)
[L2818]  COND TRUE   DType[this] == GOF
[L2819]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3315]              __var_24 := null;
[L3316]  COND FALSE  !(!(owner_s475 != null))
[L3320]              __var_25 := null;
[L3321]  COND FALSE  !(!(spender_s475 != null))
[L3325]              sum__allowances1[owner_s475] := sum__allowances1[owner_s475] - _allowances_ERC20[this][owner_s475][spender_s475];
[L3326]              _allowances_ERC20[this][owner_s475][spender_s475] := amount_s475;
[L3327]              sum__allowances1[owner_s475] := sum__allowances1[owner_s475] + _allowances_ERC20[this][owner_s475][spender_s475];
[L3328]              assert { :EventEmitted "Approval_ERC20" } true;
[L2819]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2820]  COND FALSE  !(revert)
[L2831]              __ret_0_ := true;
[L635]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L636]               assume !revert && gas >= 0;
[L5495]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5602]  RET         call CorralChoice_GOF(this);
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND TRUE   choice == 20
[L5459]              gas := gas - 21000;
[L5460]  COND FALSE  !(gas >= 0)
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:18:03,373 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:18:03,374 INFO  L82        PathProgramCache]: Analyzing trace with hash -688582815, now seen corresponding path program 1 times
[2020-11-25 17:18:03,374 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:18:03,386 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:18:03,447 INFO  L134       CoverageAnalysis]: Checked inductivity of 109 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 108 trivial. 0 not checked.
[2020-11-25 17:18:03,447 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:18:03,447 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 17:18:03,448 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:18:03,448 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 17:18:03,448 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 17:18:03,448 INFO  L87              Difference]: Start difference. First operand 3419 states and 3799 transitions. cyclomatic complexity: 383 Second operand 3 states.
[2020-11-25 17:18:03,469 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:18:03,470 INFO  L93              Difference]: Finished difference Result 3437 states and 3819 transitions.
[2020-11-25 17:18:03,470 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 17:18:03,470 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3437 states and 3819 transitions.
[2020-11-25 17:18:03,475 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:18:03,482 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3437 states to 3437 states and 3819 transitions.
[2020-11-25 17:18:03,482 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 924
[2020-11-25 17:18:03,483 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 924
[2020-11-25 17:18:03,483 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3437 states and 3819 transitions.
[2020-11-25 17:18:03,485 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:18:03,485 INFO  L728         BuchiCegarLoop]: Abstraction has 3437 states and 3819 transitions.
[2020-11-25 17:18:03,487 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3437 states and 3819 transitions.
[2020-11-25 17:18:03,505 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3437 to 3431.
[2020-11-25 17:18:03,505 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3431 states.
[2020-11-25 17:18:03,508 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3431 states to 3431 states and 3813 transitions.
[2020-11-25 17:18:03,508 INFO  L751         BuchiCegarLoop]: Abstraction has 3431 states and 3813 transitions.
[2020-11-25 17:18:03,508 INFO  L631         BuchiCegarLoop]: Abstraction has 3431 states and 3813 transitions.
[2020-11-25 17:18:03,508 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 17:18:03,508 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3431 states and 3813 transitions.
[2020-11-25 17:18:03,511 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:18:03,512 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:18:03,512 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:18:03,513 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:18:03,513 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND FALSE  !(choice == 18)
[L5477]  COND FALSE  !(choice == 17)
[L5483]  COND FALSE  !(choice == 16)
[L5490]  COND TRUE   choice == 15
[L5491]              gas := gas - 21000;
[L5492]  COND TRUE   gas >= 0
[L5493]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5494]              assume msgvalue_MSG == 0;
[L5495]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L635]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2775]  COND TRUE   DType[this] == GOF
[L2776]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND FALSE  !(DType[this] == GOF)
[L3109]  COND TRUE   DType[this] == ERC20
[L3110]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3110]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3111]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2776]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2777]  COND FALSE  !(revert)
[L2788]  COND TRUE   DType[this] == GOF
[L2789]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2789]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2790]  COND FALSE  !(revert)
[L2801]  COND TRUE   DType[this] == GOF
[L2802]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2802]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2803]  COND FALSE  !(revert)
[L2814]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 865270858);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L2814]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 865270858);
[L2815]  COND FALSE  !(revert)
[L2818]  COND TRUE   DType[this] == GOF
[L2819]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3315]              __var_24 := null;
[L3316]  COND FALSE  !(!(owner_s475 != null))
[L3320]              __var_25 := null;
[L3321]  COND FALSE  !(!(spender_s475 != null))
[L3325]              sum__allowances1[owner_s475] := sum__allowances1[owner_s475] - _allowances_ERC20[this][owner_s475][spender_s475];
[L3326]              _allowances_ERC20[this][owner_s475][spender_s475] := amount_s475;
[L3327]              sum__allowances1[owner_s475] := sum__allowances1[owner_s475] + _allowances_ERC20[this][owner_s475][spender_s475];
[L3328]              assert { :EventEmitted "Approval_ERC20" } true;
[L2819]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2820]  COND FALSE  !(revert)
[L2831]              __ret_0_ := true;
[L635]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L636]               assume !revert && gas >= 0;
[L5495]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5602]  RET         call CorralChoice_GOF(this);
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND TRUE   choice == 20
[L5459]              gas := gas - 21000;
[L5460]  COND FALSE  !(gas >= 0)
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:18:03,516 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:18:03,517 INFO  L82        PathProgramCache]: Analyzing trace with hash -344661395, now seen corresponding path program 1 times
[2020-11-25 17:18:03,517 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:18:03,529 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:18:03,606 INFO  L134       CoverageAnalysis]: Checked inductivity of 109 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 108 trivial. 0 not checked.
[2020-11-25 17:18:03,607 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:18:03,607 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 17:18:03,607 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:18:03,607 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 17:18:03,607 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 17:18:03,607 INFO  L87              Difference]: Start difference. First operand 3431 states and 3813 transitions. cyclomatic complexity: 385 Second operand 7 states.
[2020-11-25 17:18:03,676 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:18:03,677 INFO  L93              Difference]: Finished difference Result 3469 states and 3839 transitions.
[2020-11-25 17:18:03,677 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:18:03,677 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3469 states and 3839 transitions.
[2020-11-25 17:18:03,682 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:18:03,688 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3469 states to 3339 states and 3693 transitions.
[2020-11-25 17:18:03,688 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 913
[2020-11-25 17:18:03,689 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 913
[2020-11-25 17:18:03,689 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3339 states and 3693 transitions.
[2020-11-25 17:18:03,690 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:18:03,691 INFO  L728         BuchiCegarLoop]: Abstraction has 3339 states and 3693 transitions.
[2020-11-25 17:18:03,693 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3339 states and 3693 transitions.
[2020-11-25 17:18:03,710 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3339 to 3339.
[2020-11-25 17:18:03,710 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3339 states.
[2020-11-25 17:18:03,713 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3339 states to 3339 states and 3693 transitions.
[2020-11-25 17:18:03,714 INFO  L751         BuchiCegarLoop]: Abstraction has 3339 states and 3693 transitions.
[2020-11-25 17:18:03,714 INFO  L631         BuchiCegarLoop]: Abstraction has 3339 states and 3693 transitions.
[2020-11-25 17:18:03,714 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 17:18:03,714 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3339 states and 3693 transitions.
[2020-11-25 17:18:03,717 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:18:03,717 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:18:03,717 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:18:03,718 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:18:03,718 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND FALSE  !(choice == 18)
[L5477]  COND FALSE  !(choice == 17)
[L5483]  COND FALSE  !(choice == 16)
[L5490]  COND TRUE   choice == 15
[L5491]              gas := gas - 21000;
[L5492]  COND TRUE   gas >= 0
[L5493]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5494]              assume msgvalue_MSG == 0;
[L5495]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L635]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2775]  COND TRUE   DType[this] == GOF
[L2776]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2776]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2777]  COND FALSE  !(revert)
[L2788]  COND TRUE   DType[this] == GOF
[L2789]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2789]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2790]  COND FALSE  !(revert)
[L2801]  COND TRUE   DType[this] == GOF
[L2802]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2802]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2803]  COND FALSE  !(revert)
[L2814]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 865270858);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L2814]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 865270858);
[L2815]  COND FALSE  !(revert)
[L2818]  COND TRUE   DType[this] == GOF
[L2819]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3315]              __var_24 := null;
[L3316]  COND FALSE  !(!(owner_s475 != null))
[L3320]              __var_25 := null;
[L3321]  COND FALSE  !(!(spender_s475 != null))
[L3325]              sum__allowances1[owner_s475] := sum__allowances1[owner_s475] - _allowances_ERC20[this][owner_s475][spender_s475];
[L3326]              _allowances_ERC20[this][owner_s475][spender_s475] := amount_s475;
[L3327]              sum__allowances1[owner_s475] := sum__allowances1[owner_s475] + _allowances_ERC20[this][owner_s475][spender_s475];
[L3328]              assert { :EventEmitted "Approval_ERC20" } true;
[L2819]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2820]  COND FALSE  !(revert)
[L2831]              __ret_0_ := true;
[L635]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L636]               assume !revert && gas >= 0;
[L5495]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5602]  RET         call CorralChoice_GOF(this);
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND TRUE   choice == 20
[L5459]              gas := gas - 21000;
[L5460]  COND FALSE  !(gas >= 0)
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:18:03,721 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:18:03,722 INFO  L82        PathProgramCache]: Analyzing trace with hash -1448256302, now seen corresponding path program 1 times
[2020-11-25 17:18:03,722 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:18:03,751 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:18:03,915 INFO  L134       CoverageAnalysis]: Checked inductivity of 109 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 109 trivial. 0 not checked.
[2020-11-25 17:18:03,915 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:18:03,916 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 17:18:03,916 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:18:03,916 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 17:18:03,916 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-11-25 17:18:03,916 INFO  L87              Difference]: Start difference. First operand 3339 states and 3693 transitions. cyclomatic complexity: 357 Second operand 14 states.
[2020-11-25 17:18:05,485 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:18:05,485 INFO  L93              Difference]: Finished difference Result 1963 states and 2166 transitions.
[2020-11-25 17:18:05,485 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 17:18:05,485 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1963 states and 2166 transitions.
[2020-11-25 17:18:05,488 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 17:18:05,488 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1963 states to 0 states and 0 transitions.
[2020-11-25 17:18:05,488 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 17:18:05,488 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 17:18:05,488 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 17:18:05,488 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:18:05,488 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 17:18:05,488 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 17:18:05,488 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 17:18:05,488 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 17:18:05,488 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 17:18:05,488 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 17:18:05,488 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 17:18:05,491 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:18:05 BasicIcfg
[2020-11-25 17:18:05,491 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 17:18:05,492 INFO  L168              Benchmark]: Toolchain (without parser) took 10200.26 ms. Allocated memory was 1.0 GB in the beginning and 2.1 GB in the end (delta: 1.1 GB). Free memory was 935.2 MB in the beginning and 1.8 GB in the end (delta: -913.7 MB). Peak memory consumption was 151.1 MB. Max. memory is 15.3 GB.
[2020-11-25 17:18:05,493 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 17:18:05,493 INFO  L168              Benchmark]: Boogie Preprocessor took 109.44 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 17:18:05,493 INFO  L168              Benchmark]: UtopiaSpecLang took 69.17 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 17:18:05,494 INFO  L168              Benchmark]: Boogie Printer took 18.34 ms. Allocated memory is still 1.0 GB. Free memory is still 913.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 17:18:05,494 INFO  L168              Benchmark]: RCFGBuilder took 811.97 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 763.4 MB in the end (delta: 150.3 MB). Peak memory consumption was 150.3 MB. Max. memory is 15.3 GB.
[2020-11-25 17:18:05,494 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.79 ms. Allocated memory is still 1.0 GB. Free memory was 763.4 MB in the beginning and 759.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 17:18:05,494 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1326.73 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 206.0 MB). Free memory was 759.8 MB in the beginning and 817.3 MB in the end (delta: -57.5 MB). Peak memory consumption was 153.7 MB. Max. memory is 15.3 GB.
[2020-11-25 17:18:05,495 INFO  L168              Benchmark]: BlockEncodingV2 took 177.54 ms. Allocated memory is still 1.2 GB. Free memory was 817.3 MB in the beginning and 736.2 MB in the end (delta: 81.2 MB). Peak memory consumption was 81.2 MB. Max. memory is 15.3 GB.
[2020-11-25 17:18:05,495 INFO  L168              Benchmark]: BuchiAutomizer took 7646.18 ms. Allocated memory was 1.2 GB in the beginning and 2.1 GB in the end (delta: 858.8 MB). Free memory was 736.2 MB in the beginning and 1.8 GB in the end (delta: -1.1 GB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 17:18:05,497 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5198 locations, 9335 edges
  - StatisticsResult: Encoded RCFG
    5026 locations, 8893 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 109.44 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 69.17 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 18.34 ms. Allocated memory is still 1.0 GB. Free memory is still 913.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 811.97 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 763.4 MB in the end (delta: 150.3 MB). Peak memory consumption was 150.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.79 ms. Allocated memory is still 1.0 GB. Free memory was 763.4 MB in the beginning and 759.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1326.73 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 206.0 MB). Free memory was 759.8 MB in the beginning and 817.3 MB in the end (delta: -57.5 MB). Peak memory consumption was 153.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 177.54 ms. Allocated memory is still 1.2 GB. Free memory was 817.3 MB in the beginning and 736.2 MB in the end (delta: 81.2 MB). Peak memory consumption was 81.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 7646.18 ms. Allocated memory was 1.2 GB in the beginning and 2.1 GB in the end (delta: 858.8 MB). Free memory was 736.2 MB in the beginning and 1.8 GB in the end (delta: -1.1 GB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2090 locations, 2871 edges
  - StatisticsResult: BuchiProgram size
    5198 locations, 9335 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic). 10 modules have a trivial ranking function, the largest among these consists of 17 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 7.6s and 11 iterations.  TraceHistogramMax:3. Analysis of lassos took 1.2s. Construction of modules took 4.0s. BÃ¼chi inclusion checks took 1.4s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 9 MinimizatonAttempts, 1417 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 3688 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 35736 SDtfs, 17272 SDslu, 84608 SDs, 0 SdLazy, 63877 SolverSat, 2813 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 4.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(fail_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
