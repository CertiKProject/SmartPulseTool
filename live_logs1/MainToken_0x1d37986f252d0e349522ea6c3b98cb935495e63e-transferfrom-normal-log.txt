This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:31:30,177 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:31:30,178 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:31:30,186 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:31:30,186 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:31:30,186 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:31:30,187 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:31:30,188 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:31:30,189 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:31:30,189 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:31:30,190 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:31:30,190 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:31:30,191 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:31:30,191 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:31:30,192 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:31:30,192 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:31:30,192 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:31:30,193 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:31:30,194 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:31:30,195 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:31:30,195 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:31:30,196 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:31:30,197 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:31:30,198 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:31:30,198 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:31:30,198 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:31:30,198 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:31:30,199 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:31:30,199 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:31:30,199 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:31:30,199 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:31:30,200 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:31:30,200 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:31:30,200 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:31:30,201 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:31:30,201 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:31:30,201 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:31:30,201 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:31:30,201 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:31:30,202 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:31:30,202 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:31:30,202 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:31:30,208 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:31:30,208 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:31:30,208 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:31:30,208 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:31:30,209 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:31:30,209 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:31:30,209 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:31:30,209 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:31:30,209 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:31:30,209 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:31:30,209 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:31:30,209 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:31:30,209 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:31:30,209 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:31:30,209 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:31:30,209 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:31:30,209 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:31:30,209 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:31:30,210 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:31:30,210 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:31:30,210 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:31:30,210 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:31:30,210 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:31:30,210 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:31:30,210 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:31:30,210 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:31:30,228 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:31:30,240 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:31:30,243 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:31:30,244 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:31:30,244 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:31:30,245 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl
[2020-11-24 21:31:30,245 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl'
[2020-11-24 21:31:30,381 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:31:30,383 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:31:30,383 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:31:30,383 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:31:30,383 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:31:30,399 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:31:30" (1/1) ...
[2020-11-24 21:31:30,401 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:31:30" (1/1) ...
[2020-11-24 21:31:30,444 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:31:30" (1/1) ...
[2020-11-24 21:31:30,445 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:31:30" (1/1) ...
[2020-11-24 21:31:30,484 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:31:30" (1/1) ...
[2020-11-24 21:31:30,510 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:31:30" (1/1) ...
[2020-11-24 21:31:30,527 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:31:30" (1/1) ...
[2020-11-24 21:31:30,551 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:31:30,552 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:31:30,552 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:31:30,554 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:31:30,557 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:31:30" (1/1) ...
[2020-11-24 21:31:30,587 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MainToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_BasicToken[this][from] && value <= allowed_StandardToken[this][from][msg.sender] && balances_BasicToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transferFrom(from, to, value), return == true && balances_BasicToken[this][from] == old(balances_BasicToken[this][from]) - value && balances_BasicToken[this][to] == old(balances_BasicToken[this][to]) + value && allowed_StandardToken[this][from][msg.sender] == old(allowed_StandardToken[this][from][msg.sender]) - value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1]) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:31:30,593 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MainToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_BasicToken[this][from] && value <= allowed_StandardToken[this][from][msg.sender] && balances_BasicToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transferFrom(from, to, value), return == true && balances_BasicToken[this][from] == old(balances_BasicToken[this][from]) - value && balances_BasicToken[this][to] == old(balances_BasicToken[this][to]) + value && allowed_StandardToken[this][from][msg.sender] == old(allowed_StandardToken[this][from][msg.sender]) - value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1]) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:31:30,601 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MainToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_BasicToken[this][from] && value <= allowed_StandardToken[this][from][msg.sender] && balances_BasicToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transferFrom(from, to, value), return == true && balances_BasicToken[this][from] == old(balances_BasicToken[this][from]) - value && balances_BasicToken[this][to] == old(balances_BasicToken[this][to]) + value && allowed_StandardToken[this][from][msg.sender] == old(allowed_StandardToken[this][from][msg.sender]) - value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1]) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:31:30,614 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=_from_s1551 && p1!=_to_s1551 ) && ( p2!=_from_s1551 || p3!=msg.sender ) ) && _from_s1551!=_to_s1551 ) && _value_s1551<=balances_BasicToken[this][_from_s1551] ) && _value_s1551<=allowed_StandardToken[this][_from_s1551][msg.sender] ) && ( balances_BasicToken[this][_to_s1551] + _value_s1551 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _value_s1551>=0 ) && _value_s1551<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s1551]>=0 ) && balances_BasicToken[this][_to_s1551]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_from_s1551]>=0 ) && balances_BasicToken[this][_from_s1551]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_StandardToken[this][_from_s1551][msg.sender]>=0 ) && allowed_StandardToken[this][_from_s1551][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 21:31:30,618 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( _success_s1551==true && balances_BasicToken[this][_from_s1551]==( ( old(balances_BasicToken[this][_from_s1551]) ) - _value_s1551 ) ) && balances_BasicToken[this][_to_s1551]==( ( old(balances_BasicToken[this][_to_s1551]) ) + _value_s1551 ) ) && allowed_StandardToken[this][_from_s1551][msg.sender]==( ( old(allowed_StandardToken[this][_from_s1551][msg.sender]) ) - _value_s1551 ) ) && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this][p1]==( old(balances_BasicToken[this][p1]) ) ) && allowed_StandardToken[this][p2][p3]==( old(allowed_StandardToken[this][p2][p3]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_success_s1551,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_MainToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]]
[2020-11-24 21:31:30,626 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MainToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_BasicToken[this][from] && value <= allowed_StandardToken[this][from][msg.sender] && balances_BasicToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transferFrom(from, to, value), return == true && balances_BasicToken[this][from] == old(balances_BasicToken[this][from]) - value && balances_BasicToken[this][to] == old(balances_BasicToken[this][to]) + value && allowed_StandardToken[this][from][msg.sender] == old(allowed_StandardToken[this][from][msg.sender]) - value && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1]) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:31:30,626 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_MainToken0) ==> ( <>AP(success_transferFrom_MainToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:31:30,648 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:31:30 PropertyContainer
[2020-11-24 21:31:30,648 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:31:30,648 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:31:30,648 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:31:30,648 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:31:30,649 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:31:30" (1/2) ...
[2020-11-24 21:31:30,650 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:31:30,650 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:31:30,680 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:31:30" (2/2) ...
[2020-11-24 21:31:30,681 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:31:30,681 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:31:30,681 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:31:30,681 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:31:30,682 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:31:30" (1/2) ...
[2020-11-24 21:31:30,736 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:31:30,736 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:31:30,736 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:31:30,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:31:30,736 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:31:30,736 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:31:30,736 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:31:30,736 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:31:30,737 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:31:30,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:31:30,737 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:31:30,737 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:31:30,737 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:31:30,737 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:31:30,737 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:31:30,737 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:31:30,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:31:30,738 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:31:30,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:31:30,738 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:31:30,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:31:30,738 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:31:30,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:31:30,738 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:31:30,739 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:31:30,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:31:30,739 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:31:30,739 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:31:30,739 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:31:30,739 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:31:30,739 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:31:30,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:31:30,739 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:31:30,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:31:30,740 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:31:30,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:31:30,740 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:31:30,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:31:30,740 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:31:30,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:31:30,740 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:31:30,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:31:30,740 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:31:30,740 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:31:30,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:31:30,741 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:31:30,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:31:30,741 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:31:30,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:31:30,741 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:31:30,741 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:31:30,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:31:30,741 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:31:30,741 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:31:30,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:31:30,741 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:31:30,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:31:30,742 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:31:30,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:31:30,742 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:31:30,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:31:30,742 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:31:30,742 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:31:30,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:31:30,742 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:31:30,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:31:30,742 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:31:30,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:31:30,743 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:31:30,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:31:30,743 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:31:30,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:31:30,743 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:31:30,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:31:30,743 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:31:30,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:31:30,743 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:31:30,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:31:30,744 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:31:30,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:31:30,744 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:31:30,744 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:31:30,744 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:31:30,744 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:31:30,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:31:30,744 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:31:30,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:31:30,745 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:31:30,745 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:31:30,745 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:31:30,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:31:30,745 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:31:30,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:31:30,745 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:31:30,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:31:30,745 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:31:30,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:31:30,745 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:31:30,746 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:31:30,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:31:30,746 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:31:30,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:31:30,746 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:31:30,746 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:31:30,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:31:30,746 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:31:30,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:31:30,746 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:31:30,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:31:30,747 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:31:30,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:31:30,747 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:31:30,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:31:30,747 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:31:30,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:31:30,747 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:31:30,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:31:30,747 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:31:30,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:31:30,748 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:31:30,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:31:30,748 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:31:30,748 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:31:30,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:31:30,748 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:31:30,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:31:30,748 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:31:30,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:31:30,748 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:31:30,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:31:30,749 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:31:30,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:31:30,749 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:31:30,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:31:30,749 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:31:30,749 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:31:30,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:31:30,749 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:31:30,750 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:31:30,750 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:31:30,750 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:31:30,750 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:31:30,750 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:31:30,750 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:31:30,750 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:31:30,750 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:31:30,750 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:31:30,751 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:31:30,751 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:31:30,751 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:31:30,751 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:31:30,751 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:31:30,751 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:31:30,751 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:31:30,751 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:31:30,751 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:31:30,751 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:31:30,752 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:31:30,752 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:31:30,752 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:31:30,752 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:31:30,752 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:31:30,752 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:31:30,752 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:31:30,752 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:31:30,752 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:31:30,752 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:31:30,753 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:31:30,753 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:31:30,753 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:31:30,753 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:31:30,753 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:31:30,753 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:31:30,753 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:31:30,753 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:31:30,753 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:31:30,753 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:31:30,753 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:31:30,753 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:31:30,754 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:31:30,754 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:31:30,754 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:31:30,754 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:31:30,754 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:31:30,754 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:31:30,754 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:31:30,754 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:31:30,754 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:31:30,754 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:31:30,754 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:31:30,754 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:31:30,755 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:31:30,755 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:31:30,755 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:31:30,755 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:31:30,755 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:31:30,755 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:31:30,755 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:31:30,755 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:31:30,755 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:31:30,755 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:31:30,755 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:31:30,755 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:31:30,756 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:31:30,756 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:31:30,756 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:31:30,756 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:31:30,756 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:31:30,756 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:31:30,756 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:31:30,756 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:31:30,756 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:31:30,756 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:31:30,756 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:31:30,756 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:31:30,757 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:31:30,757 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:31:30,757 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:31:30,757 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:31:30,757 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:31:30,757 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:31:30,757 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:31:30,757 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:31:30,757 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:31:30,757 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:31:30,757 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:31:30,757 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:31:30,758 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:31:30,758 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:31:30,758 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:31:30,758 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:31:30,758 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:31:30,758 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:31:30,758 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:31:30,758 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:31:30,758 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:31:30,758 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:31:30,758 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:31:30,758 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:31:30,759 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:31:30,759 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:31:30,759 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:31:30,759 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:31:30,759 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:31:30,759 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:31:30,759 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:31:30,759 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:31:30,759 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:31:30,759 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:31:30,759 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:31:30,759 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:31:30,760 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:31:30,760 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:31:30,760 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:31:30,760 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:31:30,760 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:31:30,760 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:31:30,760 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:31:30,760 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:31:30,760 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:31:30,760 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:31:30,760 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:31:30,760 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:31:30,761 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:31:30,761 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:31:30,761 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:31:30,761 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:31:30,761 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:31:30,761 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:31:30,761 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:31:30,761 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:31:30,761 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:31:30,761 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:31:30,761 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:31:30,761 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:31:30,762 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:31:30,762 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:31:30,762 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:31:30,762 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:31:30,762 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:31:30,762 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:31:30,762 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:31:30,762 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:31:30,762 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:31:30,762 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:31:30,762 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:31:30,762 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:31:30,763 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:31:30,763 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:31:30,763 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:31:30,763 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:31:30,763 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:31:30,763 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:31:30,763 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:31:30,763 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:31:30,763 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:31:30,763 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:31:30,763 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:31:30,764 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:31:30,764 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:31:30,764 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:31:30,764 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:31:30,764 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:31:30,764 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:31:30,764 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:31:30,764 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:31:30,764 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:31:30,764 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:31:30,764 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:31:30,764 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:31:30,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:31:30,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:31:30,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:31:30,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:31:30,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:31:30,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:31:30,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:31:30,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:31:30,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:31:30,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:31:30,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:31:30,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:31:30,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:31:30,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:31:30,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:31:30,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:31:30,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:31:30,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:31:30,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:31:30,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:31:30,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:31:30,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:31:30,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:31:30,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:31:30,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:31:30,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:31:30,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:31:30,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:31:30,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:31:30,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:31:30,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:31:30,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:31:30,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:31:30,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:31:30,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:31:30,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:31:30,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:31:30,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:31:30,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:31:30,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:31:30,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:31:30,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:31:30,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:31:30,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:31:30,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:31:30,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:31:30,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:31:30,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:31:30,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:31:30,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:31:30,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:31:30,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:31:30,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:31:30,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:31:30,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:31:30,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:31:30,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:31:30,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:31:30,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:31:30,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:31:30,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:31:30,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:31:30,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:31:30,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:31:30,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:31:30,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:31:30,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:31:30,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:31:30,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:31:30,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:31:30,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:31:30,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:31:30,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:31:30,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:31:30,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:31:30,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:31:30,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:31:30,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:31:30,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:31:30,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:31:30,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:31:30,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:31:30,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:31:30,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:31:30,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:31:30,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:31:30,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:31:30,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:31:30,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:31:30,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:31:30,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:31:30,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:31:30,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:31:30,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:31:30,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:31:30,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:31:30,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:31:30,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:31:30,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:31:30,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:31:30,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:31:30,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:31:30,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:31:30,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:31:30,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:31:30,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:31:30,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:31:30,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:31:30,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:31:30,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:31:30,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:31:30,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:31:30,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:31:30,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:31:30,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:31:30,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:31:30,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:31:30,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:31:30,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:31:30,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:31:30,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:31:30,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:31:30,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:31:30,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:31:30,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:31:30,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:31:30,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:31:30,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:31:30,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:31:30,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:31:30,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:31:30,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:31:30,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:31:30,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:31:30,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:31:30,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:31:30,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:31:30,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:31:30,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:31:30,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:31:30,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:31:30,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:31:30,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:31:30,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:31:30,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:31:30,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:31:30,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:31:30,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:31:30,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:31:30,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:31:30,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:31:30,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:31:30,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:31:30,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:31:30,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:31:30,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:31:30,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:31:30,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:31:30,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:31:30,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:31:30,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:31:30,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:31:30,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:31:30,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:31:30,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:31:30,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:31:30,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:31:30,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:31:30,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:31:30,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:31:30,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:31:30,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:31:30,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:31:30,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:31:30,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:31:30,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:31:30,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:31:30,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:31:30,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:31:30,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:31:30,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:31:30,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:31:30,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:31:30,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:31:30,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:31:30,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:31:30,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:31:30,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:31:30,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:31:30,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:31:30,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:31:30,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:31:30,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:31:30,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:31:30,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:31:30,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:31:30,779 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:31:30,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:31:31,829 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:31:31,829 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:31:31,829 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:31:31,982 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:31:32,328 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:31:32,328 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:31:32,333 INFO  L202        PluginConnector]: Adding new model MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:31:32 BoogieIcfgContainer
[2020-11-24 21:31:32,333 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:31:30" (2/2) ...
[2020-11-24 21:31:32,333 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:31:32,334 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@23b26d70 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:31:32, skipping insertion in model container
[2020-11-24 21:31:32,334 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:31:32,334 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:31:32,334 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:31:32,335 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:31:32,335 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:31:30" (1/3) ...
[2020-11-24 21:31:32,336 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@502c0bd6 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:31:32, skipping insertion in model container
[2020-11-24 21:31:32,336 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:31:30" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:31:32,371 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:31:32 NWAContainer
[2020-11-24 21:31:32,372 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:31:32,372 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:31:32,372 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:31:32,373 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:31:32,373 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:31:32" (3/4) ...
[2020-11-24 21:31:32,374 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@124328af and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:31:32, skipping insertion in model container
[2020-11-24 21:31:32,374 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:31:32" (4/4) ...
[2020-11-24 21:31:32,377 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:31:32,386 INFO  L110   BuchiProductObserver]: Initial RCFG 5261 locations, 7415 edges
[2020-11-24 21:31:32,386 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:31:32,400 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:31:36,559 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:31:36,575 INFO  L110   BuchiProductObserver]: BuchiProgram size 13186 locations, 24274 edges
[2020-11-24 21:31:36,575 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:31:36 BoogieIcfgContainer
[2020-11-24 21:31:36,575 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:31:36,575 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:31:36,575 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:31:36,577 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:31:36,577 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:31:36" (1/1) ...
[2020-11-24 21:31:36,815 INFO  L313           BlockEncoder]: Initial Icfg 13186 locations, 24274 edges
[2020-11-24 21:31:36,815 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:31:36,816 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:31:36,816 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:31:36,817 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:31:36,845 INFO  L70    emoveInfeasibleEdges]: Removed 303 edges and 29 locations because of local infeasibility
[2020-11-24 21:31:36,868 INFO  L70        RemoveSinkStates]: Removed 158 edges and 105 locations by removing sink states
[2020-11-24 21:31:36,901 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:31:36,909 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:31:36,916 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:31:36,917 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:31:36,922 INFO  L313           BlockEncoder]: Encoded RCFG 12984 locations, 23712 edges
[2020-11-24 21:31:36,923 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:31:36 BasicIcfg
[2020-11-24 21:31:36,923 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:31:36,923 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:31:36,923 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:31:36,925 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:31:36,925 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:31:36,925 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:31:30" (1/6) ...
[2020-11-24 21:31:36,926 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e7e17d6 and model type MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:31:36, skipping insertion in model container
[2020-11-24 21:31:36,926 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:31:36,926 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:31:30" (2/6) ...
[2020-11-24 21:31:36,927 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e7e17d6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:31:36, skipping insertion in model container
[2020-11-24 21:31:36,927 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:31:36,927 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:31:32" (3/6) ...
[2020-11-24 21:31:36,927 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e7e17d6 and model type MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:31:36, skipping insertion in model container
[2020-11-24 21:31:36,927 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:31:36,927 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:31:32" (4/6) ...
[2020-11-24 21:31:36,927 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e7e17d6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:31:36, skipping insertion in model container
[2020-11-24 21:31:36,927 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:31:36,927 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:31:36" (5/6) ...
[2020-11-24 21:31:36,927 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e7e17d6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:31:36, skipping insertion in model container
[2020-11-24 21:31:36,928 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:31:36,928 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:31:36" (6/6) ...
[2020-11-24 21:31:36,929 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transferfrom-normal.bpl_BEv2
[2020-11-24 21:31:36,963 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:31:36,963 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:31:36,963 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:31:36,963 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:31:36,963 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:31:36,963 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:31:36,964 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:31:36,964 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:31:36,964 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:31:37,114 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12984 states.
[2020-11-24 21:31:37,208 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:31:37,208 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:31:37,208 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:31:37,219 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:31:37,219 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:31:37,219 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:31:37,219 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12984 states.
[2020-11-24 21:31:37,278 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:31:37,278 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:31:37,278 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:31:37,280 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:31:37,280 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14379]              assume null == 0;
[L14380]  CALL        call this := FreshRefGenerator__success();
[L6397]               havoc newRef;
[L6398]               assume Alloc[newRef] == false;
[L6399]               Alloc[newRef] := true;
[L6400]               assume newRef != null;
[L14380]  RET         call this := FreshRefGenerator__success();
[L14381]              assume now >= 0;
[L14382]              assume DType[this] == MainToken;
[L14383]              assume msgvalue_MSG == 0;
[L14384]              gas := gas - 53000;
[L14385]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4184]               havoc __exception;
[L4185]               revert := false;
[L4186]   COND FALSE  !(__exception)
[L4223]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8984]               assume msgsender_MSG != null;
[L8985]               Balance[this] := 0;
[L8986]               TOKEN_DECIMALS_Consts[this] := 18;
[L8987]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8988]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8989]               TOKEN_NAME_Consts[this] := -1051245219;
[L8990]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8991]               PAUSED_Consts[this] := false;
[L8992]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8994]               CONTINUE_MINTING_Consts[this] := true;
[L9008]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9009]   COND FALSE  !(revert)
[L9206]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9207]   COND TRUE   revert
[L4223]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4224]               assume !revert && gas >= 0;
[L14385]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14386]              assume !revert && gas >= 0;

Loop:
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND TRUE   choice == 38
[L14132]              gas := gas - 21000;
[L14133]  COND FALSE  !(gas >= 0)
[L14389]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:31:37,299 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:31:37,300 INFO  L82        PathProgramCache]: Analyzing trace with hash 1741980812, now seen corresponding path program 1 times
[2020-11-24 21:31:37,308 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:31:37,332 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:31:37,369 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:31:37,767 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:31:37,768 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:31:37,771 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:31:37,779 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:31:37,780 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:31:37,781 INFO  L87              Difference]: Start difference. First operand 12984 states. Second operand 3 states.
[2020-11-24 21:31:38,288 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:31:38,288 INFO  L93              Difference]: Finished difference Result 8083 states and 9484 transitions.
[2020-11-24 21:31:38,288 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:31:38,289 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8083 states and 9484 transitions.
[2020-11-24 21:31:38,327 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:31:38,369 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8083 states to 8079 states and 9476 transitions.
[2020-11-24 21:31:38,370 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 21:31:38,374 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1821
[2020-11-24 21:31:38,374 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8079 states and 9476 transitions.
[2020-11-24 21:31:38,391 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:31:38,391 INFO  L728         BuchiCegarLoop]: Abstraction has 8079 states and 9476 transitions.
[2020-11-24 21:31:38,412 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8079 states and 9476 transitions.
[2020-11-24 21:31:38,509 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8079 to 8079.
[2020-11-24 21:31:38,510 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8079 states.
[2020-11-24 21:31:38,523 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8079 states to 8079 states and 9476 transitions.
[2020-11-24 21:31:38,524 INFO  L751         BuchiCegarLoop]: Abstraction has 8079 states and 9476 transitions.
[2020-11-24 21:31:38,524 INFO  L631         BuchiCegarLoop]: Abstraction has 8079 states and 9476 transitions.
[2020-11-24 21:31:38,524 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:31:38,524 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8079 states and 9476 transitions.
[2020-11-24 21:31:38,538 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:31:38,538 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:31:38,538 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:31:38,540 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:31:38,540 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14379]              assume null == 0;
[L14380]  CALL        call this := FreshRefGenerator__success();
[L6397]               havoc newRef;
[L6398]               assume Alloc[newRef] == false;
[L6399]               Alloc[newRef] := true;
[L6400]               assume newRef != null;
[L14380]  RET         call this := FreshRefGenerator__success();
[L14381]              assume now >= 0;
[L14382]              assume DType[this] == MainToken;
[L14383]              assume msgvalue_MSG == 0;
[L14384]              gas := gas - 53000;
[L14385]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4184]               havoc __exception;
[L4185]               revert := false;
[L4186]   COND FALSE  !(__exception)
[L4223]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8984]               assume msgsender_MSG != null;
[L8985]               Balance[this] := 0;
[L8986]               TOKEN_DECIMALS_Consts[this] := 18;
[L8987]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8988]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8989]               TOKEN_NAME_Consts[this] := -1051245219;
[L8990]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8991]               PAUSED_Consts[this] := false;
[L8992]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8994]               CONTINUE_MINTING_Consts[this] := true;
[L9008]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9009]   COND FALSE  !(revert)
[L9206]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9207]   COND TRUE   revert
[L4223]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4224]               assume !revert && gas >= 0;
[L14385]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14386]              assume !revert && gas >= 0;
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND TRUE   choice == 34
[L14157]              gas := gas - 21000;
[L14158]  COND TRUE   gas >= 0
[L14159]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14160]              assume msgvalue_MSG == 0;
[L14161]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4516]               havoc __exception;
[L4517]               revert := false;
[L4518]   COND FALSE  !(__exception)
[L4555]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9316]   COND TRUE   !!paused_Pausable[this]
[L9317]               revert := true;
[L4555]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4556]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((_success_s1551 == true && balances_BasicToken[this][_from_s1551] == old(balances_BasicToken[this][_from_s1551]) - _value_s1551) && balances_BasicToken[this][_to_s1551] == old(balances_BasicToken[this][_to_s1551]) + _value_s1551) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] == old(allowed_StandardToken[this][_from_s1551][msgsender_MSG]) - _value_s1551) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1])) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14161]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14389]  RET         call CorralChoice_MainToken(this);

Loop:
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND TRUE   choice == 34
[L14157]              gas := gas - 21000;
[L14158]  COND TRUE   gas >= 0
[L14159]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14160]              assume msgvalue_MSG == 0;
[L14161]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4516]               havoc __exception;
[L4517]               revert := false;
[L4518]   COND FALSE  !(__exception)
[L4555]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9316]   COND TRUE   !!paused_Pausable[this]
[L9317]               revert := true;
[L4555]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4556]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((_success_s1551 == true && balances_BasicToken[this][_from_s1551] == old(balances_BasicToken[this][_from_s1551]) - _value_s1551) && balances_BasicToken[this][_to_s1551] == old(balances_BasicToken[this][_to_s1551]) + _value_s1551) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] == old(allowed_StandardToken[this][_from_s1551][msgsender_MSG]) - _value_s1551) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1])) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14161]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14389]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:31:38,544 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:31:38,544 INFO  L82        PathProgramCache]: Analyzing trace with hash 854712081, now seen corresponding path program 1 times
[2020-11-24 21:31:38,545 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:31:38,556 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:31:38,584 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:31:38,585 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:31:38,585 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:31:38,586 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:31:38,586 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:31:38,586 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:31:38,586 INFO  L87              Difference]: Start difference. First operand 8079 states and 9476 transitions. cyclomatic complexity: 1415 Second operand 3 states.
[2020-11-24 21:31:38,793 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:31:38,793 INFO  L93              Difference]: Finished difference Result 9529 states and 10916 transitions.
[2020-11-24 21:31:38,793 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:31:38,794 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9529 states and 10916 transitions.
[2020-11-24 21:31:38,819 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:31:38,862 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9529 states to 9529 states and 10916 transitions.
[2020-11-24 21:31:38,862 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2244
[2020-11-24 21:31:38,864 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2244
[2020-11-24 21:31:38,864 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9529 states and 10916 transitions.
[2020-11-24 21:31:38,875 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:31:38,876 INFO  L728         BuchiCegarLoop]: Abstraction has 9529 states and 10916 transitions.
[2020-11-24 21:31:38,887 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9529 states and 10916 transitions.
[2020-11-24 21:31:38,978 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9529 to 8439.
[2020-11-24 21:31:38,979 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8439 states.
[2020-11-24 21:31:38,989 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8439 states to 8439 states and 9562 transitions.
[2020-11-24 21:31:38,990 INFO  L751         BuchiCegarLoop]: Abstraction has 8439 states and 9562 transitions.
[2020-11-24 21:31:38,990 INFO  L631         BuchiCegarLoop]: Abstraction has 8439 states and 9562 transitions.
[2020-11-24 21:31:38,990 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:31:38,990 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8439 states and 9562 transitions.
[2020-11-24 21:31:39,002 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:31:39,002 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:31:39,003 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:31:39,009 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:31:39,010 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14379]              assume null == 0;
[L14380]  CALL        call this := FreshRefGenerator__success();
[L6397]               havoc newRef;
[L6398]               assume Alloc[newRef] == false;
[L6399]               Alloc[newRef] := true;
[L6400]               assume newRef != null;
[L14380]  RET         call this := FreshRefGenerator__success();
[L14381]              assume now >= 0;
[L14382]              assume DType[this] == MainToken;
[L14383]              assume msgvalue_MSG == 0;
[L14384]              gas := gas - 53000;
[L14385]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4184]               havoc __exception;
[L4185]               revert := false;
[L4186]   COND FALSE  !(__exception)
[L4223]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8984]               assume msgsender_MSG != null;
[L8985]               Balance[this] := 0;
[L8986]               TOKEN_DECIMALS_Consts[this] := 18;
[L8987]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8988]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8989]               TOKEN_NAME_Consts[this] := -1051245219;
[L8990]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8991]               PAUSED_Consts[this] := false;
[L8992]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8994]               CONTINUE_MINTING_Consts[this] := true;
[L9008]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9009]   COND FALSE  !(revert)
[L9206]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9207]   COND FALSE  !(revert)
[L9210]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L9210]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9211]   COND FALSE  !(revert)
[L9214]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L9214]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9215]   COND FALSE  !(revert)
[L9218]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L9218]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9219]   COND FALSE  !(revert)
[L9222]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L9222]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9223]   COND FALSE  !(revert)
[L9226]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L9226]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9227]   COND FALSE  !(revert)
[L9230]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L9230]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9231]   COND FALSE  !(revert)
[L9234]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L9234]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9235]   COND FALSE  !(revert)
[L9238]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8793]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8794]   COND FALSE  !(revert)
[L8797]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L8797]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8798]   COND FALSE  !(revert)
[L8801]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8801]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8802]   COND FALSE  !(revert)
[L8805]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L8805]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8806]   COND FALSE  !(revert)
[L8809]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L8809]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8810]   COND FALSE  !(revert)
[L8813]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8813]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]   COND FALSE  !(revert)
[L8817]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L8817]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8818]   COND FALSE  !(revert)
[L8821]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8750]               assume msgsender_MSG != null;
[L8751]               Balance[this] := 0;
[L8821]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8822]   COND FALSE  !(revert)
[L9238]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9239]   COND FALSE  !(revert)
[L9242]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8537]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8538]   COND FALSE  !(revert)
[L8541]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8541]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8542]   COND FALSE  !(revert)
[L8545]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8514]               assume msgsender_MSG != null;
[L8515]               Balance[this] := 0;
[L8545]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8546]   COND FALSE  !(revert)
[L9242]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND FALSE  !(revert)
[L9246]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8663]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8664]   COND FALSE  !(revert)
[L8667]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8643]               assume msgsender_MSG != null;
[L8644]               Balance[this] := 0;
[L8645]               paused_Pausable[this] := false;
[L8667]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8668]   COND FALSE  !(revert)
[L9246]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9247]   COND FALSE  !(revert)
[L9250]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]               assume msgsender_MSG != null;
[L9135]               Balance[this] := 0;
[L9136]               initialized_MainToken[this] := false;
[L9138]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND TRUE   !!initialized_MainToken[this]
[L9406]               revert := true;
[L9138]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND TRUE   revert
[L9250]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L4223]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4224]               assume !revert && gas >= 0;
[L14385]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14386]              assume !revert && gas >= 0;
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND TRUE   choice == 34
[L14157]              gas := gas - 21000;
[L14158]  COND TRUE   gas >= 0
[L14159]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14160]              assume msgvalue_MSG == 0;
[L14161]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4516]               havoc __exception;
[L4517]               revert := false;
[L4518]   COND FALSE  !(__exception)
[L4555]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9316]   COND TRUE   !!paused_Pausable[this]
[L9317]               revert := true;
[L4555]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4556]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((_success_s1551 == true && balances_BasicToken[this][_from_s1551] == old(balances_BasicToken[this][_from_s1551]) - _value_s1551) && balances_BasicToken[this][_to_s1551] == old(balances_BasicToken[this][_to_s1551]) + _value_s1551) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] == old(allowed_StandardToken[this][_from_s1551][msgsender_MSG]) - _value_s1551) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1])) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14161]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14389]  RET         call CorralChoice_MainToken(this);

Loop:
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND TRUE   choice == 34
[L14157]              gas := gas - 21000;
[L14158]  COND TRUE   gas >= 0
[L14159]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14160]              assume msgvalue_MSG == 0;
[L14161]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4516]               havoc __exception;
[L4517]               revert := false;
[L4518]   COND FALSE  !(__exception)
[L4555]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9316]   COND TRUE   !!paused_Pausable[this]
[L9317]               revert := true;
[L4555]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4556]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((_success_s1551 == true && balances_BasicToken[this][_from_s1551] == old(balances_BasicToken[this][_from_s1551]) - _value_s1551) && balances_BasicToken[this][_to_s1551] == old(balances_BasicToken[this][_to_s1551]) + _value_s1551) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] == old(allowed_StandardToken[this][_from_s1551][msgsender_MSG]) - _value_s1551) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this][p1] == old(balances_BasicToken[this][p1])) && allowed_StandardToken[this][p2][p3] == old(allowed_StandardToken[this][p2][p3])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14161]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14389]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:31:39,020 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:31:39,020 INFO  L82        PathProgramCache]: Analyzing trace with hash 1675789713, now seen corresponding path program 1 times
[2020-11-24 21:31:39,021 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:31:39,070 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:31:39,666 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:31:39,666 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:31:39,666 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:31:39,667 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:31:39,667 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:31:39,667 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:31:39,667 INFO  L87              Difference]: Start difference. First operand 8439 states and 9562 transitions. cyclomatic complexity: 1141 Second operand 3 states.
[2020-11-24 21:31:39,798 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:31:39,798 INFO  L93              Difference]: Finished difference Result 9529 states and 10762 transitions.
[2020-11-24 21:31:39,798 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:31:39,798 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9529 states and 10762 transitions.
[2020-11-24 21:31:39,820 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:31:39,852 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9529 states to 9189 states and 10366 transitions.
[2020-11-24 21:31:39,852 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2124
[2020-11-24 21:31:39,853 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2153
[2020-11-24 21:31:39,853 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9189 states and 10366 transitions.
[2020-11-24 21:31:39,862 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:31:39,862 INFO  L728         BuchiCegarLoop]: Abstraction has 9189 states and 10366 transitions.
[2020-11-24 21:31:39,872 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9189 states and 10366 transitions.
[2020-11-24 21:31:39,941 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9189 to 8205.
[2020-11-24 21:31:39,942 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8205 states.
[2020-11-24 21:31:39,952 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8205 states to 8205 states and 9118 transitions.
[2020-11-24 21:31:39,952 INFO  L751         BuchiCegarLoop]: Abstraction has 8205 states and 9118 transitions.
[2020-11-24 21:31:39,952 INFO  L631         BuchiCegarLoop]: Abstraction has 8205 states and 9118 transitions.
[2020-11-24 21:31:39,952 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:31:39,952 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8205 states and 9118 transitions.
[2020-11-24 21:31:39,963 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:31:39,963 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:31:39,963 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:31:39,967 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:31:39,967 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14379]              assume null == 0;
[L14380]  CALL        call this := FreshRefGenerator__success();
[L6397]               havoc newRef;
[L6398]               assume Alloc[newRef] == false;
[L6399]               Alloc[newRef] := true;
[L6400]               assume newRef != null;
[L14380]  RET         call this := FreshRefGenerator__success();
[L14381]              assume now >= 0;
[L14382]              assume DType[this] == MainToken;
[L14383]              assume msgvalue_MSG == 0;
[L14384]              gas := gas - 53000;
[L14385]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4184]               havoc __exception;
[L4185]               revert := false;
[L4186]   COND FALSE  !(__exception)
[L4223]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8984]               assume msgsender_MSG != null;
[L8985]               Balance[this] := 0;
[L8986]               TOKEN_DECIMALS_Consts[this] := 18;
[L8987]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8988]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8989]               TOKEN_NAME_Consts[this] := -1051245219;
[L8990]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8991]               PAUSED_Consts[this] := false;
[L8992]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8994]               CONTINUE_MINTING_Consts[this] := true;
[L9008]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9009]   COND FALSE  !(revert)
[L9206]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9207]   COND FALSE  !(revert)
[L9210]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L9210]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9211]   COND FALSE  !(revert)
[L9214]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L9214]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9215]   COND FALSE  !(revert)
[L9218]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L9218]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9219]   COND FALSE  !(revert)
[L9222]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L9222]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9223]   COND FALSE  !(revert)
[L9226]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L9226]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9227]   COND FALSE  !(revert)
[L9230]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L9230]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9231]   COND FALSE  !(revert)
[L9234]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L9234]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9235]   COND FALSE  !(revert)
[L9238]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8793]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8794]   COND FALSE  !(revert)
[L8797]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L8797]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8798]   COND FALSE  !(revert)
[L8801]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8801]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8802]   COND FALSE  !(revert)
[L8805]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L8805]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8806]   COND FALSE  !(revert)
[L8809]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L8809]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8810]   COND FALSE  !(revert)
[L8813]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8813]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]   COND FALSE  !(revert)
[L8817]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L8817]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8818]   COND FALSE  !(revert)
[L8821]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8750]               assume msgsender_MSG != null;
[L8751]               Balance[this] := 0;
[L8821]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8822]   COND FALSE  !(revert)
[L9238]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9239]   COND FALSE  !(revert)
[L9242]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8537]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8538]   COND FALSE  !(revert)
[L8541]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8541]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8542]   COND FALSE  !(revert)
[L8545]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8514]               assume msgsender_MSG != null;
[L8515]               Balance[this] := 0;
[L8545]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8546]   COND FALSE  !(revert)
[L9242]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND FALSE  !(revert)
[L9246]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8663]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8664]   COND FALSE  !(revert)
[L8667]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8643]               assume msgsender_MSG != null;
[L8644]               Balance[this] := 0;
[L8645]               paused_Pausable[this] := false;
[L8667]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8668]   COND FALSE  !(revert)
[L9246]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9247]   COND FALSE  !(revert)
[L9250]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]               assume msgsender_MSG != null;
[L9135]               Balance[this] := 0;
[L9136]               initialized_MainToken[this] := false;
[L9138]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!initialized_MainToken[this])
[L9409]               initialized_MainToken[this] := true;
[L9410]   COND FALSE  !(PAUSED_Consts[this])
[L9420]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9430]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9138]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   COND TRUE   DType[this] == MainToken
[L9143]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7056]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12333]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7056]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   COND FALSE  !(DType[this] == MainToken)
[L7065]   COND TRUE   DType[this] == FreezableMintableToken
[L7066]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7104]               __var_11 := null;
[L7105]   COND FALSE  !(!(_newOwner_s581 != null))
[L7109]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7110]               owner_Ownable[this] := _newOwner_s581;
[L7066]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7067]   COND FALSE  !(revert)
[L9143]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9144]   COND FALSE  !(revert)
[L9250]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L4223]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4224]               assume !revert && gas >= 0;
[L14385]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14386]              assume !revert && gas >= 0;
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND TRUE   choice == 34
[L14157]              gas := gas - 21000;
[L14158]  COND TRUE   gas >= 0
[L14159]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14160]              assume msgvalue_MSG == 0;
[L14161]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4516]               havoc __exception;
[L4517]               revert := false;
[L4518]   COND TRUE   __exception
[L4519]               __tmp__Balance := Balance;
[L4520]               __tmp__DType := DType;
[L4521]               __tmp__Alloc := Alloc;
[L4522]               __tmp__balance_ADDR := balance_ADDR;
[L4523]               __tmp__M_Ref_int := M_Ref_int;
[L4524]               __tmp__sum_balances0 := sum_balances0;
[L4525]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4526]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4527]               __tmp__sum_allowed1 := sum_allowed1;
[L4528]               __tmp__M_int_int := M_int_int;
[L4529]               __tmp__sum_chains2 := sum_chains2;
[L4530]               __tmp__sum_freezings3 := sum_freezings3;
[L4531]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4532]               __tmp__Length := Length;
[L4533]               __tmp__now := now;
[L4534]               __tmp__balances_BasicToken := balances_BasicToken;
[L4535]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4536]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4537]               __tmp__owner_Ownable := owner_Ownable;
[L4538]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4539]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4540]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4541]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4542]               __tmp__paused_Pausable := paused_Pausable;
[L4543]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4544]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4545]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4546]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4547]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4548]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4549]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4550]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4551]               __tmp__initialized_MainToken := initialized_MainToken;
[L4552]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9296]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9297]               revert := true;
[L4552]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4553]               assume revert || gas < 0;
[L14161]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14389]  RET         call CorralChoice_MainToken(this);

Loop:
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND TRUE   choice == 34
[L14157]              gas := gas - 21000;
[L14158]  COND TRUE   gas >= 0
[L14159]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14160]              assume msgvalue_MSG == 0;
[L14161]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4516]               havoc __exception;
[L4517]               revert := false;
[L4518]   COND TRUE   __exception
[L4519]               __tmp__Balance := Balance;
[L4520]               __tmp__DType := DType;
[L4521]               __tmp__Alloc := Alloc;
[L4522]               __tmp__balance_ADDR := balance_ADDR;
[L4523]               __tmp__M_Ref_int := M_Ref_int;
[L4524]               __tmp__sum_balances0 := sum_balances0;
[L4525]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4526]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4527]               __tmp__sum_allowed1 := sum_allowed1;
[L4528]               __tmp__M_int_int := M_int_int;
[L4529]               __tmp__sum_chains2 := sum_chains2;
[L4530]               __tmp__sum_freezings3 := sum_freezings3;
[L4531]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4532]               __tmp__Length := Length;
[L4533]               __tmp__now := now;
[L4534]               __tmp__balances_BasicToken := balances_BasicToken;
[L4535]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4536]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4537]               __tmp__owner_Ownable := owner_Ownable;
[L4538]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4539]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4540]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4541]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4542]               __tmp__paused_Pausable := paused_Pausable;
[L4543]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4544]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4545]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4546]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4547]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4548]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4549]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4550]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4551]               __tmp__initialized_MainToken := initialized_MainToken;
[L4552]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9296]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9297]               revert := true;
[L4552]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4553]               assume revert || gas < 0;
[L14161]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14389]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:31:39,977 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:31:39,977 INFO  L82        PathProgramCache]: Analyzing trace with hash -545246734, now seen corresponding path program 1 times
[2020-11-24 21:31:39,978 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:31:40,012 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:31:40,597 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:31:40,597 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:31:40,597 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:31:40,599 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:31:40,599 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:31:40,599 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:31:40,599 INFO  L87              Difference]: Start difference. First operand 8205 states and 9118 transitions. cyclomatic complexity: 931 Second operand 7 states.
[2020-11-24 21:31:40,919 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:31:40,919 INFO  L93              Difference]: Finished difference Result 8221 states and 9134 transitions.
[2020-11-24 21:31:40,919 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:31:40,919 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8221 states and 9134 transitions.
[2020-11-24 21:31:40,941 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:31:40,985 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8221 states to 8209 states and 9122 transitions.
[2020-11-24 21:31:40,985 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1894
[2020-11-24 21:31:40,986 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1894
[2020-11-24 21:31:40,987 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8209 states and 9122 transitions.
[2020-11-24 21:31:40,995 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:31:40,995 INFO  L728         BuchiCegarLoop]: Abstraction has 8209 states and 9122 transitions.
[2020-11-24 21:31:41,005 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8209 states and 9122 transitions.
[2020-11-24 21:31:41,058 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8209 to 8207.
[2020-11-24 21:31:41,058 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8207 states.
[2020-11-24 21:31:41,066 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8207 states to 8207 states and 9120 transitions.
[2020-11-24 21:31:41,067 INFO  L751         BuchiCegarLoop]: Abstraction has 8207 states and 9120 transitions.
[2020-11-24 21:31:41,067 INFO  L631         BuchiCegarLoop]: Abstraction has 8207 states and 9120 transitions.
[2020-11-24 21:31:41,067 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:31:41,067 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8207 states and 9120 transitions.
[2020-11-24 21:31:41,075 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:31:41,075 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:31:41,075 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:31:41,078 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:31:41,079 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14379]              assume null == 0;
[L14380]  CALL        call this := FreshRefGenerator__success();
[L6397]               havoc newRef;
[L6398]               assume Alloc[newRef] == false;
[L6399]               Alloc[newRef] := true;
[L6400]               assume newRef != null;
[L14380]  RET         call this := FreshRefGenerator__success();
[L14381]              assume now >= 0;
[L14382]              assume DType[this] == MainToken;
[L14383]              assume msgvalue_MSG == 0;
[L14384]              gas := gas - 53000;
[L14385]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4184]               havoc __exception;
[L4185]               revert := false;
[L4186]   COND FALSE  !(__exception)
[L4223]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8984]               assume msgsender_MSG != null;
[L8985]               Balance[this] := 0;
[L8986]               TOKEN_DECIMALS_Consts[this] := 18;
[L8987]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8988]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8989]               TOKEN_NAME_Consts[this] := -1051245219;
[L8990]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8991]               PAUSED_Consts[this] := false;
[L8992]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8994]               CONTINUE_MINTING_Consts[this] := true;
[L9008]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9009]   COND FALSE  !(revert)
[L9206]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9207]   COND FALSE  !(revert)
[L9210]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L9210]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9211]   COND FALSE  !(revert)
[L9214]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L9214]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9215]   COND FALSE  !(revert)
[L9218]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L9218]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9219]   COND FALSE  !(revert)
[L9222]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L9222]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9223]   COND FALSE  !(revert)
[L9226]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L9226]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9227]   COND FALSE  !(revert)
[L9230]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L9230]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9231]   COND FALSE  !(revert)
[L9234]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L9234]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9235]   COND FALSE  !(revert)
[L9238]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8793]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8794]   COND FALSE  !(revert)
[L8797]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L8797]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8798]   COND FALSE  !(revert)
[L8801]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8801]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8802]   COND FALSE  !(revert)
[L8805]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L8805]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8806]   COND FALSE  !(revert)
[L8809]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L8809]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8810]   COND FALSE  !(revert)
[L8813]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8813]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]   COND FALSE  !(revert)
[L8817]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L8817]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8818]   COND FALSE  !(revert)
[L8821]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8750]               assume msgsender_MSG != null;
[L8751]               Balance[this] := 0;
[L8821]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8822]   COND FALSE  !(revert)
[L9238]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9239]   COND FALSE  !(revert)
[L9242]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8537]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8538]   COND FALSE  !(revert)
[L8541]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8541]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8542]   COND FALSE  !(revert)
[L8545]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8514]               assume msgsender_MSG != null;
[L8515]               Balance[this] := 0;
[L8545]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8546]   COND FALSE  !(revert)
[L9242]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND FALSE  !(revert)
[L9246]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8663]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8664]   COND FALSE  !(revert)
[L8667]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8643]               assume msgsender_MSG != null;
[L8644]               Balance[this] := 0;
[L8645]               paused_Pausable[this] := false;
[L8667]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8668]   COND FALSE  !(revert)
[L9246]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9247]   COND FALSE  !(revert)
[L9250]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]               assume msgsender_MSG != null;
[L9135]               Balance[this] := 0;
[L9136]               initialized_MainToken[this] := false;
[L9138]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!initialized_MainToken[this])
[L9409]               initialized_MainToken[this] := true;
[L9410]   COND FALSE  !(PAUSED_Consts[this])
[L9420]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9430]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9138]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   COND TRUE   DType[this] == MainToken
[L9143]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7056]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12333]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7056]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   COND TRUE   DType[this] == MainToken
[L7061]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7104]               __var_11 := null;
[L7105]   COND FALSE  !(!(_newOwner_s581 != null))
[L7109]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7110]               owner_Ownable[this] := _newOwner_s581;
[L7061]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7062]   COND FALSE  !(revert)
[L9143]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9144]   COND FALSE  !(revert)
[L9250]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L4223]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4224]               assume !revert && gas >= 0;
[L14385]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14386]              assume !revert && gas >= 0;
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND TRUE   choice == 34
[L14157]              gas := gas - 21000;
[L14158]  COND TRUE   gas >= 0
[L14159]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14160]              assume msgvalue_MSG == 0;
[L14161]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4516]               havoc __exception;
[L4517]               revert := false;
[L4518]   COND TRUE   __exception
[L4519]               __tmp__Balance := Balance;
[L4520]               __tmp__DType := DType;
[L4521]               __tmp__Alloc := Alloc;
[L4522]               __tmp__balance_ADDR := balance_ADDR;
[L4523]               __tmp__M_Ref_int := M_Ref_int;
[L4524]               __tmp__sum_balances0 := sum_balances0;
[L4525]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4526]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4527]               __tmp__sum_allowed1 := sum_allowed1;
[L4528]               __tmp__M_int_int := M_int_int;
[L4529]               __tmp__sum_chains2 := sum_chains2;
[L4530]               __tmp__sum_freezings3 := sum_freezings3;
[L4531]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4532]               __tmp__Length := Length;
[L4533]               __tmp__now := now;
[L4534]               __tmp__balances_BasicToken := balances_BasicToken;
[L4535]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4536]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4537]               __tmp__owner_Ownable := owner_Ownable;
[L4538]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4539]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4540]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4541]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4542]               __tmp__paused_Pausable := paused_Pausable;
[L4543]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4544]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4545]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4546]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4547]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4548]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4549]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4550]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4551]               __tmp__initialized_MainToken := initialized_MainToken;
[L4552]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9296]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9297]               revert := true;
[L4552]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4553]               assume revert || gas < 0;
[L14161]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14389]  RET         call CorralChoice_MainToken(this);

Loop:
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND TRUE   choice == 34
[L14157]              gas := gas - 21000;
[L14158]  COND TRUE   gas >= 0
[L14159]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14160]              assume msgvalue_MSG == 0;
[L14161]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4516]               havoc __exception;
[L4517]               revert := false;
[L4518]   COND TRUE   __exception
[L4519]               __tmp__Balance := Balance;
[L4520]               __tmp__DType := DType;
[L4521]               __tmp__Alloc := Alloc;
[L4522]               __tmp__balance_ADDR := balance_ADDR;
[L4523]               __tmp__M_Ref_int := M_Ref_int;
[L4524]               __tmp__sum_balances0 := sum_balances0;
[L4525]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4526]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4527]               __tmp__sum_allowed1 := sum_allowed1;
[L4528]               __tmp__M_int_int := M_int_int;
[L4529]               __tmp__sum_chains2 := sum_chains2;
[L4530]               __tmp__sum_freezings3 := sum_freezings3;
[L4531]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4532]               __tmp__Length := Length;
[L4533]               __tmp__now := now;
[L4534]               __tmp__balances_BasicToken := balances_BasicToken;
[L4535]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4536]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4537]               __tmp__owner_Ownable := owner_Ownable;
[L4538]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4539]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4540]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4541]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4542]               __tmp__paused_Pausable := paused_Pausable;
[L4543]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4544]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4545]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4546]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4547]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4548]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4549]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4550]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4551]               __tmp__initialized_MainToken := initialized_MainToken;
[L4552]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9296]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9297]               revert := true;
[L4552]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4553]               assume revert || gas < 0;
[L14161]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14389]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:31:41,087 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:31:41,088 INFO  L82        PathProgramCache]: Analyzing trace with hash -1717977808, now seen corresponding path program 1 times
[2020-11-24 21:31:41,089 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:31:41,120 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:31:41,689 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:31:41,689 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:31:41,689 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-24 21:31:41,690 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:31:41,690 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-24 21:31:41,690 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-24 21:31:41,690 INFO  L87              Difference]: Start difference. First operand 8207 states and 9120 transitions. cyclomatic complexity: 931 Second operand 12 states.
[2020-11-24 21:31:49,481 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:31:49,481 INFO  L93              Difference]: Finished difference Result 13203 states and 14780 transitions.
[2020-11-24 21:31:49,481 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-24 21:31:49,482 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13203 states and 14780 transitions.
[2020-11-24 21:31:49,508 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-24 21:31:49,543 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13203 states to 13165 states and 14735 transitions.
[2020-11-24 21:31:49,543 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3136
[2020-11-24 21:31:49,544 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3136
[2020-11-24 21:31:49,544 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13165 states and 14735 transitions.
[2020-11-24 21:31:49,554 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:31:49,554 INFO  L728         BuchiCegarLoop]: Abstraction has 13165 states and 14735 transitions.
[2020-11-24 21:31:49,561 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13165 states and 14735 transitions.
[2020-11-24 21:31:49,651 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13165 to 11280.
[2020-11-24 21:31:49,651 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11280 states.
[2020-11-24 21:31:49,665 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11280 states to 11280 states and 12829 transitions.
[2020-11-24 21:31:49,666 INFO  L751         BuchiCegarLoop]: Abstraction has 11280 states and 12829 transitions.
[2020-11-24 21:31:49,666 INFO  L631         BuchiCegarLoop]: Abstraction has 11280 states and 12829 transitions.
[2020-11-24 21:31:49,666 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 21:31:49,666 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11280 states and 12829 transitions.
[2020-11-24 21:31:49,679 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:31:49,679 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:31:49,679 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:31:49,683 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:31:49,683 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14379]              assume null == 0;
[L14380]  CALL        call this := FreshRefGenerator__success();
[L6397]               havoc newRef;
[L6398]               assume Alloc[newRef] == false;
[L6399]               Alloc[newRef] := true;
[L6400]               assume newRef != null;
[L14380]  RET         call this := FreshRefGenerator__success();
[L14381]              assume now >= 0;
[L14382]              assume DType[this] == MainToken;
[L14383]              assume msgvalue_MSG == 0;
[L14384]              gas := gas - 53000;
[L14385]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4184]               havoc __exception;
[L4185]               revert := false;
[L4186]   COND FALSE  !(__exception)
[L4223]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8984]               assume msgsender_MSG != null;
[L8985]               Balance[this] := 0;
[L8986]               TOKEN_DECIMALS_Consts[this] := 18;
[L8987]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8988]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8989]               TOKEN_NAME_Consts[this] := -1051245219;
[L8990]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8991]               PAUSED_Consts[this] := false;
[L8992]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8994]               CONTINUE_MINTING_Consts[this] := true;
[L9008]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9009]   COND FALSE  !(revert)
[L9206]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9207]   COND FALSE  !(revert)
[L9210]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L9210]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9211]   COND FALSE  !(revert)
[L9214]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L9214]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9215]   COND FALSE  !(revert)
[L9218]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L9218]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9219]   COND FALSE  !(revert)
[L9222]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L9222]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9223]   COND FALSE  !(revert)
[L9226]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L9226]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9227]   COND FALSE  !(revert)
[L9230]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L9230]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9231]   COND FALSE  !(revert)
[L9234]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L9234]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9235]   COND FALSE  !(revert)
[L9238]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8793]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8794]   COND FALSE  !(revert)
[L8797]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L8797]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8798]   COND FALSE  !(revert)
[L8801]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8801]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8802]   COND FALSE  !(revert)
[L8805]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L8805]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8806]   COND FALSE  !(revert)
[L8809]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L8809]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8810]   COND FALSE  !(revert)
[L8813]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8813]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]   COND FALSE  !(revert)
[L8817]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L8817]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8818]   COND FALSE  !(revert)
[L8821]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8750]               assume msgsender_MSG != null;
[L8751]               Balance[this] := 0;
[L8821]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8822]   COND FALSE  !(revert)
[L9238]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9239]   COND FALSE  !(revert)
[L9242]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8537]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8538]   COND FALSE  !(revert)
[L8541]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8541]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8542]   COND FALSE  !(revert)
[L8545]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8514]               assume msgsender_MSG != null;
[L8515]               Balance[this] := 0;
[L8545]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8546]   COND FALSE  !(revert)
[L9242]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND FALSE  !(revert)
[L9246]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8663]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8664]   COND FALSE  !(revert)
[L8667]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8643]               assume msgsender_MSG != null;
[L8644]               Balance[this] := 0;
[L8645]               paused_Pausable[this] := false;
[L8667]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8668]   COND FALSE  !(revert)
[L9246]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9247]   COND FALSE  !(revert)
[L9250]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]               assume msgsender_MSG != null;
[L9135]               Balance[this] := 0;
[L9136]               initialized_MainToken[this] := false;
[L9138]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!initialized_MainToken[this])
[L9409]               initialized_MainToken[this] := true;
[L9410]   COND TRUE   PAUSED_Consts[this]
[L9411]   COND TRUE   DType[this] == MainToken
[L9412]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8688]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12333]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L8688]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8689]   COND FALSE  !(revert)
[L8692]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12381]  COND FALSE  !(!!paused_Pausable[this])
[L8692]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8693]   COND FALSE  !(revert)
[L8696]               paused_Pausable[this] := true;
[L8697]               assert { :EventEmitted "Pause_Pausable" } true;
[L9412]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND FALSE  !(revert)
[L9420]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9430]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9138]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   COND TRUE   DType[this] == MainToken
[L9143]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7056]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12333]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7056]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   COND TRUE   DType[this] == MainToken
[L7061]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7104]               __var_11 := null;
[L7105]   COND FALSE  !(!(_newOwner_s581 != null))
[L7109]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7110]               owner_Ownable[this] := _newOwner_s581;
[L7061]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7062]   COND FALSE  !(revert)
[L9143]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9144]   COND FALSE  !(revert)
[L9250]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L4223]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4224]               assume !revert && gas >= 0;
[L14385]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14386]              assume !revert && gas >= 0;
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND TRUE   choice == 34
[L14157]              gas := gas - 21000;
[L14158]  COND TRUE   gas >= 0
[L14159]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14160]              assume msgvalue_MSG == 0;
[L14161]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4516]               havoc __exception;
[L4517]               revert := false;
[L4518]   COND TRUE   __exception
[L4519]               __tmp__Balance := Balance;
[L4520]               __tmp__DType := DType;
[L4521]               __tmp__Alloc := Alloc;
[L4522]               __tmp__balance_ADDR := balance_ADDR;
[L4523]               __tmp__M_Ref_int := M_Ref_int;
[L4524]               __tmp__sum_balances0 := sum_balances0;
[L4525]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4526]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4527]               __tmp__sum_allowed1 := sum_allowed1;
[L4528]               __tmp__M_int_int := M_int_int;
[L4529]               __tmp__sum_chains2 := sum_chains2;
[L4530]               __tmp__sum_freezings3 := sum_freezings3;
[L4531]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4532]               __tmp__Length := Length;
[L4533]               __tmp__now := now;
[L4534]               __tmp__balances_BasicToken := balances_BasicToken;
[L4535]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4536]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4537]               __tmp__owner_Ownable := owner_Ownable;
[L4538]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4539]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4540]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4541]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4542]               __tmp__paused_Pausable := paused_Pausable;
[L4543]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4544]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4545]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4546]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4547]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4548]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4549]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4550]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4551]               __tmp__initialized_MainToken := initialized_MainToken;
[L4552]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9296]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9297]               revert := true;
[L4552]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4553]               assume revert || gas < 0;
[L14161]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14389]  RET         call CorralChoice_MainToken(this);

Loop:
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND TRUE   choice == 34
[L14157]              gas := gas - 21000;
[L14158]  COND TRUE   gas >= 0
[L14159]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14160]              assume msgvalue_MSG == 0;
[L14161]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4516]               havoc __exception;
[L4517]               revert := false;
[L4518]   COND TRUE   __exception
[L4519]               __tmp__Balance := Balance;
[L4520]               __tmp__DType := DType;
[L4521]               __tmp__Alloc := Alloc;
[L4522]               __tmp__balance_ADDR := balance_ADDR;
[L4523]               __tmp__M_Ref_int := M_Ref_int;
[L4524]               __tmp__sum_balances0 := sum_balances0;
[L4525]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4526]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4527]               __tmp__sum_allowed1 := sum_allowed1;
[L4528]               __tmp__M_int_int := M_int_int;
[L4529]               __tmp__sum_chains2 := sum_chains2;
[L4530]               __tmp__sum_freezings3 := sum_freezings3;
[L4531]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4532]               __tmp__Length := Length;
[L4533]               __tmp__now := now;
[L4534]               __tmp__balances_BasicToken := balances_BasicToken;
[L4535]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4536]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4537]               __tmp__owner_Ownable := owner_Ownable;
[L4538]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4539]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4540]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4541]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4542]               __tmp__paused_Pausable := paused_Pausable;
[L4543]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4544]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4545]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4546]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4547]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4548]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4549]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4550]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4551]               __tmp__initialized_MainToken := initialized_MainToken;
[L4552]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9296]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9300]   COND TRUE   __tmp__DType[this] == MainToken
[L9301]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L6771]               __var_4 := null;
[L6772]   COND TRUE   !(_to_s351 != null)
[L6773]               revert := true;
[L9301]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9302]   COND TRUE   revert
[L4552]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4553]               assume revert || gas < 0;
[L14161]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14389]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:31:49,691 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:31:49,691 INFO  L82        PathProgramCache]: Analyzing trace with hash -1350084859, now seen corresponding path program 1 times
[2020-11-24 21:31:49,692 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:31:49,720 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:31:50,329 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 21:31:50,329 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:31:50,329 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:31:50,330 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:31:50,330 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:31:50,330 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:31:50,330 INFO  L87              Difference]: Start difference. First operand 11280 states and 12829 transitions. cyclomatic complexity: 1577 Second operand 7 states.
[2020-11-24 21:31:50,448 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:31:50,448 INFO  L93              Difference]: Finished difference Result 11274 states and 12822 transitions.
[2020-11-24 21:31:50,448 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:31:50,448 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11274 states and 12822 transitions.
[2020-11-24 21:31:50,468 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:31:50,497 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11274 states to 11253 states and 12797 transitions.
[2020-11-24 21:31:50,497 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2608
[2020-11-24 21:31:50,498 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2608
[2020-11-24 21:31:50,499 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11253 states and 12797 transitions.
[2020-11-24 21:31:50,507 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:31:50,507 INFO  L728         BuchiCegarLoop]: Abstraction has 11253 states and 12797 transitions.
[2020-11-24 21:31:50,514 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11253 states and 12797 transitions.
[2020-11-24 21:31:50,587 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11253 to 11253.
[2020-11-24 21:31:50,587 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11253 states.
[2020-11-24 21:31:50,603 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11253 states to 11253 states and 12797 transitions.
[2020-11-24 21:31:50,603 INFO  L751         BuchiCegarLoop]: Abstraction has 11253 states and 12797 transitions.
[2020-11-24 21:31:50,603 INFO  L631         BuchiCegarLoop]: Abstraction has 11253 states and 12797 transitions.
[2020-11-24 21:31:50,603 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 21:31:50,603 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11253 states and 12797 transitions.
[2020-11-24 21:31:50,616 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:31:50,616 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:31:50,616 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:31:50,619 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:31:50,619 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_MainToken0 := false;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14379]              assume null == 0;
[L14380]  CALL        call this := FreshRefGenerator__success();
[L6397]               havoc newRef;
[L6398]               assume Alloc[newRef] == false;
[L6399]               Alloc[newRef] := true;
[L6400]               assume newRef != null;
[L14380]  RET         call this := FreshRefGenerator__success();
[L14381]              assume now >= 0;
[L14382]              assume DType[this] == MainToken;
[L14383]              assume msgvalue_MSG == 0;
[L14384]              gas := gas - 53000;
[L14385]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4184]               havoc __exception;
[L4185]               revert := false;
[L4186]   COND FALSE  !(__exception)
[L4223]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8984]               assume msgsender_MSG != null;
[L8985]               Balance[this] := 0;
[L8986]               TOKEN_DECIMALS_Consts[this] := 18;
[L8987]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8988]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8989]               TOKEN_NAME_Consts[this] := -1051245219;
[L8990]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8991]               PAUSED_Consts[this] := false;
[L8992]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8994]               CONTINUE_MINTING_Consts[this] := true;
[L9008]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9009]   COND FALSE  !(revert)
[L9206]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9207]   COND FALSE  !(revert)
[L9210]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L9210]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9211]   COND FALSE  !(revert)
[L9214]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L9214]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9215]   COND FALSE  !(revert)
[L9218]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L9218]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9219]   COND FALSE  !(revert)
[L9222]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L9222]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9223]   COND FALSE  !(revert)
[L9226]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L9226]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9227]   COND FALSE  !(revert)
[L9230]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L9230]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9231]   COND FALSE  !(revert)
[L9234]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L9234]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9235]   COND FALSE  !(revert)
[L9238]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8793]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8794]   COND FALSE  !(revert)
[L8797]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L8797]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8798]   COND FALSE  !(revert)
[L8801]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8801]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8802]   COND FALSE  !(revert)
[L8805]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L8805]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8806]   COND FALSE  !(revert)
[L8809]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L8809]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8810]   COND FALSE  !(revert)
[L8813]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8813]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]   COND FALSE  !(revert)
[L8817]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L8817]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8818]   COND FALSE  !(revert)
[L8821]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8750]               assume msgsender_MSG != null;
[L8751]               Balance[this] := 0;
[L8821]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8822]   COND FALSE  !(revert)
[L9238]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9239]   COND FALSE  !(revert)
[L9242]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8537]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8538]   COND FALSE  !(revert)
[L8541]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8541]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8542]   COND FALSE  !(revert)
[L8545]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8514]               assume msgsender_MSG != null;
[L8515]               Balance[this] := 0;
[L8545]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8546]   COND FALSE  !(revert)
[L9242]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND FALSE  !(revert)
[L9246]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8663]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8664]   COND FALSE  !(revert)
[L8667]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8643]               assume msgsender_MSG != null;
[L8644]               Balance[this] := 0;
[L8645]               paused_Pausable[this] := false;
[L8667]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8668]   COND FALSE  !(revert)
[L9246]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9247]   COND FALSE  !(revert)
[L9250]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]               assume msgsender_MSG != null;
[L9135]               Balance[this] := 0;
[L9136]               initialized_MainToken[this] := false;
[L9138]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!initialized_MainToken[this])
[L9409]               initialized_MainToken[this] := true;
[L9410]   COND FALSE  !(PAUSED_Consts[this])
[L9420]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9430]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9138]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   COND TRUE   DType[this] == MainToken
[L9143]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7056]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12333]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7056]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   COND TRUE   DType[this] == MainToken
[L7061]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7104]               __var_11 := null;
[L7105]   COND FALSE  !(!(_newOwner_s581 != null))
[L7109]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7110]               owner_Ownable[this] := _newOwner_s581;
[L7061]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7062]   COND FALSE  !(revert)
[L9143]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9144]   COND FALSE  !(revert)
[L9250]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L4223]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4224]               assume !revert && gas >= 0;
[L14385]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14386]              assume !revert && gas >= 0;
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND TRUE   choice == 34
[L14157]              gas := gas - 21000;
[L14158]  COND TRUE   gas >= 0
[L14159]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14160]              assume msgvalue_MSG == 0;
[L14161]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4516]               havoc __exception;
[L4517]               revert := false;
[L4518]   COND TRUE   __exception
[L4519]               __tmp__Balance := Balance;
[L4520]               __tmp__DType := DType;
[L4521]               __tmp__Alloc := Alloc;
[L4522]               __tmp__balance_ADDR := balance_ADDR;
[L4523]               __tmp__M_Ref_int := M_Ref_int;
[L4524]               __tmp__sum_balances0 := sum_balances0;
[L4525]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4526]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4527]               __tmp__sum_allowed1 := sum_allowed1;
[L4528]               __tmp__M_int_int := M_int_int;
[L4529]               __tmp__sum_chains2 := sum_chains2;
[L4530]               __tmp__sum_freezings3 := sum_freezings3;
[L4531]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4532]               __tmp__Length := Length;
[L4533]               __tmp__now := now;
[L4534]               __tmp__balances_BasicToken := balances_BasicToken;
[L4535]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4536]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4537]               __tmp__owner_Ownable := owner_Ownable;
[L4538]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4539]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4540]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4541]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4542]               __tmp__paused_Pausable := paused_Pausable;
[L4543]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4544]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4545]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4546]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4547]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4548]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4549]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4550]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4551]               __tmp__initialized_MainToken := initialized_MainToken;
[L4552]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9296]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9300]   COND TRUE   __tmp__DType[this] == MainToken
[L9301]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L6771]               __var_4 := null;
[L6772]   COND TRUE   !(_to_s351 != null)
[L6773]               revert := true;
[L9301]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9302]   COND TRUE   revert
[L4552]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4553]               assume revert || gas < 0;
[L14161]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14389]  RET         call CorralChoice_MainToken(this);

Loop:
[L14389]  CALL        call CorralChoice_MainToken(this);
[L14046]              havoc msgsender_MSG;
[L14047]              havoc msgvalue_MSG;
[L14048]              havoc choice;
[L14049]              havoc __ret_0_totalSupply;
[L14050]              havoc _owner_s729;
[L14051]              havoc balance_s729;
[L14052]              havoc _to_s1572;
[L14053]              havoc _value_s1572;
[L14054]              havoc _success_s1572;
[L14055]              havoc _owner_s395;
[L14056]              havoc _spender_s395;
[L14057]              havoc __ret_0_allowance;
[L14058]              havoc _from_s1551;
[L14059]              havoc _to_s1551;
[L14060]              havoc _value_s1551;
[L14061]              havoc _success_s1551;
[L14062]              havoc _spender_s379;
[L14063]              havoc _value_s379;
[L14064]              havoc __ret_0_approve;
[L14065]              havoc _spender_s437;
[L14066]              havoc _addedValue_s437;
[L14067]              havoc __ret_0_increaseApproval;
[L14068]              havoc _spender_s497;
[L14069]              havoc _subtractedValue_s497;
[L14070]              havoc __ret_0_decreaseApproval;
[L14071]              havoc __ret_0_owner;
[L14072]              havoc _newOwner_s558;
[L14073]              havoc __ret_0_mintingFinished;
[L14074]              havoc _to_s664;
[L14075]              havoc _amount_s664;
[L14076]              havoc __ret_0_mint;
[L14077]              havoc __ret_0_finishMinting;
[L14078]              havoc _owner_s742;
[L14079]              havoc balance_s742;
[L14080]              havoc _owner_s754;
[L14081]              havoc balance_s754;
[L14082]              havoc _addr_s792;
[L14083]              havoc count_s792;
[L14084]              havoc _addr_s849;
[L14085]              havoc _index_s849;
[L14086]              havoc _release_s849;
[L14087]              havoc _balance_s849;
[L14088]              havoc _to_s938;
[L14089]              havoc _amount_s938;
[L14090]              havoc _until_s938;
[L14091]              havoc tokens_s1107;
[L14092]              havoc _value_s1261;
[L14093]              havoc __ret_0_paused;
[L14094]              havoc _to_s1449;
[L14095]              havoc _amount_s1449;
[L14096]              havoc _until_s1449;
[L14097]              havoc __ret_0_mintAndFreeze;
[L14098]              havoc __ret_0_TOKEN_DECIMALS;
[L14099]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14100]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14101]              havoc __ret_0_TOKEN_NAME;
[L14102]              havoc __ret_0_TOKEN_SYMBOL;
[L14103]              havoc __ret_0_PAUSED;
[L14104]              havoc __ret_0_TARGET_USER;
[L14105]              havoc __ret_0_CONTINUE_MINTING;
[L14106]              havoc __ret_0_initialized;
[L14107]              havoc _name_s1511;
[L14108]              havoc _symbol_s1519;
[L14109]              havoc _decimals_s1527;
[L14110]              havoc tmpNow;
[L14111]              havoc gas;
[L14112]              assume gas > 4000000 && gas <= 8000000;
[L14113]              tmpNow := now;
[L14114]              havoc now;
[L14115]              assume now > tmpNow;
[L14116]              assume msgsender_MSG != null;
[L14117]              assume DType[msgsender_MSG] != ERC20Basic;
[L14118]              assume DType[msgsender_MSG] != SafeMath;
[L14119]              assume DType[msgsender_MSG] != BasicToken;
[L14120]              assume DType[msgsender_MSG] != ERC20;
[L14121]              assume DType[msgsender_MSG] != StandardToken;
[L14122]              assume DType[msgsender_MSG] != Ownable;
[L14123]              assume DType[msgsender_MSG] != MintableToken;
[L14124]              assume DType[msgsender_MSG] != FreezableToken;
[L14125]              assume DType[msgsender_MSG] != BurnableToken;
[L14126]              assume DType[msgsender_MSG] != Pausable;
[L14127]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14128]              assume DType[msgsender_MSG] != Consts;
[L14129]              assume DType[msgsender_MSG] != MainToken;
[L14130]              Alloc[msgsender_MSG] := true;
[L14131]  COND FALSE  !(choice == 38)
[L14137]  COND FALSE  !(choice == 37)
[L14143]  COND FALSE  !(choice == 36)
[L14150]  COND FALSE  !(choice == 35)
[L14156]  COND TRUE   choice == 34
[L14157]              gas := gas - 21000;
[L14158]  COND TRUE   gas >= 0
[L14159]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14160]              assume msgvalue_MSG == 0;
[L14161]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4516]               havoc __exception;
[L4517]               revert := false;
[L4518]   COND TRUE   __exception
[L4519]               __tmp__Balance := Balance;
[L4520]               __tmp__DType := DType;
[L4521]               __tmp__Alloc := Alloc;
[L4522]               __tmp__balance_ADDR := balance_ADDR;
[L4523]               __tmp__M_Ref_int := M_Ref_int;
[L4524]               __tmp__sum_balances0 := sum_balances0;
[L4525]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4526]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4527]               __tmp__sum_allowed1 := sum_allowed1;
[L4528]               __tmp__M_int_int := M_int_int;
[L4529]               __tmp__sum_chains2 := sum_chains2;
[L4530]               __tmp__sum_freezings3 := sum_freezings3;
[L4531]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4532]               __tmp__Length := Length;
[L4533]               __tmp__now := now;
[L4534]               __tmp__balances_BasicToken := balances_BasicToken;
[L4535]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4536]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4537]               __tmp__owner_Ownable := owner_Ownable;
[L4538]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4539]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4540]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4541]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4542]               __tmp__paused_Pausable := paused_Pausable;
[L4543]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4544]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4545]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4546]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4547]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4548]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4549]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4550]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4551]               __tmp__initialized_MainToken := initialized_MainToken;
[L4552]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9296]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9300]   COND TRUE   __tmp__DType[this] == MainToken
[L9301]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L6771]               __var_4 := null;
[L6772]   COND TRUE   !(_to_s351 != null)
[L6773]               revert := true;
[L9301]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9302]   COND TRUE   revert
[L4552]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4553]               assume revert || gas < 0;
[L14161]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14389]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:31:50,627 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:31:50,627 INFO  L82        PathProgramCache]: Analyzing trace with hash 1442306295, now seen corresponding path program 1 times
[2020-11-24 21:31:50,628 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:31:50,664 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:31:50,712 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:31:51,043 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:31:51,043 INFO  L82        PathProgramCache]: Analyzing trace with hash -568683083, now seen corresponding path program 1 times
[2020-11-24 21:31:51,044 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:31:51,049 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:31:51,055 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:31:51,069 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:31:51,070 INFO  L82        PathProgramCache]: Analyzing trace with hash 102058239, now seen corresponding path program 1 times
[2020-11-24 21:31:51,071 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:31:51,115 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:31:51,163 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
[2020-11-24 21:31:51,678 WARN  L188               SmtUtils]: Spent 157.00 ms on a formula simplification. DAG size of input: 210 DAG size of output: 203
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 2473 to 4943
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.003s / 0.006s total
Resizing node table from 8053 to 16103
[2020-11-24 21:31:51,930 WARN  L188               SmtUtils]: Spent 214.00 ms on a formula simplification. DAG size of input: 161 DAG size of output: 155
[2020-11-24 21:31:52,140 WARN  L188               SmtUtils]: Spent 208.00 ms on a formula simplification that was a NOOP. DAG size: 375
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 9181 to 18353
Garbage collection #8: 18353 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 18353 to 36697
[2020-11-24 21:31:53,254 WARN  L188               SmtUtils]: Spent 1.09 s on a formula simplification. DAG size of input: 303 DAG size of output: 303
[2020-11-24 21:31:54,657 WARN  L188               SmtUtils]: Spent 1.40 s on a formula simplification. DAG size of input: 382 DAG size of output: 366
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 8543 to 17077
Garbage collection #8: 17077 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 17077 to 34147
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #8: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
[2020-11-24 21:31:55,507 WARN  L188               SmtUtils]: Spent 815.00 ms on a formula simplification. DAG size of input: 241 DAG size of output: 226
[2020-11-24 21:31:56,071 WARN  L188               SmtUtils]: Spent 562.00 ms on a formula simplification that was a NOOP. DAG size: 481
Garbage collection #1: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #2: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #3: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 12073 to 24137
[2020-11-24 21:31:57,140 WARN  L188               SmtUtils]: Spent 1.05 s on a formula simplification. DAG size of input: 396 DAG size of output: 392
[2020-11-24 21:31:57,631 WARN  L188               SmtUtils]: Spent 487.00 ms on a formula simplification that was a NOOP. DAG size: 392
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #8: 18353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 18353 to 36697
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 13313 to 26597
[2020-11-24 21:31:58,316 WARN  L188               SmtUtils]: Spent 649.00 ms on a formula simplification. DAG size of input: 303 DAG size of output: 266
[2020-11-24 21:31:58,328 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-24 21:31:59,851 WARN  L188               SmtUtils]: Spent 233.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 250
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
[2020-11-24 21:32:02,655 WARN  L188               SmtUtils]: Spent 2.59 s on a formula simplification. DAG size of input: 501 DAG size of output: 473
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 12073 to 24137
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-24 21:32:03,014 WARN  L188               SmtUtils]: Spent 189.00 ms on a formula simplification. DAG size of input: 189 DAG size of output: 188
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
[2020-11-24 21:32:03,209 WARN  L188               SmtUtils]: Spent 172.00 ms on a formula simplification that was a NOOP. DAG size: 402
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9181 to 18353
[2020-11-24 21:32:03,347 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification that was a NOOP. DAG size: 352
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
[2020-11-24 21:32:03,508 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification. DAG size of input: 210 DAG size of output: 203
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-24 21:32:03,666 WARN  L188               SmtUtils]: Spent 149.00 ms on a formula simplification. DAG size of input: 161 DAG size of output: 155
[2020-11-24 21:32:03,903 WARN  L188               SmtUtils]: Spent 235.00 ms on a formula simplification that was a NOOP. DAG size: 375
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-24 21:32:04,832 WARN  L188               SmtUtils]: Spent 916.00 ms on a formula simplification. DAG size of input: 303 DAG size of output: 303
[2020-11-24 21:32:06,157 WARN  L188               SmtUtils]: Spent 1.32 s on a formula simplification. DAG size of input: 381 DAG size of output: 366
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #8: 17077 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17077 to 34147
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
[2020-11-24 21:32:06,665 WARN  L188               SmtUtils]: Spent 477.00 ms on a formula simplification. DAG size of input: 259 DAG size of output: 223
[2020-11-24 21:32:07,040 WARN  L188               SmtUtils]: Spent 372.00 ms on a formula simplification that was a NOOP. DAG size: 478
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #8: 24137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 24137 to 48271
[2020-11-24 21:32:07,971 WARN  L188               SmtUtils]: Spent 918.00 ms on a formula simplification. DAG size of input: 389 DAG size of output: 389
[2020-11-24 21:32:10,377 WARN  L188               SmtUtils]: Spent 2.40 s on a formula simplification. DAG size of input: 695 DAG size of output: 675
Garbage collection #1: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #2: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #3: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #4: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #5: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #6: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #7: 17077 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17077 to 34147
Garbage collection #8: 34147 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 34147 to 68281
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-24 21:32:11,152 WARN  L188               SmtUtils]: Spent 743.00 ms on a formula simplification. DAG size of input: 299 DAG size of output: 288
[2020-11-24 21:32:11,643 WARN  L188               SmtUtils]: Spent 449.00 ms on a formula simplification that was a NOOP. DAG size: 462
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 10513 to 21023
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 13313 to 26597
[2020-11-24 21:32:12,248 WARN  L188               SmtUtils]: Spent 556.00 ms on a formula simplification. DAG size of input: 327 DAG size of output: 308
[2020-11-24 21:32:13,178 WARN  L188               SmtUtils]: Spent 928.00 ms on a formula simplification. DAG size of input: 484 DAG size of output: 483
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #8: 22349 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 22349 to 44687
Garbage collection #9: 44687 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 44687 to 89371
Garbage collection #10: 89371 nodes / 0 free / 0.002s / 0.002s total
Resizing node table from 89371 to 139369
[2020-11-24 21:32:14,452 WARN  L188               SmtUtils]: Spent 1.24 s on a formula simplification. DAG size of input: 513 DAG size of output: 478
[2020-11-24 21:32:14,487 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:32:14,531 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:32:14,550 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:32:14 BasicIcfg
[2020-11-24 21:32:14,550 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 21:32:14,550 INFO  L168              Benchmark]: Toolchain (without parser) took 44168.51 ms. Allocated memory was 1.0 GB in the beginning and 4.7 GB in the end (delta: 3.7 GB). Free memory was 919.1 MB in the beginning and 1.8 GB in the end (delta: -847.5 MB). Peak memory consumption was 3.6 GB. Max. memory is 15.3 GB.
[2020-11-24 21:32:14,551 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:32:14,551 INFO  L168              Benchmark]: Boogie Preprocessor took 168.28 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:32:14,551 INFO  L168              Benchmark]: UtopiaSpecLang took 96.43 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 876.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:32:14,552 INFO  L168              Benchmark]: Boogie Printer took 32.55 ms. Allocated memory is still 1.0 GB. Free memory was 876.1 MB in the beginning and 865.3 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:32:14,552 INFO  L168              Benchmark]: RCFGBuilder took 1652.71 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 175.6 MB). Free memory was 865.3 MB in the beginning and 1.1 GB in the end (delta: -211.7 MB). Peak memory consumption was 248.4 MB. Max. memory is 15.3 GB.
[2020-11-24 21:32:14,552 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.71 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:32:14,552 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4203.46 ms. Allocated memory was 1.2 GB in the beginning and 1.5 GB in the end (delta: 338.7 MB). Free memory was 1.1 GB in the beginning and 808.9 MB in the end (delta: 252.0 MB). Peak memory consumption was 777.0 MB. Max. memory is 15.3 GB.
[2020-11-24 21:32:14,553 INFO  L168              Benchmark]: BlockEncodingV2 took 347.29 ms. Allocated memory is still 1.5 GB. Free memory was 808.9 MB in the beginning and 629.5 MB in the end (delta: 179.4 MB). Peak memory consumption was 179.4 MB. Max. memory is 15.3 GB.
[2020-11-24 21:32:14,553 INFO  L168              Benchmark]: BuchiAutomizer took 37627.11 ms. Allocated memory was 1.5 GB in the beginning and 4.7 GB in the end (delta: 3.1 GB). Free memory was 629.5 MB in the beginning and 1.8 GB in the end (delta: -1.1 GB). Peak memory consumption was 2.8 GB. Max. memory is 15.3 GB.
[2020-11-24 21:32:14,555 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13186 locations, 24274 edges
  - StatisticsResult: Encoded RCFG
    12984 locations, 23712 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 168.28 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 96.43 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 876.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 32.55 ms. Allocated memory is still 1.0 GB. Free memory was 876.1 MB in the beginning and 865.3 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1652.71 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 175.6 MB). Free memory was 865.3 MB in the beginning and 1.1 GB in the end (delta: -211.7 MB). Peak memory consumption was 248.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.71 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4203.46 ms. Allocated memory was 1.2 GB in the beginning and 1.5 GB in the end (delta: 338.7 MB). Free memory was 1.1 GB in the beginning and 808.9 MB in the end (delta: 252.0 MB). Peak memory consumption was 777.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 347.29 ms. Allocated memory is still 1.5 GB. Free memory was 808.9 MB in the beginning and 629.5 MB in the end (delta: 179.4 MB). Peak memory consumption was 179.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 37627.11 ms. Allocated memory was 1.5 GB in the beginning and 4.7 GB in the end (delta: 3.1 GB). Free memory was 629.5 MB in the beginning and 1.8 GB in the end (delta: -1.1 GB). Peak memory consumption was 2.8 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5261 locations, 7415 edges
  - StatisticsResult: BuchiProgram size
    13186 locations, 24274 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.6 modules have a trivial ranking function, the largest among these consists of 12 locations. The remainder module has 11253 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 37.5s and 7 iterations.  TraceHistogramMax:38. Analysis of lassos took 26.9s. Construction of modules took 6.4s. BÃ¼chi inclusion checks took 2.6s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.6s AutomataMinimizationTime, 6 MinimizatonAttempts, 3961 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 11280 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 57349 SDtfs, 36688 SDslu, 110626 SDs, 0 SdLazy, 94001 SolverSat, 8063 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 6.4s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(3979026) = (new MainToken)({from : 3979030});
[L4184]               havoc __exception;
[L4185]               revert := false;
[L4186]   COND FALSE  !(__exception)
[L4223]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8984]               assume msgsender_MSG != null;
[L8985]               Balance[this] := 0;
[L8986]               TOKEN_DECIMALS_Consts[this] := 18;
[L8987]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8988]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8989]               TOKEN_NAME_Consts[this] := -1051245219;
[L8990]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8991]               PAUSED_Consts[this] := false;
[L8992]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8994]               CONTINUE_MINTING_Consts[this] := true;
[L9008]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9009]   COND FALSE  !(revert)
[L9206]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9207]   COND FALSE  !(revert)
[L9210]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L9210]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9211]   COND FALSE  !(revert)
[L9214]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L9214]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9215]   COND FALSE  !(revert)
[L9218]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L9218]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9219]   COND FALSE  !(revert)
[L9222]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L9222]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9223]   COND FALSE  !(revert)
[L9226]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L9226]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9227]   COND FALSE  !(revert)
[L9230]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L9230]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9231]   COND FALSE  !(revert)
[L9234]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L9234]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9235]   COND FALSE  !(revert)
[L9238]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8793]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8794]   COND FALSE  !(revert)
[L8797]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L8797]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8798]   COND FALSE  !(revert)
[L8801]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8801]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8802]   COND FALSE  !(revert)
[L8805]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L8805]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8806]   COND FALSE  !(revert)
[L8809]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7354]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7355]   COND FALSE  !(revert)
[L7358]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7358]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7359]   COND FALSE  !(revert)
[L7362]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7362]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7363]   COND FALSE  !(revert)
[L7366]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7366]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]   COND FALSE  !(revert)
[L7370]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]               assume msgsender_MSG != null;
[L7318]               Balance[this] := 0;
[L7319]               chains_FreezableToken[this] := zerointintArr();
[L7320]               sum_chains2[this] := 0;
[L7321]               freezings_FreezableToken[this] := zerointintArr();
[L7322]               sum_freezings3[this] := 0;
[L7323]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7324]               sum_freezingBalance4[this] := 0;
[L7370]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7371]   COND FALSE  !(revert)
[L8809]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8810]   COND FALSE  !(revert)
[L8813]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8813]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]   COND FALSE  !(revert)
[L8817]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7173]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7174]   COND FALSE  !(revert)
[L7177]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L7177]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L7181]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7182]   COND FALSE  !(revert)
[L7185]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6747]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6748]   COND FALSE  !(revert)
[L6751]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6695]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6696]   COND FALSE  !(revert)
[L6699]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]               assume msgsender_MSG != null;
[L6677]               Balance[this] := 0;
[L6699]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6751]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6752]   COND FALSE  !(revert)
[L6755]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L6755]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6756]   COND FALSE  !(revert)
[L6759]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6718]               assume msgsender_MSG != null;
[L6719]               Balance[this] := 0;
[L6720]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6721]               sum_allowed1[this] := 0;
[L6759]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6760]   COND FALSE  !(revert)
[L7185]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7186]   COND FALSE  !(revert)
[L7189]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L7189]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]               assume msgsender_MSG != null;
[L7138]               Balance[this] := 0;
[L7139]               mintingFinished_MintableToken[this] := false;
[L7193]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7194]   COND FALSE  !(revert)
[L8817]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8818]   COND FALSE  !(revert)
[L8821]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8750]               assume msgsender_MSG != null;
[L8751]               Balance[this] := 0;
[L8821]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8822]   COND FALSE  !(revert)
[L9238]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9239]   COND FALSE  !(revert)
[L9242]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L8537]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8538]   COND FALSE  !(revert)
[L8541]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6414]               assume msgsender_MSG != null;
[L6415]               Balance[this] := 0;
[L6429]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6566]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6567]   COND FALSE  !(revert)
[L6570]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]               assume msgsender_MSG != null;
[L6545]               Balance[this] := 0;
[L6546]               balances_BasicToken[this] := zeroRefintArr();
[L6547]               sum_balances0[this] := 0;
[L6548]               totalSupply__BasicToken[this] := 0;
[L6570]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6571]   COND FALSE  !(revert)
[L8541]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8542]   COND FALSE  !(revert)
[L8545]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8514]               assume msgsender_MSG != null;
[L8515]               Balance[this] := 0;
[L8545]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8546]   COND FALSE  !(revert)
[L9242]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND FALSE  !(revert)
[L9246]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6972]               assume msgsender_MSG != null;
[L6973]               Balance[this] := 0;
[L6974]               owner_Ownable[this] := null;
[L6976]               owner_Ownable[this] := msgsender_MSG;
[L6989]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6990]   COND FALSE  !(revert)
[L8663]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8664]   COND FALSE  !(revert)
[L8667]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8643]               assume msgsender_MSG != null;
[L8644]               Balance[this] := 0;
[L8645]               paused_Pausable[this] := false;
[L8667]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8668]   COND FALSE  !(revert)
[L9246]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9247]   COND FALSE  !(revert)
[L9250]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]               assume msgsender_MSG != null;
[L9135]               Balance[this] := 0;
[L9136]               initialized_MainToken[this] := false;
[L9138]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!initialized_MainToken[this])
[L9409]               initialized_MainToken[this] := true;
[L9410]   COND FALSE  !(PAUSED_Consts[this])
[L9420]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9430]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9138]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9139]   COND FALSE  !(revert)
[L9142]   COND TRUE   DType[this] == MainToken
[L9143]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7056]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12333]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7056]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   COND TRUE   DType[this] == MainToken
[L7061]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7104]               __var_11 := null;
[L7105]   COND FALSE  !(!(_newOwner_s581 != null))
[L7109]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7110]               owner_Ownable[this] := _newOwner_s581;
[L7061]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7062]   COND FALSE  !(revert)
[L9143]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9144]   COND FALSE  !(revert)
[L9250]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L4223]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4224]               assume !revert && gas >= 0;
[L14385]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
MainToken(3979026).transferFrom~address~address~uint256.gas(3979002)({from : 3979019, _from : 3979003, _to : 0, _value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4516]               havoc __exception;
[L4517]               revert := false;
[L4518]   COND TRUE   __exception
[L4519]               __tmp__Balance := Balance;
[L4520]               __tmp__DType := DType;
[L4521]               __tmp__Alloc := Alloc;
[L4522]               __tmp__balance_ADDR := balance_ADDR;
[L4523]               __tmp__M_Ref_int := M_Ref_int;
[L4524]               __tmp__sum_balances0 := sum_balances0;
[L4525]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4526]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4527]               __tmp__sum_allowed1 := sum_allowed1;
[L4528]               __tmp__M_int_int := M_int_int;
[L4529]               __tmp__sum_chains2 := sum_chains2;
[L4530]               __tmp__sum_freezings3 := sum_freezings3;
[L4531]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4532]               __tmp__Length := Length;
[L4533]               __tmp__now := now;
[L4534]               __tmp__balances_BasicToken := balances_BasicToken;
[L4535]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4536]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4537]               __tmp__owner_Ownable := owner_Ownable;
[L4538]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4539]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4540]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4541]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4542]               __tmp__paused_Pausable := paused_Pausable;
[L4543]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4544]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4545]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4546]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4547]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4548]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4549]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4550]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4551]               __tmp__initialized_MainToken := initialized_MainToken;
[L4552]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9296]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9300]   COND TRUE   __tmp__DType[this] == MainToken
[L9301]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L6771]               __var_4 := null;
[L6772]   COND TRUE   !(_to_s351 != null)
[L6773]               revert := true;
[L9301]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9302]   COND TRUE   revert
[L4552]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4553]               assume revert || gas < 0;
[L14161]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);

Loop:
MainToken(3979026).transferFrom~address~address~uint256.gas(3979001)({from : 3979021, _from : 3979024, _to : 0, _value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != _from_s1551 && p1 != _to_s1551) && (p2 != _from_s1551 || p3 != msgsender_MSG)) && _from_s1551 != _to_s1551) && _value_s1551 <= balances_BasicToken[this][_from_s1551]) && _value_s1551 <= allowed_StandardToken[this][_from_s1551][msgsender_MSG]) && balances_BasicToken[this][_to_s1551] + _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_MainToken0 := true;
[L3]                  call_transferFrom_MainToken0 := false;
[L3]                  revert := revert_hold;
[L4516]               havoc __exception;
[L4517]               revert := false;
[L4518]   COND TRUE   __exception
[L4519]               __tmp__Balance := Balance;
[L4520]               __tmp__DType := DType;
[L4521]               __tmp__Alloc := Alloc;
[L4522]               __tmp__balance_ADDR := balance_ADDR;
[L4523]               __tmp__M_Ref_int := M_Ref_int;
[L4524]               __tmp__sum_balances0 := sum_balances0;
[L4525]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4526]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4527]               __tmp__sum_allowed1 := sum_allowed1;
[L4528]               __tmp__M_int_int := M_int_int;
[L4529]               __tmp__sum_chains2 := sum_chains2;
[L4530]               __tmp__sum_freezings3 := sum_freezings3;
[L4531]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4532]               __tmp__Length := Length;
[L4533]               __tmp__now := now;
[L4534]               __tmp__balances_BasicToken := balances_BasicToken;
[L4535]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4536]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4537]               __tmp__owner_Ownable := owner_Ownable;
[L4538]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4539]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4540]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4541]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4542]               __tmp__paused_Pausable := paused_Pausable;
[L4543]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4544]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4545]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4546]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4547]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4548]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4549]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4550]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4551]               __tmp__initialized_MainToken := initialized_MainToken;
[L4552]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9296]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9300]   COND TRUE   __tmp__DType[this] == MainToken
[L9301]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L6771]               __var_4 := null;
[L6772]   COND TRUE   !(_to_s351 != null)
[L6773]               revert := true;
[L9301]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9302]   COND TRUE   revert
[L4552]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4553]               assume revert || gas < 0;
[L14161]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
