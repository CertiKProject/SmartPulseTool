This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:43:40,427 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:43:40,429 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:43:40,440 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:43:40,441 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:43:40,441 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:43:40,442 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:43:40,444 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:43:40,446 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:43:40,447 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:43:40,447 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:43:40,448 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:43:40,448 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:43:40,449 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:43:40,450 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:43:40,451 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:43:40,452 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:43:40,453 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:43:40,455 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:43:40,456 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:43:40,457 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:43:40,458 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:43:40,460 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:43:40,460 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:43:40,460 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:43:40,461 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:43:40,461 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:43:40,462 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:43:40,462 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:43:40,462 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:43:40,463 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:43:40,463 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:43:40,464 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:43:40,464 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:43:40,465 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:43:40,465 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:43:40,466 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:43:40,466 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:43:40,466 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:43:40,467 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:43:40,467 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:43:40,468 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:43:40,476 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:43:40,476 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:43:40,477 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:43:40,477 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:43:40,477 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:43:40,477 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:43:40,477 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:43:40,477 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:43:40,477 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:43:40,478 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:43:40,478 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:43:40,478 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:43:40,478 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:43:40,478 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:43:40,478 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:43:40,478 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:43:40,478 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:43:40,478 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:43:40,479 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:43:40,479 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:43:40,479 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:43:40,479 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:43:40,479 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:43:40,479 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:43:40,479 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:43:40,479 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:43:40,502 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:43:40,515 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:43:40,518 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:43:40,519 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:43:40,519 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:43:40,520 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl
[2020-11-24 20:43:40,520 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl'
[2020-11-24 20:43:40,706 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:43:40,708 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:43:40,708 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:43:40,708 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:43:40,708 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:43:40,725 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:40" (1/1) ...
[2020-11-24 20:43:40,727 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:40" (1/1) ...
[2020-11-24 20:43:40,779 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:40" (1/1) ...
[2020-11-24 20:43:40,780 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:40" (1/1) ...
[2020-11-24 20:43:40,829 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:40" (1/1) ...
[2020-11-24 20:43:40,864 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:40" (1/1) ...
[2020-11-24 20:43:40,885 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:40" (1/1) ...
[2020-11-24 20:43:40,912 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:43:40,913 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:43:40,913 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:43:40,915 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:43:40,919 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:40" (1/1) ...
[2020-11-24 20:43:40,952 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(FreezableToken.balanceOf(owner), balances_BasicToken[this][owner] >= 0 && balances_BasicToken[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FreezableToken.balanceOf(owner), return == balances_BasicToken[this][owner] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 20:43:40,958 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(FreezableToken.balanceOf(owner), balances_BasicToken[this][owner] >= 0 && balances_BasicToken[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FreezableToken.balanceOf(owner), return == balances_BasicToken[this][owner] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 20:43:40,966 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(FreezableToken.balanceOf(owner), balances_BasicToken[this][owner] >= 0 && balances_BasicToken[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FreezableToken.balanceOf(owner), return == balances_BasicToken[this][owner] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 20:43:40,973 INFO  L636   opiaSpecLangObserver]: Parsed ( balances_BasicToken[this][_owner_s729]>=0 && balances_BasicToken[this][_owner_s729]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],[IdentifierExpression[_owner_s729,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],[IdentifierExpression[_owner_s729,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:43:40,977 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( balance_s729==balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[balance_s729,<IMPLEMENTATION_OUTPARAM,balanceOf~address_FreezableToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],[IdentifierExpression[_owner_s729,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]]
[2020-11-24 20:43:40,985 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(FreezableToken.balanceOf(owner), balances_BasicToken[this][owner] >= 0 && balances_BasicToken[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FreezableToken.balanceOf(owner), return == balances_BasicToken[this][owner] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 20:43:40,985 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_balanceOf_FreezableToken0) ==> ( <>AP(success_balanceOf_FreezableToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:43:41,011 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:43:41 PropertyContainer
[2020-11-24 20:43:41,012 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:43:41,012 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:43:41,012 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:43:41,012 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:43:41,013 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:40" (1/2) ...
[2020-11-24 20:43:41,014 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:43:41,014 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:43:41,048 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:43:41" (2/2) ...
[2020-11-24 20:43:41,048 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:43:41,048 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:43:41,048 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:43:41,049 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:43:41,049 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:40" (1/2) ...
[2020-11-24 20:43:41,106 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:43:41,107 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 20:43:41,107 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 20:43:41,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 20:43:41,107 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 20:43:41,107 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 20:43:41,107 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 20:43:41,107 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:43:41,108 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:43:41,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:43:41,108 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:43:41,108 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:43:41,108 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:43:41,108 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:43:41,108 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 20:43:41,108 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 20:43:41,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 20:43:41,109 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 20:43:41,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 20:43:41,109 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 20:43:41,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 20:43:41,109 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 20:43:41,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 20:43:41,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:43:41,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 20:43:41,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 20:43:41,110 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 20:43:41,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:43:41,110 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 20:43:41,110 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 20:43:41,110 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 20:43:41,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 20:43:41,111 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 20:43:41,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 20:43:41,111 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 20:43:41,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 20:43:41,111 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 20:43:41,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 20:43:41,111 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 20:43:41,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 20:43:41,111 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 20:43:41,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 20:43:41,112 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:43:41,112 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 20:43:41,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 20:43:41,112 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 20:43:41,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 20:43:41,112 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 20:43:41,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 20:43:41,112 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 20:43:41,112 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 20:43:41,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 20:43:41,113 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 20:43:41,113 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 20:43:41,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 20:43:41,113 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 20:43:41,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 20:43:41,113 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 20:43:41,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 20:43:41,113 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 20:43:41,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 20:43:41,113 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 20:43:41,114 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 20:43:41,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 20:43:41,114 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 20:43:41,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 20:43:41,114 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 20:43:41,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 20:43:41,114 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 20:43:41,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 20:43:41,114 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 20:43:41,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 20:43:41,114 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 20:43:41,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 20:43:41,115 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 20:43:41,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 20:43:41,115 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 20:43:41,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 20:43:41,115 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 20:43:41,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 20:43:41,115 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 20:43:41,115 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 20:43:41,116 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 20:43:41,116 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 20:43:41,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 20:43:41,116 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 20:43:41,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 20:43:41,116 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 20:43:41,116 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:43:41,116 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 20:43:41,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 20:43:41,116 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 20:43:41,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 20:43:41,117 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 20:43:41,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 20:43:41,117 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 20:43:41,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 20:43:41,117 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 20:43:41,117 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 20:43:41,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 20:43:41,117 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 20:43:41,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 20:43:41,117 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 20:43:41,118 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 20:43:41,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 20:43:41,118 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 20:43:41,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 20:43:41,118 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 20:43:41,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 20:43:41,118 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 20:43:41,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 20:43:41,118 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 20:43:41,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 20:43:41,119 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 20:43:41,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 20:43:41,119 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 20:43:41,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 20:43:41,119 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 20:43:41,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 20:43:41,119 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 20:43:41,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 20:43:41,119 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 20:43:41,120 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 20:43:41,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 20:43:41,120 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 20:43:41,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 20:43:41,120 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 20:43:41,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 20:43:41,120 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 20:43:41,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 20:43:41,120 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 20:43:41,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 20:43:41,121 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 20:43:41,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 20:43:41,121 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 20:43:41,121 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 20:43:41,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 20:43:41,121 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:43:41,121 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:43:41,121 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:43:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 20:43:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 20:43:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 20:43:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 20:43:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 20:43:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 20:43:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 20:43:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:43:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:43:41,122 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 20:43:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 20:43:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 20:43:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 20:43:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 20:43:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 20:43:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 20:43:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 20:43:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 20:43:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 20:43:41,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 20:43:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 20:43:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 20:43:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 20:43:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 20:43:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 20:43:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 20:43:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 20:43:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 20:43:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 20:43:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 20:43:41,124 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:43:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:43:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 20:43:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 20:43:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 20:43:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:43:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:43:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:43:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:43:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:43:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:43:41,125 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:43:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 20:43:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 20:43:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 20:43:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 20:43:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 20:43:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 20:43:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 20:43:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 20:43:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 20:43:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:43:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 20:43:41,126 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 20:43:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 20:43:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 20:43:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 20:43:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 20:43:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 20:43:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 20:43:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 20:43:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 20:43:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 20:43:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:43:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:43:41,127 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:43:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:43:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:43:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 20:43:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 20:43:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 20:43:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 20:43:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:43:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:43:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 20:43:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 20:43:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 20:43:41,128 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 20:43:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 20:43:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 20:43:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 20:43:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 20:43:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 20:43:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 20:43:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 20:43:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 20:43:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 20:43:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 20:43:41,129 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 20:43:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 20:43:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 20:43:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 20:43:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 20:43:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 20:43:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 20:43:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 20:43:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 20:43:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 20:43:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 20:43:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 20:43:41,130 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 20:43:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 20:43:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 20:43:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 20:43:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 20:43:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 20:43:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 20:43:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 20:43:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 20:43:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 20:43:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 20:43:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 20:43:41,131 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 20:43:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:43:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 20:43:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 20:43:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 20:43:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 20:43:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 20:43:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 20:43:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 20:43:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 20:43:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 20:43:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 20:43:41,132 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 20:43:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 20:43:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 20:43:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 20:43:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 20:43:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 20:43:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 20:43:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 20:43:41,133 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 20:43:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 20:43:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 20:43:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 20:43:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 20:43:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 20:43:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 20:43:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 20:43:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 20:43:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 20:43:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 20:43:41,134 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 20:43:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 20:43:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 20:43:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 20:43:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 20:43:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 20:43:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 20:43:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 20:43:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 20:43:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 20:43:41,135 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 20:43:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 20:43:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 20:43:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 20:43:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 20:43:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 20:43:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 20:43:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 20:43:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 20:43:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:43:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:43:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:43:41,136 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 20:43:41,137 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 20:43:41,137 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 20:43:41,137 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 20:43:41,137 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 20:43:41,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:43:41,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:43:41,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 20:43:41,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 20:43:41,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 20:43:41,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 20:43:41,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:43:41,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:43:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:43:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:43:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:43:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:43:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:43:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:43:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:43:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:43:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:43:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:43:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 20:43:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 20:43:41,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 20:43:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 20:43:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 20:43:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 20:43:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 20:43:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 20:43:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 20:43:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 20:43:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:43:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:43:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 20:43:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 20:43:41,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 20:43:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 20:43:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 20:43:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 20:43:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 20:43:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 20:43:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 20:43:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 20:43:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 20:43:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 20:43:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:43:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:43:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:43:41,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:43:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:43:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:43:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 20:43:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 20:43:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 20:43:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 20:43:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:43:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:43:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 20:43:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 20:43:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 20:43:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 20:43:41,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 20:43:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 20:43:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 20:43:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 20:43:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 20:43:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 20:43:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 20:43:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 20:43:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 20:43:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 20:43:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 20:43:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 20:43:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 20:43:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 20:43:41,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 20:43:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 20:43:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 20:43:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 20:43:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 20:43:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 20:43:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 20:43:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 20:43:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 20:43:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 20:43:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 20:43:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 20:43:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 20:43:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 20:43:41,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 20:43:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 20:43:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 20:43:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 20:43:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 20:43:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 20:43:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 20:43:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 20:43:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 20:43:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 20:43:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 20:43:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 20:43:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 20:43:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 20:43:41,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:43:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:43:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 20:43:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 20:43:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 20:43:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 20:43:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 20:43:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 20:43:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 20:43:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 20:43:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 20:43:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 20:43:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 20:43:41,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 20:43:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 20:43:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 20:43:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 20:43:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 20:43:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 20:43:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 20:43:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 20:43:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 20:43:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 20:43:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 20:43:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 20:43:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 20:43:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 20:43:41,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 20:43:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 20:43:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 20:43:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 20:43:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 20:43:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 20:43:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 20:43:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 20:43:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 20:43:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 20:43:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 20:43:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 20:43:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 20:43:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 20:43:41,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 20:43:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 20:43:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 20:43:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 20:43:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 20:43:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 20:43:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 20:43:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 20:43:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 20:43:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 20:43:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 20:43:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 20:43:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 20:43:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:43:41,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:43:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:43:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:43:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:43:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:43:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 20:43:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 20:43:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 20:43:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 20:43:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 20:43:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 20:43:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 20:43:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 20:43:41,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 20:43:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 20:43:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 20:43:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 20:43:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:43:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:43:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 20:43:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 20:43:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 20:43:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 20:43:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 20:43:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 20:43:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 20:43:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 20:43:41,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 20:43:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 20:43:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 20:43:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 20:43:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 20:43:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 20:43:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 20:43:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 20:43:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 20:43:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 20:43:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 20:43:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 20:43:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 20:43:41,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:43:41,151 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:43:41,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:43:41,565 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:43:41,565 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:43:41,566 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:43:42,886 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:43:42,886 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 20:43:42,890 INFO  L202        PluginConnector]: Adding new model MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:43:42 BoogieIcfgContainer
[2020-11-24 20:43:42,890 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:43:41" (2/2) ...
[2020-11-24 20:43:42,890 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:43:42,890 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3123b5ee and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:43:42, skipping insertion in model container
[2020-11-24 20:43:42,890 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:43:42,891 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:43:42,891 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:43:42,892 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:43:42,892 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:40" (1/3) ...
[2020-11-24 20:43:42,892 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@121cbace and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:43:42, skipping insertion in model container
[2020-11-24 20:43:42,892 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:43:41" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:43:42,917 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:43:42 NWAContainer
[2020-11-24 20:43:42,917 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:43:42,917 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:43:42,918 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:43:42,918 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:43:42,918 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:43:42" (3/4) ...
[2020-11-24 20:43:42,919 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@120f2aaf and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:43:42, skipping insertion in model container
[2020-11-24 20:43:42,919 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:43:42" (4/4) ...
[2020-11-24 20:43:42,921 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:43:42,928 INFO  L110   BuchiProductObserver]: Initial RCFG 5478 locations, 7654 edges
[2020-11-24 20:43:42,928 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:43:42,940 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:43:47,043 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:43:47,060 INFO  L110   BuchiProductObserver]: BuchiProgram size 13636 locations, 24999 edges
[2020-11-24 20:43:47,060 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:43:47 BoogieIcfgContainer
[2020-11-24 20:43:47,060 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:43:47,060 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:43:47,060 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:43:47,061 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:43:47,062 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:43:47" (1/1) ...
[2020-11-24 20:43:47,356 INFO  L313           BlockEncoder]: Initial Icfg 13636 locations, 24999 edges
[2020-11-24 20:43:47,356 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:43:47,357 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:43:47,357 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:43:47,357 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:43:47,380 INFO  L70    emoveInfeasibleEdges]: Removed 315 edges and 29 locations because of local infeasibility
[2020-11-24 20:43:47,397 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-24 20:43:47,419 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:43:47,426 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:43:47,433 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:43:47,434 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:43:47,439 INFO  L313           BlockEncoder]: Encoded RCFG 13426 locations, 24413 edges
[2020-11-24 20:43:47,439 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:43:47 BasicIcfg
[2020-11-24 20:43:47,439 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:43:47,439 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:43:47,439 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:43:47,441 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:43:47,441 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:43:47,441 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:40" (1/6) ...
[2020-11-24 20:43:47,442 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1ab1fd41 and model type MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:43:47, skipping insertion in model container
[2020-11-24 20:43:47,442 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:43:47,443 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:43:41" (2/6) ...
[2020-11-24 20:43:47,443 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1ab1fd41 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:43:47, skipping insertion in model container
[2020-11-24 20:43:47,443 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:43:47,444 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:43:42" (3/6) ...
[2020-11-24 20:43:47,444 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1ab1fd41 and model type MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:43:47, skipping insertion in model container
[2020-11-24 20:43:47,444 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:43:47,444 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:43:42" (4/6) ...
[2020-11-24 20:43:47,444 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1ab1fd41 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:43:47, skipping insertion in model container
[2020-11-24 20:43:47,444 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:43:47,444 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:43:47" (5/6) ...
[2020-11-24 20:43:47,444 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1ab1fd41 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:43:47, skipping insertion in model container
[2020-11-24 20:43:47,445 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:43:47,445 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:43:47" (6/6) ...
[2020-11-24 20:43:47,445 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_balanceof.bpl_BEv2
[2020-11-24 20:43:47,480 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:43:47,480 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:43:47,480 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:43:47,480 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:43:47,480 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:43:47,480 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:43:47,480 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:43:47,480 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:43:47,480 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:43:47,560 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13426 states.
[2020-11-24 20:43:47,643 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:43:47,643 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:43:47,643 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:43:47,651 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:47,651 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:47,651 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:43:47,651 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13426 states.
[2020-11-24 20:43:47,695 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:43:47,695 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:43:47,695 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:43:47,697 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:47,697 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND TRUE   revert
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND TRUE   revert
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND FALSE  !(gas >= 0)
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:43:47,711 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:43:47,711 INFO  L82        PathProgramCache]: Analyzing trace with hash 548538444, now seen corresponding path program 1 times
[2020-11-24 20:43:47,716 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:43:47,738 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:43:47,778 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:43:47,779 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:43:47,780 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:43:48,188 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:43:48,197 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:43:48,197 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:43:48,198 INFO  L87              Difference]: Start difference. First operand 13426 states. Second operand 4 states.
[2020-11-24 20:43:49,514 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:43:49,514 INFO  L93              Difference]: Finished difference Result 8370 states and 9785 transitions.
[2020-11-24 20:43:49,514 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:43:49,516 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8370 states and 9785 transitions.
[2020-11-24 20:43:49,550 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:43:49,592 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8370 states to 8366 states and 9777 transitions.
[2020-11-24 20:43:49,592 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 20:43:49,596 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1857
[2020-11-24 20:43:49,596 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8366 states and 9777 transitions.
[2020-11-24 20:43:49,614 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:43:49,614 INFO  L728         BuchiCegarLoop]: Abstraction has 8366 states and 9777 transitions.
[2020-11-24 20:43:49,637 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8366 states and 9777 transitions.
[2020-11-24 20:43:49,744 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8366 to 8366.
[2020-11-24 20:43:49,744 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8366 states.
[2020-11-24 20:43:49,755 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8366 states to 8366 states and 9777 transitions.
[2020-11-24 20:43:49,756 INFO  L751         BuchiCegarLoop]: Abstraction has 8366 states and 9777 transitions.
[2020-11-24 20:43:49,756 INFO  L631         BuchiCegarLoop]: Abstraction has 8366 states and 9777 transitions.
[2020-11-24 20:43:49,756 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:43:49,756 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8366 states and 9777 transitions.
[2020-11-24 20:43:49,768 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:43:49,769 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:43:49,769 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:43:49,770 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:49,771 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND TRUE   revert
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND TRUE   revert
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND FALSE  !(DType[this] == MainToken)
[L7735]   COND TRUE   DType[this] == FreezableMintableToken
[L7736]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7736]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7737]   COND TRUE   revert
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND FALSE  !(DType[this] == MainToken)
[L7735]   COND TRUE   DType[this] == FreezableMintableToken
[L7736]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7736]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7737]   COND TRUE   revert
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:43:49,774 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:43:49,774 INFO  L82        PathProgramCache]: Analyzing trace with hash -77328645, now seen corresponding path program 1 times
[2020-11-24 20:43:49,776 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:43:49,786 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:43:49,821 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:43:49,821 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:43:49,821 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-24 20:43:49,822 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:43:49,822 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 20:43:49,823 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-11-24 20:43:49,823 INFO  L87              Difference]: Start difference. First operand 8366 states and 9777 transitions. cyclomatic complexity: 1431 Second operand 6 states.
[2020-11-24 20:43:53,265 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:43:53,266 INFO  L93              Difference]: Finished difference Result 14288 states and 15953 transitions.
[2020-11-24 20:43:53,266 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 20:43:53,267 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14288 states and 15953 transitions.
[2020-11-24 20:43:53,313 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:43:53,378 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14288 states to 13888 states and 15493 transitions.
[2020-11-24 20:43:53,378 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3469
[2020-11-24 20:43:53,381 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3498
[2020-11-24 20:43:53,381 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13888 states and 15493 transitions.
[2020-11-24 20:43:53,397 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:43:53,398 INFO  L728         BuchiCegarLoop]: Abstraction has 13888 states and 15493 transitions.
[2020-11-24 20:43:53,409 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13888 states and 15493 transitions.
[2020-11-24 20:43:53,534 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13888 to 13270.
[2020-11-24 20:43:53,534 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 13270 states.
[2020-11-24 20:43:53,549 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 13270 states to 13270 states and 14688 transitions.
[2020-11-24 20:43:53,549 INFO  L751         BuchiCegarLoop]: Abstraction has 13270 states and 14688 transitions.
[2020-11-24 20:43:53,550 INFO  L631         BuchiCegarLoop]: Abstraction has 13270 states and 14688 transitions.
[2020-11-24 20:43:53,550 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:43:53,550 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13270 states and 14688 transitions.
[2020-11-24 20:43:53,567 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:43:53,567 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:43:53,567 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:43:53,574 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:53,574 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND FALSE  !(DType[this] == MainToken)
[L7735]   COND TRUE   DType[this] == FreezableMintableToken
[L7736]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7736]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7737]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND FALSE  !(DType[this] == MainToken)
[L7735]   COND TRUE   DType[this] == FreezableMintableToken
[L7736]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7736]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7737]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:43:53,586 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:43:53,586 INFO  L82        PathProgramCache]: Analyzing trace with hash 1604321724, now seen corresponding path program 1 times
[2020-11-24 20:43:53,587 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:43:53,632 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:43:54,221 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 20:43:54,221 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:43:54,222 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 20:43:54,223 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:43:54,223 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 20:43:54,223 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 20:43:54,223 INFO  L87              Difference]: Start difference. First operand 13270 states and 14688 transitions. cyclomatic complexity: 1438 Second operand 6 states.
[2020-11-24 20:43:54,407 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:43:54,407 INFO  L93              Difference]: Finished difference Result 13324 states and 14744 transitions.
[2020-11-24 20:43:54,407 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 20:43:54,407 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13324 states and 14744 transitions.
[2020-11-24 20:43:54,434 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:43:54,472 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13324 states to 13250 states and 14660 transitions.
[2020-11-24 20:43:54,472 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3382
[2020-11-24 20:43:54,473 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3382
[2020-11-24 20:43:54,474 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13250 states and 14660 transitions.
[2020-11-24 20:43:54,483 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:43:54,483 INFO  L728         BuchiCegarLoop]: Abstraction has 13250 states and 14660 transitions.
[2020-11-24 20:43:54,492 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13250 states and 14660 transitions.
[2020-11-24 20:43:54,586 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13250 to 13250.
[2020-11-24 20:43:54,586 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 13250 states.
[2020-11-24 20:43:54,602 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 13250 states to 13250 states and 14660 transitions.
[2020-11-24 20:43:54,602 INFO  L751         BuchiCegarLoop]: Abstraction has 13250 states and 14660 transitions.
[2020-11-24 20:43:54,602 INFO  L631         BuchiCegarLoop]: Abstraction has 13250 states and 14660 transitions.
[2020-11-24 20:43:54,602 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:43:54,602 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13250 states and 14660 transitions.
[2020-11-24 20:43:54,619 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:43:54,619 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:43:54,619 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:43:54,624 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:54,624 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND FALSE  !(gas >= 0)
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:43:54,642 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:43:54,643 INFO  L82        PathProgramCache]: Analyzing trace with hash -125524576, now seen corresponding path program 1 times
[2020-11-24 20:43:54,644 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:43:54,697 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:43:55,362 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 20:43:55,362 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:43:55,362 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:43:55,363 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:43:55,363 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:43:55,363 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:43:55,364 INFO  L87              Difference]: Start difference. First operand 13250 states and 14660 transitions. cyclomatic complexity: 1430 Second operand 7 states.
[2020-11-24 20:43:55,509 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:43:55,509 INFO  L93              Difference]: Finished difference Result 13261 states and 14671 transitions.
[2020-11-24 20:43:55,510 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:43:55,510 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13261 states and 14671 transitions.
[2020-11-24 20:43:55,540 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:43:55,573 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13261 states to 13250 states and 14659 transitions.
[2020-11-24 20:43:55,573 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3382
[2020-11-24 20:43:55,575 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3382
[2020-11-24 20:43:55,575 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13250 states and 14659 transitions.
[2020-11-24 20:43:55,584 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:43:55,584 INFO  L728         BuchiCegarLoop]: Abstraction has 13250 states and 14659 transitions.
[2020-11-24 20:43:55,594 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13250 states and 14659 transitions.
[2020-11-24 20:43:55,660 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13250 to 13250.
[2020-11-24 20:43:55,660 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 13250 states.
[2020-11-24 20:43:55,673 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 13250 states to 13250 states and 14659 transitions.
[2020-11-24 20:43:55,674 INFO  L751         BuchiCegarLoop]: Abstraction has 13250 states and 14659 transitions.
[2020-11-24 20:43:55,674 INFO  L631         BuchiCegarLoop]: Abstraction has 13250 states and 14659 transitions.
[2020-11-24 20:43:55,674 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:43:55,674 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13250 states and 14659 transitions.
[2020-11-24 20:43:55,688 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:43:55,688 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:43:55,688 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:43:55,691 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:55,691 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND TRUE   __exception
[L4394]               __tmp__Balance := Balance;
[L4395]               __tmp__DType := DType;
[L4396]               __tmp__Alloc := Alloc;
[L4397]               __tmp__balance_ADDR := balance_ADDR;
[L4398]               __tmp__M_Ref_int := M_Ref_int;
[L4399]               __tmp__sum_balances0 := sum_balances0;
[L4400]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4401]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4402]               __tmp__sum_allowed1 := sum_allowed1;
[L4403]               __tmp__M_int_int := M_int_int;
[L4404]               __tmp__sum_chains2 := sum_chains2;
[L4405]               __tmp__sum_freezings3 := sum_freezings3;
[L4406]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4407]               __tmp__M_int_Ref := M_int_Ref;
[L4408]               __tmp__sum := sum;
[L4409]               __tmp__Length := Length;
[L4410]               __tmp__now := now;
[L4411]               __tmp__balances_BasicToken := balances_BasicToken;
[L4412]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4413]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4414]               __tmp__owner_Ownable := owner_Ownable;
[L4415]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4416]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4417]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4418]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4419]               __tmp__paused_Pausable := paused_Pausable;
[L4420]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4421]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4422]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4423]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4424]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4425]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4426]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4427]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4428]               __tmp__initialized_MainToken := initialized_MainToken;
[L4429]   CALL        call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9478]   CALL        call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9324]   CALL        call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9290]               assume msgsender_MSG != null;
[L9291]               __tmp__Balance[this] := 0;
[L9292]               __tmp__TOKEN_DECIMALS_Consts[this] := 18;
[L9293]               __tmp__TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9294]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, __tmp__TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9295]               __tmp__TOKEN_NAME_Consts[this] := -1350554499;
[L9296]               __tmp__TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9297]               __tmp__PAUSED_Consts[this] := false;
[L9298]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9299]               __tmp__TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9300]               __tmp__CONTINUE_MINTING_Consts[this] := false;
[L9324]   RET         call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND FALSE  !(revert)
[L9478]   RET         call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9479]   COND FALSE  !(revert)
[L9482]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L9482]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9483]   COND FALSE  !(revert)
[L9486]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L9486]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9487]   COND FALSE  !(revert)
[L9490]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L9490]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9491]   COND FALSE  !(revert)
[L9494]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L9494]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(revert)
[L9498]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7627]               assume msgsender_MSG != null;
[L7628]               __tmp__Balance[this] := 0;
[L7629]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7630]               __tmp__sum_chains2[this] := 0;
[L7631]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7632]               __tmp__sum_freezings3[this] := 0;
[L7633]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7634]               __tmp__sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9498]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9499]   COND FALSE  !(revert)
[L9502]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7305]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7286]               assume msgsender_MSG != null;
[L7287]               __tmp__Balance[this] := 0;
[L7288]               __tmp__owner_Ownable[this] := null;
[L7290]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7305]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   COND FALSE  !(revert)
[L9502]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(revert)
[L9506]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7469]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7469]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7470]   COND FALSE  !(revert)
[L7473]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7473]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7477]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L7481]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7305]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7286]               assume msgsender_MSG != null;
[L7287]               __tmp__Balance[this] := 0;
[L7288]               __tmp__owner_Ownable[this] := null;
[L7290]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7305]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   COND FALSE  !(revert)
[L7485]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7452]               assume msgsender_MSG != null;
[L7453]               __tmp__Balance[this] := 0;
[L7454]               __tmp__mintingFinished_MintableToken[this] := false;
[L7489]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L9506]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9081]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L9081]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9082]   COND FALSE  !(revert)
[L9085]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L9085]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9086]   COND FALSE  !(revert)
[L9089]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L9089]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9090]   COND FALSE  !(revert)
[L9093]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L9093]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7627]               assume msgsender_MSG != null;
[L7628]               __tmp__Balance[this] := 0;
[L7629]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7630]               __tmp__sum_chains2[this] := 0;
[L7631]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7632]               __tmp__sum_freezings3[this] := 0;
[L7633]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7634]               __tmp__sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9097]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7305]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7286]               assume msgsender_MSG != null;
[L7287]               __tmp__Balance[this] := 0;
[L7288]               __tmp__owner_Ownable[this] := null;
[L7290]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7305]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   COND FALSE  !(revert)
[L9101]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7469]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7469]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7470]   COND FALSE  !(revert)
[L7473]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7473]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7477]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L7481]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7305]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7286]               assume msgsender_MSG != null;
[L7287]               __tmp__Balance[this] := 0;
[L7288]               __tmp__owner_Ownable[this] := null;
[L7290]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7305]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   COND FALSE  !(revert)
[L7485]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7452]               assume msgsender_MSG != null;
[L7453]               __tmp__Balance[this] := 0;
[L7454]               __tmp__mintingFinished_MintableToken[this] := false;
[L7489]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L9105]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9066]               assume msgsender_MSG != null;
[L9067]               __tmp__Balance[this] := 0;
[L9109]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9510]   RET         call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8845]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L8845]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L8849]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L8849]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8850]   COND FALSE  !(revert)
[L8853]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8830]               assume msgsender_MSG != null;
[L8831]               __tmp__Balance[this] := 0;
[L8853]   RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8854]   COND FALSE  !(revert)
[L9514]   RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8975]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7305]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7286]               assume msgsender_MSG != null;
[L7287]               __tmp__Balance[this] := 0;
[L7288]               __tmp__owner_Ownable[this] := null;
[L7290]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7305]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   COND FALSE  !(revert)
[L8975]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8976]   COND FALSE  !(revert)
[L8979]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8958]               assume msgsender_MSG != null;
[L8959]               __tmp__Balance[this] := 0;
[L8960]               __tmp__paused_Pausable[this] := false;
[L8979]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8980]   COND FALSE  !(revert)
[L9518]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9437]               assume msgsender_MSG != null;
[L9438]               __tmp__Balance[this] := 0;
[L9439]               __tmp__initialized_MainToken[this] := false;
[L9441]   CALL        call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9720]   COND FALSE  !(!!__tmp__initialized_MainToken[this])
[L9724]               __tmp__initialized_MainToken[this] := true;
[L9725]   COND FALSE  !(__tmp__PAUSED_Consts[this])
[L9735]               havoc addresses_s1781;
[L9736]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9737]               __tmp__M_int_Ref[addresses_s1781][0] := __var_57;
[L9738]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9739]               __tmp__M_int_Ref[addresses_s1781][1] := __var_58;
[L9740]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9741]               __tmp__M_int_Ref[addresses_s1781][2] := __var_59;
[L9742]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9743]               __tmp__M_int_Ref[addresses_s1781][3] := __var_60;
[L9744]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9745]               __tmp__M_int_Ref[addresses_s1781][4] := __var_61;
[L9746]               havoc amounts_s1781;
[L9747]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9748]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] - __tmp__M_int_int[amounts_s1781][0];
[L9749]               __tmp__M_int_int[amounts_s1781][0] := __var_62;
[L9750]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] + __tmp__M_int_int[amounts_s1781][0];
[L9751]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9752]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] - __tmp__M_int_int[amounts_s1781][1];
[L9753]               __tmp__M_int_int[amounts_s1781][1] := __var_63;
[L9754]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] + __tmp__M_int_int[amounts_s1781][1];
[L9755]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9756]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] - __tmp__M_int_int[amounts_s1781][2];
[L9757]               __tmp__M_int_int[amounts_s1781][2] := __var_64;
[L9758]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] + __tmp__M_int_int[amounts_s1781][2];
[L9759]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] - __tmp__M_int_int[amounts_s1781][3];
[L9761]               __tmp__M_int_int[amounts_s1781][3] := __var_65;
[L9762]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] + __tmp__M_int_int[amounts_s1781][3];
[L9763]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9764]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] - __tmp__M_int_int[amounts_s1781][4];
[L9765]               __tmp__M_int_int[amounts_s1781][4] := __var_66;
[L9766]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] + __tmp__M_int_int[amounts_s1781][4];
[L9767]               havoc freezes_s1781;
[L9768]               __var_67 := 1631905201 % 18446744073709551616;
[L9769]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] - __tmp__M_int_int[freezes_s1781][0];
[L9770]               __tmp__M_int_int[freezes_s1781][0] := __var_67;
[L9771]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] + __tmp__M_int_int[freezes_s1781][0];
[L9772]               __var_68 := 0 % 18446744073709551616;
[L9773]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] - __tmp__M_int_int[freezes_s1781][1];
[L9774]               __tmp__M_int_int[freezes_s1781][1] := __var_68;
[L9775]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] + __tmp__M_int_int[freezes_s1781][1];
[L9776]               __var_69 := 1758135601 % 18446744073709551616;
[L9777]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] - __tmp__M_int_int[freezes_s1781][2];
[L9778]               __tmp__M_int_int[freezes_s1781][2] := __var_69;
[L9779]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] + __tmp__M_int_int[freezes_s1781][2];
[L9780]               __var_70 := 0 % 18446744073709551616;
[L9781]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] - __tmp__M_int_int[freezes_s1781][3];
[L9782]               __tmp__M_int_int[freezes_s1781][3] := __var_70;
[L9783]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] + __tmp__M_int_int[freezes_s1781][3];
[L9784]               __var_71 := 0 % 18446744073709551616;
[L9785]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] - __tmp__M_int_int[freezes_s1781][4];
[L9786]               __tmp__M_int_int[freezes_s1781][4] := __var_71;
[L9787]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] + __tmp__M_int_int[freezes_s1781][4];
[L9788]               i_s1781 := 0;
[L9789]   COND FALSE  !(i_s1781 < __tmp__Length[addresses_s1781])
[L9813]   COND FALSE  !(!__tmp__CONTINUE_MINTING_Consts[this])
[L9441]   RET         call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9442]   COND FALSE  !(revert)
[L9445]   COND TRUE   __tmp__DType[this] == MainToken
[L9446]   CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L7344]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L12855]  COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L7344]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   COND TRUE   __tmp__DType[this] == MainToken
[L7349]   CALL        call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7417]               __var_11 := null;
[L7418]   COND FALSE  !(!(_newOwner_s581 != null))
[L7422]               __tmp__owner_Ownable[this] := _newOwner_s581;
[L7349]   RET         call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7350]   COND FALSE  !(revert)
[L9446]   RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L9447]   COND FALSE  !(revert)
[L9522]   RET         call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L4429]   RET         call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4430]               assume revert || gas < 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND FALSE  !(gas >= 0)
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:43:55,699 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:43:55,699 INFO  L82        PathProgramCache]: Analyzing trace with hash -757518875, now seen corresponding path program 1 times
[2020-11-24 20:43:55,700 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:43:55,734 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:43:56,326 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 20:43:56,326 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:43:56,326 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:43:56,328 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:43:56,328 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:43:56,328 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:43:56,329 INFO  L87              Difference]: Start difference. First operand 13250 states and 14659 transitions. cyclomatic complexity: 1429 Second operand 4 states.
[2020-11-24 20:43:56,943 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:43:56,943 INFO  L93              Difference]: Finished difference Result 15781 states and 17695 transitions.
[2020-11-24 20:43:56,943 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 20:43:56,943 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15781 states and 17695 transitions.
[2020-11-24 20:43:56,977 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-24 20:43:57,011 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15781 states to 14787 states and 16562 transitions.
[2020-11-24 20:43:57,011 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3789
[2020-11-24 20:43:57,013 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3798
[2020-11-24 20:43:57,013 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14787 states and 16562 transitions.
[2020-11-24 20:43:57,022 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:43:57,022 INFO  L728         BuchiCegarLoop]: Abstraction has 14787 states and 16562 transitions.
[2020-11-24 20:43:57,029 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14787 states and 16562 transitions.
[2020-11-24 20:43:57,115 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14787 to 13401.
[2020-11-24 20:43:57,116 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 13401 states.
[2020-11-24 20:43:57,130 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 13401 states to 13401 states and 14853 transitions.
[2020-11-24 20:43:57,130 INFO  L751         BuchiCegarLoop]: Abstraction has 13401 states and 14853 transitions.
[2020-11-24 20:43:57,130 INFO  L631         BuchiCegarLoop]: Abstraction has 13401 states and 14853 transitions.
[2020-11-24 20:43:57,131 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:43:57,131 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13401 states and 14853 transitions.
[2020-11-24 20:43:57,145 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:43:57,145 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:43:57,145 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:43:57,148 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:57,148 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND FALSE  !(gas >= 0)
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:43:57,156 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:43:57,156 INFO  L82        PathProgramCache]: Analyzing trace with hash 353446335, now seen corresponding path program 1 times
[2020-11-24 20:43:57,157 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:43:57,213 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:43:58,186 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 103 proven. 0 refuted. 0 times theorem prover too weak. 9723 trivial. 0 not checked.
[2020-11-24 20:43:58,186 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:43:58,186 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-24 20:43:58,187 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:43:58,187 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-24 20:43:58,187 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=37, Invalid=305, Unknown=0, NotChecked=0, Total=342
[2020-11-24 20:43:58,187 INFO  L87              Difference]: Start difference. First operand 13401 states and 14853 transitions. cyclomatic complexity: 1471 Second operand 19 states.
[2020-11-24 20:44:06,566 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:44:06,566 INFO  L93              Difference]: Finished difference Result 13775 states and 15283 transitions.
[2020-11-24 20:44:06,567 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-24 20:44:06,567 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13775 states and 15283 transitions.
[2020-11-24 20:44:06,594 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-24 20:44:06,624 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13775 states to 13775 states and 15283 transitions.
[2020-11-24 20:44:06,624 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3747
[2020-11-24 20:44:06,625 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3747
[2020-11-24 20:44:06,625 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13775 states and 15283 transitions.
[2020-11-24 20:44:06,633 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:44:06,633 INFO  L728         BuchiCegarLoop]: Abstraction has 13775 states and 15283 transitions.
[2020-11-24 20:44:06,641 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13775 states and 15283 transitions.
[2020-11-24 20:44:06,711 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13775 to 13718.
[2020-11-24 20:44:06,711 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 13718 states.
[2020-11-24 20:44:06,726 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 13718 states to 13718 states and 15207 transitions.
[2020-11-24 20:44:06,726 INFO  L751         BuchiCegarLoop]: Abstraction has 13718 states and 15207 transitions.
[2020-11-24 20:44:06,726 INFO  L631         BuchiCegarLoop]: Abstraction has 13718 states and 15207 transitions.
[2020-11-24 20:44:06,726 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:44:06,726 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13718 states and 15207 transitions.
[2020-11-24 20:44:06,741 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-24 20:44:06,741 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:44:06,741 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:44:06,743 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:44:06,743 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND TRUE   __exception
[L2095]               __tmp__Balance := Balance;
[L2096]               __tmp__DType := DType;
[L2097]               __tmp__Alloc := Alloc;
[L2098]               __tmp__balance_ADDR := balance_ADDR;
[L2099]               __tmp__M_Ref_int := M_Ref_int;
[L2100]               __tmp__sum_balances0 := sum_balances0;
[L2101]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L2102]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2103]               __tmp__sum_allowed1 := sum_allowed1;
[L2104]               __tmp__M_int_int := M_int_int;
[L2105]               __tmp__sum_chains2 := sum_chains2;
[L2106]               __tmp__sum_freezings3 := sum_freezings3;
[L2107]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L2108]               __tmp__M_int_Ref := M_int_Ref;
[L2109]               __tmp__sum := sum;
[L2110]               __tmp__Length := Length;
[L2111]               __tmp__now := now;
[L2112]               __tmp__balances_BasicToken := balances_BasicToken;
[L2113]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L2114]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L2115]               __tmp__owner_Ownable := owner_Ownable;
[L2116]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L2117]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L2118]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L2119]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L2120]               __tmp__paused_Pausable := paused_Pausable;
[L2121]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L2122]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L2123]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L2124]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L2125]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L2126]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L2127]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L2128]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L2129]               __tmp__initialized_MainToken := initialized_MainToken;
[L2130]   CALL        call balance_s729 := balanceOf~address_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7704]   COND TRUE   __tmp__DType[this] == MainToken
[L7705]   CALL        call __var_14 := balanceOf~address_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6979]               __ret_0_ := __tmp__balances_BasicToken[this][_owner_s214];
[L7705]   RET         call __var_14 := balanceOf~address_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND FALSE  !(revert)
[L7722]               balance_s729 := (__var_14 + __tmp__freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2130]   RET         call balance_s729 := balanceOf~address_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2131]               assume revert || gas < 0;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND TRUE   gas >= 0
[L14664]              assume msgvalue_MSG == 0;
[L14665]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L379]                havoc __exception;
[L380]                revert := false;
[L381]    COND FALSE  !(__exception)
[L420]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6908]               __ret_0_ := totalSupply__BasicToken[this];
[L420]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]                assume !revert && gas >= 0;
[L14665]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:44:06,751 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:44:06,751 INFO  L82        PathProgramCache]: Analyzing trace with hash 404509649, now seen corresponding path program 1 times
[2020-11-24 20:44:06,752 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:44:06,783 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:44:07,362 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 20:44:07,362 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:44:07,362 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 20:44:07,363 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:44:07,363 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 20:44:07,363 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 20:44:07,363 INFO  L87              Difference]: Start difference. First operand 13718 states and 15207 transitions. cyclomatic complexity: 1510 Second operand 5 states.
[2020-11-24 20:44:08,638 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:44:08,638 INFO  L93              Difference]: Finished difference Result 14403 states and 15921 transitions.
[2020-11-24 20:44:08,638 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:44:08,638 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14403 states and 15921 transitions.
[2020-11-24 20:44:08,671 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-24 20:44:08,693 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14403 states to 9501 states and 10835 transitions.
[2020-11-24 20:44:08,693 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1597
[2020-11-24 20:44:08,694 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1864
[2020-11-24 20:44:08,694 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9501 states and 10835 transitions.
[2020-11-24 20:44:08,700 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:44:08,700 INFO  L728         BuchiCegarLoop]: Abstraction has 9501 states and 10835 transitions.
[2020-11-24 20:44:08,705 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9501 states and 10835 transitions.
[2020-11-24 20:44:08,738 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9501 to 5688.
[2020-11-24 20:44:08,738 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5688 states.
[2020-11-24 20:44:08,744 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5688 states to 5688 states and 6398 transitions.
[2020-11-24 20:44:08,744 INFO  L751         BuchiCegarLoop]: Abstraction has 5688 states and 6398 transitions.
[2020-11-24 20:44:08,744 INFO  L631         BuchiCegarLoop]: Abstraction has 5688 states and 6398 transitions.
[2020-11-24 20:44:08,744 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:44:08,744 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5688 states and 6398 transitions.
[2020-11-24 20:44:08,750 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:44:08,750 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:44:08,750 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:44:08,752 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:44:08,752 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND TRUE   i_s1781 < Length[addresses_s1781]
[L9920]   COND TRUE   M_int_int[freezes_s1781][i_s1781] == 0
[L9921]   COND TRUE   DType[this] == MainToken
[L9922]   CALL        call __var_72 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1781][i_s1781], M_int_int[amounts_s1781][i_s1781]);
[L7555]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12895]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7555]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7556]   COND FALSE  !(revert)
[L7559]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7559]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7560]   COND FALSE  !(revert)
[L7563]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L7563]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7564]   COND FALSE  !(revert)
[L7567]               totalSupply__BasicToken[this] := __var_12;
[L7568]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L7568]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7569]   COND FALSE  !(revert)
[L7572]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7573]               balances_BasicToken[this][_to_s664] := __var_13;
[L7574]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7575]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7576]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7577]               __ret_0_ := true;
[L9922]   RET         call __var_72 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1781][i_s1781], M_int_int[amounts_s1781][i_s1781]);
[L9923]   COND FALSE  !(revert)
[L9937]               i_s1781 := (i_s1781 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9938]   COND FALSE  !(gas < 0)
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:44:08,759 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:44:08,759 INFO  L82        PathProgramCache]: Analyzing trace with hash 1011520538, now seen corresponding path program 1 times
[2020-11-24 20:44:08,760 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:44:08,793 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:44:09,346 INFO  L134       CoverageAnalysis]: Checked inductivity of 9835 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9834 trivial. 0 not checked.
[2020-11-24 20:44:09,346 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:44:09,346 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 20:44:09,347 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:44:09,347 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 20:44:09,347 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 20:44:09,347 INFO  L87              Difference]: Start difference. First operand 5688 states and 6398 transitions. cyclomatic complexity: 726 Second operand 5 states.
[2020-11-24 20:44:09,401 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:44:09,401 INFO  L93              Difference]: Finished difference Result 5658 states and 6364 transitions.
[2020-11-24 20:44:09,402 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 20:44:09,402 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5658 states and 6364 transitions.
[2020-11-24 20:44:09,410 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:44:09,419 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5658 states to 5658 states and 6364 transitions.
[2020-11-24 20:44:09,419 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1040
[2020-11-24 20:44:09,420 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1040
[2020-11-24 20:44:09,420 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5658 states and 6364 transitions.
[2020-11-24 20:44:09,422 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:44:09,422 INFO  L728         BuchiCegarLoop]: Abstraction has 5658 states and 6364 transitions.
[2020-11-24 20:44:09,426 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5658 states and 6364 transitions.
[2020-11-24 20:44:09,446 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5658 to 5657.
[2020-11-24 20:44:09,446 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5657 states.
[2020-11-24 20:44:09,451 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5657 states to 5657 states and 6363 transitions.
[2020-11-24 20:44:09,451 INFO  L751         BuchiCegarLoop]: Abstraction has 5657 states and 6363 transitions.
[2020-11-24 20:44:09,451 INFO  L631         BuchiCegarLoop]: Abstraction has 5657 states and 6363 transitions.
[2020-11-24 20:44:09,451 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 20:44:09,451 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5657 states and 6363 transitions.
[2020-11-24 20:44:09,456 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:44:09,456 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:44:09,456 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:44:09,459 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:44:09,459 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND FALSE  !(__exception)
[L4868]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9680]   COND FALSE  !(!!paused_Pausable[this])
[L9684]   COND TRUE   DType[this] == MainToken
[L9685]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6949]               __var_1 := null;
[L6950]   COND FALSE  !(!(_to_s202 != null))
[L6954]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6958]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6958]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6959]   COND FALSE  !(revert)
[L6962]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6963]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6964]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6965]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L6965]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6966]   COND FALSE  !(revert)
[L6969]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6970]               balances_BasicToken[this][_to_s202] := __var_3;
[L6971]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6972]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6973]               __ret_0_ := true;
[L9685]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9686]   COND FALSE  !(revert)
[L9692]               _success_s1572 := __var_55;
[L4868]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4869]               assume !revert && gas >= 0;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:44:09,466 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:44:09,466 INFO  L82        PathProgramCache]: Analyzing trace with hash -1890781972, now seen corresponding path program 1 times
[2020-11-24 20:44:09,467 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:44:09,519 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:44:10,343 INFO  L134       CoverageAnalysis]: Checked inductivity of 9915 backedges. 7 proven. 0 refuted. 0 times theorem prover too weak. 9908 trivial. 0 not checked.
[2020-11-24 20:44:10,343 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:44:10,343 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-24 20:44:10,344 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:44:10,344 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-24 20:44:10,344 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-24 20:44:10,344 INFO  L87              Difference]: Start difference. First operand 5657 states and 6363 transitions. cyclomatic complexity: 722 Second operand 16 states.
[2020-11-24 20:44:15,168 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:44:15,168 INFO  L93              Difference]: Finished difference Result 5745 states and 6471 transitions.
[2020-11-24 20:44:15,168 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-24 20:44:15,168 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5745 states and 6471 transitions.
[2020-11-24 20:44:15,178 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:44:15,188 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5745 states to 5745 states and 6471 transitions.
[2020-11-24 20:44:15,188 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1074
[2020-11-24 20:44:15,189 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1074
[2020-11-24 20:44:15,189 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5745 states and 6471 transitions.
[2020-11-24 20:44:15,192 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:44:15,192 INFO  L728         BuchiCegarLoop]: Abstraction has 5745 states and 6471 transitions.
[2020-11-24 20:44:15,196 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5745 states and 6471 transitions.
[2020-11-24 20:44:15,218 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5745 to 5709.
[2020-11-24 20:44:15,218 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5709 states.
[2020-11-24 20:44:15,223 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5709 states to 5709 states and 6424 transitions.
[2020-11-24 20:44:15,223 INFO  L751         BuchiCegarLoop]: Abstraction has 5709 states and 6424 transitions.
[2020-11-24 20:44:15,223 INFO  L631         BuchiCegarLoop]: Abstraction has 5709 states and 6424 transitions.
[2020-11-24 20:44:15,223 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 20:44:15,223 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5709 states and 6424 transitions.
[2020-11-24 20:44:15,228 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:44:15,228 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:44:15,228 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:44:15,230 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:44:15,231 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND FALSE  !(choice == 36)
[L14680]  COND FALSE  !(choice == 35)
[L14686]  COND FALSE  !(choice == 34)
[L14693]  COND FALSE  !(choice == 33)
[L14700]  COND FALSE  !(choice == 32)
[L14707]  COND FALSE  !(choice == 31)
[L14714]  COND FALSE  !(choice == 30)
[L14720]  COND FALSE  !(choice == 29)
[L14726]  COND FALSE  !(choice == 28)
[L14732]  COND FALSE  !(choice == 27)
[L14738]  COND FALSE  !(choice == 26)
[L14745]  COND FALSE  !(choice == 25)
[L14751]  COND FALSE  !(choice == 24)
[L14757]  COND FALSE  !(choice == 23)
[L14763]  COND FALSE  !(choice == 22)
[L14769]  COND FALSE  !(choice == 21)
[L14776]  COND FALSE  !(choice == 20)
[L14784]  COND TRUE   choice == 19
[L14785]              gas := gas - 21000;
[L14786]  COND TRUE   gas >= 0
[L14787]              assume msgvalue_MSG == 0;
[L14788]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8314]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8315]   COND FALSE  !(DType[this] == MainToken)
[L8320]   COND TRUE   DType[this] == FreezableMintableToken
[L8321]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8321]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8322]   COND FALSE  !(revert)
[L8333]               headKey_s1054 := headKey_s1054;
[L8334]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8335]   COND FALSE  !(!(head_s1054 != 0))
[L8339]               __var_32 := now % 18446744073709551616;
[L8340]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8344]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8345]   COND FALSE  !(DType[this] == MainToken)
[L8350]   COND TRUE   DType[this] == FreezableMintableToken
[L8351]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8351]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8352]   COND FALSE  !(revert)
[L8363]               currentKey_s1054 := currentKey_s1054;
[L8364]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8365]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8366]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8367]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8368]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8368]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8369]   COND FALSE  !(revert)
[L8372]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8373]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8374]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8375]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8375]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8376]   COND FALSE  !(revert)
[L8379]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8380]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8381]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8382]   COND TRUE   next_s1054 == 0
[L8383]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8384]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8392]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14788]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14919]  RET         call CorralChoice_MainToken(this);
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:44:15,238 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:44:15,238 INFO  L82        PathProgramCache]: Analyzing trace with hash 1526570089, now seen corresponding path program 1 times
[2020-11-24 20:44:15,239 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:44:15,271 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:44:15,961 INFO  L134       CoverageAnalysis]: Checked inductivity of 9922 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9921 trivial. 0 not checked.
[2020-11-24 20:44:15,961 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:44:15,961 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-24 20:44:15,962 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:44:15,962 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 20:44:15,962 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 20:44:15,962 INFO  L87              Difference]: Start difference. First operand 5709 states and 6424 transitions. cyclomatic complexity: 732 Second operand 6 states.
[2020-11-24 20:44:16,081 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:44:16,081 INFO  L93              Difference]: Finished difference Result 5795 states and 6520 transitions.
[2020-11-24 20:44:16,081 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 20:44:16,081 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5795 states and 6520 transitions.
[2020-11-24 20:44:16,090 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:44:16,099 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5795 states to 5781 states and 6506 transitions.
[2020-11-24 20:44:16,099 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1054
[2020-11-24 20:44:16,100 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1054
[2020-11-24 20:44:16,100 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5781 states and 6506 transitions.
[2020-11-24 20:44:16,103 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:44:16,103 INFO  L728         BuchiCegarLoop]: Abstraction has 5781 states and 6506 transitions.
[2020-11-24 20:44:16,107 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5781 states and 6506 transitions.
[2020-11-24 20:44:16,128 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5781 to 5781.
[2020-11-24 20:44:16,128 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5781 states.
[2020-11-24 20:44:16,133 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5781 states to 5781 states and 6506 transitions.
[2020-11-24 20:44:16,133 INFO  L751         BuchiCegarLoop]: Abstraction has 5781 states and 6506 transitions.
[2020-11-24 20:44:16,133 INFO  L631         BuchiCegarLoop]: Abstraction has 5781 states and 6506 transitions.
[2020-11-24 20:44:16,133 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 20:44:16,133 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5781 states and 6506 transitions.
[2020-11-24 20:44:16,138 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:44:16,138 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:44:16,138 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:44:16,141 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:44:16,141 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND FALSE  !(choice == 36)
[L14680]  COND FALSE  !(choice == 35)
[L14686]  COND FALSE  !(choice == 34)
[L14693]  COND FALSE  !(choice == 33)
[L14700]  COND FALSE  !(choice == 32)
[L14707]  COND FALSE  !(choice == 31)
[L14714]  COND FALSE  !(choice == 30)
[L14720]  COND FALSE  !(choice == 29)
[L14726]  COND FALSE  !(choice == 28)
[L14732]  COND FALSE  !(choice == 27)
[L14738]  COND FALSE  !(choice == 26)
[L14745]  COND FALSE  !(choice == 25)
[L14751]  COND FALSE  !(choice == 24)
[L14757]  COND FALSE  !(choice == 23)
[L14763]  COND FALSE  !(choice == 22)
[L14769]  COND FALSE  !(choice == 21)
[L14776]  COND FALSE  !(choice == 20)
[L14784]  COND TRUE   choice == 19
[L14785]              gas := gas - 21000;
[L14786]  COND TRUE   gas >= 0
[L14787]              assume msgvalue_MSG == 0;
[L14788]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8314]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8315]   COND TRUE   DType[this] == MainToken
[L8316]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8316]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8317]   COND FALSE  !(revert)
[L8333]               headKey_s1054 := headKey_s1054;
[L8334]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8335]   COND FALSE  !(!(head_s1054 != 0))
[L8339]               __var_32 := now % 18446744073709551616;
[L8340]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8344]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8345]   COND TRUE   DType[this] == MainToken
[L8346]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8346]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8347]   COND FALSE  !(revert)
[L8363]               currentKey_s1054 := currentKey_s1054;
[L8364]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8365]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8366]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8367]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8368]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8368]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8369]   COND FALSE  !(revert)
[L8372]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8373]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8374]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8375]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8375]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8376]   COND FALSE  !(revert)
[L8379]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8380]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8381]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8382]   COND TRUE   next_s1054 == 0
[L8383]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8384]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8392]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14788]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14919]  RET         call CorralChoice_MainToken(this);
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND FALSE  !(gas >= 0)
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:44:16,148 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:44:16,148 INFO  L82        PathProgramCache]: Analyzing trace with hash 589726993, now seen corresponding path program 1 times
[2020-11-24 20:44:16,149 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:44:16,180 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:44:16,945 INFO  L134       CoverageAnalysis]: Checked inductivity of 9922 backedges. 12 proven. 88 refuted. 0 times theorem prover too weak. 9822 trivial. 0 not checked.
[2020-11-24 20:44:16,945 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:44:16,945 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-11-24 20:44:16,946 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:44:16,946 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-24 20:44:16,946 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=177, Unknown=0, NotChecked=0, Total=210
[2020-11-24 20:44:16,946 INFO  L87              Difference]: Start difference. First operand 5781 states and 6506 transitions. cyclomatic complexity: 742 Second operand 15 states.
[2020-11-24 20:44:20,380 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:44:20,380 INFO  L93              Difference]: Finished difference Result 5948 states and 6744 transitions.
[2020-11-24 20:44:20,381 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-24 20:44:20,381 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5948 states and 6744 transitions.
[2020-11-24 20:44:20,397 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:44:20,409 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5948 states to 5948 states and 6744 transitions.
[2020-11-24 20:44:20,409 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1104
[2020-11-24 20:44:20,410 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1104
[2020-11-24 20:44:20,410 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5948 states and 6744 transitions.
[2020-11-24 20:44:20,413 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:44:20,413 INFO  L728         BuchiCegarLoop]: Abstraction has 5948 states and 6744 transitions.
[2020-11-24 20:44:20,417 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5948 states and 6744 transitions.
[2020-11-24 20:44:20,446 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5948 to 5918.
[2020-11-24 20:44:20,446 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5918 states.
[2020-11-24 20:44:20,452 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5918 states to 5918 states and 6676 transitions.
[2020-11-24 20:44:20,453 INFO  L751         BuchiCegarLoop]: Abstraction has 5918 states and 6676 transitions.
[2020-11-24 20:44:20,453 INFO  L631         BuchiCegarLoop]: Abstraction has 5918 states and 6676 transitions.
[2020-11-24 20:44:20,453 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-24 20:44:20,453 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5918 states and 6676 transitions.
[2020-11-24 20:44:20,459 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:44:20,460 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:44:20,460 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:44:20,463 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:44:20,463 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND FALSE  !(choice == 36)
[L14680]  COND FALSE  !(choice == 35)
[L14686]  COND FALSE  !(choice == 34)
[L14693]  COND FALSE  !(choice == 33)
[L14700]  COND FALSE  !(choice == 32)
[L14707]  COND FALSE  !(choice == 31)
[L14714]  COND FALSE  !(choice == 30)
[L14720]  COND FALSE  !(choice == 29)
[L14726]  COND FALSE  !(choice == 28)
[L14732]  COND FALSE  !(choice == 27)
[L14738]  COND FALSE  !(choice == 26)
[L14745]  COND FALSE  !(choice == 25)
[L14751]  COND FALSE  !(choice == 24)
[L14757]  COND FALSE  !(choice == 23)
[L14763]  COND FALSE  !(choice == 22)
[L14769]  COND FALSE  !(choice == 21)
[L14776]  COND TRUE   choice == 20
[L14777]              gas := gas - 21000;
[L14778]  COND TRUE   gas >= 0
[L14779]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14780]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14781]              assume msgvalue_MSG == 0;
[L14782]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8138]               __var_26 := null;
[L8139]   COND FALSE  !(!(_to_s938 != null))
[L8143]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8147]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8147]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8148]   COND FALSE  !(revert)
[L8151]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8152]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8153]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8154]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8155]   COND FALSE  !(DType[this] == MainToken)
[L8160]   COND TRUE   DType[this] == FreezableMintableToken
[L8161]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8161]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8162]   COND FALSE  !(revert)
[L8173]               currentKey_s938 := currentKey_s938;
[L8174]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8174]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8175]   COND FALSE  !(revert)
[L8178]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8179]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8180]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8181]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8181]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8182]   COND FALSE  !(revert)
[L8185]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8186]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8187]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8188]   COND FALSE  !(DType[this] == MainToken)
[L8193]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8198]   COND TRUE   DType[this] == FreezableToken
[L8199]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND FALSE  !(DType[this] == MainToken)
[L8723]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8728]   COND TRUE   DType[this] == FreezableToken
[L8729]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8729]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8730]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND TRUE   DType[this] == MainToken
[L8739]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8739]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8740]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8199]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8200]   COND FALSE  !(revert)
[L8206]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8207]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14782]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14919]  RET         call CorralChoice_MainToken(this);
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND FALSE  !(gas >= 0)
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:44:20,471 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:44:20,471 INFO  L82        PathProgramCache]: Analyzing trace with hash -136330095, now seen corresponding path program 1 times
[2020-11-24 20:44:20,472 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:44:20,583 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:44:21,177 INFO  L134       CoverageAnalysis]: Checked inductivity of 9941 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9940 trivial. 0 not checked.
[2020-11-24 20:44:21,177 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:44:21,177 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:44:21,178 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:44:21,178 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:44:21,178 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:44:21,178 INFO  L87              Difference]: Start difference. First operand 5918 states and 6676 transitions. cyclomatic complexity: 778 Second operand 3 states.
[2020-11-24 20:44:21,220 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:44:21,220 INFO  L93              Difference]: Finished difference Result 5964 states and 6726 transitions.
[2020-11-24 20:44:21,220 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:44:21,220 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5964 states and 6726 transitions.
[2020-11-24 20:44:21,229 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:44:21,238 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5964 states to 5964 states and 6726 transitions.
[2020-11-24 20:44:21,239 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1110
[2020-11-24 20:44:21,239 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1110
[2020-11-24 20:44:21,239 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5964 states and 6726 transitions.
[2020-11-24 20:44:21,242 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:44:21,242 INFO  L728         BuchiCegarLoop]: Abstraction has 5964 states and 6726 transitions.
[2020-11-24 20:44:21,246 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5964 states and 6726 transitions.
[2020-11-24 20:44:21,271 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5964 to 5948.
[2020-11-24 20:44:21,271 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5948 states.
[2020-11-24 20:44:21,277 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5948 states to 5948 states and 6710 transitions.
[2020-11-24 20:44:21,277 INFO  L751         BuchiCegarLoop]: Abstraction has 5948 states and 6710 transitions.
[2020-11-24 20:44:21,277 INFO  L631         BuchiCegarLoop]: Abstraction has 5948 states and 6710 transitions.
[2020-11-24 20:44:21,277 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-24 20:44:21,277 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5948 states and 6710 transitions.
[2020-11-24 20:44:21,282 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:44:21,282 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:44:21,282 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:44:21,285 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:44:21,285 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND FALSE  !(choice == 36)
[L14680]  COND FALSE  !(choice == 35)
[L14686]  COND FALSE  !(choice == 34)
[L14693]  COND FALSE  !(choice == 33)
[L14700]  COND FALSE  !(choice == 32)
[L14707]  COND FALSE  !(choice == 31)
[L14714]  COND FALSE  !(choice == 30)
[L14720]  COND FALSE  !(choice == 29)
[L14726]  COND FALSE  !(choice == 28)
[L14732]  COND FALSE  !(choice == 27)
[L14738]  COND FALSE  !(choice == 26)
[L14745]  COND FALSE  !(choice == 25)
[L14751]  COND FALSE  !(choice == 24)
[L14757]  COND FALSE  !(choice == 23)
[L14763]  COND FALSE  !(choice == 22)
[L14769]  COND FALSE  !(choice == 21)
[L14776]  COND TRUE   choice == 20
[L14777]              gas := gas - 21000;
[L14778]  COND TRUE   gas >= 0
[L14779]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14780]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14781]              assume msgvalue_MSG == 0;
[L14782]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8138]               __var_26 := null;
[L8139]   COND FALSE  !(!(_to_s938 != null))
[L8143]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8147]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8147]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8148]   COND FALSE  !(revert)
[L8151]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8152]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8153]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8154]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8155]   COND TRUE   DType[this] == MainToken
[L8156]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8156]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8157]   COND FALSE  !(revert)
[L8173]               currentKey_s938 := currentKey_s938;
[L8174]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8174]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8175]   COND FALSE  !(revert)
[L8178]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8179]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8180]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8181]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8181]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8182]   COND FALSE  !(revert)
[L8185]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8186]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8187]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8188]   COND FALSE  !(DType[this] == MainToken)
[L8193]   COND TRUE   DType[this] == FreezableMintableToken
[L8194]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND FALSE  !(DType[this] == MainToken)
[L8723]   COND TRUE   DType[this] == FreezableMintableToken
[L8724]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8724]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8725]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND FALSE  !(DType[this] == MainToken)
[L8743]   COND TRUE   DType[this] == FreezableMintableToken
[L8744]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8744]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8745]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8194]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8195]   COND FALSE  !(revert)
[L8206]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8207]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14782]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14919]  RET         call CorralChoice_MainToken(this);
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND FALSE  !(choice == 36)
[L14680]  COND FALSE  !(choice == 35)
[L14686]  COND FALSE  !(choice == 34)
[L14693]  COND FALSE  !(choice == 33)
[L14700]  COND FALSE  !(choice == 32)
[L14707]  COND FALSE  !(choice == 31)
[L14714]  COND FALSE  !(choice == 30)
[L14720]  COND FALSE  !(choice == 29)
[L14726]  COND FALSE  !(choice == 28)
[L14732]  COND FALSE  !(choice == 27)
[L14738]  COND FALSE  !(choice == 26)
[L14745]  COND FALSE  !(choice == 25)
[L14751]  COND FALSE  !(choice == 24)
[L14757]  COND FALSE  !(choice == 23)
[L14763]  COND FALSE  !(choice == 22)
[L14769]  COND FALSE  !(choice == 21)
[L14776]  COND FALSE  !(choice == 20)
[L14784]  COND TRUE   choice == 19
[L14785]              gas := gas - 21000;
[L14786]  COND TRUE   gas >= 0
[L14787]              assume msgvalue_MSG == 0;
[L14788]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8314]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8315]   COND FALSE  !(DType[this] == MainToken)
[L8320]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8325]   COND TRUE   DType[this] == FreezableToken
[L8326]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8326]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8327]   COND FALSE  !(revert)
[L8333]               headKey_s1054 := headKey_s1054;
[L8334]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8335]   COND FALSE  !(!(head_s1054 != 0))
[L8339]               __var_32 := now % 18446744073709551616;
[L8340]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8344]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8345]   COND TRUE   DType[this] == MainToken
[L8346]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8346]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8347]   COND FALSE  !(revert)
[L8363]               currentKey_s1054 := currentKey_s1054;
[L8364]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8365]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8366]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8367]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8368]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8368]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8369]   COND FALSE  !(revert)
[L8372]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8373]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8374]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8375]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8375]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8376]   COND FALSE  !(revert)
[L8379]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8380]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8381]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8382]   COND TRUE   next_s1054 == 0
[L8383]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8384]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8392]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14788]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:44:21,293 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:44:21,294 INFO  L82        PathProgramCache]: Analyzing trace with hash 1181600005, now seen corresponding path program 1 times
[2020-11-24 20:44:21,294 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:44:21,325 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:44:21,938 INFO  L134       CoverageAnalysis]: Checked inductivity of 9941 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9940 trivial. 0 not checked.
[2020-11-24 20:44:21,939 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:44:21,939 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:44:21,939 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:44:21,940 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:44:21,940 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:44:21,940 INFO  L87              Difference]: Start difference. First operand 5948 states and 6710 transitions. cyclomatic complexity: 782 Second operand 3 states.
[2020-11-24 20:44:21,981 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:44:21,981 INFO  L93              Difference]: Finished difference Result 5992 states and 6758 transitions.
[2020-11-24 20:44:21,981 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:44:21,981 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5992 states and 6758 transitions.
[2020-11-24 20:44:21,990 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:44:22,000 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5992 states to 5992 states and 6758 transitions.
[2020-11-24 20:44:22,000 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1110
[2020-11-24 20:44:22,000 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1110
[2020-11-24 20:44:22,000 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5992 states and 6758 transitions.
[2020-11-24 20:44:22,003 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:44:22,003 INFO  L728         BuchiCegarLoop]: Abstraction has 5992 states and 6758 transitions.
[2020-11-24 20:44:22,007 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5992 states and 6758 transitions.
[2020-11-24 20:44:22,030 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5992 to 5976.
[2020-11-24 20:44:22,030 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5976 states.
[2020-11-24 20:44:22,037 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5976 states to 5976 states and 6742 transitions.
[2020-11-24 20:44:22,037 INFO  L751         BuchiCegarLoop]: Abstraction has 5976 states and 6742 transitions.
[2020-11-24 20:44:22,037 INFO  L631         BuchiCegarLoop]: Abstraction has 5976 states and 6742 transitions.
[2020-11-24 20:44:22,037 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-24 20:44:22,037 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5976 states and 6742 transitions.
[2020-11-24 20:44:22,042 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:44:22,043 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:44:22,043 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:44:22,045 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:44:22,045 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND FALSE  !(choice == 36)
[L14680]  COND FALSE  !(choice == 35)
[L14686]  COND FALSE  !(choice == 34)
[L14693]  COND FALSE  !(choice == 33)
[L14700]  COND FALSE  !(choice == 32)
[L14707]  COND FALSE  !(choice == 31)
[L14714]  COND FALSE  !(choice == 30)
[L14720]  COND FALSE  !(choice == 29)
[L14726]  COND FALSE  !(choice == 28)
[L14732]  COND FALSE  !(choice == 27)
[L14738]  COND FALSE  !(choice == 26)
[L14745]  COND FALSE  !(choice == 25)
[L14751]  COND FALSE  !(choice == 24)
[L14757]  COND FALSE  !(choice == 23)
[L14763]  COND FALSE  !(choice == 22)
[L14769]  COND FALSE  !(choice == 21)
[L14776]  COND TRUE   choice == 20
[L14777]              gas := gas - 21000;
[L14778]  COND TRUE   gas >= 0
[L14779]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14780]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14781]              assume msgvalue_MSG == 0;
[L14782]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8138]               __var_26 := null;
[L8139]   COND FALSE  !(!(_to_s938 != null))
[L8143]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8147]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8147]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8148]   COND FALSE  !(revert)
[L8151]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8152]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8153]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8154]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8155]   COND TRUE   DType[this] == MainToken
[L8156]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8156]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8157]   COND FALSE  !(revert)
[L8173]               currentKey_s938 := currentKey_s938;
[L8174]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8174]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8175]   COND FALSE  !(revert)
[L8178]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8179]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8180]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8181]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8181]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8182]   COND FALSE  !(revert)
[L8185]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8186]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8187]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8188]   COND TRUE   DType[this] == MainToken
[L8189]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND FALSE  !(DType[this] == MainToken)
[L8723]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8728]   COND TRUE   DType[this] == FreezableToken
[L8729]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8729]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8730]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND FALSE  !(DType[this] == MainToken)
[L8743]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8748]   COND TRUE   DType[this] == FreezableToken
[L8749]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8749]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8750]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8189]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8190]   COND FALSE  !(revert)
[L8206]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8207]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14782]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14919]  RET         call CorralChoice_MainToken(this);
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND FALSE  !(gas >= 0)
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:44:22,052 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:44:22,053 INFO  L82        PathProgramCache]: Analyzing trace with hash -1106412392, now seen corresponding path program 1 times
[2020-11-24 20:44:22,053 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:44:22,086 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:44:22,762 INFO  L134       CoverageAnalysis]: Checked inductivity of 9941 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9940 trivial. 0 not checked.
[2020-11-24 20:44:22,762 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:44:22,763 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:44:22,763 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:44:22,763 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:44:22,763 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:44:22,763 INFO  L87              Difference]: Start difference. First operand 5976 states and 6742 transitions. cyclomatic complexity: 786 Second operand 7 states.
[2020-11-24 20:44:22,910 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:44:22,910 INFO  L93              Difference]: Finished difference Result 6161 states and 6949 transitions.
[2020-11-24 20:44:22,910 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:44:22,910 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6161 states and 6949 transitions.
[2020-11-24 20:44:22,921 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:44:22,930 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6161 states to 6037 states and 6809 transitions.
[2020-11-24 20:44:22,930 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1113
[2020-11-24 20:44:22,931 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1113
[2020-11-24 20:44:22,931 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6037 states and 6809 transitions.
[2020-11-24 20:44:22,934 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:44:22,934 INFO  L728         BuchiCegarLoop]: Abstraction has 6037 states and 6809 transitions.
[2020-11-24 20:44:22,938 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6037 states and 6809 transitions.
[2020-11-24 20:44:22,959 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6037 to 6013.
[2020-11-24 20:44:22,959 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6013 states.
[2020-11-24 20:44:22,965 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6013 states to 6013 states and 6781 transitions.
[2020-11-24 20:44:22,965 INFO  L751         BuchiCegarLoop]: Abstraction has 6013 states and 6781 transitions.
[2020-11-24 20:44:22,965 INFO  L631         BuchiCegarLoop]: Abstraction has 6013 states and 6781 transitions.
[2020-11-24 20:44:22,965 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-24 20:44:22,965 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6013 states and 6781 transitions.
[2020-11-24 20:44:22,970 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:44:22,970 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:44:22,970 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:44:22,972 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:44:22,972 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND FALSE  !(choice == 36)
[L14680]  COND FALSE  !(choice == 35)
[L14686]  COND FALSE  !(choice == 34)
[L14693]  COND FALSE  !(choice == 33)
[L14700]  COND FALSE  !(choice == 32)
[L14707]  COND FALSE  !(choice == 31)
[L14714]  COND FALSE  !(choice == 30)
[L14720]  COND FALSE  !(choice == 29)
[L14726]  COND FALSE  !(choice == 28)
[L14732]  COND FALSE  !(choice == 27)
[L14738]  COND FALSE  !(choice == 26)
[L14745]  COND FALSE  !(choice == 25)
[L14751]  COND FALSE  !(choice == 24)
[L14757]  COND FALSE  !(choice == 23)
[L14763]  COND FALSE  !(choice == 22)
[L14769]  COND FALSE  !(choice == 21)
[L14776]  COND TRUE   choice == 20
[L14777]              gas := gas - 21000;
[L14778]  COND TRUE   gas >= 0
[L14779]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14780]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14781]              assume msgvalue_MSG == 0;
[L14782]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8138]               __var_26 := null;
[L8139]   COND FALSE  !(!(_to_s938 != null))
[L8143]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8147]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8147]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8148]   COND FALSE  !(revert)
[L8151]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8152]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8153]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8154]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8155]   COND TRUE   DType[this] == MainToken
[L8156]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8156]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8157]   COND FALSE  !(revert)
[L8173]               currentKey_s938 := currentKey_s938;
[L8174]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8174]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8175]   COND FALSE  !(revert)
[L8178]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8179]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8180]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8181]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8181]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8182]   COND FALSE  !(revert)
[L8185]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8186]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8187]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8188]   COND TRUE   DType[this] == MainToken
[L8189]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND TRUE   DType[this] == MainToken
[L8719]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8719]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8720]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND TRUE   DType[this] == MainToken
[L8739]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8739]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8740]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8189]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8190]   COND FALSE  !(revert)
[L8206]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8207]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14782]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14919]  RET         call CorralChoice_MainToken(this);
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:44:22,980 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:44:22,980 INFO  L82        PathProgramCache]: Analyzing trace with hash -602176490, now seen corresponding path program 1 times
[2020-11-24 20:44:22,981 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:44:23,047 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:44:24,996 INFO  L134       CoverageAnalysis]: Checked inductivity of 9941 backedges. 107 proven. 1 refuted. 0 times theorem prover too weak. 9833 trivial. 0 not checked.
[2020-11-24 20:44:24,996 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:44:24,996 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-24 20:44:24,997 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:44:24,997 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-24 20:44:24,997 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=77, Invalid=853, Unknown=0, NotChecked=0, Total=930
[2020-11-24 20:44:24,997 INFO  L87              Difference]: Start difference. First operand 6013 states and 6781 transitions. cyclomatic complexity: 790 Second operand 31 states.
[2020-11-24 20:44:41,177 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:44:41,177 INFO  L93              Difference]: Finished difference Result 6064 states and 6878 transitions.
[2020-11-24 20:44:41,177 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-24 20:44:41,177 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6064 states and 6878 transitions.
[2020-11-24 20:44:41,187 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:44:41,197 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6064 states to 6064 states and 6878 transitions.
[2020-11-24 20:44:41,198 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1139
[2020-11-24 20:44:41,198 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1139
[2020-11-24 20:44:41,198 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6064 states and 6878 transitions.
[2020-11-24 20:44:41,201 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:44:41,201 INFO  L728         BuchiCegarLoop]: Abstraction has 6064 states and 6878 transitions.
[2020-11-24 20:44:41,205 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6064 states and 6878 transitions.
[2020-11-24 20:44:41,227 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6064 to 6021.
[2020-11-24 20:44:41,227 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6021 states.
[2020-11-24 20:44:41,233 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6021 states to 6021 states and 6810 transitions.
[2020-11-24 20:44:41,233 INFO  L751         BuchiCegarLoop]: Abstraction has 6021 states and 6810 transitions.
[2020-11-24 20:44:41,233 INFO  L631         BuchiCegarLoop]: Abstraction has 6021 states and 6810 transitions.
[2020-11-24 20:44:41,233 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-24 20:44:41,233 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6021 states and 6810 transitions.
[2020-11-24 20:44:41,238 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:44:41,238 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:44:41,238 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:44:41,240 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:44:41,240 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND TRUE   i_s1781 < Length[addresses_s1781]
[L9920]   COND FALSE  !(M_int_int[freezes_s1781][i_s1781] == 0)
[L9929]   COND TRUE   DType[this] == MainToken
[L9930]   CALL        call __var_73 := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1781][i_s1781], M_int_int[amounts_s1781][i_s1781], M_int_int[freezes_s1781][i_s1781]);
[L9224]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9224]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9225]   COND FALSE  !(revert)
[L9228]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L9228]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9229]   COND FALSE  !(revert)
[L9232]   CALL        call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9232]   RET         call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L9233]   COND FALSE  !(revert)
[L9236]               totalSupply__BasicToken[this] := __var_48;
[L9237]               __var_49 := _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9238]   COND TRUE   DType[this] == MainToken
[L9239]   CALL        call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L9239]   RET         call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L9240]   COND FALSE  !(revert)
[L9251]               currentKey_s1449 := currentKey_s1449;
[L9252]   CALL        call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9252]   RET         call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L9253]   COND FALSE  !(revert)
[L9256]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1449];
[L9257]               freezings_FreezableToken[this][currentKey_s1449] := __var_50;
[L9258]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s1449];
[L9259]   CALL        call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9259]   RET         call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L9260]   COND FALSE  !(revert)
[L9263]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s1449];
[L9264]               freezingBalance_FreezableToken[this][_to_s1449] := __var_51;
[L9265]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s1449];
[L9266]   COND FALSE  !(DType[this] == MainToken)
[L9271]   COND TRUE   DType[this] == FreezableMintableToken
[L9272]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND FALSE  !(DType[this] == MainToken)
[L8723]   COND TRUE   DType[this] == FreezableMintableToken
[L8724]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8724]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8725]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND FALSE  !(DType[this] == MainToken)
[L8743]   COND TRUE   DType[this] == FreezableMintableToken
[L8744]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8744]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8745]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L9272]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L9273]   COND FALSE  !(revert)
[L9279]               assert { :EventEmitted "Mint_FreezableMintableToken" } true;
[L9280]               assert { :EventEmitted "Freezed_FreezableMintableToken" } true;
[L9281]               assert { :EventEmitted "Transfer_FreezableMintableToken" } true;
[L9282]               __ret_0_ := true;
[L9930]   RET         call __var_73 := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1781][i_s1781], M_int_int[amounts_s1781][i_s1781], M_int_int[freezes_s1781][i_s1781]);
[L9931]   COND FALSE  !(revert)
[L9937]               i_s1781 := (i_s1781 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9938]   COND FALSE  !(gas < 0)
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND FALSE  !(gas >= 0)
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:44:41,247 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:44:41,247 INFO  L82        PathProgramCache]: Analyzing trace with hash -269296864, now seen corresponding path program 1 times
[2020-11-24 20:44:41,248 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:44:41,277 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:44:41,798 INFO  L134       CoverageAnalysis]: Checked inductivity of 9872 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9871 trivial. 0 not checked.
[2020-11-24 20:44:41,799 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:44:41,799 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:44:41,799 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:44:41,800 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:44:41,800 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:44:41,800 INFO  L87              Difference]: Start difference. First operand 6021 states and 6810 transitions. cyclomatic complexity: 813 Second operand 3 states.
[2020-11-24 20:44:41,842 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:44:41,842 INFO  L93              Difference]: Finished difference Result 6099 states and 6900 transitions.
[2020-11-24 20:44:41,842 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:44:41,842 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6099 states and 6900 transitions.
[2020-11-24 20:44:41,852 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:44:41,861 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6099 states to 6099 states and 6900 transitions.
[2020-11-24 20:44:41,861 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1125
[2020-11-24 20:44:41,862 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1125
[2020-11-24 20:44:41,862 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6099 states and 6900 transitions.
[2020-11-24 20:44:41,865 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:44:41,865 INFO  L728         BuchiCegarLoop]: Abstraction has 6099 states and 6900 transitions.
[2020-11-24 20:44:41,869 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6099 states and 6900 transitions.
[2020-11-24 20:44:41,890 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6099 to 6063.
[2020-11-24 20:44:41,890 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6063 states.
[2020-11-24 20:44:41,896 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6063 states to 6063 states and 6858 transitions.
[2020-11-24 20:44:41,896 INFO  L751         BuchiCegarLoop]: Abstraction has 6063 states and 6858 transitions.
[2020-11-24 20:44:41,896 INFO  L631         BuchiCegarLoop]: Abstraction has 6063 states and 6858 transitions.
[2020-11-24 20:44:41,897 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-24 20:44:41,897 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6063 states and 6858 transitions.
[2020-11-24 20:44:41,902 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:44:41,902 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:44:41,902 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:44:41,904 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:44:41,904 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND TRUE   i_s1781 < Length[addresses_s1781]
[L9920]   COND FALSE  !(M_int_int[freezes_s1781][i_s1781] == 0)
[L9929]   COND TRUE   DType[this] == MainToken
[L9930]   CALL        call __var_73 := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1781][i_s1781], M_int_int[amounts_s1781][i_s1781], M_int_int[freezes_s1781][i_s1781]);
[L9224]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9224]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9225]   COND FALSE  !(revert)
[L9228]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L9228]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9229]   COND FALSE  !(revert)
[L9232]   CALL        call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9232]   RET         call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L9233]   COND FALSE  !(revert)
[L9236]               totalSupply__BasicToken[this] := __var_48;
[L9237]               __var_49 := _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9238]   COND TRUE   DType[this] == MainToken
[L9239]   CALL        call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L9239]   RET         call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L9240]   COND FALSE  !(revert)
[L9251]               currentKey_s1449 := currentKey_s1449;
[L9252]   CALL        call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9252]   RET         call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L9253]   COND FALSE  !(revert)
[L9256]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1449];
[L9257]               freezings_FreezableToken[this][currentKey_s1449] := __var_50;
[L9258]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s1449];
[L9259]   CALL        call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9259]   RET         call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L9260]   COND FALSE  !(revert)
[L9263]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s1449];
[L9264]               freezingBalance_FreezableToken[this][_to_s1449] := __var_51;
[L9265]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s1449];
[L9266]   COND TRUE   DType[this] == MainToken
[L9267]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND TRUE   DType[this] == MainToken
[L8719]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8719]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8720]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND FALSE  !(DType[this] == MainToken)
[L8743]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8748]   COND TRUE   DType[this] == FreezableToken
[L8749]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8749]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8750]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L9267]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L9268]   COND FALSE  !(revert)
[L9279]               assert { :EventEmitted "Mint_FreezableMintableToken" } true;
[L9280]               assert { :EventEmitted "Freezed_FreezableMintableToken" } true;
[L9281]               assert { :EventEmitted "Transfer_FreezableMintableToken" } true;
[L9282]               __ret_0_ := true;
[L9930]   RET         call __var_73 := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1781][i_s1781], M_int_int[amounts_s1781][i_s1781], M_int_int[freezes_s1781][i_s1781]);
[L9931]   COND FALSE  !(revert)
[L9937]               i_s1781 := (i_s1781 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9938]   COND FALSE  !(gas < 0)
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND FALSE  !(choice == 36)
[L14680]  COND FALSE  !(choice == 35)
[L14686]  COND FALSE  !(choice == 34)
[L14693]  COND FALSE  !(choice == 33)
[L14700]  COND FALSE  !(choice == 32)
[L14707]  COND FALSE  !(choice == 31)
[L14714]  COND FALSE  !(choice == 30)
[L14720]  COND FALSE  !(choice == 29)
[L14726]  COND FALSE  !(choice == 28)
[L14732]  COND FALSE  !(choice == 27)
[L14738]  COND FALSE  !(choice == 26)
[L14745]  COND FALSE  !(choice == 25)
[L14751]  COND FALSE  !(choice == 24)
[L14757]  COND FALSE  !(choice == 23)
[L14763]  COND FALSE  !(choice == 22)
[L14769]  COND FALSE  !(choice == 21)
[L14776]  COND TRUE   choice == 20
[L14777]              gas := gas - 21000;
[L14778]  COND TRUE   gas >= 0
[L14779]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14780]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14781]              assume msgvalue_MSG == 0;
[L14782]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8138]               __var_26 := null;
[L8139]   COND FALSE  !(!(_to_s938 != null))
[L8143]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8147]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8147]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8148]   COND FALSE  !(revert)
[L8151]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8152]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8153]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8154]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8155]   COND TRUE   DType[this] == MainToken
[L8156]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8156]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8157]   COND FALSE  !(revert)
[L8173]               currentKey_s938 := currentKey_s938;
[L8174]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8174]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8175]   COND FALSE  !(revert)
[L8178]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8179]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8180]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8181]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8181]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8182]   COND FALSE  !(revert)
[L8185]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8186]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8187]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8188]   COND TRUE   DType[this] == MainToken
[L8189]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND FALSE  !(DType[this] == MainToken)
[L8723]   COND TRUE   DType[this] == FreezableMintableToken
[L8724]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8724]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8725]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND TRUE   DType[this] == MainToken
[L8739]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8739]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8740]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8189]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8190]   COND FALSE  !(revert)
[L8206]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8207]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14782]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:44:41,911 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:44:41,911 INFO  L82        PathProgramCache]: Analyzing trace with hash 1740168289, now seen corresponding path program 1 times
[2020-11-24 20:44:41,912 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:44:41,941 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:44:42,474 INFO  L134       CoverageAnalysis]: Checked inductivity of 9872 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9871 trivial. 0 not checked.
[2020-11-24 20:44:42,474 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:44:42,474 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:44:42,475 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:44:42,475 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:44:42,475 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:44:42,475 INFO  L87              Difference]: Start difference. First operand 6063 states and 6858 transitions. cyclomatic complexity: 819 Second operand 3 states.
[2020-11-24 20:44:42,521 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:44:42,521 INFO  L93              Difference]: Finished difference Result 6160 states and 6985 transitions.
[2020-11-24 20:44:42,521 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:44:42,521 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6160 states and 6985 transitions.
[2020-11-24 20:44:42,531 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:44:42,541 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6160 states to 6160 states and 6985 transitions.
[2020-11-24 20:44:42,542 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1128
[2020-11-24 20:44:42,542 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1128
[2020-11-24 20:44:42,542 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6160 states and 6985 transitions.
[2020-11-24 20:44:42,545 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:44:42,545 INFO  L728         BuchiCegarLoop]: Abstraction has 6160 states and 6985 transitions.
[2020-11-24 20:44:42,549 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6160 states and 6985 transitions.
[2020-11-24 20:44:42,572 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6160 to 6115.
[2020-11-24 20:44:42,572 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6115 states.
[2020-11-24 20:44:42,578 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6115 states to 6115 states and 6916 transitions.
[2020-11-24 20:44:42,578 INFO  L751         BuchiCegarLoop]: Abstraction has 6115 states and 6916 transitions.
[2020-11-24 20:44:42,578 INFO  L631         BuchiCegarLoop]: Abstraction has 6115 states and 6916 transitions.
[2020-11-24 20:44:42,578 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-24 20:44:42,578 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6115 states and 6916 transitions.
[2020-11-24 20:44:42,583 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:44:42,583 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:44:42,583 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:44:42,585 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:44:42,585 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND TRUE   i_s1781 < Length[addresses_s1781]
[L9920]   COND FALSE  !(M_int_int[freezes_s1781][i_s1781] == 0)
[L9929]   COND TRUE   DType[this] == MainToken
[L9930]   CALL        call __var_73 := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1781][i_s1781], M_int_int[amounts_s1781][i_s1781], M_int_int[freezes_s1781][i_s1781]);
[L9224]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9224]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9225]   COND FALSE  !(revert)
[L9228]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L9228]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9229]   COND FALSE  !(revert)
[L9232]   CALL        call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9232]   RET         call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L9233]   COND FALSE  !(revert)
[L9236]               totalSupply__BasicToken[this] := __var_48;
[L9237]               __var_49 := _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9238]   COND TRUE   DType[this] == MainToken
[L9239]   CALL        call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L9239]   RET         call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L9240]   COND FALSE  !(revert)
[L9251]               currentKey_s1449 := currentKey_s1449;
[L9252]   CALL        call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9252]   RET         call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L9253]   COND FALSE  !(revert)
[L9256]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1449];
[L9257]               freezings_FreezableToken[this][currentKey_s1449] := __var_50;
[L9258]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s1449];
[L9259]   CALL        call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9259]   RET         call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L9260]   COND FALSE  !(revert)
[L9263]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s1449];
[L9264]               freezingBalance_FreezableToken[this][_to_s1449] := __var_51;
[L9265]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s1449];
[L9266]   COND TRUE   DType[this] == MainToken
[L9267]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND TRUE   DType[this] == MainToken
[L8719]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8719]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8720]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND TRUE   DType[this] == MainToken
[L8739]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8739]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8740]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L9267]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L9268]   COND FALSE  !(revert)
[L9279]               assert { :EventEmitted "Mint_FreezableMintableToken" } true;
[L9280]               assert { :EventEmitted "Freezed_FreezableMintableToken" } true;
[L9281]               assert { :EventEmitted "Transfer_FreezableMintableToken" } true;
[L9282]               __ret_0_ := true;
[L9930]   RET         call __var_73 := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1781][i_s1781], M_int_int[amounts_s1781][i_s1781], M_int_int[freezes_s1781][i_s1781]);
[L9931]   COND FALSE  !(revert)
[L9937]               i_s1781 := (i_s1781 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9938]   COND FALSE  !(gas < 0)
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND TRUE   choice == 37
[L14668]              gas := gas - 21000;
[L14669]  COND TRUE   gas >= 0
[L14670]              assume msgvalue_MSG == 0;
[L14671]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:44:42,591 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:44:42,591 INFO  L82        PathProgramCache]: Analyzing trace with hash -137777385, now seen corresponding path program 1 times
[2020-11-24 20:44:42,592 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:44:42,670 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:44:42,734 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:44:43,091 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:44:43,091 INFO  L82        PathProgramCache]: Analyzing trace with hash -299021620, now seen corresponding path program 1 times
[2020-11-24 20:44:43,092 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:44:43,095 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:44:43,099 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:44:43,107 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:44:43,107 INFO  L82        PathProgramCache]: Analyzing trace with hash 1852807650, now seen corresponding path program 1 times
[2020-11-24 20:44:43,108 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:44:43,161 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:44:43,269 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3019 to 6037
[2020-11-24 20:44:43,909 WARN  L188               SmtUtils]: Spent 153.00 ms on a formula simplification. DAG size of input: 303 DAG size of output: 298
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3967 to 7933
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2179 to 4357
[2020-11-24 20:44:44,118 WARN  L188               SmtUtils]: Spent 163.00 ms on a formula simplification that was a NOOP. DAG size: 443
Garbage collection #1: 181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 181 to 359
Garbage collection #2: 359 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 359 to 709
Garbage collection #3: 709 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 709 to 1409
Garbage collection #4: 1409 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1409 to 2803
Garbage collection #5: 2803 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2803 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.003s / 0.006s total
Resizing node table from 11177 to 22349
[2020-11-24 20:44:44,331 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification that was a NOOP. DAG size: 359
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8713 to 17419
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-24 20:44:44,389 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-24 20:44:45,793 WARN  L188               SmtUtils]: Spent 229.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 250
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 3 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3 to 5
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 3 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3 to 5
Garbage collection #1: 3 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3 to 5
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-24 20:44:46,350 WARN  L188               SmtUtils]: Spent 296.00 ms on a formula simplification. DAG size of input: 208 DAG size of output: 204
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-24 20:44:46,516 WARN  L188               SmtUtils]: Spent 125.00 ms on a formula simplification. DAG size of input: 160 DAG size of output: 155
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-24 20:44:48,279 WARN  L188               SmtUtils]: Spent 1.70 s on a formula simplification. DAG size of input: 444 DAG size of output: 436
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-24 20:44:48,427 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification that was a NOOP. DAG size: 227
[2020-11-24 20:44:48,727 WARN  L188               SmtUtils]: Spent 299.00 ms on a formula simplification that was a NOOP. DAG size: 301
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-24 20:44:49,029 WARN  L188               SmtUtils]: Spent 299.00 ms on a formula simplification that was a NOOP. DAG size: 275
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-24 20:44:49,716 WARN  L188               SmtUtils]: Spent 669.00 ms on a formula simplification. DAG size of input: 314 DAG size of output: 306
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-24 20:44:49,842 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification that was a NOOP. DAG size: 215
[2020-11-24 20:44:50,072 WARN  L188               SmtUtils]: Spent 229.00 ms on a formula simplification that was a NOOP. DAG size: 294
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-24 20:44:50,233 WARN  L188               SmtUtils]: Spent 158.00 ms on a formula simplification that was a NOOP. DAG size: 258
[2020-11-24 20:44:59,690 WARN  L188               SmtUtils]: Spent 9.45 s on a formula simplification. DAG size of input: 684 DAG size of output: 649
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-24 20:44:59,821 WARN  L188               SmtUtils]: Spent 113.00 ms on a formula simplification that was a NOOP. DAG size: 245
[2020-11-24 20:45:00,128 WARN  L188               SmtUtils]: Spent 305.00 ms on a formula simplification that was a NOOP. DAG size: 364
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-24 20:45:00,353 WARN  L188               SmtUtils]: Spent 222.00 ms on a formula simplification that was a NOOP. DAG size: 308
[2020-11-24 20:45:00,820 WARN  L188               SmtUtils]: Spent 465.00 ms on a formula simplification. DAG size of input: 312 DAG size of output: 309
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-24 20:45:01,002 WARN  L188               SmtUtils]: Spent 179.00 ms on a formula simplification that was a NOOP. DAG size: 244
[2020-11-24 20:45:01,758 WARN  L188               SmtUtils]: Spent 754.00 ms on a formula simplification that was a NOOP. DAG size: 539
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10513 to 21023
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
[2020-11-24 20:45:02,266 WARN  L188               SmtUtils]: Spent 501.00 ms on a formula simplification that was a NOOP. DAG size: 483
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-24 20:45:02,558 WARN  L188               SmtUtils]: Spent 151.00 ms on a formula simplification. DAG size of input: 302 DAG size of output: 298
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-24 20:45:02,740 WARN  L188               SmtUtils]: Spent 148.00 ms on a formula simplification that was a NOOP. DAG size: 443
Garbage collection #1: 181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 181 to 359
Garbage collection #2: 359 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 359 to 709
Garbage collection #3: 709 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 709 to 1409
Garbage collection #4: 1409 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1409 to 2803
Garbage collection #5: 2803 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2803 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
[2020-11-24 20:45:06,759 WARN  L188               SmtUtils]: Spent 3.92 s on a formula simplification. DAG size of input: 802 DAG size of output: 794
Garbage collection #1: 281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 281 to 557
Garbage collection #2: 557 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 557 to 1109
Garbage collection #3: 1109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1109 to 2213
Garbage collection #4: 2213 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2213 to 4423
Garbage collection #5: 4423 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4423 to 8839
Garbage collection #6: 8839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8839 to 17669
Garbage collection #7: 17669 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 17669 to 35327
Garbage collection #8: 35327 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 35327 to 70639
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-24 20:45:07,166 WARN  L188               SmtUtils]: Spent 383.00 ms on a formula simplification that was a NOOP. DAG size: 421
[2020-11-24 20:45:08,014 WARN  L188               SmtUtils]: Spent 805.00 ms on a formula simplification that was a NOOP. DAG size: 562
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-24 20:45:08,438 WARN  L188               SmtUtils]: Spent 414.00 ms on a formula simplification that was a NOOP. DAG size: 421
[2020-11-24 20:45:10,008 WARN  L188               SmtUtils]: Spent 1.57 s on a formula simplification. DAG size of input: 564 DAG size of output: 563
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 10559 to 21107
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 10513 to 21023
[2020-11-24 20:45:10,767 WARN  L188               SmtUtils]: Spent 754.00 ms on a formula simplification that was a NOOP. DAG size: 559
[2020-11-24 20:45:10,840 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:45:10,919 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:45:10,942 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:45:10 BasicIcfg
[2020-11-24 20:45:10,942 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:45:10,942 INFO  L168              Benchmark]: Toolchain (without parser) took 90235.46 ms. Allocated memory was 1.0 GB in the beginning and 6.4 GB in the end (delta: 5.3 GB). Free memory was 919.1 MB in the beginning and 4.5 GB in the end (delta: -3.5 GB). Peak memory consumption was 5.4 GB. Max. memory is 15.3 GB.
[2020-11-24 20:45:10,943 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:45:10,943 INFO  L168              Benchmark]: Boogie Preprocessor took 204.02 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 886.7 MB in the end (delta: 32.3 MB). Peak memory consumption was 32.3 MB. Max. memory is 15.3 GB.
[2020-11-24 20:45:10,943 INFO  L168              Benchmark]: UtopiaSpecLang took 99.17 ms. Allocated memory is still 1.0 GB. Free memory was 886.7 MB in the beginning and 870.6 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:45:10,943 INFO  L168              Benchmark]: Boogie Printer took 35.99 ms. Allocated memory is still 1.0 GB. Free memory was 870.6 MB in the beginning and 859.5 MB in the end (delta: 11.1 MB). Peak memory consumption was 11.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:45:10,944 INFO  L168              Benchmark]: RCFGBuilder took 1842.15 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 172.0 MB). Free memory was 859.5 MB in the beginning and 1.1 GB in the end (delta: -204.1 MB). Peak memory consumption was 247.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:45:10,944 INFO  L168              Benchmark]: UtopiaLTL2Aut took 26.72 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 7.9 MB). Peak memory consumption was 7.9 MB. Max. memory is 15.3 GB.
[2020-11-24 20:45:10,944 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4142.58 ms. Allocated memory was 1.2 GB in the beginning and 1.5 GB in the end (delta: 337.1 MB). Free memory was 1.1 GB in the beginning and 689.0 MB in the end (delta: 366.7 MB). Peak memory consumption was 771.8 MB. Max. memory is 15.3 GB.
[2020-11-24 20:45:10,944 INFO  L168              Benchmark]: BlockEncodingV2 took 378.92 ms. Allocated memory was 1.5 GB in the beginning and 1.9 GB in the end (delta: 402.1 MB). Free memory was 689.0 MB in the beginning and 1.6 GB in the end (delta: -897.1 MB). Peak memory consumption was 118.0 MB. Max. memory is 15.3 GB.
[2020-11-24 20:45:10,945 INFO  L168              Benchmark]: BuchiAutomizer took 83502.42 ms. Allocated memory was 1.9 GB in the beginning and 6.4 GB in the end (delta: 4.4 GB). Free memory was 1.6 GB in the beginning and 4.5 GB in the end (delta: -2.9 GB). Peak memory consumption was 5.1 GB. Max. memory is 15.3 GB.
[2020-11-24 20:45:10,947 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13636 locations, 24999 edges
  - StatisticsResult: Encoded RCFG
    13426 locations, 24413 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 204.02 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 886.7 MB in the end (delta: 32.3 MB). Peak memory consumption was 32.3 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 99.17 ms. Allocated memory is still 1.0 GB. Free memory was 886.7 MB in the beginning and 870.6 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 35.99 ms. Allocated memory is still 1.0 GB. Free memory was 870.6 MB in the beginning and 859.5 MB in the end (delta: 11.1 MB). Peak memory consumption was 11.1 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1842.15 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 172.0 MB). Free memory was 859.5 MB in the beginning and 1.1 GB in the end (delta: -204.1 MB). Peak memory consumption was 247.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 26.72 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 7.9 MB). Peak memory consumption was 7.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4142.58 ms. Allocated memory was 1.2 GB in the beginning and 1.5 GB in the end (delta: 337.1 MB). Free memory was 1.1 GB in the beginning and 689.0 MB in the end (delta: 366.7 MB). Peak memory consumption was 771.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 378.92 ms. Allocated memory was 1.5 GB in the beginning and 1.9 GB in the end (delta: 402.1 MB). Free memory was 689.0 MB in the beginning and 1.6 GB in the end (delta: -897.1 MB). Peak memory consumption was 118.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 83502.42 ms. Allocated memory was 1.9 GB in the beginning and 6.4 GB in the end (delta: 4.4 GB). Free memory was 1.6 GB in the beginning and 4.5 GB in the end (delta: -2.9 GB). Peak memory consumption was 5.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5478 locations, 7654 edges
  - StatisticsResult: BuchiProgram size
    13636 locations, 24999 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 17 terminating modules (17 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.17 modules have a trivial ranking function, the largest among these consists of 31 locations. The remainder module has 6115 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 83.3s and 18 iterations.  TraceHistogramMax:38. Analysis of lassos took 40.7s. Construction of modules took 31.5s. BÃ¼chi inclusion checks took 8.8s. Highest rank in rank-based complementation 0. Minimization of det autom 17. Minimization of nondet autom 0. Automata minimization 1.0s AutomataMinimizationTime, 17 MinimizatonAttempts, 6121 StatesRemovedByMinimization, 13 NontrivialMinimizations. Non-live state removal took 0.6s Buchi closure took 0.0s. Biggest automaton had 13718 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 128089 SDtfs, 74165 SDslu, 323202 SDs, 0 SdLazy, 320013 SolverSat, 12231 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 31.5s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU17 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(697186226852612065377415878656999996930001387170) = (new MainToken)({from : 697186226852612065377415878656999996930001387160});
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND TRUE   i_s1781 < Length[addresses_s1781]
[L9920]   COND FALSE  !(M_int_int[freezes_s1781][i_s1781] == 0)
[L9929]   COND TRUE   DType[this] == MainToken
[L9930]   CALL        call __var_73 := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1781][i_s1781], M_int_int[amounts_s1781][i_s1781], M_int_int[freezes_s1781][i_s1781]);
[L9224]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9224]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9225]   COND FALSE  !(revert)
[L9228]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L9228]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9229]   COND FALSE  !(revert)
[L9232]   CALL        call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9232]   RET         call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L9233]   COND FALSE  !(revert)
[L9236]               totalSupply__BasicToken[this] := __var_48;
[L9237]               __var_49 := _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9238]   COND TRUE   DType[this] == MainToken
[L9239]   CALL        call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L9239]   RET         call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L9240]   COND FALSE  !(revert)
[L9251]               currentKey_s1449 := currentKey_s1449;
[L9252]   CALL        call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9252]   RET         call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L9253]   COND FALSE  !(revert)
[L9256]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1449];
[L9257]               freezings_FreezableToken[this][currentKey_s1449] := __var_50;
[L9258]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s1449];
[L9259]   CALL        call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9259]   RET         call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L9260]   COND FALSE  !(revert)
[L9263]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s1449];
[L9264]               freezingBalance_FreezableToken[this][_to_s1449] := __var_51;
[L9265]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s1449];
[L9266]   COND TRUE   DType[this] == MainToken
[L9267]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND TRUE   DType[this] == MainToken
[L8719]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8719]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8720]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND TRUE   DType[this] == MainToken
[L8739]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8739]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8740]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L9267]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L9268]   COND FALSE  !(revert)
[L9279]               assert { :EventEmitted "Mint_FreezableMintableToken" } true;
[L9280]               assert { :EventEmitted "Freezed_FreezableMintableToken" } true;
[L9281]               assert { :EventEmitted "Transfer_FreezableMintableToken" } true;
[L9282]               __ret_0_ := true;
[L9930]   RET         call __var_73 := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1781][i_s1781], M_int_int[amounts_s1781][i_s1781], M_int_int[freezes_s1781][i_s1781]);
[L9931]   COND FALSE  !(revert)
[L9937]               i_s1781 := (i_s1781 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9938]   COND FALSE  !(gas < 0)
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
FreezableToken(697186226852612065377415878656999996930001387170).balanceOf~address.gas(3979002)({from : 697186226852612065377415878656999996930001387174, _owner : (- 481593942550298128599927049417317332772408653794)});
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);

Loop:
FreezableToken(697186226852612065377415878656999996930001387170).balanceOf~address.gas(3979001)({from : 697186226852612065377415878656999996930001387159, _owner : (- 481593942550298128599927049417317332772408653794)});
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14671]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
