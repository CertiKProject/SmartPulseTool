This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 00:06:37,873 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 00:06:37,874 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 00:06:37,885 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 00:06:37,885 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 00:06:37,885 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 00:06:37,886 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 00:06:37,888 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 00:06:37,889 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 00:06:37,890 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 00:06:37,891 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 00:06:37,891 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 00:06:37,892 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 00:06:37,892 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 00:06:37,893 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 00:06:37,894 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 00:06:37,894 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 00:06:37,895 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 00:06:37,897 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 00:06:37,898 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 00:06:37,899 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 00:06:37,899 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 00:06:37,901 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 00:06:37,901 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 00:06:37,901 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 00:06:37,902 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 00:06:37,902 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 00:06:37,903 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 00:06:37,903 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 00:06:37,903 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 00:06:37,904 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 00:06:37,904 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 00:06:37,905 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 00:06:37,905 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 00:06:37,906 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 00:06:37,906 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 00:06:37,906 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 00:06:37,907 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 00:06:37,907 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 00:06:37,907 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 00:06:37,908 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 00:06:37,908 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 00:06:37,915 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 00:06:37,915 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 00:06:37,916 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 00:06:37,916 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 00:06:37,916 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 00:06:37,917 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 00:06:37,917 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 00:06:37,917 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 00:06:37,917 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 00:06:37,917 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 00:06:37,917 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 00:06:37,917 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 00:06:37,917 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 00:06:37,917 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 00:06:37,917 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 00:06:37,918 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 00:06:37,918 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 00:06:37,918 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 00:06:37,918 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 00:06:37,918 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 00:06:37,918 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 00:06:37,918 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 00:06:37,918 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 00:06:37,918 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 00:06:37,918 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 00:06:37,919 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 00:06:37,941 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 00:06:37,955 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 00:06:37,958 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 00:06:37,959 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 00:06:37,959 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 00:06:37,960 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl
[2020-11-25 00:06:37,960 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl'
[2020-11-25 00:06:38,066 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 00:06:38,068 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 00:06:38,069 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 00:06:38,069 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 00:06:38,069 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 00:06:38,087 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:06:38" (1/1) ...
[2020-11-25 00:06:38,089 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:06:38" (1/1) ...
[2020-11-25 00:06:38,128 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:06:38" (1/1) ...
[2020-11-25 00:06:38,129 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:06:38" (1/1) ...
[2020-11-25 00:06:38,157 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:06:38" (1/1) ...
[2020-11-25 00:06:38,169 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:06:38" (1/1) ...
[2020-11-25 00:06:38,183 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:06:38" (1/1) ...
[2020-11-25 00:06:38,198 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 00:06:38,199 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 00:06:38,199 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 00:06:38,201 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 00:06:38,205 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:06:38" (1/1) ...
[2020-11-25 00:06:38,228 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_TokenERC20[this][from] && value <= allowed_TokenERC20[this][from][msg.sender] && balances_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balances_TokenERC20[this][from] == old(balances_TokenERC20[this][from]) - value && balances_TokenERC20[this][to] == old(balances_TokenERC20[this][to]) + value && allowed_TokenERC20[this][from][msg.sender] == old(allowed_TokenERC20[this][from][msg.sender]) - value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1]) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3]) && aSBlock_BATG[this] == old(aSBlock_BATG[this]) && aEBlock_BATG[this] == old(aEBlock_BATG[this]) && aCap_BATG[this] == old(aCap_BATG[this]) && aTot_BATG[this] == old(aTot_BATG[this]) && aAmt_BATG[this] == old(aAmt_BATG[this]) && sSBlock_BATG[this] == old(sSBlock_BATG[this]) && sEBlock_BATG[this] == old(sEBlock_BATG[this]) && sCap_BATG[this] == old(sCap_BATG[this]) && sTot_BATG[this] == old(sTot_BATG[this]) && sChunk_BATG[this] == old(sChunk_BATG[this]) && sPrice_BATG[this] == old(sPrice_BATG[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 00:06:38,234 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_TokenERC20[this][from] && value <= allowed_TokenERC20[this][from][msg.sender] && balances_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balances_TokenERC20[this][from] == old(balances_TokenERC20[this][from]) - value && balances_TokenERC20[this][to] == old(balances_TokenERC20[this][to]) + value && allowed_TokenERC20[this][from][msg.sender] == old(allowed_TokenERC20[this][from][msg.sender]) - value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1]) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3]) && aSBlock_BATG[this] == old(aSBlock_BATG[this]) && aEBlock_BATG[this] == old(aEBlock_BATG[this]) && aCap_BATG[this] == old(aCap_BATG[this]) && aTot_BATG[this] == old(aTot_BATG[this]) && aAmt_BATG[this] == old(aAmt_BATG[this]) && sSBlock_BATG[this] == old(sSBlock_BATG[this]) && sEBlock_BATG[this] == old(sEBlock_BATG[this]) && sCap_BATG[this] == old(sCap_BATG[this]) && sTot_BATG[this] == old(sTot_BATG[this]) && sChunk_BATG[this] == old(sChunk_BATG[this]) && sPrice_BATG[this] == old(sPrice_BATG[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 00:06:38,243 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_TokenERC20[this][from] && value <= allowed_TokenERC20[this][from][msg.sender] && balances_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balances_TokenERC20[this][from] == old(balances_TokenERC20[this][from]) - value && balances_TokenERC20[this][to] == old(balances_TokenERC20[this][to]) + value && allowed_TokenERC20[this][from][msg.sender] == old(allowed_TokenERC20[this][from][msg.sender]) - value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1]) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3]) && aSBlock_BATG[this] == old(aSBlock_BATG[this]) && aEBlock_BATG[this] == old(aEBlock_BATG[this]) && aCap_BATG[this] == old(aCap_BATG[this]) && aTot_BATG[this] == old(aTot_BATG[this]) && aAmt_BATG[this] == old(aAmt_BATG[this]) && sSBlock_BATG[this] == old(sSBlock_BATG[this]) && sEBlock_BATG[this] == old(sEBlock_BATG[this]) && sCap_BATG[this] == old(sCap_BATG[this]) && sTot_BATG[this] == old(sTot_BATG[this]) && sChunk_BATG[this] == old(sChunk_BATG[this]) && sPrice_BATG[this] == old(sPrice_BATG[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 00:06:38,259 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s468 && p1!=to_s468 ) && ( p2!=from_s468 || p3!=msg.sender ) ) && from_s468!=to_s468 ) && tokens_s468<=balances_TokenERC20[this][from_s468] ) && tokens_s468<=allowed_TokenERC20[this][from_s468][msg.sender] ) && ( balances_TokenERC20[this][to_s468] + tokens_s468 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s468>=0 ) && tokens_s468<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][to_s468]>=0 ) && balances_TokenERC20[this][to_s468]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][from_s468]>=0 ) && balances_TokenERC20[this][from_s468]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_TokenERC20[this][from_s468][msg.sender]>=0 ) && allowed_TokenERC20[this][from_s468][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 00:06:38,266 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( success_s468==true && balances_TokenERC20[this][from_s468]==( ( old(balances_TokenERC20[this][from_s468]) ) - tokens_s468 ) ) && balances_TokenERC20[this][to_s468]==( ( old(balances_TokenERC20[this][to_s468]) ) + tokens_s468 ) ) && allowed_TokenERC20[this][from_s468][msg.sender]==( ( old(allowed_TokenERC20[this][from_s468][msg.sender]) ) - tokens_s468 ) ) && _totalSupply_TokenERC20[this]==( old(_totalSupply_TokenERC20[this]) ) ) && balances_TokenERC20[this][p1]==( old(balances_TokenERC20[this][p1]) ) ) && allowed_TokenERC20[this][p2][p3]==( old(allowed_TokenERC20[this][p2][p3]) ) ) && aSBlock_BATG[this]==( old(aSBlock_BATG[this]) ) ) && aEBlock_BATG[this]==( old(aEBlock_BATG[this]) ) ) && aCap_BATG[this]==( old(aCap_BATG[this]) ) ) && aTot_BATG[this]==( old(aTot_BATG[this]) ) ) && aAmt_BATG[this]==( old(aAmt_BATG[this]) ) ) && sSBlock_BATG[this]==( old(sSBlock_BATG[this]) ) ) && sEBlock_BATG[this]==( old(sEBlock_BATG[this]) ) ) && sCap_BATG[this]==( old(sCap_BATG[this]) ) ) && sTot_BATG[this]==( old(sTot_BATG[this]) ) ) && sChunk_BATG[this]==( old(sChunk_BATG[this]) ) ) && sPrice_BATG[this]==( old(sPrice_BATG[this]) ) ) && symbol_TokenERC20[this]==( old(symbol_TokenERC20[this]) ) ) && name_TokenERC20[this]==( old(name_TokenERC20[this]) ) ) && decimals_TokenERC20[this]==( old(decimals_TokenERC20[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s468,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_TokenERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aSBlock_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aSBlock_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aEBlock_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aEBlock_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aCap_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aCap_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aTot_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aTot_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aAmt_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aAmt_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sSBlock_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sSBlock_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sEBlock_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sEBlock_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sCap_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sCap_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sTot_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sTot_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sChunk_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sChunk_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sPrice_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sPrice_BATG,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]]
[2020-11-25 00:06:38,274 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_TokenERC20[this][from] && value <= allowed_TokenERC20[this][from][msg.sender] && balances_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balances_TokenERC20[this][from] == old(balances_TokenERC20[this][from]) - value && balances_TokenERC20[this][to] == old(balances_TokenERC20[this][to]) + value && allowed_TokenERC20[this][from][msg.sender] == old(allowed_TokenERC20[this][from][msg.sender]) - value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1]) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3]) && aSBlock_BATG[this] == old(aSBlock_BATG[this]) && aEBlock_BATG[this] == old(aEBlock_BATG[this]) && aCap_BATG[this] == old(aCap_BATG[this]) && aTot_BATG[this] == old(aTot_BATG[this]) && aAmt_BATG[this] == old(aAmt_BATG[this]) && sSBlock_BATG[this] == old(sSBlock_BATG[this]) && sEBlock_BATG[this] == old(sEBlock_BATG[this]) && sCap_BATG[this] == old(sCap_BATG[this]) && sTot_BATG[this] == old(sTot_BATG[this]) && sChunk_BATG[this] == old(sChunk_BATG[this]) && sPrice_BATG[this] == old(sPrice_BATG[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 00:06:38,275 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_TokenERC200) ==> ( <>AP(success_transferFrom_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 00:06:38,290 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:06:38 PropertyContainer
[2020-11-25 00:06:38,290 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 00:06:38,291 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 00:06:38,291 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 00:06:38,291 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 00:06:38,292 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:06:38" (1/2) ...
[2020-11-25 00:06:38,292 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 00:06:38,292 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 00:06:38,313 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:06:38" (2/2) ...
[2020-11-25 00:06:38,313 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 00:06:38,314 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 00:06:38,314 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 00:06:38,314 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 00:06:38,315 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:06:38" (1/2) ...
[2020-11-25 00:06:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 00:06:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 00:06:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 00:06:38,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 00:06:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 00:06:38,377 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 00:06:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 00:06:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 00:06:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 00:06:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 00:06:38,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 00:06:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 00:06:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 00:06:38,378 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 00:06:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 00:06:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 00:06:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 00:06:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 00:06:38,379 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 00:06:38,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 00:06:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 00:06:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 00:06:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 00:06:38,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 00:06:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 00:06:38,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 00:06:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 00:06:38,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 00:06:38,380 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 00:06:38,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 00:06:38,381 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 00:06:38,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 00:06:38,381 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 00:06:38,381 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 00:06:38,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 00:06:38,381 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 00:06:38,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 00:06:38,381 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 00:06:38,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 00:06:38,381 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 00:06:38,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 00:06:38,382 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 00:06:38,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 00:06:38,382 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 00:06:38,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 00:06:38,382 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 00:06:38,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 00:06:38,382 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 00:06:38,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 00:06:38,382 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__success
[2020-11-25 00:06:38,383 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 00:06:38,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 00:06:38,383 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 00:06:38,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 00:06:38,383 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 00:06:38,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 00:06:38,383 INFO  L130     BoogieDeclarations]: Found specification of procedure BATG_BATG_NoBaseCtor__success
[2020-11-25 00:06:38,383 INFO  L130     BoogieDeclarations]: Found specification of procedure BATG_BATG
[2020-11-25 00:06:38,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure BATG_BATG
[2020-11-25 00:06:38,383 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_BATG
[2020-11-25 00:06:38,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_BATG
[2020-11-25 00:06:38,384 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_BATG
[2020-11-25 00:06:38,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_BATG
[2020-11-25 00:06:38,384 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_BATG
[2020-11-25 00:06:38,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_BATG
[2020-11-25 00:06:38,384 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_BATG
[2020-11-25 00:06:38,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_BATG
[2020-11-25 00:06:38,384 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_BATG
[2020-11-25 00:06:38,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_BATG
[2020-11-25 00:06:38,384 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_BATG
[2020-11-25 00:06:38,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_BATG
[2020-11-25 00:06:38,385 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_BATG
[2020-11-25 00:06:38,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_BATG
[2020-11-25 00:06:38,385 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BATG__success
[2020-11-25 00:06:38,385 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_BATG
[2020-11-25 00:06:38,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_BATG
[2020-11-25 00:06:38,385 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_BATG
[2020-11-25 00:06:38,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_BATG
[2020-11-25 00:06:38,385 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_BATG
[2020-11-25 00:06:38,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_BATG
[2020-11-25 00:06:38,386 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_BATG
[2020-11-25 00:06:38,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_BATG
[2020-11-25 00:06:38,386 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_BATG
[2020-11-25 00:06:38,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_BATG
[2020-11-25 00:06:38,386 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_BATG
[2020-11-25 00:06:38,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_BATG
[2020-11-25 00:06:38,386 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_BATG
[2020-11-25 00:06:38,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_BATG
[2020-11-25 00:06:38,386 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_BATG
[2020-11-25 00:06:38,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_BATG
[2020-11-25 00:06:38,387 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_BATG
[2020-11-25 00:06:38,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_BATG
[2020-11-25 00:06:38,387 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_BATG
[2020-11-25 00:06:38,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_BATG
[2020-11-25 00:06:38,387 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_BATG
[2020-11-25 00:06:38,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_BATG
[2020-11-25 00:06:38,387 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 00:06:38,387 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 00:06:38,387 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 00:06:38,387 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 00:06:38,387 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 00:06:38,388 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 00:06:38,388 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 00:06:38,388 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 00:06:38,388 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 00:06:38,388 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 00:06:38,388 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 00:06:38,388 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 00:06:38,388 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 00:06:38,388 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 00:06:38,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BATG
[2020-11-25 00:06:38,389 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 00:06:38,389 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 00:06:38,389 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 00:06:38,389 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 00:06:38,389 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 00:06:38,389 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 00:06:38,389 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 00:06:38,389 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 00:06:38,389 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 00:06:38,390 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 00:06:38,390 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 00:06:38,390 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 00:06:38,390 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 00:06:38,390 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 00:06:38,390 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 00:06:38,390 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 00:06:38,390 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 00:06:38,390 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 00:06:38,390 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 00:06:38,391 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 00:06:38,391 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 00:06:38,391 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 00:06:38,391 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 00:06:38,391 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 00:06:38,391 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 00:06:38,391 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 00:06:38,391 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 00:06:38,391 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 00:06:38,392 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 00:06:38,392 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 00:06:38,392 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 00:06:38,392 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 00:06:38,392 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 00:06:38,392 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 00:06:38,392 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 00:06:38,392 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 00:06:38,392 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 00:06:38,392 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 00:06:38,393 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 00:06:38,393 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 00:06:38,393 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 00:06:38,393 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 00:06:38,393 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 00:06:38,393 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__fail
[2020-11-25 00:06:38,393 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 00:06:38,393 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 00:06:38,393 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 00:06:38,393 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 00:06:38,393 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 00:06:38,394 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 00:06:38,394 INFO  L130     BoogieDeclarations]: Found specification of procedure BATG_BATG_NoBaseCtor__fail
[2020-11-25 00:06:38,394 INFO  L130     BoogieDeclarations]: Found specification of procedure BATG_BATG__success
[2020-11-25 00:06:38,394 INFO  L130     BoogieDeclarations]: Found specification of procedure BATG_BATG__fail
[2020-11-25 00:06:38,394 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_BATG__success
[2020-11-25 00:06:38,394 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_BATG__fail
[2020-11-25 00:06:38,394 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_BATG__success
[2020-11-25 00:06:38,395 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_BATG__fail
[2020-11-25 00:06:38,395 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_BATG__success
[2020-11-25 00:06:38,395 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_BATG__fail
[2020-11-25 00:06:38,395 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_BATG__success
[2020-11-25 00:06:38,395 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_BATG__fail
[2020-11-25 00:06:38,395 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_BATG__success
[2020-11-25 00:06:38,395 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_BATG__fail
[2020-11-25 00:06:38,395 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_BATG__success
[2020-11-25 00:06:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_BATG__fail
[2020-11-25 00:06:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_BATG__success
[2020-11-25 00:06:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_BATG__fail
[2020-11-25 00:06:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BATG__fail
[2020-11-25 00:06:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_BATG__success
[2020-11-25 00:06:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_BATG__fail
[2020-11-25 00:06:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_BATG__success
[2020-11-25 00:06:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_BATG__fail
[2020-11-25 00:06:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_BATG__success
[2020-11-25 00:06:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_BATG__fail
[2020-11-25 00:06:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_BATG__success
[2020-11-25 00:06:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_BATG__fail
[2020-11-25 00:06:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_BATG__success
[2020-11-25 00:06:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_BATG__fail
[2020-11-25 00:06:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_BATG__success
[2020-11-25 00:06:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_BATG__fail
[2020-11-25 00:06:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_BATG__success
[2020-11-25 00:06:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_BATG__fail
[2020-11-25 00:06:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_BATG__success
[2020-11-25 00:06:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_BATG__fail
[2020-11-25 00:06:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_BATG__success
[2020-11-25 00:06:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_BATG__fail
[2020-11-25 00:06:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_BATG__success
[2020-11-25 00:06:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_BATG__fail
[2020-11-25 00:06:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_BATG__success
[2020-11-25 00:06:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_BATG__fail
[2020-11-25 00:06:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 00:06:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 00:06:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 00:06:38,399 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 00:06:38,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 00:06:38,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 00:06:38,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 00:06:38,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 00:06:38,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 00:06:38,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 00:06:38,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 00:06:38,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 00:06:38,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 00:06:38,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 00:06:38,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 00:06:38,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 00:06:38,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 00:06:38,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 00:06:38,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 00:06:38,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 00:06:38,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 00:06:38,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 00:06:38,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 00:06:38,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 00:06:38,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 00:06:38,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 00:06:38,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 00:06:38,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 00:06:38,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 00:06:38,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 00:06:38,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 00:06:38,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 00:06:38,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 00:06:38,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 00:06:38,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 00:06:38,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 00:06:38,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 00:06:38,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 00:06:38,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 00:06:38,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 00:06:38,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 00:06:38,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 00:06:38,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 00:06:38,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 00:06:38,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 00:06:38,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 00:06:38,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 00:06:38,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 00:06:38,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 00:06:38,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 00:06:38,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 00:06:38,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 00:06:38,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 00:06:38,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 00:06:38,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 00:06:38,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 00:06:38,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__fail
[2020-11-25 00:06:38,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__success
[2020-11-25 00:06:38,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 00:06:38,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 00:06:38,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 00:06:38,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 00:06:38,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 00:06:38,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 00:06:38,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure BATG_BATG_NoBaseCtor__fail
[2020-11-25 00:06:38,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure BATG_BATG_NoBaseCtor__success
[2020-11-25 00:06:38,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure BATG_BATG__fail
[2020-11-25 00:06:38,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure BATG_BATG__success
[2020-11-25 00:06:38,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_BATG__fail
[2020-11-25 00:06:38,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_BATG__success
[2020-11-25 00:06:38,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_BATG__fail
[2020-11-25 00:06:38,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_BATG__success
[2020-11-25 00:06:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_BATG__fail
[2020-11-25 00:06:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_BATG__success
[2020-11-25 00:06:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_BATG__fail
[2020-11-25 00:06:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_BATG__success
[2020-11-25 00:06:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_BATG__fail
[2020-11-25 00:06:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_BATG__success
[2020-11-25 00:06:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_BATG__fail
[2020-11-25 00:06:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_BATG__success
[2020-11-25 00:06:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_BATG__fail
[2020-11-25 00:06:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_BATG__success
[2020-11-25 00:06:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BATG__fail
[2020-11-25 00:06:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BATG__success
[2020-11-25 00:06:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_BATG__fail
[2020-11-25 00:06:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_BATG__success
[2020-11-25 00:06:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_BATG__fail
[2020-11-25 00:06:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_BATG__success
[2020-11-25 00:06:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_BATG__fail
[2020-11-25 00:06:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_BATG__success
[2020-11-25 00:06:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_BATG__fail
[2020-11-25 00:06:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_BATG__success
[2020-11-25 00:06:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_BATG__fail
[2020-11-25 00:06:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_BATG__success
[2020-11-25 00:06:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_BATG__fail
[2020-11-25 00:06:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_BATG__success
[2020-11-25 00:06:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_BATG__fail
[2020-11-25 00:06:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_BATG__success
[2020-11-25 00:06:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_BATG__fail
[2020-11-25 00:06:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_BATG__success
[2020-11-25 00:06:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_BATG__fail
[2020-11-25 00:06:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_BATG__success
[2020-11-25 00:06:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_BATG__fail
[2020-11-25 00:06:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_BATG__success
[2020-11-25 00:06:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_BATG__fail
[2020-11-25 00:06:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_BATG__success
[2020-11-25 00:06:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 00:06:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 00:06:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 00:06:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 00:06:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 00:06:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 00:06:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 00:06:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 00:06:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 00:06:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 00:06:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 00:06:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 00:06:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 00:06:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 00:06:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 00:06:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 00:06:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 00:06:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 00:06:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BATG
[2020-11-25 00:06:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 00:06:38,410 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 00:06:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 00:06:38,816 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:06:38,816 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:06:38,817 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:06:38,996 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:06:39,350 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 00:06:39,350 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 00:06:39,353 INFO  L202        PluginConnector]: Adding new model BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:06:39 BoogieIcfgContainer
[2020-11-25 00:06:39,353 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:06:38" (2/2) ...
[2020-11-25 00:06:39,353 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 00:06:39,353 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@65268613 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:06:39, skipping insertion in model container
[2020-11-25 00:06:39,353 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 00:06:39,353 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 00:06:39,353 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 00:06:39,355 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 00:06:39,355 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:06:38" (1/3) ...
[2020-11-25 00:06:39,355 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6f82badf and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:06:39, skipping insertion in model container
[2020-11-25 00:06:39,355 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:06:38" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 00:06:39,392 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:06:39 NWAContainer
[2020-11-25 00:06:39,392 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 00:06:39,392 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 00:06:39,392 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 00:06:39,393 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 00:06:39,393 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:06:39" (3/4) ...
[2020-11-25 00:06:39,394 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@23aa40b1 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:06:39, skipping insertion in model container
[2020-11-25 00:06:39,394 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:06:39" (4/4) ...
[2020-11-25 00:06:39,397 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 00:06:39,403 INFO  L110   BuchiProductObserver]: Initial RCFG 3569 locations, 4645 edges
[2020-11-25 00:06:39,403 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 00:06:39,416 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 00:06:41,122 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 00:06:41,132 INFO  L110   BuchiProductObserver]: BuchiProgram size 8364 locations, 14620 edges
[2020-11-25 00:06:41,132 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:06:41 BoogieIcfgContainer
[2020-11-25 00:06:41,132 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 00:06:41,133 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 00:06:41,133 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 00:06:41,134 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 00:06:41,134 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:06:41" (1/1) ...
[2020-11-25 00:06:41,259 INFO  L313           BlockEncoder]: Initial Icfg 8364 locations, 14620 edges
[2020-11-25 00:06:41,259 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 00:06:41,259 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 00:06:41,260 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 00:06:41,260 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 00:06:41,274 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 15 locations because of local infeasibility
[2020-11-25 00:06:41,294 INFO  L70        RemoveSinkStates]: Removed 14 edges and 9 locations by removing sink states
[2020-11-25 00:06:41,313 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 00:06:41,319 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 00:06:41,326 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 00:06:41,326 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 00:06:41,330 INFO  L313           BlockEncoder]: Encoded RCFG 8308 locations, 14475 edges
[2020-11-25 00:06:41,330 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:06:41 BasicIcfg
[2020-11-25 00:06:41,330 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 00:06:41,331 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 00:06:41,331 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 00:06:41,332 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 00:06:41,332 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:06:41,332 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:06:38" (1/6) ...
[2020-11-25 00:06:41,334 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@120022b and model type BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:06:41, skipping insertion in model container
[2020-11-25 00:06:41,334 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:06:41,334 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:06:38" (2/6) ...
[2020-11-25 00:06:41,334 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@120022b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:06:41, skipping insertion in model container
[2020-11-25 00:06:41,334 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:06:41,334 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:06:39" (3/6) ...
[2020-11-25 00:06:41,334 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@120022b and model type BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:06:41, skipping insertion in model container
[2020-11-25 00:06:41,334 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:06:41,335 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:06:39" (4/6) ...
[2020-11-25 00:06:41,335 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@120022b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:06:41, skipping insertion in model container
[2020-11-25 00:06:41,335 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:06:41,335 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:06:41" (5/6) ...
[2020-11-25 00:06:41,335 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@120022b and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:06:41, skipping insertion in model container
[2020-11-25 00:06:41,335 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:06:41,335 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:06:41" (6/6) ...
[2020-11-25 00:06:41,336 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BATG_0xff759254e578bc7f725428cecb612a502e604f42_transferfrom-normal.bpl_BEv2
[2020-11-25 00:06:41,369 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 00:06:41,370 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 00:06:41,370 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 00:06:41,370 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 00:06:41,370 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 00:06:41,370 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 00:06:41,370 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 00:06:41,370 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 00:06:41,370 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 00:06:41,423 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8308 states.
[2020-11-25 00:06:41,495 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:06:41,495 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:06:41,495 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:06:41,502 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:06:41,502 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:06:41,502 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 00:06:41,503 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8308 states.
[2020-11-25 00:06:41,538 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:06:41,538 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:06:41,538 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:06:41,540 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:06:41,540 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == BATG;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND TRUE   revert
[L7679]  RET         call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;

Loop:
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_BATG(this);

[2020-11-25 00:06:41,553 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:06:41,554 INFO  L82        PathProgramCache]: Analyzing trace with hash -1206536597, now seen corresponding path program 1 times
[2020-11-25 00:06:41,557 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:06:41,580 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:06:41,612 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:06:41,613 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:06:41,613 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:06:42,026 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:06:42,034 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:06:42,035 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:06:42,036 INFO  L87              Difference]: Start difference. First operand 8308 states. Second operand 3 states.
[2020-11-25 00:06:42,381 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:06:42,381 INFO  L93              Difference]: Finished difference Result 8506 states and 14401 transitions.
[2020-11-25 00:06:42,381 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:06:42,382 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8506 states and 14401 transitions.
[2020-11-25 00:06:42,431 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:06:42,503 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8506 states to 8506 states and 14401 transitions.
[2020-11-25 00:06:42,504 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 16
[2020-11-25 00:06:42,507 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 401
[2020-11-25 00:06:42,507 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8506 states and 14401 transitions.
[2020-11-25 00:06:42,531 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:06:42,531 INFO  L728         BuchiCegarLoop]: Abstraction has 8506 states and 14401 transitions.
[2020-11-25 00:06:42,552 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8506 states and 14401 transitions.
[2020-11-25 00:06:42,673 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8506 to 7558.
[2020-11-25 00:06:42,674 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7558 states.
[2020-11-25 00:06:42,690 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7558 states to 7558 states and 12718 transitions.
[2020-11-25 00:06:42,691 INFO  L751         BuchiCegarLoop]: Abstraction has 7558 states and 12718 transitions.
[2020-11-25 00:06:42,691 INFO  L631         BuchiCegarLoop]: Abstraction has 7558 states and 12718 transitions.
[2020-11-25 00:06:42,691 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 00:06:42,691 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7558 states and 12718 transitions.
[2020-11-25 00:06:42,704 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:06:42,704 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:06:42,704 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:06:42,705 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:06:42,705 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                success_transferFrom_TokenERC200 := false;
[L3]                call_transferFrom_TokenERC200 := false;
[L3]     CALL       call main();
[L3]                havoc p3;
[L3]                havoc p2;
[L3]                havoc p1;
[L7673]             assume null == 0;
[L7674]  CALL       call this := FreshRefGenerator__success();
[L4051]             havoc newRef;
[L4052]             assume Alloc[newRef] == false;
[L4053]             Alloc[newRef] := true;
[L4054]             assume newRef != null;
[L7674]  RET        call this := FreshRefGenerator__success();
[L7675]             assume now >= 0;
[L7676]             assume DType[this] == BATG;
[L7677]             assume msgvalue_MSG == 0;
[L7678]             gas := gas - 53000;
[L7679]  CALL       call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL       call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL       call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]             assume msgsender_MSG != null;
[L4173]             Balance[this] := 0;
[L4187]  RET        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND TRUE  revert
[L4741]  RET        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND TRUE  revert
[L7679]  RET        call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]             assume !revert && gas >= 0;

Loop:
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_BATG(this);

[2020-11-25 00:06:42,708 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:06:42,708 INFO  L82        PathProgramCache]: Analyzing trace with hash -1886594967, now seen corresponding path program 1 times
[2020-11-25 00:06:42,709 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:06:42,713 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:06:42,721 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:06:42,721 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:06:42,721 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [2] imperfect sequences [] total 2
[2020-11-25 00:06:42,722 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:06:42,722 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:06:42,722 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:06:42,722 INFO  L87              Difference]: Start difference. First operand 7558 states and 12718 transitions. cyclomatic complexity: 5166 Second operand 3 states.
[2020-11-25 00:06:42,885 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:06:42,886 INFO  L93              Difference]: Finished difference Result 8506 states and 14137 transitions.
[2020-11-25 00:06:42,886 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:06:42,886 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8506 states and 14137 transitions.
[2020-11-25 00:06:42,918 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:06:42,970 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8506 states to 8194 states and 13625 transitions.
[2020-11-25 00:06:42,970 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 377
[2020-11-25 00:06:42,971 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 377
[2020-11-25 00:06:42,971 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8194 states and 13625 transitions.
[2020-11-25 00:06:42,986 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:06:42,986 INFO  L728         BuchiCegarLoop]: Abstraction has 8194 states and 13625 transitions.
[2020-11-25 00:06:42,996 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8194 states and 13625 transitions.
[2020-11-25 00:06:43,075 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8194 to 7298.
[2020-11-25 00:06:43,075 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7298 states.
[2020-11-25 00:06:43,089 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7298 states to 7298 states and 12015 transitions.
[2020-11-25 00:06:43,089 INFO  L751         BuchiCegarLoop]: Abstraction has 7298 states and 12015 transitions.
[2020-11-25 00:06:43,089 INFO  L631         BuchiCegarLoop]: Abstraction has 7298 states and 12015 transitions.
[2020-11-25 00:06:43,089 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 00:06:43,090 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7298 states and 12015 transitions.
[2020-11-25 00:06:43,100 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:06:43,100 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:06:43,100 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:06:43,102 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:06:43,102 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == BATG;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -2133012057;
[L4362]              name_TokenERC20[this] := -2133012057;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -2089175354;
[L4371]              name_TokenERC20[this] := 1889142888;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(58694261330118072424467068354560 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call BATG_BATG_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_BATG[this] := 0;
[L4706]              aEBlock_BATG[this] := 0;
[L4707]              aCap_BATG[this] := 0;
[L4708]              aTot_BATG[this] := 0;
[L4709]              aAmt_BATG[this] := 0;
[L4710]              sSBlock_BATG[this] := 0;
[L4711]              sEBlock_BATG[this] := 0;
[L4712]              sCap_BATG[this] := 0;
[L4713]              sTot_BATG[this] := 0;
[L4714]              sChunk_BATG[this] := 0;
[L4715]              sPrice_BATG[this] := 0;
[L4753]  RET         call BATG_BATG_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;

Loop:
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_BATG(this);

[2020-11-25 00:06:43,105 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:06:43,105 INFO  L82        PathProgramCache]: Analyzing trace with hash -1506491819, now seen corresponding path program 1 times
[2020-11-25 00:06:43,106 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:06:43,113 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:06:43,134 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 10 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:06:43,134 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:06:43,134 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 00:06:43,134 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:06:43,134 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:06:43,134 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:06:43,134 INFO  L87              Difference]: Start difference. First operand 7298 states and 12015 transitions. cyclomatic complexity: 4723 Second operand 4 states.
[2020-11-25 00:06:43,721 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:06:43,721 INFO  L93              Difference]: Finished difference Result 7187 states and 8271 transitions.
[2020-11-25 00:06:43,721 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:06:43,721 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7187 states and 8271 transitions.
[2020-11-25 00:06:43,734 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:06:43,750 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7187 states to 7187 states and 8271 transitions.
[2020-11-25 00:06:43,750 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 244
[2020-11-25 00:06:43,750 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 244
[2020-11-25 00:06:43,750 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7187 states and 8271 transitions.
[2020-11-25 00:06:43,755 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:06:43,755 INFO  L728         BuchiCegarLoop]: Abstraction has 7187 states and 8271 transitions.
[2020-11-25 00:06:43,761 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7187 states and 8271 transitions.
[2020-11-25 00:06:43,804 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7187 to 7187.
[2020-11-25 00:06:43,804 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7187 states.
[2020-11-25 00:06:43,812 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7187 states to 7187 states and 8271 transitions.
[2020-11-25 00:06:43,812 INFO  L751         BuchiCegarLoop]: Abstraction has 7187 states and 8271 transitions.
[2020-11-25 00:06:43,812 INFO  L631         BuchiCegarLoop]: Abstraction has 7187 states and 8271 transitions.
[2020-11-25 00:06:43,812 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 00:06:43,812 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7187 states and 8271 transitions.
[2020-11-25 00:06:43,819 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:06:43,819 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:06:43,819 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:06:43,821 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:06:43,821 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == BATG;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -2133012057;
[L4362]              name_TokenERC20[this] := -2133012057;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -2089175354;
[L4371]              name_TokenERC20[this] := 1889142888;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(58694261330118072424467068354560 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call BATG_BATG_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_BATG[this] := 0;
[L4706]              aEBlock_BATG[this] := 0;
[L4707]              aCap_BATG[this] := 0;
[L4708]              aTot_BATG[this] := 0;
[L4709]              aAmt_BATG[this] := 0;
[L4710]              sSBlock_BATG[this] := 0;
[L4711]              sEBlock_BATG[this] := 0;
[L4712]              sCap_BATG[this] := 0;
[L4713]              sTot_BATG[this] := 0;
[L4714]              sChunk_BATG[this] := 0;
[L4715]              sPrice_BATG[this] := 0;
[L4753]  RET         call BATG_BATG_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_BATG := aSBlock_BATG;
[L1160]              __tmp__aEBlock_BATG := aEBlock_BATG;
[L1161]              __tmp__aCap_BATG := aCap_BATG;
[L1162]              __tmp__aTot_BATG := aTot_BATG;
[L1163]              __tmp__aAmt_BATG := aAmt_BATG;
[L1164]              __tmp__sSBlock_BATG := sSBlock_BATG;
[L1165]              __tmp__sEBlock_BATG := sEBlock_BATG;
[L1166]              __tmp__sCap_BATG := sCap_BATG;
[L1167]              __tmp__sTot_BATG := sTot_BATG;
[L1168]              __tmp__sChunk_BATG := sChunk_BATG;
[L1169]              __tmp__sPrice_BATG := sPrice_BATG;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_BATG(this);

Loop:
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_BATG := aSBlock_BATG;
[L1160]              __tmp__aEBlock_BATG := aEBlock_BATG;
[L1161]              __tmp__aCap_BATG := aCap_BATG;
[L1162]              __tmp__aTot_BATG := aTot_BATG;
[L1163]              __tmp__aAmt_BATG := aAmt_BATG;
[L1164]              __tmp__sSBlock_BATG := sSBlock_BATG;
[L1165]              __tmp__sEBlock_BATG := sEBlock_BATG;
[L1166]              __tmp__sCap_BATG := sCap_BATG;
[L1167]              __tmp__sTot_BATG := sTot_BATG;
[L1168]              __tmp__sChunk_BATG := sChunk_BATG;
[L1169]              __tmp__sPrice_BATG := sPrice_BATG;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_BATG(this);

[2020-11-25 00:06:43,825 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:06:43,825 INFO  L82        PathProgramCache]: Analyzing trace with hash 1426014527, now seen corresponding path program 1 times
[2020-11-25 00:06:43,827 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:06:43,845 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:06:43,913 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 00:06:43,914 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:06:43,914 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 00:06:43,914 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:06:43,914 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:06:43,914 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:06:43,914 INFO  L87              Difference]: Start difference. First operand 7187 states and 8271 transitions. cyclomatic complexity: 1090 Second operand 7 states.
[2020-11-25 00:06:45,538 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:06:45,538 INFO  L93              Difference]: Finished difference Result 7683 states and 8817 transitions.
[2020-11-25 00:06:45,538 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:06:45,538 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7683 states and 8817 transitions.
[2020-11-25 00:06:45,550 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:06:45,569 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7683 states to 7683 states and 8817 transitions.
[2020-11-25 00:06:45,569 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 351
[2020-11-25 00:06:45,570 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 351
[2020-11-25 00:06:45,570 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7683 states and 8817 transitions.
[2020-11-25 00:06:45,574 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:06:45,574 INFO  L728         BuchiCegarLoop]: Abstraction has 7683 states and 8817 transitions.
[2020-11-25 00:06:45,580 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7683 states and 8817 transitions.
[2020-11-25 00:06:45,624 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7683 to 7265.
[2020-11-25 00:06:45,625 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7265 states.
[2020-11-25 00:06:45,631 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7265 states to 7265 states and 8359 transitions.
[2020-11-25 00:06:45,631 INFO  L751         BuchiCegarLoop]: Abstraction has 7265 states and 8359 transitions.
[2020-11-25 00:06:45,631 INFO  L631         BuchiCegarLoop]: Abstraction has 7265 states and 8359 transitions.
[2020-11-25 00:06:45,631 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 00:06:45,631 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7265 states and 8359 transitions.
[2020-11-25 00:06:45,637 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:06:45,637 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:06:45,637 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:06:45,639 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:06:45,639 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == BATG;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -2133012057;
[L4362]              name_TokenERC20[this] := -2133012057;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -2089175354;
[L4371]              name_TokenERC20[this] := 1889142888;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(58694261330118072424467068354560 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call BATG_BATG_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_BATG[this] := 0;
[L4706]              aEBlock_BATG[this] := 0;
[L4707]              aCap_BATG[this] := 0;
[L4708]              aTot_BATG[this] := 0;
[L4709]              aAmt_BATG[this] := 0;
[L4710]              sSBlock_BATG[this] := 0;
[L4711]              sEBlock_BATG[this] := 0;
[L4712]              sCap_BATG[this] := 0;
[L4713]              sTot_BATG[this] := 0;
[L4714]              sChunk_BATG[this] := 0;
[L4715]              sPrice_BATG[this] := 0;
[L4753]  RET         call BATG_BATG_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_BATG[this] == old(aSBlock_BATG[this])) && aEBlock_BATG[this] == old(aEBlock_BATG[this])) && aCap_BATG[this] == old(aCap_BATG[this])) && aTot_BATG[this] == old(aTot_BATG[this])) && aAmt_BATG[this] == old(aAmt_BATG[this])) && sSBlock_BATG[this] == old(sSBlock_BATG[this])) && sEBlock_BATG[this] == old(sEBlock_BATG[this])) && sCap_BATG[this] == old(sCap_BATG[this])) && sTot_BATG[this] == old(sTot_BATG[this])) && sChunk_BATG[this] == old(sChunk_BATG[this])) && sPrice_BATG[this] == old(sPrice_BATG[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_BATG(this);

Loop:
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_BATG[this] == old(aSBlock_BATG[this])) && aEBlock_BATG[this] == old(aEBlock_BATG[this])) && aCap_BATG[this] == old(aCap_BATG[this])) && aTot_BATG[this] == old(aTot_BATG[this])) && aAmt_BATG[this] == old(aAmt_BATG[this])) && sSBlock_BATG[this] == old(sSBlock_BATG[this])) && sEBlock_BATG[this] == old(sEBlock_BATG[this])) && sCap_BATG[this] == old(sCap_BATG[this])) && sTot_BATG[this] == old(sTot_BATG[this])) && sChunk_BATG[this] == old(sChunk_BATG[this])) && sPrice_BATG[this] == old(sPrice_BATG[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_BATG(this);

[2020-11-25 00:06:45,643 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:06:45,643 INFO  L82        PathProgramCache]: Analyzing trace with hash 839252303, now seen corresponding path program 1 times
[2020-11-25 00:06:45,644 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:06:45,721 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:06:46,521 WARN  L188               SmtUtils]: Spent 131.00 ms on a formula simplification. DAG size of input: 118 DAG size of output: 80
[2020-11-25 00:06:47,106 INFO  L134       CoverageAnalysis]: Checked inductivity of 27 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 25 trivial. 0 not checked.
[2020-11-25 00:06:47,106 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:06:47,106 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-11-25 00:06:47,107 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:06:47,107 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 00:06:47,107 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=86, Invalid=784, Unknown=0, NotChecked=0, Total=870
[2020-11-25 00:06:47,107 INFO  L87              Difference]: Start difference. First operand 7265 states and 8359 transitions. cyclomatic complexity: 1100 Second operand 30 states.
[2020-11-25 00:07:10,546 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:07:10,546 INFO  L93              Difference]: Finished difference Result 7428 states and 8540 transitions.
[2020-11-25 00:07:10,546 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 00:07:10,546 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7428 states and 8540 transitions.
[2020-11-25 00:07:10,558 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:07:10,572 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7428 states to 7428 states and 8540 transitions.
[2020-11-25 00:07:10,572 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 287
[2020-11-25 00:07:10,572 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 287
[2020-11-25 00:07:10,572 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7428 states and 8540 transitions.
[2020-11-25 00:07:10,576 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:07:10,576 INFO  L728         BuchiCegarLoop]: Abstraction has 7428 states and 8540 transitions.
[2020-11-25 00:07:10,582 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7428 states and 8540 transitions.
[2020-11-25 00:07:10,618 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7428 to 7379.
[2020-11-25 00:07:10,618 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7379 states.
[2020-11-25 00:07:10,625 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7379 states to 7379 states and 8485 transitions.
[2020-11-25 00:07:10,625 INFO  L751         BuchiCegarLoop]: Abstraction has 7379 states and 8485 transitions.
[2020-11-25 00:07:10,625 INFO  L631         BuchiCegarLoop]: Abstraction has 7379 states and 8485 transitions.
[2020-11-25 00:07:10,625 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 00:07:10,625 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7379 states and 8485 transitions.
[2020-11-25 00:07:10,631 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:07:10,631 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:07:10,631 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:07:10,633 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:07:10,633 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == BATG;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -2133012057;
[L4362]              name_TokenERC20[this] := -2133012057;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -2089175354;
[L4371]              name_TokenERC20[this] := 1889142888;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(58694261330118072424467068354560 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call BATG_BATG_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_BATG[this] := 0;
[L4706]              aEBlock_BATG[this] := 0;
[L4707]              aCap_BATG[this] := 0;
[L4708]              aTot_BATG[this] := 0;
[L4709]              aAmt_BATG[this] := 0;
[L4710]              sSBlock_BATG[this] := 0;
[L4711]              sEBlock_BATG[this] := 0;
[L4712]              sCap_BATG[this] := 0;
[L4713]              sTot_BATG[this] := 0;
[L4714]              sChunk_BATG[this] := 0;
[L4715]              sPrice_BATG[this] := 0;
[L4753]  RET         call BATG_BATG_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_BATG := aSBlock_BATG;
[L1160]              __tmp__aEBlock_BATG := aEBlock_BATG;
[L1161]              __tmp__aCap_BATG := aCap_BATG;
[L1162]              __tmp__aTot_BATG := aTot_BATG;
[L1163]              __tmp__aAmt_BATG := aAmt_BATG;
[L1164]              __tmp__sSBlock_BATG := sSBlock_BATG;
[L1165]              __tmp__sEBlock_BATG := sEBlock_BATG;
[L1166]              __tmp__sCap_BATG := sCap_BATG;
[L1167]              __tmp__sTot_BATG := sTot_BATG;
[L1168]              __tmp__sChunk_BATG := sChunk_BATG;
[L1169]              __tmp__sPrice_BATG := sPrice_BATG;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_BATG(this);

Loop:
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_BATG := aSBlock_BATG;
[L1160]              __tmp__aEBlock_BATG := aEBlock_BATG;
[L1161]              __tmp__aCap_BATG := aCap_BATG;
[L1162]              __tmp__aTot_BATG := aTot_BATG;
[L1163]              __tmp__aAmt_BATG := aAmt_BATG;
[L1164]              __tmp__sSBlock_BATG := sSBlock_BATG;
[L1165]              __tmp__sEBlock_BATG := sEBlock_BATG;
[L1166]              __tmp__sCap_BATG := sCap_BATG;
[L1167]              __tmp__sTot_BATG := sTot_BATG;
[L1168]              __tmp__sChunk_BATG := sChunk_BATG;
[L1169]              __tmp__sPrice_BATG := sPrice_BATG;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_BATG(this);

[2020-11-25 00:07:10,637 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:07:10,637 INFO  L82        PathProgramCache]: Analyzing trace with hash -1360343594, now seen corresponding path program 1 times
[2020-11-25 00:07:10,637 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:07:10,647 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:07:10,692 INFO  L134       CoverageAnalysis]: Checked inductivity of 26 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 24 trivial. 0 not checked.
[2020-11-25 00:07:10,692 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:07:10,692 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 00:07:10,692 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:07:10,692 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:07:10,693 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:07:10,693 INFO  L87              Difference]: Start difference. First operand 7379 states and 8485 transitions. cyclomatic complexity: 1114 Second operand 7 states.
[2020-11-25 00:07:12,224 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:07:12,224 INFO  L93              Difference]: Finished difference Result 7703 states and 8843 transitions.
[2020-11-25 00:07:12,224 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:07:12,224 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7703 states and 8843 transitions.
[2020-11-25 00:07:12,239 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 00:07:12,254 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7703 states to 7703 states and 8843 transitions.
[2020-11-25 00:07:12,254 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 371
[2020-11-25 00:07:12,255 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 371
[2020-11-25 00:07:12,255 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7703 states and 8843 transitions.
[2020-11-25 00:07:12,259 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:07:12,259 INFO  L728         BuchiCegarLoop]: Abstraction has 7703 states and 8843 transitions.
[2020-11-25 00:07:12,264 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7703 states and 8843 transitions.
[2020-11-25 00:07:12,300 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7703 to 7479.
[2020-11-25 00:07:12,300 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7479 states.
[2020-11-25 00:07:12,307 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7479 states to 7479 states and 8587 transitions.
[2020-11-25 00:07:12,307 INFO  L751         BuchiCegarLoop]: Abstraction has 7479 states and 8587 transitions.
[2020-11-25 00:07:12,307 INFO  L631         BuchiCegarLoop]: Abstraction has 7479 states and 8587 transitions.
[2020-11-25 00:07:12,307 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 00:07:12,308 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7479 states and 8587 transitions.
[2020-11-25 00:07:12,350 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:07:12,351 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:07:12,351 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:07:12,353 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:07:12,353 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == BATG;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -2133012057;
[L4362]              name_TokenERC20[this] := -2133012057;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -2089175354;
[L4371]              name_TokenERC20[this] := 1889142888;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(58694261330118072424467068354560 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call BATG_BATG_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_BATG[this] := 0;
[L4706]              aEBlock_BATG[this] := 0;
[L4707]              aCap_BATG[this] := 0;
[L4708]              aTot_BATG[this] := 0;
[L4709]              aAmt_BATG[this] := 0;
[L4710]              sSBlock_BATG[this] := 0;
[L4711]              sEBlock_BATG[this] := 0;
[L4712]              sCap_BATG[this] := 0;
[L4713]              sTot_BATG[this] := 0;
[L4714]              sChunk_BATG[this] := 0;
[L4715]              sPrice_BATG[this] := 0;
[L4753]  RET         call BATG_BATG_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_BATG := aSBlock_BATG;
[L1160]              __tmp__aEBlock_BATG := aEBlock_BATG;
[L1161]              __tmp__aCap_BATG := aCap_BATG;
[L1162]              __tmp__aTot_BATG := aTot_BATG;
[L1163]              __tmp__aAmt_BATG := aAmt_BATG;
[L1164]              __tmp__sSBlock_BATG := sSBlock_BATG;
[L1165]              __tmp__sEBlock_BATG := sEBlock_BATG;
[L1166]              __tmp__sCap_BATG := sCap_BATG;
[L1167]              __tmp__sTot_BATG := sTot_BATG;
[L1168]              __tmp__sChunk_BATG := sChunk_BATG;
[L1169]              __tmp__sPrice_BATG := sPrice_BATG;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND TRUE   !(c_s23 >= a_s23)
[L4093]              revert := true;
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_BATG(this);

Loop:
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_BATG(this);

[2020-11-25 00:07:12,406 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:07:12,407 INFO  L82        PathProgramCache]: Analyzing trace with hash 849078374, now seen corresponding path program 1 times
[2020-11-25 00:07:12,407 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:07:12,424 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:07:12,596 INFO  L134       CoverageAnalysis]: Checked inductivity of 27 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 27 trivial. 0 not checked.
[2020-11-25 00:07:12,596 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:07:12,596 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 00:07:12,597 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:07:12,597 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 00:07:12,597 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=39, Invalid=303, Unknown=0, NotChecked=0, Total=342
[2020-11-25 00:07:12,597 INFO  L87              Difference]: Start difference. First operand 7479 states and 8587 transitions. cyclomatic complexity: 1116 Second operand 19 states.
[2020-11-25 00:07:20,925 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:07:20,925 INFO  L93              Difference]: Finished difference Result 7807 states and 8972 transitions.
[2020-11-25 00:07:20,925 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 00:07:20,926 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7807 states and 8972 transitions.
[2020-11-25 00:07:20,939 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 00:07:20,954 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7807 states to 7807 states and 8972 transitions.
[2020-11-25 00:07:20,954 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 378
[2020-11-25 00:07:20,955 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 378
[2020-11-25 00:07:20,955 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7807 states and 8972 transitions.
[2020-11-25 00:07:20,958 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:07:20,959 INFO  L728         BuchiCegarLoop]: Abstraction has 7807 states and 8972 transitions.
[2020-11-25 00:07:20,964 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7807 states and 8972 transitions.
[2020-11-25 00:07:20,999 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7807 to 7483.
[2020-11-25 00:07:20,999 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7483 states.
[2020-11-25 00:07:21,006 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7483 states to 7483 states and 8591 transitions.
[2020-11-25 00:07:21,006 INFO  L751         BuchiCegarLoop]: Abstraction has 7483 states and 8591 transitions.
[2020-11-25 00:07:21,006 INFO  L631         BuchiCegarLoop]: Abstraction has 7483 states and 8591 transitions.
[2020-11-25 00:07:21,006 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 00:07:21,006 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7483 states and 8591 transitions.
[2020-11-25 00:07:21,013 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:07:21,013 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:07:21,013 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:07:21,015 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:07:21,015 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == BATG;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -2133012057;
[L4362]              name_TokenERC20[this] := -2133012057;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -2089175354;
[L4371]              name_TokenERC20[this] := 1889142888;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(58694261330118072424467068354560 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call BATG_BATG_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_BATG[this] := 0;
[L4706]              aEBlock_BATG[this] := 0;
[L4707]              aCap_BATG[this] := 0;
[L4708]              aTot_BATG[this] := 0;
[L4709]              aAmt_BATG[this] := 0;
[L4710]              sSBlock_BATG[this] := 0;
[L4711]              sEBlock_BATG[this] := 0;
[L4712]              sCap_BATG[this] := 0;
[L4713]              sTot_BATG[this] := 0;
[L4714]              sChunk_BATG[this] := 0;
[L4715]              sPrice_BATG[this] := 0;
[L4753]  RET         call BATG_BATG_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_BATG := aSBlock_BATG;
[L1160]              __tmp__aEBlock_BATG := aEBlock_BATG;
[L1161]              __tmp__aCap_BATG := aCap_BATG;
[L1162]              __tmp__aTot_BATG := aTot_BATG;
[L1163]              __tmp__aAmt_BATG := aAmt_BATG;
[L1164]              __tmp__sSBlock_BATG := sSBlock_BATG;
[L1165]              __tmp__sEBlock_BATG := sEBlock_BATG;
[L1166]              __tmp__sCap_BATG := sCap_BATG;
[L1167]              __tmp__sTot_BATG := sTot_BATG;
[L1168]              __tmp__sChunk_BATG := sChunk_BATG;
[L1169]              __tmp__sPrice_BATG := sPrice_BATG;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND FALSE  !(!(c_s23 >= a_s23))
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND FALSE  !(revert)
[L4540]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][to_s468];
[L4541]              __tmp__balances_TokenERC20[this][to_s468] := __var_9;
[L4542]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][to_s468];
[L4543]              success_s468 := true;
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_BATG(this);

Loop:
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_BATG(this);

[2020-11-25 00:07:21,018 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:07:21,018 INFO  L82        PathProgramCache]: Analyzing trace with hash -733788289, now seen corresponding path program 1 times
[2020-11-25 00:07:21,018 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:07:21,030 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:07:21,063 INFO  L134       CoverageAnalysis]: Checked inductivity of 27 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 27 trivial. 0 not checked.
[2020-11-25 00:07:21,063 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:07:21,063 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 00:07:21,064 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:07:21,064 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 00:07:21,064 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 00:07:21,064 INFO  L87              Difference]: Start difference. First operand 7483 states and 8591 transitions. cyclomatic complexity: 1116 Second operand 5 states.
[2020-11-25 00:07:22,333 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:07:22,333 INFO  L93              Difference]: Finished difference Result 8804 states and 10144 transitions.
[2020-11-25 00:07:22,333 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:07:22,333 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8804 states and 10144 transitions.
[2020-11-25 00:07:22,350 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 00:07:22,366 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8804 states to 7234 states and 8413 transitions.
[2020-11-25 00:07:22,366 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 296
[2020-11-25 00:07:22,366 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 296
[2020-11-25 00:07:22,366 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7234 states and 8413 transitions.
[2020-11-25 00:07:22,370 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:07:22,370 INFO  L728         BuchiCegarLoop]: Abstraction has 7234 states and 8413 transitions.
[2020-11-25 00:07:22,375 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7234 states and 8413 transitions.
[2020-11-25 00:07:22,406 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7234 to 5852.
[2020-11-25 00:07:22,406 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5852 states.
[2020-11-25 00:07:22,412 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5852 states to 5852 states and 6726 transitions.
[2020-11-25 00:07:22,412 INFO  L751         BuchiCegarLoop]: Abstraction has 5852 states and 6726 transitions.
[2020-11-25 00:07:22,412 INFO  L631         BuchiCegarLoop]: Abstraction has 5852 states and 6726 transitions.
[2020-11-25 00:07:22,412 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 00:07:22,412 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5852 states and 6726 transitions.
[2020-11-25 00:07:22,417 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:07:22,417 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:07:22,417 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:07:22,418 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:07:22,418 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == BATG;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -2133012057;
[L4362]              name_TokenERC20[this] := -2133012057;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -2089175354;
[L4371]              name_TokenERC20[this] := 1889142888;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(58694261330118072424467068354560 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call BATG_BATG_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_BATG[this] := 0;
[L4706]              aEBlock_BATG[this] := 0;
[L4707]              aCap_BATG[this] := 0;
[L4708]              aTot_BATG[this] := 0;
[L4709]              aAmt_BATG[this] := 0;
[L4710]              sSBlock_BATG[this] := 0;
[L4711]              sEBlock_BATG[this] := 0;
[L4712]              sCap_BATG[this] := 0;
[L4713]              sTot_BATG[this] := 0;
[L4714]              sChunk_BATG[this] := 0;
[L4715]              sPrice_BATG[this] := 0;
[L4753]  RET         call BATG_BATG_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND TRUE   choice == 28
[L7486]              gas := gas - 21000;
[L7487]  COND TRUE   gas >= 0
[L7488]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7489]              assume msgvalue_MSG == 0;
[L7490]  CALL        call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1057]              havoc __exception;
[L1058]              revert := false;
[L1059]  COND FALSE  !(__exception)
[L1093]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L4509]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4510]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4511]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4512]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4513]              success_s409 := true;
[L1093]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1094]              assume !revert && gas >= 0;
[L7490]  RET         call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L7683]  RET         call CorralChoice_BATG(this);
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_BATG[this] == old(aSBlock_BATG[this])) && aEBlock_BATG[this] == old(aEBlock_BATG[this])) && aCap_BATG[this] == old(aCap_BATG[this])) && aTot_BATG[this] == old(aTot_BATG[this])) && aAmt_BATG[this] == old(aAmt_BATG[this])) && sSBlock_BATG[this] == old(sSBlock_BATG[this])) && sEBlock_BATG[this] == old(sEBlock_BATG[this])) && sCap_BATG[this] == old(sCap_BATG[this])) && sTot_BATG[this] == old(sTot_BATG[this])) && sChunk_BATG[this] == old(sChunk_BATG[this])) && sPrice_BATG[this] == old(sPrice_BATG[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_BATG(this);

Loop:
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_BATG(this);

[2020-11-25 00:07:22,422 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:07:22,422 INFO  L82        PathProgramCache]: Analyzing trace with hash -1306906001, now seen corresponding path program 1 times
[2020-11-25 00:07:22,423 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:07:22,477 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:07:22,957 INFO  L134       CoverageAnalysis]: Checked inductivity of 112 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 109 trivial. 0 not checked.
[2020-11-25 00:07:22,957 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:07:22,957 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-11-25 00:07:22,958 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:07:22,958 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 00:07:22,958 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=83, Invalid=673, Unknown=0, NotChecked=0, Total=756
[2020-11-25 00:07:22,958 INFO  L87              Difference]: Start difference. First operand 5852 states and 6726 transitions. cyclomatic complexity: 881 Second operand 28 states.
[2020-11-25 00:07:36,773 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:07:36,773 INFO  L93              Difference]: Finished difference Result 5984 states and 6898 transitions.
[2020-11-25 00:07:36,773 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 00:07:36,773 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5984 states and 6898 transitions.
[2020-11-25 00:07:36,783 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 00:07:36,794 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5984 states to 5978 states and 6891 transitions.
[2020-11-25 00:07:36,794 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 242
[2020-11-25 00:07:36,795 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 242
[2020-11-25 00:07:36,795 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5978 states and 6891 transitions.
[2020-11-25 00:07:36,798 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:07:36,798 INFO  L728         BuchiCegarLoop]: Abstraction has 5978 states and 6891 transitions.
[2020-11-25 00:07:36,802 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5978 states and 6891 transitions.
[2020-11-25 00:07:36,827 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5978 to 5844.
[2020-11-25 00:07:36,827 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5844 states.
[2020-11-25 00:07:36,833 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5844 states to 5844 states and 6715 transitions.
[2020-11-25 00:07:36,833 INFO  L751         BuchiCegarLoop]: Abstraction has 5844 states and 6715 transitions.
[2020-11-25 00:07:36,833 INFO  L631         BuchiCegarLoop]: Abstraction has 5844 states and 6715 transitions.
[2020-11-25 00:07:36,833 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 00:07:36,833 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5844 states and 6715 transitions.
[2020-11-25 00:07:36,838 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:07:36,838 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:07:36,838 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:07:36,839 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:07:36,839 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == BATG;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -2133012057;
[L4362]              name_TokenERC20[this] := -2133012057;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -2089175354;
[L4371]              name_TokenERC20[this] := 1889142888;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(58694261330118072424467068354560 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call BATG_BATG_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_BATG[this] := 0;
[L4706]              aEBlock_BATG[this] := 0;
[L4707]              aCap_BATG[this] := 0;
[L4708]              aTot_BATG[this] := 0;
[L4709]              aAmt_BATG[this] := 0;
[L4710]              sSBlock_BATG[this] := 0;
[L4711]              sEBlock_BATG[this] := 0;
[L4712]              sCap_BATG[this] := 0;
[L4713]              sTot_BATG[this] := 0;
[L4714]              sChunk_BATG[this] := 0;
[L4715]              sPrice_BATG[this] := 0;
[L4753]  RET         call BATG_BATG_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call BATG_BATG__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND TRUE   choice == 28
[L7486]              gas := gas - 21000;
[L7487]  COND TRUE   gas >= 0
[L7488]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7489]              assume msgvalue_MSG == 0;
[L7490]  CALL        call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1057]              havoc __exception;
[L1058]              revert := false;
[L1059]  COND FALSE  !(__exception)
[L1093]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L4509]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4510]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4511]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4512]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4513]              success_s409 := true;
[L1093]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1094]              assume !revert && gas >= 0;
[L7490]  RET         call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L7683]  RET         call CorralChoice_BATG(this);
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_BATG := aSBlock_BATG;
[L1160]              __tmp__aEBlock_BATG := aEBlock_BATG;
[L1161]              __tmp__aCap_BATG := aCap_BATG;
[L1162]              __tmp__aTot_BATG := aTot_BATG;
[L1163]              __tmp__aAmt_BATG := aAmt_BATG;
[L1164]              __tmp__sSBlock_BATG := sSBlock_BATG;
[L1165]              __tmp__sEBlock_BATG := sEBlock_BATG;
[L1166]              __tmp__sCap_BATG := sCap_BATG;
[L1167]              __tmp__sTot_BATG := sTot_BATG;
[L1168]              __tmp__sChunk_BATG := sChunk_BATG;
[L1169]              __tmp__sPrice_BATG := sPrice_BATG;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND TRUE   !(c_s23 >= a_s23)
[L4093]              revert := true;
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_BATG(this);

Loop:
[L7683]  CALL        call CorralChoice_BATG(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != BATG;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_BATG := aSBlock_BATG;
[L1160]              __tmp__aEBlock_BATG := aEBlock_BATG;
[L1161]              __tmp__aCap_BATG := aCap_BATG;
[L1162]              __tmp__aTot_BATG := aTot_BATG;
[L1163]              __tmp__aAmt_BATG := aAmt_BATG;
[L1164]              __tmp__sSBlock_BATG := sSBlock_BATG;
[L1165]              __tmp__sEBlock_BATG := sEBlock_BATG;
[L1166]              __tmp__sCap_BATG := sCap_BATG;
[L1167]              __tmp__sTot_BATG := sTot_BATG;
[L1168]              __tmp__sChunk_BATG := sChunk_BATG;
[L1169]              __tmp__sPrice_BATG := sPrice_BATG;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND TRUE   !(c_s23 >= a_s23)
[L4093]              revert := true;
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_BATG(this);

[2020-11-25 00:07:36,843 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:07:36,843 INFO  L82        PathProgramCache]: Analyzing trace with hash -50165370, now seen corresponding path program 1 times
[2020-11-25 00:07:36,844 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:07:36,857 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:07:36,994 INFO  L134       CoverageAnalysis]: Checked inductivity of 112 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 112 trivial. 0 not checked.
[2020-11-25 00:07:36,994 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:07:36,994 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 00:07:36,994 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:07:36,994 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 00:07:36,994 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-25 00:07:36,995 INFO  L87              Difference]: Start difference. First operand 5844 states and 6715 transitions. cyclomatic complexity: 878 Second operand 9 states.
[2020-11-25 00:07:37,876 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:07:37,876 INFO  L93              Difference]: Finished difference Result 3221 states and 3683 transitions.
[2020-11-25 00:07:37,876 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:07:37,876 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3221 states and 3683 transitions.
[2020-11-25 00:07:37,882 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 00:07:37,882 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3221 states to 0 states and 0 transitions.
[2020-11-25 00:07:37,882 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 00:07:37,882 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 00:07:37,882 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 00:07:37,882 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:07:37,882 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 00:07:37,882 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 00:07:37,882 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 00:07:37,882 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 00:07:37,882 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 00:07:37,882 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 00:07:37,882 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 00:07:37,885 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:07:37 BasicIcfg
[2020-11-25 00:07:37,885 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 00:07:37,885 INFO  L168              Benchmark]: Toolchain (without parser) took 59818.95 ms. Allocated memory was 1.0 GB in the beginning and 3.1 GB in the end (delta: 2.0 GB). Free memory was 935.2 MB in the beginning and 2.2 GB in the end (delta: -1.3 GB). Peak memory consumption was 734.9 MB. Max. memory is 15.3 GB.
[2020-11-25 00:07:37,886 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 00:07:37,886 INFO  L168              Benchmark]: Boogie Preprocessor took 129.35 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 00:07:37,886 INFO  L168              Benchmark]: UtopiaSpecLang took 91.85 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-25 00:07:37,886 INFO  L168              Benchmark]: Boogie Printer took 22.85 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 00:07:37,887 INFO  L168              Benchmark]: RCFGBuilder took 1039.24 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.2 MB). Free memory was 897.6 MB in the beginning and 1.0 GB in the end (delta: -105.9 MB). Peak memory consumption was 187.3 MB. Max. memory is 15.3 GB.
[2020-11-25 00:07:37,888 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.43 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 996.5 MB in the end (delta: 7.0 MB). Peak memory consumption was 7.0 MB. Max. memory is 15.3 GB.
[2020-11-25 00:07:37,888 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1740.55 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 155.2 MB). Free memory was 996.5 MB in the beginning and 935.2 MB in the end (delta: 61.3 MB). Peak memory consumption was 521.0 MB. Max. memory is 15.3 GB.
[2020-11-25 00:07:37,888 INFO  L168              Benchmark]: BlockEncodingV2 took 197.72 ms. Allocated memory is still 1.3 GB. Free memory was 935.2 MB in the beginning and 836.5 MB in the end (delta: 98.7 MB). Peak memory consumption was 98.7 MB. Max. memory is 15.3 GB.
[2020-11-25 00:07:37,889 INFO  L168              Benchmark]: BuchiAutomizer took 56554.59 ms. Allocated memory was 1.3 GB in the beginning and 3.1 GB in the end (delta: 1.8 GB). Free memory was 836.5 MB in the beginning and 2.2 GB in the end (delta: -1.4 GB). Peak memory consumption was 411.7 MB. Max. memory is 15.3 GB.
[2020-11-25 00:07:37,892 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8364 locations, 14620 edges
  - StatisticsResult: Encoded RCFG
    8308 locations, 14475 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 129.35 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 91.85 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.85 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1039.24 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.2 MB). Free memory was 897.6 MB in the beginning and 1.0 GB in the end (delta: -105.9 MB). Peak memory consumption was 187.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.43 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 996.5 MB in the end (delta: 7.0 MB). Peak memory consumption was 7.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1740.55 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 155.2 MB). Free memory was 996.5 MB in the beginning and 935.2 MB in the end (delta: 61.3 MB). Peak memory consumption was 521.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 197.72 ms. Allocated memory is still 1.3 GB. Free memory was 935.2 MB in the beginning and 836.5 MB in the end (delta: 98.7 MB). Peak memory consumption was 98.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 56554.59 ms. Allocated memory was 1.3 GB in the beginning and 3.1 GB in the end (delta: 1.8 GB). Free memory was 836.5 MB in the beginning and 2.2 GB in the end (delta: -1.4 GB). Peak memory consumption was 411.7 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3569 locations, 4645 edges
  - StatisticsResult: BuchiProgram size
    8364 locations, 14620 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic). 10 modules have a trivial ranking function, the largest among these consists of 30 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 56.5s and 11 iterations.  TraceHistogramMax:2. Analysis of lassos took 3.1s. Construction of modules took 43.0s. BÃ¼chi inclusion checks took 8.9s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 9 MinimizatonAttempts, 4375 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 7558 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 80905 SDtfs, 92536 SDslu, 203889 SDs, 0 SdLazy, 317514 SolverSat, 15359 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 43.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_TokenERC200) ==> ( <>(success_transferFrom_TokenERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
