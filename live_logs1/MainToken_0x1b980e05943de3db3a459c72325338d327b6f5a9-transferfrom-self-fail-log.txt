This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:24:42,071 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:24:42,073 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:24:42,083 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:24:42,083 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:24:42,084 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:24:42,085 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:24:42,087 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:24:42,088 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:24:42,089 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:24:42,090 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:24:42,090 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:24:42,091 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:24:42,091 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:24:42,092 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:24:42,093 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:24:42,094 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:24:42,095 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:24:42,096 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:24:42,097 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:24:42,098 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:24:42,099 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:24:42,101 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:24:42,101 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:24:42,101 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:24:42,102 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:24:42,102 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:24:42,103 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:24:42,103 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:24:42,103 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:24:42,104 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:24:42,104 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:24:42,105 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:24:42,105 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:24:42,106 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:24:42,106 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:24:42,106 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:24:42,107 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:24:42,107 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:24:42,107 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:24:42,108 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:24:42,108 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:24:42,116 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:24:42,116 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:24:42,117 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:24:42,117 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:24:42,117 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:24:42,117 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:24:42,117 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:24:42,118 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:24:42,118 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:24:42,118 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:24:42,118 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:24:42,118 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:24:42,118 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:24:42,118 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:24:42,118 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:24:42,118 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:24:42,119 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:24:42,119 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:24:42,119 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:24:42,119 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:24:42,119 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:24:42,119 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:24:42,119 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:24:42,119 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:24:42,119 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:24:42,119 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:24:42,141 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:24:42,153 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:24:42,156 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:24:42,157 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:24:42,157 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:24:42,158 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl
[2020-11-24 21:24:42,158 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl'
[2020-11-24 21:24:42,303 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:24:42,304 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:24:42,305 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:24:42,305 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:24:42,305 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:24:42,322 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:24:42" (1/1) ...
[2020-11-24 21:24:42,324 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:24:42" (1/1) ...
[2020-11-24 21:24:42,382 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:24:42" (1/1) ...
[2020-11-24 21:24:42,383 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:24:42" (1/1) ...
[2020-11-24 21:24:42,426 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:24:42" (1/1) ...
[2020-11-24 21:24:42,453 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:24:42" (1/1) ...
[2020-11-24 21:24:42,474 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:24:42" (1/1) ...
[2020-11-24 21:24:42,500 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:24:42,501 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:24:42,501 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:24:42,504 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:24:42,507 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:24:42" (1/1) ...
[2020-11-24 21:24:42,537 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MainToken.transferFrom(from, to, value), from == to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MainToken.transferFrom)))
[2020-11-24 21:24:42,543 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MainToken.transferFrom(from, to, value), from == to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MainToken.transferFrom)))
[2020-11-24 21:24:42,552 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MainToken.transferFrom(from, to, value), from == to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MainToken.transferFrom)))
[2020-11-24 21:24:42,564 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s1551==_to_s1551 && ( _value_s1551>balances_BasicToken[this][_from_s1551] || _value_s1551>allowed_StandardToken[this][_from_s1551][msg.sender] ) ) && _value_s1551>=0 ) && _value_s1551<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s1551]>=0 ) && balances_BasicToken[this][_to_s1551]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_from_s1551]>=0 ) && balances_BasicToken[this][_from_s1551]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_StandardToken[this][_from_s1551][msg.sender]>=0 ) && allowed_StandardToken[this][_from_s1551][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[_from_s1551,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 21:24:42,571 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MainToken.transferFrom(from, to, value), from == to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MainToken.transferFrom)))
[2020-11-24 21:24:42,571 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_MainToken0) ==> ( <>AP(fail_transferFrom_MainToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:24:42,598 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:24:42 PropertyContainer
[2020-11-24 21:24:42,598 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:24:42,598 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:24:42,598 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:24:42,598 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:24:42,599 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:24:42" (1/2) ...
[2020-11-24 21:24:42,600 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:24:42,600 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:24:42,633 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:24:42" (2/2) ...
[2020-11-24 21:24:42,633 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:24:42,634 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:24:42,634 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:24:42,634 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:24:42,635 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:24:42" (1/2) ...
[2020-11-24 21:24:42,691 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:24:42,692 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:24:42,692 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:24:42,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:24:42,692 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:24:42,692 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:24:42,692 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:24:42,692 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:24:42,692 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:24:42,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:24:42,693 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:24:42,693 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:24:42,693 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:24:42,693 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:24:42,693 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:24:42,693 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:24:42,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:24:42,694 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:24:42,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:24:42,694 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:24:42,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:24:42,694 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:24:42,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:24:42,694 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:24:42,695 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:24:42,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:24:42,695 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:24:42,695 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:24:42,695 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:24:42,695 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:24:42,695 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:24:42,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:24:42,695 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:24:42,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:24:42,696 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:24:42,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:24:42,696 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:24:42,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:24:42,696 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:24:42,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:24:42,696 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:24:42,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:24:42,696 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:24:42,696 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:24:42,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:24:42,697 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:24:42,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:24:42,697 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:24:42,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:24:42,697 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:24:42,697 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:24:42,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:24:42,697 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:24:42,697 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:24:42,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:24:42,698 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:24:42,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:24:42,698 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:24:42,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:24:42,698 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:24:42,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:24:42,698 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:24:42,698 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:24:42,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:24:42,698 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:24:42,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:24:42,699 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:24:42,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:24:42,699 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:24:42,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:24:42,699 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:24:42,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:24:42,699 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:24:42,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:24:42,699 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:24:42,699 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:24:42,700 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:24:42,700 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:24:42,700 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:24:42,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:24:42,701 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:24:42,701 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:24:42,701 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:24:42,701 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:24:42,701 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:24:42,702 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:24:42,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:24:42,702 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:24:42,702 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:24:42,702 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:24:42,702 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:24:42,702 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:24:42,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:24:42,703 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:24:42,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:24:42,703 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:24:42,703 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:24:42,703 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:24:42,704 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:24:42,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:24:42,704 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:24:42,704 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:24:42,704 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:24:42,705 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:24:42,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:24:42,705 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:24:42,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:24:42,705 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:24:42,705 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:24:42,706 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:24:42,706 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:24:42,706 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:24:42,706 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:24:42,706 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:24:42,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:24:42,707 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:24:42,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:24:42,707 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:24:42,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:24:42,707 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:24:42,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:24:42,708 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:24:42,708 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:24:42,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:24:42,708 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:24:42,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:24:42,709 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:24:42,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:24:42,709 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:24:42,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:24:42,709 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:24:42,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:24:42,710 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:24:42,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:24:42,710 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:24:42,710 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:24:42,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:24:42,711 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:24:42,711 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:24:42,711 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:24:42,711 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:24:42,711 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:24:42,711 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:24:42,712 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:24:42,712 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:24:42,712 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:24:42,712 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:24:42,712 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:24:42,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:24:42,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:24:42,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:24:42,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:24:42,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:24:42,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:24:42,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:24:42,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:24:42,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:24:42,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:24:42,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:24:42,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:24:42,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:24:42,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:24:42,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:24:42,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:24:42,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:24:42,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:24:42,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:24:42,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:24:42,714 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:24:42,715 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:24:42,715 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:24:42,715 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:24:42,715 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:24:42,715 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:24:42,715 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:24:42,715 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:24:42,715 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:24:42,715 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:24:42,715 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:24:42,716 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:24:42,716 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:24:42,716 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:24:42,716 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:24:42,716 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:24:42,716 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:24:42,716 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:24:42,716 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:24:42,716 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:24:42,716 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:24:42,716 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:24:42,716 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:24:42,717 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:24:42,717 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:24:42,717 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:24:42,717 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:24:42,717 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:24:42,717 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:24:42,717 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:24:42,717 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:24:42,717 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:24:42,717 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:24:42,717 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:24:42,717 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:24:42,718 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:24:42,718 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:24:42,718 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:24:42,718 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:24:42,718 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:24:42,718 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:24:42,718 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:24:42,718 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:24:42,718 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:24:42,718 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:24:42,718 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:24:42,719 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:24:42,719 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:24:42,719 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:24:42,719 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:24:42,719 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:24:42,719 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:24:42,719 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:24:42,719 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:24:42,719 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:24:42,719 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:24:42,719 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:24:42,719 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:24:42,720 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:24:42,720 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:24:42,720 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:24:42,720 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:24:42,720 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:24:42,720 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:24:42,720 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:24:42,720 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:24:42,720 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:24:42,720 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:24:42,720 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:24:42,720 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:24:42,721 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:24:42,721 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:24:42,721 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:24:42,721 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:24:42,721 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:24:42,721 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:24:42,721 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:24:42,721 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:24:42,721 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:24:42,721 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:24:42,721 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:24:42,721 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:24:42,722 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:24:42,722 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:24:42,722 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:24:42,722 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:24:42,722 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:24:42,722 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:24:42,722 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:24:42,722 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:24:42,722 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:24:42,722 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:24:42,722 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:24:42,722 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:24:42,723 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:24:42,723 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:24:42,723 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:24:42,723 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:24:42,723 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:24:42,723 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:24:42,723 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:24:42,723 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:24:42,723 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:24:42,723 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:24:42,723 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:24:42,723 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:24:42,724 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:24:42,724 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:24:42,724 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:24:42,724 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:24:42,724 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:24:42,724 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:24:42,724 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:24:42,724 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:24:42,724 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:24:42,724 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:24:42,724 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:24:42,725 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:24:42,725 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:24:42,725 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:24:42,725 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:24:42,725 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:24:42,725 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:24:42,725 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:24:42,725 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:24:42,725 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:24:42,725 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:24:42,725 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:24:42,726 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:24:42,726 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:24:42,726 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:24:42,726 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:24:42,726 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:24:42,726 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:24:42,726 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:24:42,726 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:24:42,726 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:24:42,726 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:24:42,726 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:24:42,726 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:24:42,726 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:24:42,727 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:24:42,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:24:42,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:24:42,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:24:42,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:24:42,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:24:42,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:24:42,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:24:42,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:24:42,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:24:42,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:24:42,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:24:42,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:24:42,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:24:42,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:24:42,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:24:42,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:24:42,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:24:42,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:24:42,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:24:42,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:24:42,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:24:42,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:24:42,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:24:42,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:24:42,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:24:42,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:24:42,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:24:42,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:24:42,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:24:42,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:24:42,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:24:42,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:24:42,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:24:42,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:24:42,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:24:42,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:24:42,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:24:42,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:24:42,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:24:42,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:24:42,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:24:42,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:24:42,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:24:42,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:24:42,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:24:42,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:24:42,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:24:42,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:24:42,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:24:42,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:24:42,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:24:42,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:24:42,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:24:42,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:24:42,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:24:42,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:24:42,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:24:42,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:24:42,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:24:42,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:24:42,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:24:42,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:24:42,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:24:42,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:24:42,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:24:42,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:24:42,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:24:42,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:24:42,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:24:42,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:24:42,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:24:42,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:24:42,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:24:42,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:24:42,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:24:42,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:24:42,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:24:42,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:24:42,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:24:42,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:24:42,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:24:42,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:24:42,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:24:42,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:24:42,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:24:42,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:24:42,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:24:42,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:24:42,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:24:42,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:24:42,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:24:42,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:24:42,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:24:42,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:24:42,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:24:42,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:24:42,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:24:42,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:24:42,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:24:42,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:24:42,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:24:42,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:24:42,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:24:42,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:24:42,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:24:42,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:24:42,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:24:42,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:24:42,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:24:42,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:24:42,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:24:42,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:24:42,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:24:42,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:24:42,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:24:42,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:24:42,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:24:42,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:24:42,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:24:42,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:24:42,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:24:42,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:24:42,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:24:42,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:24:42,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:24:42,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:24:42,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:24:42,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:24:42,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:24:42,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:24:42,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:24:42,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:24:42,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:24:42,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:24:42,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:24:42,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:24:42,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:24:42,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:24:42,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:24:42,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:24:42,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:24:42,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:24:42,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:24:42,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:24:42,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:24:42,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:24:42,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:24:42,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:24:42,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:24:42,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:24:42,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:24:42,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:24:42,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:24:42,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:24:42,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:24:42,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:24:42,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:24:42,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:24:42,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:24:42,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:24:42,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:24:42,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:24:42,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:24:42,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:24:42,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:24:42,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:24:42,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:24:42,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:24:42,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:24:42,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:24:42,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:24:42,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:24:42,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:24:42,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:24:42,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:24:42,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:24:42,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:24:42,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:24:42,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:24:42,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:24:42,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:24:42,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:24:42,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:24:42,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:24:42,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:24:42,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:24:42,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:24:42,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:24:42,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:24:42,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:24:42,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:24:42,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:24:42,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:24:42,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:24:42,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:24:42,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:24:42,741 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:24:42,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:24:43,874 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:24:43,874 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:24:44,350 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:24:44,350 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:24:44,354 INFO  L202        PluginConnector]: Adding new model MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:24:44 BoogieIcfgContainer
[2020-11-24 21:24:44,354 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:24:42" (2/2) ...
[2020-11-24 21:24:44,354 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:24:44,354 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@32ca7f5c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:24:44, skipping insertion in model container
[2020-11-24 21:24:44,354 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:24:44,355 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:24:44,355 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:24:44,356 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:24:44,356 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:24:42" (1/3) ...
[2020-11-24 21:24:44,357 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1cd29c4c and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:24:44, skipping insertion in model container
[2020-11-24 21:24:44,357 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:24:42" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:24:44,391 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:24:44 NWAContainer
[2020-11-24 21:24:44,391 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:24:44,391 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:24:44,391 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:24:44,392 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:24:44,393 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:24:44" (3/4) ...
[2020-11-24 21:24:44,393 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@2cd5c88f and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:24:44, skipping insertion in model container
[2020-11-24 21:24:44,394 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:24:44" (4/4) ...
[2020-11-24 21:24:44,397 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:24:44,405 INFO  L110   BuchiProductObserver]: Initial RCFG 5417 locations, 7592 edges
[2020-11-24 21:24:44,406 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:24:44,421 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:24:48,555 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:24:48,571 INFO  L110   BuchiProductObserver]: BuchiProgram size 13514 locations, 24813 edges
[2020-11-24 21:24:48,571 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:24:48 BoogieIcfgContainer
[2020-11-24 21:24:48,571 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:24:48,571 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:24:48,571 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:24:48,573 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:24:48,573 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:24:48" (1/1) ...
[2020-11-24 21:24:48,789 INFO  L313           BlockEncoder]: Initial Icfg 13514 locations, 24813 edges
[2020-11-24 21:24:48,790 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:24:48,790 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:24:48,790 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:24:48,791 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:24:48,813 INFO  L70    emoveInfeasibleEdges]: Removed 315 edges and 29 locations because of local infeasibility
[2020-11-24 21:24:48,832 INFO  L70        RemoveSinkStates]: Removed 244 edges and 150 locations by removing sink states
[2020-11-24 21:24:48,854 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:24:48,862 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:24:48,870 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:24:48,870 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:24:48,875 INFO  L313           BlockEncoder]: Encoded RCFG 13267 locations, 24153 edges
[2020-11-24 21:24:48,875 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:24:48 BasicIcfg
[2020-11-24 21:24:48,875 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:24:48,876 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:24:48,876 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:24:48,877 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:24:48,878 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:24:48,878 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:24:42" (1/6) ...
[2020-11-24 21:24:48,879 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@63c8991b and model type MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:24:48, skipping insertion in model container
[2020-11-24 21:24:48,879 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:24:48,879 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:24:42" (2/6) ...
[2020-11-24 21:24:48,879 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@63c8991b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:24:48, skipping insertion in model container
[2020-11-24 21:24:48,879 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:24:48,880 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:24:44" (3/6) ...
[2020-11-24 21:24:48,880 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@63c8991b and model type MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:24:48, skipping insertion in model container
[2020-11-24 21:24:48,880 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:24:48,880 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:24:44" (4/6) ...
[2020-11-24 21:24:48,880 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@63c8991b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:24:48, skipping insertion in model container
[2020-11-24 21:24:48,880 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:24:48,880 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:24:48" (5/6) ...
[2020-11-24 21:24:48,880 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@63c8991b and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:24:48, skipping insertion in model container
[2020-11-24 21:24:48,881 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:24:48,881 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:24:48" (6/6) ...
[2020-11-24 21:24:48,881 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_transferfrom-self-fail.bpl_BEv2
[2020-11-24 21:24:48,907 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:24:48,908 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:24:48,908 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:24:48,908 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:24:48,908 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:24:48,908 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:24:48,908 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:24:48,908 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:24:48,908 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:24:48,985 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13267 states.
[2020-11-24 21:24:49,067 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:24:49,068 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:24:49,068 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:24:49,076 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:24:49,076 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:24:49,076 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:24:49,076 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13267 states.
[2020-11-24 21:24:49,123 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:24:49,123 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:24:49,123 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:24:49,125 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:24:49,125 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_MainToken0 := false;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND TRUE   revert
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND TRUE   choice == 38
[L14584]              gas := gas - 21000;
[L14585]  COND FALSE  !(gas >= 0)
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:24:49,151 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:24:49,151 INFO  L82        PathProgramCache]: Analyzing trace with hash -2102342160, now seen corresponding path program 1 times
[2020-11-24 21:24:49,157 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:24:49,185 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:24:49,311 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:24:49,313 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:24:49,313 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:24:49,793 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:24:49,805 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:24:49,805 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:24:49,807 INFO  L87              Difference]: Start difference. First operand 13267 states. Second operand 4 states.
[2020-11-24 21:24:51,113 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:24:51,114 INFO  L93              Difference]: Finished difference Result 8225 states and 9627 transitions.
[2020-11-24 21:24:51,114 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:24:51,115 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8225 states and 9627 transitions.
[2020-11-24 21:24:51,148 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:24:51,193 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8225 states to 8221 states and 9619 transitions.
[2020-11-24 21:24:51,194 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-24 21:24:51,198 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1840
[2020-11-24 21:24:51,198 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8221 states and 9619 transitions.
[2020-11-24 21:24:51,216 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:24:51,216 INFO  L728         BuchiCegarLoop]: Abstraction has 8221 states and 9619 transitions.
[2020-11-24 21:24:51,240 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8221 states and 9619 transitions.
[2020-11-24 21:24:51,344 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8221 to 8221.
[2020-11-24 21:24:51,345 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8221 states.
[2020-11-24 21:24:51,357 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8221 states to 8221 states and 9619 transitions.
[2020-11-24 21:24:51,358 INFO  L751         BuchiCegarLoop]: Abstraction has 8221 states and 9619 transitions.
[2020-11-24 21:24:51,358 INFO  L631         BuchiCegarLoop]: Abstraction has 8221 states and 9619 transitions.
[2020-11-24 21:24:51,358 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:24:51,358 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8221 states and 9619 transitions.
[2020-11-24 21:24:51,371 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:24:51,371 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:24:51,371 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:24:51,373 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:24:51,373 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_MainToken0 := false;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND TRUE   revert
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND TRUE   choice == 34
[L14609]              gas := gas - 21000;
[L14610]  COND TRUE   gas >= 0
[L14611]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14612]              assume msgvalue_MSG == 0;
[L14613]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4739]               havoc __exception;
[L4740]               revert := false;
[L4741]   COND FALSE  !(__exception)
[L4780]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9640]   COND TRUE   !!paused_Pausable[this]
[L9641]               revert := true;
[L4780]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4781]               assume !revert && gas >= 0;
[L14613]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND TRUE   choice == 34
[L14609]              gas := gas - 21000;
[L14610]  COND TRUE   gas >= 0
[L14611]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14612]              assume msgvalue_MSG == 0;
[L14613]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4739]               havoc __exception;
[L4740]               revert := false;
[L4741]   COND FALSE  !(__exception)
[L4780]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9640]   COND TRUE   !!paused_Pausable[this]
[L9641]               revert := true;
[L4780]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4781]               assume !revert && gas >= 0;
[L14613]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:24:51,377 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:24:51,377 INFO  L82        PathProgramCache]: Analyzing trace with hash -759803907, now seen corresponding path program 1 times
[2020-11-24 21:24:51,379 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:24:51,397 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:24:51,426 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:24:51,426 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:24:51,427 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:24:51,428 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:24:51,428 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:24:51,428 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:24:51,428 INFO  L87              Difference]: Start difference. First operand 8221 states and 9619 transitions. cyclomatic complexity: 1418 Second operand 3 states.
[2020-11-24 21:24:51,621 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:24:51,621 INFO  L93              Difference]: Finished difference Result 9671 states and 11061 transitions.
[2020-11-24 21:24:51,621 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:24:51,622 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9671 states and 11061 transitions.
[2020-11-24 21:24:51,647 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:24:51,694 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9671 states to 9671 states and 11061 transitions.
[2020-11-24 21:24:51,694 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2252
[2020-11-24 21:24:51,696 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2252
[2020-11-24 21:24:51,696 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9671 states and 11061 transitions.
[2020-11-24 21:24:51,706 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:24:51,706 INFO  L728         BuchiCegarLoop]: Abstraction has 9671 states and 11061 transitions.
[2020-11-24 21:24:51,717 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9671 states and 11061 transitions.
[2020-11-24 21:24:51,805 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9671 to 8882.
[2020-11-24 21:24:51,805 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8882 states.
[2020-11-24 21:24:51,817 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8882 states to 8882 states and 10091 transitions.
[2020-11-24 21:24:51,817 INFO  L751         BuchiCegarLoop]: Abstraction has 8882 states and 10091 transitions.
[2020-11-24 21:24:51,817 INFO  L631         BuchiCegarLoop]: Abstraction has 8882 states and 10091 transitions.
[2020-11-24 21:24:51,817 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:24:51,817 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8882 states and 10091 transitions.
[2020-11-24 21:24:51,830 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:24:51,830 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:24:51,830 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:24:51,836 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:24:51,836 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_MainToken0 := false;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND TRUE   !!initialized_MainToken[this]
[L9802]               revert := true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND TRUE   revert
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND TRUE   choice == 34
[L14609]              gas := gas - 21000;
[L14610]  COND TRUE   gas >= 0
[L14611]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14612]              assume msgvalue_MSG == 0;
[L14613]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4739]               havoc __exception;
[L4740]               revert := false;
[L4741]   COND FALSE  !(__exception)
[L4780]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9640]   COND TRUE   !!paused_Pausable[this]
[L9641]               revert := true;
[L4780]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4781]               assume !revert && gas >= 0;
[L14613]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND TRUE   choice == 34
[L14609]              gas := gas - 21000;
[L14610]  COND TRUE   gas >= 0
[L14611]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14612]              assume msgvalue_MSG == 0;
[L14613]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4739]               havoc __exception;
[L4740]               revert := false;
[L4741]   COND FALSE  !(__exception)
[L4780]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9640]   COND TRUE   !!paused_Pausable[this]
[L9641]               revert := true;
[L4780]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4781]               assume !revert && gas >= 0;
[L14613]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:24:51,847 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:24:51,847 INFO  L82        PathProgramCache]: Analyzing trace with hash -999774632, now seen corresponding path program 1 times
[2020-11-24 21:24:51,848 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:24:51,888 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:24:52,500 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:24:52,500 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:24:52,500 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:24:52,501 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:24:52,501 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:24:52,501 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:24:52,501 INFO  L87              Difference]: Start difference. First operand 8882 states and 10091 transitions. cyclomatic complexity: 1229 Second operand 3 states.
[2020-11-24 21:24:52,630 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:24:52,630 INFO  L93              Difference]: Finished difference Result 9671 states and 10904 transitions.
[2020-11-24 21:24:52,630 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:24:52,630 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9671 states and 10904 transitions.
[2020-11-24 21:24:52,651 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:24:52,682 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9671 states to 9323 states and 10496 transitions.
[2020-11-24 21:24:52,682 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2132
[2020-11-24 21:24:52,683 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2161
[2020-11-24 21:24:52,684 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9323 states and 10496 transitions.
[2020-11-24 21:24:52,693 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:24:52,693 INFO  L728         BuchiCegarLoop]: Abstraction has 9323 states and 10496 transitions.
[2020-11-24 21:24:52,701 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9323 states and 10496 transitions.
[2020-11-24 21:24:52,765 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9323 to 8636.
[2020-11-24 21:24:52,765 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8636 states.
[2020-11-24 21:24:52,774 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8636 states to 8636 states and 9628 transitions.
[2020-11-24 21:24:52,774 INFO  L751         BuchiCegarLoop]: Abstraction has 8636 states and 9628 transitions.
[2020-11-24 21:24:52,774 INFO  L631         BuchiCegarLoop]: Abstraction has 8636 states and 9628 transitions.
[2020-11-24 21:24:52,774 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:24:52,774 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8636 states and 9628 transitions.
[2020-11-24 21:24:52,783 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:24:52,783 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:24:52,783 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:24:52,787 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:24:52,787 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_MainToken0 := false;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND TRUE   choice == 34
[L14609]              gas := gas - 21000;
[L14610]  COND TRUE   gas >= 0
[L14611]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14612]              assume msgvalue_MSG == 0;
[L14613]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4739]               havoc __exception;
[L4740]               revert := false;
[L4741]   COND FALSE  !(__exception)
[L4780]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9640]   COND FALSE  !(!!paused_Pausable[this])
[L9644]   COND TRUE   DType[this] == MainToken
[L9645]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7139]               __var_4 := null;
[L7140]   COND FALSE  !(!(_to_s351 != null))
[L7144]   COND FALSE  !(!(_value_s351 <= balances_BasicToken[this][_from_s351]))
[L7148]   COND FALSE  !(!(_value_s351 <= allowed_StandardToken[this][_from_s351][msgsender_MSG]))
[L7152]   CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7152]   RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L7153]   COND FALSE  !(revert)
[L7156]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s351];
[L7157]               balances_BasicToken[this][_from_s351] := __var_5;
[L7158]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s351];
[L7159]   CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L7159]   RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L7160]   COND FALSE  !(revert)
[L7163]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s351];
[L7164]               balances_BasicToken[this][_to_s351] := __var_6;
[L7165]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s351];
[L7166]   CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7166]   RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L7167]   COND FALSE  !(revert)
[L7170]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] - allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L7171]               allowed_StandardToken[this][_from_s351][msgsender_MSG] := __var_7;
[L7172]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] + allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L7173]               assert { :EventEmitted "Transfer_StandardToken" } true;
[L7174]               __ret_0_ := true;
[L9645]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9646]   COND FALSE  !(revert)
[L9652]               _success_s1551 := __var_53;
[L4780]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4781]               assume !revert && gas >= 0;
[L14613]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND TRUE   choice == 34
[L14609]              gas := gas - 21000;
[L14610]  COND TRUE   gas >= 0
[L14611]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14612]              assume msgvalue_MSG == 0;
[L14613]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4739]               havoc __exception;
[L4740]               revert := false;
[L4741]   COND FALSE  !(__exception)
[L4780]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9640]   COND FALSE  !(!!paused_Pausable[this])
[L9644]   COND TRUE   DType[this] == MainToken
[L9645]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7139]               __var_4 := null;
[L7140]   COND FALSE  !(!(_to_s351 != null))
[L7144]   COND FALSE  !(!(_value_s351 <= balances_BasicToken[this][_from_s351]))
[L7148]   COND FALSE  !(!(_value_s351 <= allowed_StandardToken[this][_from_s351][msgsender_MSG]))
[L7152]   CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7152]   RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L7153]   COND FALSE  !(revert)
[L7156]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s351];
[L7157]               balances_BasicToken[this][_from_s351] := __var_5;
[L7158]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s351];
[L7159]   CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L7159]   RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L7160]   COND FALSE  !(revert)
[L7163]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s351];
[L7164]               balances_BasicToken[this][_to_s351] := __var_6;
[L7165]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s351];
[L7166]   CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7166]   RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L7167]   COND FALSE  !(revert)
[L7170]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] - allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L7171]               allowed_StandardToken[this][_from_s351][msgsender_MSG] := __var_7;
[L7172]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] + allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L7173]               assert { :EventEmitted "Transfer_StandardToken" } true;
[L7174]               __ret_0_ := true;
[L9645]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9646]   COND FALSE  !(revert)
[L9652]               _success_s1551 := __var_53;
[L4780]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4781]               assume !revert && gas >= 0;
[L14613]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:24:52,797 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:24:52,797 INFO  L82        PathProgramCache]: Analyzing trace with hash 606050959, now seen corresponding path program 1 times
[2020-11-24 21:24:52,798 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:24:52,842 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:24:53,616 INFO  L134       CoverageAnalysis]: Checked inductivity of 9827 backedges. 96 proven. 3 refuted. 0 times theorem prover too weak. 9728 trivial. 0 not checked.
[2020-11-24 21:24:53,616 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 21:24:53,617 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-11-24 21:24:53,619 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:24:53,620 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-24 21:24:53,620 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-11-24 21:24:53,620 INFO  L87              Difference]: Start difference. First operand 8636 states and 9628 transitions. cyclomatic complexity: 1012 Second operand 16 states.
[2020-11-24 21:25:00,712 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:25:00,712 INFO  L93              Difference]: Finished difference Result 8816 states and 9840 transitions.
[2020-11-24 21:25:00,712 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-24 21:25:00,712 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8816 states and 9840 transitions.
[2020-11-24 21:25:00,728 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:25:00,751 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8816 states to 8816 states and 9840 transitions.
[2020-11-24 21:25:00,751 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2081
[2020-11-24 21:25:00,752 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2081
[2020-11-24 21:25:00,752 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8816 states and 9840 transitions.
[2020-11-24 21:25:00,758 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:25:00,758 INFO  L728         BuchiCegarLoop]: Abstraction has 8816 states and 9840 transitions.
[2020-11-24 21:25:00,765 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8816 states and 9840 transitions.
[2020-11-24 21:25:00,817 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8816 to 8438.
[2020-11-24 21:25:00,817 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8438 states.
[2020-11-24 21:25:00,825 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8438 states to 8438 states and 9365 transitions.
[2020-11-24 21:25:00,825 INFO  L751         BuchiCegarLoop]: Abstraction has 8438 states and 9365 transitions.
[2020-11-24 21:25:00,825 INFO  L631         BuchiCegarLoop]: Abstraction has 8438 states and 9365 transitions.
[2020-11-24 21:25:00,826 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:25:00,826 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8438 states and 9365 transitions.
[2020-11-24 21:25:00,834 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:25:00,834 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:25:00,834 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:25:00,838 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:00,838 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_MainToken0 := false;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND TRUE   __exception
[L4394]               __tmp__Balance := Balance;
[L4395]               __tmp__DType := DType;
[L4396]               __tmp__Alloc := Alloc;
[L4397]               __tmp__balance_ADDR := balance_ADDR;
[L4398]               __tmp__M_Ref_int := M_Ref_int;
[L4399]               __tmp__sum_balances0 := sum_balances0;
[L4400]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4401]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4402]               __tmp__sum_allowed1 := sum_allowed1;
[L4403]               __tmp__M_int_int := M_int_int;
[L4404]               __tmp__sum_chains2 := sum_chains2;
[L4405]               __tmp__sum_freezings3 := sum_freezings3;
[L4406]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4407]               __tmp__M_int_Ref := M_int_Ref;
[L4408]               __tmp__sum := sum;
[L4409]               __tmp__Length := Length;
[L4410]               __tmp__now := now;
[L4411]               __tmp__balances_BasicToken := balances_BasicToken;
[L4412]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4413]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4414]               __tmp__owner_Ownable := owner_Ownable;
[L4415]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4416]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4417]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4418]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4419]               __tmp__paused_Pausable := paused_Pausable;
[L4420]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4421]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4422]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4423]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4424]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4425]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4426]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4427]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4428]               __tmp__initialized_MainToken := initialized_MainToken;
[L4429]   CALL        call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9478]   CALL        call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9324]   CALL        call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9290]               assume msgsender_MSG != null;
[L9291]               __tmp__Balance[this] := 0;
[L9292]               __tmp__TOKEN_DECIMALS_Consts[this] := 18;
[L9293]               __tmp__TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9294]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, __tmp__TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9295]               __tmp__TOKEN_NAME_Consts[this] := -1142012261;
[L9296]               __tmp__TOKEN_SYMBOL_Consts[this] := 360831912;
[L9297]               __tmp__PAUSED_Consts[this] := false;
[L9298]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9299]               __tmp__TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9300]               __tmp__CONTINUE_MINTING_Consts[this] := true;
[L9324]   RET         call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND FALSE  !(revert)
[L9478]   RET         call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9479]   COND FALSE  !(revert)
[L9482]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L9482]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9483]   COND FALSE  !(revert)
[L9486]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L9486]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9487]   COND FALSE  !(revert)
[L9490]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L9490]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9491]   COND FALSE  !(revert)
[L9494]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L9494]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(revert)
[L9498]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7627]               assume msgsender_MSG != null;
[L7628]               __tmp__Balance[this] := 0;
[L7629]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7630]               __tmp__sum_chains2[this] := 0;
[L7631]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7632]               __tmp__sum_freezings3[this] := 0;
[L7633]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7634]               __tmp__sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9498]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9499]   COND FALSE  !(revert)
[L9502]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7305]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7286]               assume msgsender_MSG != null;
[L7287]               __tmp__Balance[this] := 0;
[L7288]               __tmp__owner_Ownable[this] := null;
[L7290]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7305]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   COND FALSE  !(revert)
[L9502]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(revert)
[L9506]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7469]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7469]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7470]   COND FALSE  !(revert)
[L7473]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7473]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7477]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L7481]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7305]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7286]               assume msgsender_MSG != null;
[L7287]               __tmp__Balance[this] := 0;
[L7288]               __tmp__owner_Ownable[this] := null;
[L7290]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7305]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   COND FALSE  !(revert)
[L7485]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7452]               assume msgsender_MSG != null;
[L7453]               __tmp__Balance[this] := 0;
[L7454]               __tmp__mintingFinished_MintableToken[this] := false;
[L7489]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L9506]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9081]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L9081]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9082]   COND FALSE  !(revert)
[L9085]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L9085]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9086]   COND FALSE  !(revert)
[L9089]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L9089]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9090]   COND FALSE  !(revert)
[L9093]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L9093]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7627]               assume msgsender_MSG != null;
[L7628]               __tmp__Balance[this] := 0;
[L7629]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7630]               __tmp__sum_chains2[this] := 0;
[L7631]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7632]               __tmp__sum_freezings3[this] := 0;
[L7633]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7634]               __tmp__sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9097]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7305]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7286]               assume msgsender_MSG != null;
[L7287]               __tmp__Balance[this] := 0;
[L7288]               __tmp__owner_Ownable[this] := null;
[L7290]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7305]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   COND FALSE  !(revert)
[L9101]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7469]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7469]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7470]   COND FALSE  !(revert)
[L7473]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7473]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7477]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L7481]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7305]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7286]               assume msgsender_MSG != null;
[L7287]               __tmp__Balance[this] := 0;
[L7288]               __tmp__owner_Ownable[this] := null;
[L7290]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7305]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   COND FALSE  !(revert)
[L7485]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7452]               assume msgsender_MSG != null;
[L7453]               __tmp__Balance[this] := 0;
[L7454]               __tmp__mintingFinished_MintableToken[this] := false;
[L7489]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L9105]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9066]               assume msgsender_MSG != null;
[L9067]               __tmp__Balance[this] := 0;
[L9109]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9510]   RET         call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8845]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L8845]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L8849]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L8849]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8850]   COND FALSE  !(revert)
[L8853]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8830]               assume msgsender_MSG != null;
[L8831]               __tmp__Balance[this] := 0;
[L8853]   RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8854]   COND FALSE  !(revert)
[L9514]   RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8975]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7305]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7286]               assume msgsender_MSG != null;
[L7287]               __tmp__Balance[this] := 0;
[L7288]               __tmp__owner_Ownable[this] := null;
[L7290]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7305]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   COND FALSE  !(revert)
[L8975]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8976]   COND FALSE  !(revert)
[L8979]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8958]               assume msgsender_MSG != null;
[L8959]               __tmp__Balance[this] := 0;
[L8960]               __tmp__paused_Pausable[this] := false;
[L8979]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8980]   COND FALSE  !(revert)
[L9518]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9437]               assume msgsender_MSG != null;
[L9438]               __tmp__Balance[this] := 0;
[L9439]               __tmp__initialized_MainToken[this] := false;
[L9441]   CALL        call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9711]   COND FALSE  !(!!__tmp__initialized_MainToken[this])
[L9715]               __tmp__initialized_MainToken[this] := true;
[L9716]   COND FALSE  !(__tmp__PAUSED_Consts[this])
[L9726]               havoc addresses_s1709;
[L9727]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9728]               __tmp__M_int_Ref[addresses_s1709][0] := __var_57;
[L9729]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9730]               __tmp__M_int_Ref[addresses_s1709][1] := __var_58;
[L9731]               havoc amounts_s1709;
[L9732]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9733]               __tmp__sum[amounts_s1709] := __tmp__sum[amounts_s1709] - __tmp__M_int_int[amounts_s1709][0];
[L9734]               __tmp__M_int_int[amounts_s1709][0] := __var_59;
[L9735]               __tmp__sum[amounts_s1709] := __tmp__sum[amounts_s1709] + __tmp__M_int_int[amounts_s1709][0];
[L9736]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9737]               __tmp__sum[amounts_s1709] := __tmp__sum[amounts_s1709] - __tmp__M_int_int[amounts_s1709][1];
[L9738]               __tmp__M_int_int[amounts_s1709][1] := __var_60;
[L9739]               __tmp__sum[amounts_s1709] := __tmp__sum[amounts_s1709] + __tmp__M_int_int[amounts_s1709][1];
[L9740]               havoc freezes_s1709;
[L9741]               __var_61 := 0 % 18446744073709551616;
[L9742]               __tmp__sum[freezes_s1709] := __tmp__sum[freezes_s1709] - __tmp__M_int_int[freezes_s1709][0];
[L9743]               __tmp__M_int_int[freezes_s1709][0] := __var_61;
[L9744]               __tmp__sum[freezes_s1709] := __tmp__sum[freezes_s1709] + __tmp__M_int_int[freezes_s1709][0];
[L9745]               __var_62 := 0 % 18446744073709551616;
[L9746]               __tmp__sum[freezes_s1709] := __tmp__sum[freezes_s1709] - __tmp__M_int_int[freezes_s1709][1];
[L9747]               __tmp__M_int_int[freezes_s1709][1] := __var_62;
[L9748]               __tmp__sum[freezes_s1709] := __tmp__sum[freezes_s1709] + __tmp__M_int_int[freezes_s1709][1];
[L9749]               i_s1709 := 0;
[L9750]   COND FALSE  !(i_s1709 < __tmp__Length[addresses_s1709])
[L9774]   COND FALSE  !(!__tmp__CONTINUE_MINTING_Consts[this])
[L9441]   RET         call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9442]   COND FALSE  !(revert)
[L9445]   COND TRUE   __tmp__DType[this] == MainToken
[L9446]   CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L7344]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L12777]  COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L7344]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   COND TRUE   __tmp__DType[this] == MainToken
[L7349]   CALL        call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7417]               __var_11 := null;
[L7418]   COND FALSE  !(!(_newOwner_s581 != null))
[L7422]               __tmp__owner_Ownable[this] := _newOwner_s581;
[L7349]   RET         call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7350]   COND FALSE  !(revert)
[L9446]   RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L9447]   COND FALSE  !(revert)
[L9522]   RET         call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L4429]   RET         call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4430]               assume revert || gas < 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND TRUE   choice == 34
[L14609]              gas := gas - 21000;
[L14610]  COND TRUE   gas >= 0
[L14611]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14612]              assume msgvalue_MSG == 0;
[L14613]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4739]               havoc __exception;
[L4740]               revert := false;
[L4741]   COND FALSE  !(__exception)
[L4780]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9640]   COND FALSE  !(!!paused_Pausable[this])
[L9644]   COND TRUE   DType[this] == MainToken
[L9645]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7139]               __var_4 := null;
[L7140]   COND FALSE  !(!(_to_s351 != null))
[L7144]   COND FALSE  !(!(_value_s351 <= balances_BasicToken[this][_from_s351]))
[L7148]   COND FALSE  !(!(_value_s351 <= allowed_StandardToken[this][_from_s351][msgsender_MSG]))
[L7152]   CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7152]   RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L7153]   COND FALSE  !(revert)
[L7156]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s351];
[L7157]               balances_BasicToken[this][_from_s351] := __var_5;
[L7158]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s351];
[L7159]   CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L7159]   RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L7160]   COND FALSE  !(revert)
[L7163]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s351];
[L7164]               balances_BasicToken[this][_to_s351] := __var_6;
[L7165]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s351];
[L7166]   CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7166]   RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L7167]   COND FALSE  !(revert)
[L7170]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] - allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L7171]               allowed_StandardToken[this][_from_s351][msgsender_MSG] := __var_7;
[L7172]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] + allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L7173]               assert { :EventEmitted "Transfer_StandardToken" } true;
[L7174]               __ret_0_ := true;
[L9645]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9646]   COND FALSE  !(revert)
[L9652]               _success_s1551 := __var_53;
[L4780]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4781]               assume !revert && gas >= 0;
[L14613]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND TRUE   choice == 38
[L14584]              gas := gas - 21000;
[L14585]  COND FALSE  !(gas >= 0)
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:25:00,846 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:25:00,846 INFO  L82        PathProgramCache]: Analyzing trace with hash 471295062, now seen corresponding path program 1 times
[2020-11-24 21:25:00,847 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:25:00,881 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:25:01,517 INFO  L134       CoverageAnalysis]: Checked inductivity of 9827 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9827 trivial. 0 not checked.
[2020-11-24 21:25:01,517 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:25:01,517 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:25:01,518 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:25:01,518 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:25:01,518 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:25:01,518 INFO  L87              Difference]: Start difference. First operand 8438 states and 9365 transitions. cyclomatic complexity: 949 Second operand 4 states.
[2020-11-24 21:25:01,970 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:25:01,970 INFO  L93              Difference]: Finished difference Result 10919 states and 12421 transitions.
[2020-11-24 21:25:01,970 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 21:25:01,970 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10919 states and 12421 transitions.
[2020-11-24 21:25:01,992 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-24 21:25:02,014 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10919 states to 9951 states and 11313 transitions.
[2020-11-24 21:25:02,014 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2336
[2020-11-24 21:25:02,015 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2345
[2020-11-24 21:25:02,015 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9951 states and 11313 transitions.
[2020-11-24 21:25:02,023 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:25:02,023 INFO  L728         BuchiCegarLoop]: Abstraction has 9951 states and 11313 transitions.
[2020-11-24 21:25:02,029 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9951 states and 11313 transitions.
[2020-11-24 21:25:02,073 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9951 to 8383.
[2020-11-24 21:25:02,073 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8383 states.
[2020-11-24 21:25:02,081 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8383 states to 8383 states and 9349 transitions.
[2020-11-24 21:25:02,081 INFO  L751         BuchiCegarLoop]: Abstraction has 8383 states and 9349 transitions.
[2020-11-24 21:25:02,081 INFO  L631         BuchiCegarLoop]: Abstraction has 8383 states and 9349 transitions.
[2020-11-24 21:25:02,081 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 21:25:02,081 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8383 states and 9349 transitions.
[2020-11-24 21:25:02,089 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:25:02,089 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:25:02,089 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:25:02,092 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:02,092 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_MainToken0 := false;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND TRUE   choice == 36
[L14596]              gas := gas - 21000;
[L14597]  COND TRUE   gas >= 0
[L14598]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14599]              assume msgvalue_MSG == 0;
[L14600]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND FALSE  !(__exception)
[L4868]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9680]   COND FALSE  !(!!paused_Pausable[this])
[L9684]   COND TRUE   DType[this] == MainToken
[L9685]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6949]               __var_1 := null;
[L6950]   COND FALSE  !(!(_to_s202 != null))
[L6954]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6958]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6958]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6959]   COND FALSE  !(revert)
[L6962]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6963]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6964]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6965]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L6965]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6966]   COND FALSE  !(revert)
[L6969]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6970]               balances_BasicToken[this][_to_s202] := __var_3;
[L6971]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6972]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6973]               __ret_0_ := true;
[L9685]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9686]   COND FALSE  !(revert)
[L9692]               _success_s1572 := __var_55;
[L4868]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4869]               assume !revert && gas >= 0;
[L14600]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14841]  RET         call CorralChoice_MainToken(this);
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND TRUE   choice == 34
[L14609]              gas := gas - 21000;
[L14610]  COND TRUE   gas >= 0
[L14611]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14612]              assume msgvalue_MSG == 0;
[L14613]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4739]               havoc __exception;
[L4740]               revert := false;
[L4741]   COND FALSE  !(__exception)
[L4780]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9640]   COND FALSE  !(!!paused_Pausable[this])
[L9644]   COND TRUE   DType[this] == MainToken
[L9645]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7139]               __var_4 := null;
[L7140]   COND FALSE  !(!(_to_s351 != null))
[L7144]   COND FALSE  !(!(_value_s351 <= balances_BasicToken[this][_from_s351]))
[L7148]   COND FALSE  !(!(_value_s351 <= allowed_StandardToken[this][_from_s351][msgsender_MSG]))
[L7152]   CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7152]   RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L7153]   COND FALSE  !(revert)
[L7156]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s351];
[L7157]               balances_BasicToken[this][_from_s351] := __var_5;
[L7158]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s351];
[L7159]   CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L7159]   RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L7160]   COND FALSE  !(revert)
[L7163]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s351];
[L7164]               balances_BasicToken[this][_to_s351] := __var_6;
[L7165]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s351];
[L7166]   CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7166]   RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L7167]   COND FALSE  !(revert)
[L7170]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] - allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L7171]               allowed_StandardToken[this][_from_s351][msgsender_MSG] := __var_7;
[L7172]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] + allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L7173]               assert { :EventEmitted "Transfer_StandardToken" } true;
[L7174]               __ret_0_ := true;
[L9645]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9646]   COND FALSE  !(revert)
[L9652]               _success_s1551 := __var_53;
[L4780]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4781]               assume !revert && gas >= 0;
[L14613]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND TRUE   choice == 34
[L14609]              gas := gas - 21000;
[L14610]  COND TRUE   gas >= 0
[L14611]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14612]              assume msgvalue_MSG == 0;
[L14613]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4739]               havoc __exception;
[L4740]               revert := false;
[L4741]   COND FALSE  !(__exception)
[L4780]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9640]   COND FALSE  !(!!paused_Pausable[this])
[L9644]   COND TRUE   DType[this] == MainToken
[L9645]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7139]               __var_4 := null;
[L7140]   COND FALSE  !(!(_to_s351 != null))
[L7144]   COND FALSE  !(!(_value_s351 <= balances_BasicToken[this][_from_s351]))
[L7148]   COND FALSE  !(!(_value_s351 <= allowed_StandardToken[this][_from_s351][msgsender_MSG]))
[L7152]   CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7152]   RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L7153]   COND FALSE  !(revert)
[L7156]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s351];
[L7157]               balances_BasicToken[this][_from_s351] := __var_5;
[L7158]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s351];
[L7159]   CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L7159]   RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L7160]   COND FALSE  !(revert)
[L7163]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s351];
[L7164]               balances_BasicToken[this][_to_s351] := __var_6;
[L7165]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s351];
[L7166]   CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7166]   RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L7167]   COND FALSE  !(revert)
[L7170]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] - allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L7171]               allowed_StandardToken[this][_from_s351][msgsender_MSG] := __var_7;
[L7172]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] + allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L7173]               assert { :EventEmitted "Transfer_StandardToken" } true;
[L7174]               __ret_0_ := true;
[L9645]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9646]   COND FALSE  !(revert)
[L9652]               _success_s1551 := __var_53;
[L4780]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4781]               assume !revert && gas >= 0;
[L14613]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:25:02,101 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:25:02,102 INFO  L82        PathProgramCache]: Analyzing trace with hash -843315457, now seen corresponding path program 1 times
[2020-11-24 21:25:02,102 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:25:02,140 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:25:02,992 INFO  L134       CoverageAnalysis]: Checked inductivity of 9917 backedges. 45 proven. 3 refuted. 0 times theorem prover too weak. 9869 trivial. 0 not checked.
[2020-11-24 21:25:02,992 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 21:25:02,992 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [20] total 20
[2020-11-24 21:25:02,993 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:25:02,993 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-24 21:25:02,993 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=46, Invalid=374, Unknown=0, NotChecked=0, Total=420
[2020-11-24 21:25:02,993 INFO  L87              Difference]: Start difference. First operand 8383 states and 9349 transitions. cyclomatic complexity: 987 Second operand 21 states.
[2020-11-24 21:25:12,860 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:25:12,860 INFO  L93              Difference]: Finished difference Result 8520 states and 9511 transitions.
[2020-11-24 21:25:12,860 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-24 21:25:12,860 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8520 states and 9511 transitions.
[2020-11-24 21:25:12,875 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:25:12,892 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8520 states to 8520 states and 9511 transitions.
[2020-11-24 21:25:12,892 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1963
[2020-11-24 21:25:12,893 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1963
[2020-11-24 21:25:12,893 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8520 states and 9511 transitions.
[2020-11-24 21:25:12,897 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:25:12,897 INFO  L728         BuchiCegarLoop]: Abstraction has 8520 states and 9511 transitions.
[2020-11-24 21:25:12,903 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8520 states and 9511 transitions.
[2020-11-24 21:25:12,944 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8520 to 8421.
[2020-11-24 21:25:12,944 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8421 states.
[2020-11-24 21:25:12,953 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8421 states to 8421 states and 9399 transitions.
[2020-11-24 21:25:12,953 INFO  L751         BuchiCegarLoop]: Abstraction has 8421 states and 9399 transitions.
[2020-11-24 21:25:12,953 INFO  L631         BuchiCegarLoop]: Abstraction has 8421 states and 9399 transitions.
[2020-11-24 21:25:12,953 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 21:25:12,953 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8421 states and 9399 transitions.
[2020-11-24 21:25:12,961 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:25:12,961 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:25:12,961 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:25:12,964 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:12,964 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_MainToken0 := false;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND TRUE   choice == 34
[L14609]              gas := gas - 21000;
[L14610]  COND TRUE   gas >= 0
[L14611]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14612]              assume msgvalue_MSG == 0;
[L14613]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L4739]               havoc __exception;
[L4740]               revert := false;
[L4741]   COND FALSE  !(__exception)
[L4780]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9640]   COND FALSE  !(!!paused_Pausable[this])
[L9644]   COND TRUE   DType[this] == MainToken
[L9645]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7139]               __var_4 := null;
[L7140]   COND FALSE  !(!(_to_s351 != null))
[L7144]   COND FALSE  !(!(_value_s351 <= balances_BasicToken[this][_from_s351]))
[L7148]   COND FALSE  !(!(_value_s351 <= allowed_StandardToken[this][_from_s351][msgsender_MSG]))
[L7152]   CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7152]   RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L7153]   COND FALSE  !(revert)
[L7156]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s351];
[L7157]               balances_BasicToken[this][_from_s351] := __var_5;
[L7158]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s351];
[L7159]   CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L7159]   RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L7160]   COND FALSE  !(revert)
[L7163]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s351];
[L7164]               balances_BasicToken[this][_to_s351] := __var_6;
[L7165]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s351];
[L7166]   CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7166]   RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L7167]   COND FALSE  !(revert)
[L7170]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] - allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L7171]               allowed_StandardToken[this][_from_s351][msgsender_MSG] := __var_7;
[L7172]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] + allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L7173]               assert { :EventEmitted "Transfer_StandardToken" } true;
[L7174]               __ret_0_ := true;
[L9645]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9646]   COND FALSE  !(revert)
[L9652]               _success_s1551 := __var_53;
[L4780]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4781]               assume !revert && gas >= 0;
[L14613]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14841]  RET         call CorralChoice_MainToken(this);
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND TRUE   choice == 34
[L14609]              gas := gas - 21000;
[L14610]  COND TRUE   gas >= 0
[L14611]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14612]              assume msgvalue_MSG == 0;
[L14613]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((_from_s1551 == _to_s1551 && (_value_s1551 > balances_BasicToken[this][_from_s1551] || _value_s1551 > allowed_StandardToken[this][_from_s1551][msgsender_MSG])) && _value_s1551 >= 0) && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1551] >= 0) && balances_BasicToken[this][_to_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s1551] >= 0) && balances_BasicToken[this][_from_s1551] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s1551][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_MainToken0 := true;
[L2]                  call_transferFrom_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4739]               havoc __exception;
[L4740]               revert := false;
[L4741]   COND FALSE  !(__exception)
[L4780]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9640]   COND FALSE  !(!!paused_Pausable[this])
[L9644]   COND TRUE   DType[this] == MainToken
[L9645]   CALL        call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L7139]               __var_4 := null;
[L7140]   COND FALSE  !(!(_to_s351 != null))
[L7144]   COND FALSE  !(!(_value_s351 <= balances_BasicToken[this][_from_s351]))
[L7148]   COND FALSE  !(!(_value_s351 <= allowed_StandardToken[this][_from_s351][msgsender_MSG]))
[L7152]   CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7152]   RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s351], _value_s351);
[L7153]   COND FALSE  !(revert)
[L7156]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s351];
[L7157]               balances_BasicToken[this][_from_s351] := __var_5;
[L7158]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s351];
[L7159]   CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L7159]   RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s351], _value_s351);
[L7160]   COND FALSE  !(revert)
[L7163]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s351];
[L7164]               balances_BasicToken[this][_to_s351] := __var_6;
[L7165]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s351];
[L7166]   CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7166]   RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s351][msgsender_MSG], _value_s351);
[L7167]   COND FALSE  !(revert)
[L7170]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] - allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L7171]               allowed_StandardToken[this][_from_s351][msgsender_MSG] := __var_7;
[L7172]               sum_allowed1[_from_s351] := sum_allowed1[_from_s351] + allowed_StandardToken[this][_from_s351][msgsender_MSG];
[L7173]               assert { :EventEmitted "Transfer_StandardToken" } true;
[L7174]               __ret_0_ := true;
[L9645]   RET         call __var_53 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9646]   COND FALSE  !(revert)
[L9652]               _success_s1551 := __var_53;
[L4780]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4781]               assume !revert && gas >= 0;
[L14613]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND TRUE   choice == 38
[L14584]              gas := gas - 21000;
[L14585]  COND FALSE  !(gas >= 0)
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:25:12,972 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:25:12,972 INFO  L82        PathProgramCache]: Analyzing trace with hash -748696909, now seen corresponding path program 1 times
[2020-11-24 21:25:12,973 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:25:13,013 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:25:13,818 INFO  L134       CoverageAnalysis]: Checked inductivity of 9932 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9932 trivial. 0 not checked.
[2020-11-24 21:25:13,818 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:25:13,818 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-24 21:25:13,819 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:25:13,819 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-24 21:25:13,819 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=69, Unknown=0, NotChecked=0, Total=90
[2020-11-24 21:25:13,819 INFO  L87              Difference]: Start difference. First operand 8421 states and 9399 transitions. cyclomatic complexity: 1001 Second operand 10 states.
[2020-11-24 21:25:15,989 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:25:15,989 INFO  L93              Difference]: Finished difference Result 4598 states and 5124 transitions.
[2020-11-24 21:25:15,989 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-24 21:25:15,989 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4598 states and 5124 transitions.
[2020-11-24 21:25:15,997 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:25:15,997 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4598 states to 0 states and 0 transitions.
[2020-11-24 21:25:15,997 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 21:25:15,998 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 21:25:15,998 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 21:25:15,998 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:25:15,998 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:25:15,998 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:25:15,998 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:25:15,998 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 21:25:15,998 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 21:25:15,998 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:25:15,998 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 21:25:16,001 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:25:16 BasicIcfg
[2020-11-24 21:25:16,001 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 21:25:16,001 INFO  L168              Benchmark]: Toolchain (without parser) took 33697.71 ms. Allocated memory was 1.0 GB in the beginning and 5.1 GB in the end (delta: 4.1 GB). Free memory was 913.7 MB in the beginning and 1.7 GB in the end (delta: -827.0 MB). Peak memory consumption was 3.2 GB. Max. memory is 15.3 GB.
[2020-11-24 21:25:16,002 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:25:16,002 INFO  L168              Benchmark]: Boogie Preprocessor took 196.22 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:25:16,003 INFO  L168              Benchmark]: UtopiaSpecLang took 96.65 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:25:16,003 INFO  L168              Benchmark]: Boogie Printer took 35.40 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 859.8 MB in the end (delta: 10.9 MB). Peak memory consumption was 10.9 MB. Max. memory is 15.3 GB.
[2020-11-24 21:25:16,003 INFO  L168              Benchmark]: RCFGBuilder took 1720.71 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 193.5 MB). Free memory was 859.8 MB in the beginning and 1.1 GB in the end (delta: -247.9 MB). Peak memory consumption was 253.6 MB. Max. memory is 15.3 GB.
[2020-11-24 21:25:16,003 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.31 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 7.6 MB). Peak memory consumption was 7.6 MB. Max. memory is 15.3 GB.
[2020-11-24 21:25:16,004 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4180.02 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 332.4 MB). Free memory was 1.1 GB in the beginning and 920.8 MB in the end (delta: 179.4 MB). Peak memory consumption was 814.2 MB. Max. memory is 15.3 GB.
[2020-11-24 21:25:16,004 INFO  L168              Benchmark]: BlockEncodingV2 took 304.09 ms. Allocated memory is still 1.6 GB. Free memory was 920.8 MB in the beginning and 736.8 MB in the end (delta: 184.0 MB). Peak memory consumption was 184.0 MB. Max. memory is 15.3 GB.
[2020-11-24 21:25:16,005 INFO  L168              Benchmark]: BuchiAutomizer took 27125.13 ms. Allocated memory was 1.6 GB in the beginning and 5.1 GB in the end (delta: 3.5 GB). Free memory was 736.8 MB in the beginning and 1.7 GB in the end (delta: -1.0 GB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
[2020-11-24 21:25:16,007 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13514 locations, 24813 edges
  - StatisticsResult: Encoded RCFG
    13267 locations, 24153 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 196.22 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 96.65 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 35.40 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 859.8 MB in the end (delta: 10.9 MB). Peak memory consumption was 10.9 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1720.71 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 193.5 MB). Free memory was 859.8 MB in the beginning and 1.1 GB in the end (delta: -247.9 MB). Peak memory consumption was 253.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.31 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 7.6 MB). Peak memory consumption was 7.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4180.02 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 332.4 MB). Free memory was 1.1 GB in the beginning and 920.8 MB in the end (delta: 179.4 MB). Peak memory consumption was 814.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 304.09 ms. Allocated memory is still 1.6 GB. Free memory was 920.8 MB in the beginning and 736.8 MB in the end (delta: 184.0 MB). Peak memory consumption was 184.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 27125.13 ms. Allocated memory was 1.6 GB in the beginning and 5.1 GB in the end (delta: 3.5 GB). Free memory was 736.8 MB in the beginning and 1.7 GB in the end (delta: -1.0 GB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5417 locations, 7592 edges
  - StatisticsResult: BuchiProgram size
    13514 locations, 24813 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 21 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 27.1s and 8 iterations.  TraceHistogramMax:38. Analysis of lassos took 4.6s. Construction of modules took 15.6s. BÃ¼chi inclusion checks took 5.5s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 6 MinimizatonAttempts, 3521 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 8882 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 59709 SDtfs, 55967 SDslu, 77887 SDs, 0 SdLazy, 240990 SolverSat, 9271 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 15.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_MainToken0) ==> ( <>(fail_transferFrom_MainToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
