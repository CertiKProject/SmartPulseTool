This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 06:15:30,706 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 06:15:30,708 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 06:15:30,720 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 06:15:30,720 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 06:15:30,721 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 06:15:30,722 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 06:15:30,723 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 06:15:30,725 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 06:15:30,726 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 06:15:30,726 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 06:15:30,727 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 06:15:30,728 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 06:15:30,728 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 06:15:30,729 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 06:15:30,730 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 06:15:30,730 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 06:15:30,732 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 06:15:30,733 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 06:15:30,734 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 06:15:30,735 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 06:15:30,736 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 06:15:30,737 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 06:15:30,737 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 06:15:30,738 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 06:15:30,738 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 06:15:30,738 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 06:15:30,739 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 06:15:30,739 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 06:15:30,739 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 06:15:30,740 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 06:15:30,740 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 06:15:30,741 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 06:15:30,741 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 06:15:30,742 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 06:15:30,742 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 06:15:30,743 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 06:15:30,743 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 06:15:30,743 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 06:15:30,744 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 06:15:30,744 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 06:15:30,744 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 06:15:30,752 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 06:15:30,753 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 06:15:30,753 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 06:15:30,754 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 06:15:30,754 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 06:15:30,754 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 06:15:30,754 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 06:15:30,754 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 06:15:30,754 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 06:15:30,754 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 06:15:30,754 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 06:15:30,754 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 06:15:30,754 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 06:15:30,755 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 06:15:30,755 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 06:15:30,755 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 06:15:30,755 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 06:15:30,755 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 06:15:30,755 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 06:15:30,755 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 06:15:30,755 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 06:15:30,755 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 06:15:30,756 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 06:15:30,756 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 06:15:30,756 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 06:15:30,756 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 06:15:30,778 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 06:15:30,793 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 06:15:30,798 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 06:15:30,800 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 06:15:30,801 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 06:15:30,802 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl
[2020-11-25 06:15:30,803 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl'
[2020-11-25 06:15:30,874 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 06:15:30,875 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 06:15:30,875 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 06:15:30,875 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 06:15:30,875 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 06:15:30,892 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:15:30" (1/1) ...
[2020-11-25 06:15:30,893 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:15:30" (1/1) ...
[2020-11-25 06:15:30,917 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:15:30" (1/1) ...
[2020-11-25 06:15:30,918 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:15:30" (1/1) ...
[2020-11-25 06:15:30,935 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:15:30" (1/1) ...
[2020-11-25 06:15:30,943 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:15:30" (1/1) ...
[2020-11-25 06:15:30,949 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:15:30" (1/1) ...
[2020-11-25 06:15:30,956 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 06:15:30,957 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 06:15:30,958 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 06:15:30,960 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 06:15:30,964 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:15:30" (1/1) ...
[2020-11-25 06:15:30,978 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(Token.transferFrom(from, to, value), from != to && (value > _balances_Token[this][from] || value > _allowed_Token[this][from][msg.sender] || _balances_Token[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_Token[this][to] >= 0 && _balances_Token[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_Token[this][from] >= 0 &&  _balances_Token[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_Token[this][from][msg.sender] >= 0 && _allowed_Token[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(Token.transferFrom)))
[2020-11-25 06:15:30,984 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(Token.transferFrom(from, to, value), from != to && (value > _balances_Token[this][from] || value > _allowed_Token[this][from][msg.sender] || _balances_Token[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_Token[this][to] >= 0 && _balances_Token[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_Token[this][from] >= 0 &&  _balances_Token[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_Token[this][from][msg.sender] >= 0 && _allowed_Token[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(Token.transferFrom)))
[2020-11-25 06:15:30,991 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(Token.transferFrom(from, to, value), from != to && (value > _balances_Token[this][from] || value > _allowed_Token[this][from][msg.sender] || _balances_Token[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_Token[this][to] >= 0 && _balances_Token[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_Token[this][from] >= 0 &&  _balances_Token[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_Token[this][from][msg.sender] >= 0 && _allowed_Token[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(Token.transferFrom)))
[2020-11-25 06:15:30,999 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s370!=to_s370 && ( ( value_s370>_balances_Token[this][from_s370] || value_s370>_allowed_Token[this][from_s370][msg.sender] ) || ( _balances_Token[this][to_s370] + value_s370 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && value_s370>=0 ) && value_s370<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_Token[this][to_s370]>=0 ) && _balances_Token[this][to_s370]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_Token[this][from_s370]>=0 ) && _balances_Token[this][from_s370]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_Token[this][from_s370][msg.sender]>=0 ) && _allowed_Token[this][from_s370][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[from_s370,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>],IdentifierExpression[to_s370,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s370,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],[IdentifierExpression[from_s370,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]]],BinaryExpression[COMPGT,IdentifierExpression[value_s370,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],[IdentifierExpression[from_s370,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],[IdentifierExpression[to_s370,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],IdentifierExpression[value_s370,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s370,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s370,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],[IdentifierExpression[to_s370,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],[IdentifierExpression[to_s370,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],[IdentifierExpression[from_s370,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],[IdentifierExpression[from_s370,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],[IdentifierExpression[from_s370,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],[IdentifierExpression[from_s370,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Token>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 06:15:31,004 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(Token.transferFrom(from, to, value), from != to && (value > _balances_Token[this][from] || value > _allowed_Token[this][from][msg.sender] || _balances_Token[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_Token[this][to] >= 0 && _balances_Token[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_Token[this][from] >= 0 &&  _balances_Token[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_Token[this][from][msg.sender] >= 0 && _allowed_Token[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(Token.transferFrom)))
[2020-11-25 06:15:31,004 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_Token0) ==> ( <>AP(fail_transferFrom_Token0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 06:15:31,011 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:15:31 PropertyContainer
[2020-11-25 06:15:31,011 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 06:15:31,011 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 06:15:31,011 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 06:15:31,012 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 06:15:31,012 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:15:30" (1/2) ...
[2020-11-25 06:15:31,013 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 06:15:31,013 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 06:15:31,023 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:15:31" (2/2) ...
[2020-11-25 06:15:31,023 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 06:15:31,023 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 06:15:31,023 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 06:15:31,023 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 06:15:31,024 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:15:30" (1/2) ...
[2020-11-25 06:15:31,077 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 06:15:31,078 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 06:15:31,078 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 06:15:31,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 06:15:31,078 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 06:15:31,078 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 06:15:31,078 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 06:15:31,078 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 06:15:31,078 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 06:15:31,078 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 06:15:31,078 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 06:15:31,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 06:15:31,079 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 06:15:31,079 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 06:15:31,079 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 06:15:31,079 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 06:15:31,079 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 06:15:31,079 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 06:15:31,079 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token_NoBaseCtor__success
[2020-11-25 06:15:31,079 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token
[2020-11-25 06:15:31,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token
[2020-11-25 06:15:31,079 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Token
[2020-11-25 06:15:31,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Token
[2020-11-25 06:15:31,080 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Token
[2020-11-25 06:15:31,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Token
[2020-11-25 06:15:31,080 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Token
[2020-11-25 06:15:31,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Token
[2020-11-25 06:15:31,080 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Token
[2020-11-25 06:15:31,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Token
[2020-11-25 06:15:31,080 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Token
[2020-11-25 06:15:31,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Token
[2020-11-25 06:15:31,080 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Token
[2020-11-25 06:15:31,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Token
[2020-11-25 06:15:31,080 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_Token
[2020-11-25 06:15:31,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_Token
[2020-11-25 06:15:31,081 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_Token
[2020-11-25 06:15:31,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_Token
[2020-11-25 06:15:31,081 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_Token__success
[2020-11-25 06:15:31,081 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_Token__success
[2020-11-25 06:15:31,081 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Token
[2020-11-25 06:15:31,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Token
[2020-11-25 06:15:31,081 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Token
[2020-11-25 06:15:31,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Token
[2020-11-25 06:15:31,081 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Token
[2020-11-25 06:15:31,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Token
[2020-11-25 06:15:31,081 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 06:15:31,081 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 06:15:31,082 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 06:15:31,082 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 06:15:31,082 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 06:15:31,082 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 06:15:31,082 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 06:15:31,082 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Token
[2020-11-25 06:15:31,082 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 06:15:31,082 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 06:15:31,082 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 06:15:31,082 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 06:15:31,082 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 06:15:31,082 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 06:15:31,082 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 06:15:31,083 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 06:15:31,083 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 06:15:31,083 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 06:15:31,083 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 06:15:31,083 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 06:15:31,083 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 06:15:31,083 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token_NoBaseCtor__fail
[2020-11-25 06:15:31,083 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token__success
[2020-11-25 06:15:31,083 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token__fail
[2020-11-25 06:15:31,083 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Token__success
[2020-11-25 06:15:31,083 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Token__fail
[2020-11-25 06:15:31,083 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Token__success
[2020-11-25 06:15:31,083 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Token__fail
[2020-11-25 06:15:31,084 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Token__success
[2020-11-25 06:15:31,084 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Token__fail
[2020-11-25 06:15:31,084 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Token__success
[2020-11-25 06:15:31,084 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Token__fail
[2020-11-25 06:15:31,084 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Token__success
[2020-11-25 06:15:31,084 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Token__fail
[2020-11-25 06:15:31,084 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Token__success
[2020-11-25 06:15:31,084 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Token__fail
[2020-11-25 06:15:31,084 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_Token__success
[2020-11-25 06:15:31,084 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_Token__fail
[2020-11-25 06:15:31,084 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_Token__success
[2020-11-25 06:15:31,084 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_Token__fail
[2020-11-25 06:15:31,085 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_Token__fail
[2020-11-25 06:15:31,085 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_Token__fail
[2020-11-25 06:15:31,085 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Token__success
[2020-11-25 06:15:31,085 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Token__fail
[2020-11-25 06:15:31,085 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Token__success
[2020-11-25 06:15:31,085 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Token__fail
[2020-11-25 06:15:31,085 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Token__success
[2020-11-25 06:15:31,085 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Token__fail
[2020-11-25 06:15:31,085 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 06:15:31,085 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 06:15:31,085 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 06:15:31,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 06:15:31,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 06:15:31,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 06:15:31,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 06:15:31,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 06:15:31,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 06:15:31,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 06:15:31,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 06:15:31,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 06:15:31,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 06:15:31,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 06:15:31,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 06:15:31,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 06:15:31,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 06:15:31,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 06:15:31,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 06:15:31,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 06:15:31,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 06:15:31,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 06:15:31,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 06:15:31,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token_NoBaseCtor__fail
[2020-11-25 06:15:31,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token_NoBaseCtor__success
[2020-11-25 06:15:31,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token__fail
[2020-11-25 06:15:31,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token__success
[2020-11-25 06:15:31,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Token__fail
[2020-11-25 06:15:31,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Token__success
[2020-11-25 06:15:31,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Token__fail
[2020-11-25 06:15:31,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Token__success
[2020-11-25 06:15:31,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Token__fail
[2020-11-25 06:15:31,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Token__success
[2020-11-25 06:15:31,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Token__fail
[2020-11-25 06:15:31,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Token__success
[2020-11-25 06:15:31,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Token__fail
[2020-11-25 06:15:31,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Token__success
[2020-11-25 06:15:31,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Token__fail
[2020-11-25 06:15:31,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Token__success
[2020-11-25 06:15:31,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_Token__fail
[2020-11-25 06:15:31,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_Token__success
[2020-11-25 06:15:31,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_Token__fail
[2020-11-25 06:15:31,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_Token__success
[2020-11-25 06:15:31,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_Token__fail
[2020-11-25 06:15:31,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_Token__success
[2020-11-25 06:15:31,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_Token__fail
[2020-11-25 06:15:31,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_Token__success
[2020-11-25 06:15:31,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Token__fail
[2020-11-25 06:15:31,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Token__success
[2020-11-25 06:15:31,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Token__fail
[2020-11-25 06:15:31,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Token__success
[2020-11-25 06:15:31,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Token__fail
[2020-11-25 06:15:31,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Token__success
[2020-11-25 06:15:31,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 06:15:31,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 06:15:31,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 06:15:31,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 06:15:31,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 06:15:31,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 06:15:31,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 06:15:31,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 06:15:31,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 06:15:31,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 06:15:31,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Token
[2020-11-25 06:15:31,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 06:15:31,090 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 06:15:31,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 06:15:31,504 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:15:31,504 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:15:31,596 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 06:15:31,597 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 06:15:31,600 INFO  L202        PluginConnector]: Adding new model Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:15:31 BoogieIcfgContainer
[2020-11-25 06:15:31,600 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:15:31" (2/2) ...
[2020-11-25 06:15:31,600 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 06:15:31,601 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@393a7591 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:15:31, skipping insertion in model container
[2020-11-25 06:15:31,601 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 06:15:31,601 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 06:15:31,602 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 06:15:31,604 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 06:15:31,604 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:15:30" (1/3) ...
[2020-11-25 06:15:31,605 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2f08000b and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:15:31, skipping insertion in model container
[2020-11-25 06:15:31,605 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:15:31" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 06:15:31,645 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:15:31 NWAContainer
[2020-11-25 06:15:31,645 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 06:15:31,646 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 06:15:31,646 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 06:15:31,646 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 06:15:31,647 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:15:31" (3/4) ...
[2020-11-25 06:15:31,648 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4f542888 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:15:31, skipping insertion in model container
[2020-11-25 06:15:31,648 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:15:31" (4/4) ...
[2020-11-25 06:15:31,651 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 06:15:31,654 INFO  L110   BuchiProductObserver]: Initial RCFG 825 locations, 1041 edges
[2020-11-25 06:15:31,654 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 06:15:31,665 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 06:15:32,604 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 06:15:32,607 INFO  L110   BuchiProductObserver]: BuchiProgram size 2002 locations, 3383 edges
[2020-11-25 06:15:32,607 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:15:32 BoogieIcfgContainer
[2020-11-25 06:15:32,608 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 06:15:32,608 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 06:15:32,608 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 06:15:32,609 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 06:15:32,610 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:15:32" (1/1) ...
[2020-11-25 06:15:32,658 INFO  L313           BlockEncoder]: Initial Icfg 2002 locations, 3383 edges
[2020-11-25 06:15:32,659 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 06:15:32,659 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 06:15:32,659 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 06:15:32,660 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 06:15:32,667 INFO  L70    emoveInfeasibleEdges]: Removed 33 edges and 9 locations because of local infeasibility
[2020-11-25 06:15:32,672 INFO  L70        RemoveSinkStates]: Removed 40 edges and 20 locations by removing sink states
[2020-11-25 06:15:32,678 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 06:15:32,680 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 06:15:32,682 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 06:15:32,682 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 06:15:32,685 INFO  L313           BlockEncoder]: Encoded RCFG 1961 locations, 3293 edges
[2020-11-25 06:15:32,685 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:15:32 BasicIcfg
[2020-11-25 06:15:32,686 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 06:15:32,686 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 06:15:32,686 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 06:15:32,688 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 06:15:32,688 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:15:32,688 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:15:30" (1/6) ...
[2020-11-25 06:15:32,690 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1752fa40 and model type Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:15:32, skipping insertion in model container
[2020-11-25 06:15:32,690 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:15:32,690 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:15:31" (2/6) ...
[2020-11-25 06:15:32,690 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1752fa40 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:15:32, skipping insertion in model container
[2020-11-25 06:15:32,690 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:15:32,690 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:15:31" (3/6) ...
[2020-11-25 06:15:32,690 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1752fa40 and model type Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:15:32, skipping insertion in model container
[2020-11-25 06:15:32,690 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:15:32,690 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:15:31" (4/6) ...
[2020-11-25 06:15:32,691 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1752fa40 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:15:32, skipping insertion in model container
[2020-11-25 06:15:32,691 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:15:32,691 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:15:32" (5/6) ...
[2020-11-25 06:15:32,691 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1752fa40 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 06:15:32, skipping insertion in model container
[2020-11-25 06:15:32,691 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:15:32,691 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:15:32" (6/6) ...
[2020-11-25 06:15:32,692 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transferfrom-fail.bpl_BEv2
[2020-11-25 06:15:32,738 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 06:15:32,738 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 06:15:32,738 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 06:15:32,738 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 06:15:32,738 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 06:15:32,738 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 06:15:32,738 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 06:15:32,739 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 06:15:32,739 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 06:15:32,764 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1961 states.
[2020-11-25 06:15:32,819 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:15:32,819 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:15:32,819 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:15:32,829 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:15:32,829 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:15:32,829 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 06:15:32,829 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1961 states.
[2020-11-25 06:15:32,844 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:15:32,844 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:15:32,844 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:15:32,846 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:15:32,846 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_Token0 := false;
[L2]                 call_transferFrom_Token0 := false;
[L2]     CALL        call main();
[L2366]              assume null == 0;
[L2367]  CALL        call this := FreshRefGenerator__success();
[L1107]              havoc newRef;
[L1108]              assume Alloc[newRef] == false;
[L1109]              Alloc[newRef] := true;
[L1110]              assume newRef != null;
[L2367]  RET         call this := FreshRefGenerator__success();
[L2368]              assume now >= 0;
[L2369]              assume DType[this] == Token;
[L2370]              assume msgvalue_MSG == 0;
[L2371]              gas := gas - 53000;
[L2372]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L209]               havoc __exception;
[L210]               revert := false;
[L211]   COND FALSE  !(__exception)
[L232]   CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1374]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1295]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1280]              assume msgsender_MSG != null;
[L1281]              Balance[this] := 0;
[L1295]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1296]  COND FALSE  !(revert)
[L1374]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1375]  COND TRUE   revert
[L232]   RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L233]               assume !revert && gas >= 0;
[L2372]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L2373]              assume !revert && gas >= 0;

Loop:
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND FALSE  !(gas >= 0)
[L2376]  RET         call CorralChoice_Token(this);

[2020-11-25 06:15:32,864 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:15:32,864 INFO  L82        PathProgramCache]: Analyzing trace with hash -57250210, now seen corresponding path program 1 times
[2020-11-25 06:15:32,869 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:15:32,892 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:15:32,937 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:15:32,939 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:15:32,939 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 06:15:32,943 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:15:33,054 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 06:15:33,054 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 06:15:33,057 INFO  L87              Difference]: Start difference. First operand 1961 states. Second operand 3 states.
[2020-11-25 06:15:33,208 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:15:33,208 INFO  L93              Difference]: Finished difference Result 2199 states and 3527 transitions.
[2020-11-25 06:15:33,208 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 06:15:33,210 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2199 states and 3527 transitions.
[2020-11-25 06:15:33,229 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:15:33,257 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2199 states to 2199 states and 3527 transitions.
[2020-11-25 06:15:33,258 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 06:15:33,262 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 659
[2020-11-25 06:15:33,263 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2199 states and 3527 transitions.
[2020-11-25 06:15:33,274 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:15:33,275 INFO  L728         BuchiCegarLoop]: Abstraction has 2199 states and 3527 transitions.
[2020-11-25 06:15:33,292 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2199 states and 3527 transitions.
[2020-11-25 06:15:33,349 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2199 to 1796.
[2020-11-25 06:15:33,350 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1796 states.
[2020-11-25 06:15:33,356 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1796 states to 1796 states and 2834 transitions.
[2020-11-25 06:15:33,357 INFO  L751         BuchiCegarLoop]: Abstraction has 1796 states and 2834 transitions.
[2020-11-25 06:15:33,357 INFO  L631         BuchiCegarLoop]: Abstraction has 1796 states and 2834 transitions.
[2020-11-25 06:15:33,357 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 06:15:33,357 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1796 states and 2834 transitions.
[2020-11-25 06:15:33,365 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:15:33,365 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:15:33,365 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:15:33,366 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:15:33,366 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_Token0 := false;
[L2]                 call_transferFrom_Token0 := false;
[L2]     CALL        call main();
[L2366]              assume null == 0;
[L2367]  CALL        call this := FreshRefGenerator__success();
[L1107]              havoc newRef;
[L1108]              assume Alloc[newRef] == false;
[L1109]              Alloc[newRef] := true;
[L1110]              assume newRef != null;
[L2367]  RET         call this := FreshRefGenerator__success();
[L2368]              assume now >= 0;
[L2369]              assume DType[this] == Token;
[L2370]              assume msgvalue_MSG == 0;
[L2371]              gas := gas - 53000;
[L2372]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L209]               havoc __exception;
[L210]               revert := false;
[L211]   COND FALSE  !(__exception)
[L232]   CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1374]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1295]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1280]              assume msgsender_MSG != null;
[L1281]              Balance[this] := 0;
[L1295]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1296]  COND FALSE  !(revert)
[L1374]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1375]  COND FALSE  !(revert)
[L1378]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1333]              assume msgsender_MSG != null;
[L1334]              Balance[this] := 0;
[L1335]              name_Token[this] := 1672502729;
[L1336]              symbol_Token[this] := 624073;
[L1337]              decimals_Token[this] := 18;
[L1338]              _balances_Token[this] := zeroRefintArr();
[L1339]              sum__balances0[this] := 0;
[L1340]              _allowed_Token[this] := zeroRefRefintArr();
[L1341]              sum__allowed1[this] := 0;
[L1342]              _totalSupply_Token[this] := 0;
[L1344]              amount_s261 := nonlinearMul(3 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_Token[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1345]  CALL        call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND TRUE   !(c_s106 >= a_s106)
[L1242]              revert := true;
[L1345]  RET         call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1346]  COND TRUE   revert
[L1378]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1379]  COND FALSE  !(revert)
[L232]   RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L233]               assume !revert && gas >= 0;
[L2372]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L2373]              assume !revert && gas >= 0;

Loop:
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND FALSE  !(gas >= 0)
[L2376]  RET         call CorralChoice_Token(this);

[2020-11-25 06:15:33,369 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:15:33,369 INFO  L82        PathProgramCache]: Analyzing trace with hash 90598740, now seen corresponding path program 1 times
[2020-11-25 06:15:33,370 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:15:33,378 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:15:33,394 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:15:33,394 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:15:33,394 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 06:15:33,395 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:15:33,395 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 06:15:33,395 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 06:15:33,396 INFO  L87              Difference]: Start difference. First operand 1796 states and 2834 transitions. cyclomatic complexity: 1040 Second operand 4 states.
[2020-11-25 06:15:33,608 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:15:33,608 INFO  L93              Difference]: Finished difference Result 1615 states and 1808 transitions.
[2020-11-25 06:15:33,608 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 06:15:33,609 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1615 states and 1808 transitions.
[2020-11-25 06:15:33,617 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:15:33,625 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1615 states to 1615 states and 1808 transitions.
[2020-11-25 06:15:33,626 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 455
[2020-11-25 06:15:33,626 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 559
[2020-11-25 06:15:33,626 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1615 states and 1808 transitions.
[2020-11-25 06:15:33,628 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:15:33,629 INFO  L728         BuchiCegarLoop]: Abstraction has 1615 states and 1808 transitions.
[2020-11-25 06:15:33,630 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1615 states and 1808 transitions.
[2020-11-25 06:15:33,646 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1615 to 1610.
[2020-11-25 06:15:33,646 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1610 states.
[2020-11-25 06:15:33,650 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1610 states to 1610 states and 1803 transitions.
[2020-11-25 06:15:33,650 INFO  L751         BuchiCegarLoop]: Abstraction has 1610 states and 1803 transitions.
[2020-11-25 06:15:33,650 INFO  L631         BuchiCegarLoop]: Abstraction has 1610 states and 1803 transitions.
[2020-11-25 06:15:33,650 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 06:15:33,650 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1610 states and 1803 transitions.
[2020-11-25 06:15:33,655 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:15:33,655 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:15:33,655 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:15:33,657 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:15:33,657 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_Token0 := false;
[L2]                 call_transferFrom_Token0 := false;
[L2]     CALL        call main();
[L2366]              assume null == 0;
[L2367]  CALL        call this := FreshRefGenerator__success();
[L1107]              havoc newRef;
[L1108]              assume Alloc[newRef] == false;
[L1109]              Alloc[newRef] := true;
[L1110]              assume newRef != null;
[L2367]  RET         call this := FreshRefGenerator__success();
[L2368]              assume now >= 0;
[L2369]              assume DType[this] == Token;
[L2370]              assume msgvalue_MSG == 0;
[L2371]              gas := gas - 53000;
[L2372]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L209]               havoc __exception;
[L210]               revert := false;
[L211]   COND FALSE  !(__exception)
[L232]   CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1374]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1295]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1280]              assume msgsender_MSG != null;
[L1281]              Balance[this] := 0;
[L1295]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1296]  COND FALSE  !(revert)
[L1374]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1375]  COND FALSE  !(revert)
[L1378]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1333]              assume msgsender_MSG != null;
[L1334]              Balance[this] := 0;
[L1335]              name_Token[this] := 1672502729;
[L1336]              symbol_Token[this] := 624073;
[L1337]              decimals_Token[this] := 18;
[L1338]              _balances_Token[this] := zeroRefintArr();
[L1339]              sum__balances0[this] := 0;
[L1340]              _allowed_Token[this] := zeroRefRefintArr();
[L1341]              sum__allowed1[this] := 0;
[L1342]              _totalSupply_Token[this] := 0;
[L1344]              amount_s261 := nonlinearMul(3 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_Token[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1345]  CALL        call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND TRUE   !(c_s106 >= a_s106)
[L1242]              revert := true;
[L1345]  RET         call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1346]  COND TRUE   revert
[L1378]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1379]  COND FALSE  !(revert)
[L232]   RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L233]               assume !revert && gas >= 0;
[L2372]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L2373]              assume !revert && gas >= 0;
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND FALSE  !(choice == 11)
[L2293]  COND FALSE  !(choice == 10)
[L2300]  COND TRUE   choice == 9
[L2301]              gas := gas - 21000;
[L2302]  COND TRUE   gas >= 0
[L2303]              assume value_s370 >= 0 && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2304]              assume msgvalue_MSG == 0;
[L2305]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s370 != to_s370 && ((value_s370 > _balances_Token[this][from_s370] || value_s370 > _allowed_Token[this][from_s370][msgsender_MSG]) || _balances_Token[this][to_s370] + value_s370 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s370 >= 0) && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s370] >= 0) && _balances_Token[this][to_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][from_s370] >= 0) && _balances_Token[this][from_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_Token[this][from_s370][msgsender_MSG] >= 0) && _allowed_Token[this][from_s370][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_Token0 := true;
[L2]                 call_transferFrom_Token0 := false;
[L2]                 revert := revert_hold;
[L517]               havoc __exception;
[L518]               revert := false;
[L519]   COND FALSE  !(__exception)
[L540]   CALL        call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1482]  CALL        call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1589]              __var_5 := null;
[L1590]  COND TRUE   !(to_s470 != null)
[L1591]              revert := true;
[L1482]  RET         call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1483]  COND TRUE   revert
[L540]   RET         call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L541]               assume !revert && gas >= 0;
[L2305]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2376]  RET         call CorralChoice_Token(this);

Loop:
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND FALSE  !(choice == 11)
[L2293]  COND FALSE  !(choice == 10)
[L2300]  COND TRUE   choice == 9
[L2301]              gas := gas - 21000;
[L2302]  COND TRUE   gas >= 0
[L2303]              assume value_s370 >= 0 && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2304]              assume msgvalue_MSG == 0;
[L2305]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s370 != to_s370 && ((value_s370 > _balances_Token[this][from_s370] || value_s370 > _allowed_Token[this][from_s370][msgsender_MSG]) || _balances_Token[this][to_s370] + value_s370 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s370 >= 0) && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s370] >= 0) && _balances_Token[this][to_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][from_s370] >= 0) && _balances_Token[this][from_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_Token[this][from_s370][msgsender_MSG] >= 0) && _allowed_Token[this][from_s370][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_Token0 := true;
[L2]                 call_transferFrom_Token0 := false;
[L2]                 revert := revert_hold;
[L517]               havoc __exception;
[L518]               revert := false;
[L519]   COND FALSE  !(__exception)
[L540]   CALL        call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1482]  CALL        call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1589]              __var_5 := null;
[L1590]  COND TRUE   !(to_s470 != null)
[L1591]              revert := true;
[L1482]  RET         call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1483]  COND TRUE   revert
[L540]   RET         call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L541]               assume !revert && gas >= 0;
[L2305]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2376]  RET         call CorralChoice_Token(this);

[2020-11-25 06:15:33,661 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:15:33,661 INFO  L82        PathProgramCache]: Analyzing trace with hash 374027718, now seen corresponding path program 1 times
[2020-11-25 06:15:33,663 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:15:33,674 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:15:33,698 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:15:33,698 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:15:33,699 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 06:15:33,699 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:15:33,699 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 06:15:33,699 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 06:15:33,699 INFO  L87              Difference]: Start difference. First operand 1610 states and 1803 transitions. cyclomatic complexity: 195 Second operand 3 states.
[2020-11-25 06:15:33,743 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:15:33,744 INFO  L93              Difference]: Finished difference Result 2005 states and 2223 transitions.
[2020-11-25 06:15:33,744 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 06:15:33,744 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2005 states and 2223 transitions.
[2020-11-25 06:15:33,753 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:15:33,763 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2005 states to 1871 states and 2075 transitions.
[2020-11-25 06:15:33,763 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 629
[2020-11-25 06:15:33,764 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 629
[2020-11-25 06:15:33,764 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1871 states and 2075 transitions.
[2020-11-25 06:15:33,767 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:15:33,767 INFO  L728         BuchiCegarLoop]: Abstraction has 1871 states and 2075 transitions.
[2020-11-25 06:15:33,769 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1871 states and 2075 transitions.
[2020-11-25 06:15:33,786 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1871 to 1638.
[2020-11-25 06:15:33,786 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1638 states.
[2020-11-25 06:15:33,789 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1638 states to 1638 states and 1785 transitions.
[2020-11-25 06:15:33,789 INFO  L751         BuchiCegarLoop]: Abstraction has 1638 states and 1785 transitions.
[2020-11-25 06:15:33,789 INFO  L631         BuchiCegarLoop]: Abstraction has 1638 states and 1785 transitions.
[2020-11-25 06:15:33,789 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 06:15:33,790 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1638 states and 1785 transitions.
[2020-11-25 06:15:33,794 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:15:33,794 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:15:33,794 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:15:33,796 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:15:33,796 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_Token0 := false;
[L2]                 call_transferFrom_Token0 := false;
[L2]     CALL        call main();
[L2366]              assume null == 0;
[L2367]  CALL        call this := FreshRefGenerator__success();
[L1107]              havoc newRef;
[L1108]              assume Alloc[newRef] == false;
[L1109]              Alloc[newRef] := true;
[L1110]              assume newRef != null;
[L2367]  RET         call this := FreshRefGenerator__success();
[L2368]              assume now >= 0;
[L2369]              assume DType[this] == Token;
[L2370]              assume msgvalue_MSG == 0;
[L2371]              gas := gas - 53000;
[L2372]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L209]               havoc __exception;
[L210]               revert := false;
[L211]   COND FALSE  !(__exception)
[L232]   CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1374]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1295]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1280]              assume msgsender_MSG != null;
[L1281]              Balance[this] := 0;
[L1295]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1296]  COND FALSE  !(revert)
[L1374]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1375]  COND FALSE  !(revert)
[L1378]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1333]              assume msgsender_MSG != null;
[L1334]              Balance[this] := 0;
[L1335]              name_Token[this] := 1672502729;
[L1336]              symbol_Token[this] := 624073;
[L1337]              decimals_Token[this] := 18;
[L1338]              _balances_Token[this] := zeroRefintArr();
[L1339]              sum__balances0[this] := 0;
[L1340]              _allowed_Token[this] := zeroRefRefintArr();
[L1341]              sum__allowed1[this] := 0;
[L1342]              _totalSupply_Token[this] := 0;
[L1344]              amount_s261 := nonlinearMul(3 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_Token[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1345]  CALL        call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1345]  RET         call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1346]  COND FALSE  !(revert)
[L1349]              _totalSupply_Token[this] := __var_1;
[L1350]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][banker_s261];
[L1351]              _balances_Token[this][banker_s261] := amount_s261;
[L1352]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][banker_s261];
[L1353]              assert { :EventEmitted "Transfer_Token" } true;
[L1378]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1379]  COND FALSE  !(revert)
[L232]   RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L233]               assume !revert && gas >= 0;
[L2372]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L2373]              assume !revert && gas >= 0;
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND FALSE  !(choice == 11)
[L2293]  COND FALSE  !(choice == 10)
[L2300]  COND TRUE   choice == 9
[L2301]              gas := gas - 21000;
[L2302]  COND TRUE   gas >= 0
[L2303]              assume value_s370 >= 0 && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2304]              assume msgvalue_MSG == 0;
[L2305]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s370 != to_s370 && ((value_s370 > _balances_Token[this][from_s370] || value_s370 > _allowed_Token[this][from_s370][msgsender_MSG]) || _balances_Token[this][to_s370] + value_s370 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s370 >= 0) && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s370] >= 0) && _balances_Token[this][to_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][from_s370] >= 0) && _balances_Token[this][from_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_Token[this][from_s370][msgsender_MSG] >= 0) && _allowed_Token[this][from_s370][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_Token0 := true;
[L2]                 call_transferFrom_Token0 := false;
[L2]                 revert := revert_hold;
[L517]               havoc __exception;
[L518]               revert := false;
[L519]   COND FALSE  !(__exception)
[L540]   CALL        call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1482]  CALL        call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1589]              __var_5 := null;
[L1590]  COND FALSE  !(!(to_s470 != null))
[L1594]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1594]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1595]  COND FALSE  !(revert)
[L1598]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][from_s470];
[L1599]              _balances_Token[this][from_s470] := __var_6;
[L1600]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][from_s470];
[L1601]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1601]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1602]  COND FALSE  !(revert)
[L1605]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][to_s470];
[L1606]              _balances_Token[this][to_s470] := __var_7;
[L1607]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][to_s470];
[L1608]              assert { :EventEmitted "Transfer_Token" } true;
[L1482]  RET         call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1483]  COND FALSE  !(revert)
[L1486]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_Token[this][from_s370][msgsender_MSG], value_s370);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1486]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_Token[this][from_s370][msgsender_MSG], value_s370);
[L1487]  COND FALSE  !(revert)
[L1490]  CALL        call _approve~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, msgsender_MSG, __var_2);
[L1634]              __var_8 := null;
[L1635]  COND FALSE  !(!(spender_s510 != null))
[L1639]              __var_9 := null;
[L1640]  COND FALSE  !(!(owner_s510 != null))
[L1644]              sum__allowed1[owner_s510] := sum__allowed1[owner_s510] - _allowed_Token[this][owner_s510][spender_s510];
[L1645]              _allowed_Token[this][owner_s510][spender_s510] := value_s510;
[L1646]              sum__allowed1[owner_s510] := sum__allowed1[owner_s510] + _allowed_Token[this][owner_s510][spender_s510];
[L1647]              assert { :EventEmitted "Approval_Token" } true;
[L1490]  RET         call _approve~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, msgsender_MSG, __var_2);
[L1491]  COND FALSE  !(revert)
[L1494]              __ret_0_ := true;
[L540]   RET         call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L541]               assume !revert && gas >= 0;
[L2305]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2376]  RET         call CorralChoice_Token(this);

Loop:
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND FALSE  !(choice == 11)
[L2293]  COND FALSE  !(choice == 10)
[L2300]  COND TRUE   choice == 9
[L2301]              gas := gas - 21000;
[L2302]  COND TRUE   gas >= 0
[L2303]              assume value_s370 >= 0 && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2304]              assume msgvalue_MSG == 0;
[L2305]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s370 != to_s370 && ((value_s370 > _balances_Token[this][from_s370] || value_s370 > _allowed_Token[this][from_s370][msgsender_MSG]) || _balances_Token[this][to_s370] + value_s370 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s370 >= 0) && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s370] >= 0) && _balances_Token[this][to_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][from_s370] >= 0) && _balances_Token[this][from_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_Token[this][from_s370][msgsender_MSG] >= 0) && _allowed_Token[this][from_s370][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_Token0 := true;
[L2]                 call_transferFrom_Token0 := false;
[L2]                 revert := revert_hold;
[L517]               havoc __exception;
[L518]               revert := false;
[L519]   COND FALSE  !(__exception)
[L540]   CALL        call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1482]  CALL        call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1589]              __var_5 := null;
[L1590]  COND FALSE  !(!(to_s470 != null))
[L1594]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1594]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1595]  COND FALSE  !(revert)
[L1598]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][from_s470];
[L1599]              _balances_Token[this][from_s470] := __var_6;
[L1600]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][from_s470];
[L1601]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1601]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1602]  COND FALSE  !(revert)
[L1605]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][to_s470];
[L1606]              _balances_Token[this][to_s470] := __var_7;
[L1607]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][to_s470];
[L1608]              assert { :EventEmitted "Transfer_Token" } true;
[L1482]  RET         call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1483]  COND FALSE  !(revert)
[L1486]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_Token[this][from_s370][msgsender_MSG], value_s370);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1486]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_Token[this][from_s370][msgsender_MSG], value_s370);
[L1487]  COND FALSE  !(revert)
[L1490]  CALL        call _approve~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, msgsender_MSG, __var_2);
[L1634]              __var_8 := null;
[L1635]  COND FALSE  !(!(spender_s510 != null))
[L1639]              __var_9 := null;
[L1640]  COND FALSE  !(!(owner_s510 != null))
[L1644]              sum__allowed1[owner_s510] := sum__allowed1[owner_s510] - _allowed_Token[this][owner_s510][spender_s510];
[L1645]              _allowed_Token[this][owner_s510][spender_s510] := value_s510;
[L1646]              sum__allowed1[owner_s510] := sum__allowed1[owner_s510] + _allowed_Token[this][owner_s510][spender_s510];
[L1647]              assert { :EventEmitted "Approval_Token" } true;
[L1490]  RET         call _approve~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, msgsender_MSG, __var_2);
[L1491]  COND FALSE  !(revert)
[L1494]              __ret_0_ := true;
[L540]   RET         call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L541]               assume !revert && gas >= 0;
[L2305]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2376]  RET         call CorralChoice_Token(this);

[2020-11-25 06:15:33,800 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:15:33,800 INFO  L82        PathProgramCache]: Analyzing trace with hash -804327979, now seen corresponding path program 1 times
[2020-11-25 06:15:33,801 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:15:33,822 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:15:33,956 INFO  L134       CoverageAnalysis]: Checked inductivity of 5 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 06:15:33,956 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:15:33,956 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 06:15:33,957 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:15:33,957 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 06:15:33,957 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-11-25 06:15:33,957 INFO  L87              Difference]: Start difference. First operand 1638 states and 1785 transitions. cyclomatic complexity: 149 Second operand 13 states.
[2020-11-25 06:15:34,911 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:15:34,911 INFO  L93              Difference]: Finished difference Result 1722 states and 1881 transitions.
[2020-11-25 06:15:34,911 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 06:15:34,911 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1722 states and 1881 transitions.
[2020-11-25 06:15:34,916 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:15:34,921 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1722 states to 1722 states and 1881 transitions.
[2020-11-25 06:15:34,921 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 606
[2020-11-25 06:15:34,922 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 606
[2020-11-25 06:15:34,922 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1722 states and 1881 transitions.
[2020-11-25 06:15:34,923 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:15:34,923 INFO  L728         BuchiCegarLoop]: Abstraction has 1722 states and 1881 transitions.
[2020-11-25 06:15:34,924 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1722 states and 1881 transitions.
[2020-11-25 06:15:34,936 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1722 to 1576.
[2020-11-25 06:15:34,936 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1576 states.
[2020-11-25 06:15:34,938 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1576 states to 1576 states and 1704 transitions.
[2020-11-25 06:15:34,938 INFO  L751         BuchiCegarLoop]: Abstraction has 1576 states and 1704 transitions.
[2020-11-25 06:15:34,938 INFO  L631         BuchiCegarLoop]: Abstraction has 1576 states and 1704 transitions.
[2020-11-25 06:15:34,938 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 06:15:34,938 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1576 states and 1704 transitions.
[2020-11-25 06:15:34,941 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:15:34,941 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:15:34,941 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:15:34,943 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:15:34,943 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_Token0 := false;
[L2]                 call_transferFrom_Token0 := false;
[L2]     CALL        call main();
[L2366]              assume null == 0;
[L2367]  CALL        call this := FreshRefGenerator__success();
[L1107]              havoc newRef;
[L1108]              assume Alloc[newRef] == false;
[L1109]              Alloc[newRef] := true;
[L1110]              assume newRef != null;
[L2367]  RET         call this := FreshRefGenerator__success();
[L2368]              assume now >= 0;
[L2369]              assume DType[this] == Token;
[L2370]              assume msgvalue_MSG == 0;
[L2371]              gas := gas - 53000;
[L2372]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L209]               havoc __exception;
[L210]               revert := false;
[L211]   COND TRUE   __exception
[L212]               __tmp__Balance := Balance;
[L213]               __tmp__DType := DType;
[L214]               __tmp__Alloc := Alloc;
[L215]               __tmp__balance_ADDR := balance_ADDR;
[L216]               __tmp__M_Ref_int := M_Ref_int;
[L217]               __tmp__sum__balances0 := sum__balances0;
[L218]               __tmp__alloc__allowed_Token_lvl0 := alloc__allowed_Token_lvl0;
[L219]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L220]               __tmp__sum__allowed1 := sum__allowed1;
[L221]               __tmp__Length := Length;
[L222]               __tmp__now := now;
[L223]               __tmp__name_Token := name_Token;
[L224]               __tmp__symbol_Token := symbol_Token;
[L225]               __tmp__decimals_Token := decimals_Token;
[L226]               __tmp___balances_Token := _balances_Token;
[L227]               __tmp___allowed_Token := _allowed_Token;
[L228]               __tmp___totalSupply_Token := _totalSupply_Token;
[L229]   CALL        call Token_Token__fail(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1360]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1287]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1272]              assume msgsender_MSG != null;
[L1273]              __tmp__Balance[this] := 0;
[L1287]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1288]  COND FALSE  !(revert)
[L1360]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1361]  COND FALSE  !(revert)
[L1364]  CALL        call Token_Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1306]              assume msgsender_MSG != null;
[L1307]              __tmp__Balance[this] := 0;
[L1308]              __tmp__name_Token[this] := 1672502729;
[L1309]              __tmp__symbol_Token[this] := 624073;
[L1310]              __tmp__decimals_Token[this] := 18;
[L1311]              __tmp___balances_Token[this] := zeroRefintArr();
[L1312]              __tmp__sum__balances0[this] := 0;
[L1313]              __tmp___allowed_Token[this] := zeroRefRefintArr();
[L1314]              __tmp__sum__allowed1[this] := 0;
[L1315]              __tmp___totalSupply_Token[this] := 0;
[L1317]              amount_s261 := nonlinearMul(3 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, __tmp__decimals_Token[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1318]  CALL        call __var_1 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_Token[this], amount_s261);
[L1228]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1229]  COND FALSE  !(!(c_s106 >= a_s106))
[L1233]              __ret_0_ := c_s106;
[L1318]  RET         call __var_1 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_Token[this], amount_s261);
[L1319]  COND FALSE  !(revert)
[L1322]              __tmp___totalSupply_Token[this] := __var_1;
[L1323]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_Token[this][banker_s261];
[L1324]              __tmp___balances_Token[this][banker_s261] := amount_s261;
[L1325]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_Token[this][banker_s261];
[L1364]  RET         call Token_Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1365]  COND FALSE  !(revert)
[L229]   RET         call Token_Token__fail(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L230]               assume revert || gas < 0;
[L2372]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L2373]              assume !revert && gas >= 0;
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND FALSE  !(choice == 11)
[L2293]  COND FALSE  !(choice == 10)
[L2300]  COND TRUE   choice == 9
[L2301]              gas := gas - 21000;
[L2302]  COND TRUE   gas >= 0
[L2303]              assume value_s370 >= 0 && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2304]              assume msgvalue_MSG == 0;
[L2305]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s370 != to_s370 && ((value_s370 > _balances_Token[this][from_s370] || value_s370 > _allowed_Token[this][from_s370][msgsender_MSG]) || _balances_Token[this][to_s370] + value_s370 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s370 >= 0) && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s370] >= 0) && _balances_Token[this][to_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][from_s370] >= 0) && _balances_Token[this][from_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_Token[this][from_s370][msgsender_MSG] >= 0) && _allowed_Token[this][from_s370][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_Token0 := true;
[L2]                 call_transferFrom_Token0 := false;
[L2]                 revert := revert_hold;
[L517]               havoc __exception;
[L518]               revert := false;
[L519]   COND FALSE  !(__exception)
[L540]   CALL        call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1482]  CALL        call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1589]              __var_5 := null;
[L1590]  COND FALSE  !(!(to_s470 != null))
[L1594]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1594]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1595]  COND FALSE  !(revert)
[L1598]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][from_s470];
[L1599]              _balances_Token[this][from_s470] := __var_6;
[L1600]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][from_s470];
[L1601]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1601]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1602]  COND FALSE  !(revert)
[L1605]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][to_s470];
[L1606]              _balances_Token[this][to_s470] := __var_7;
[L1607]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][to_s470];
[L1608]              assert { :EventEmitted "Transfer_Token" } true;
[L1482]  RET         call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1483]  COND FALSE  !(revert)
[L1486]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_Token[this][from_s370][msgsender_MSG], value_s370);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1486]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_Token[this][from_s370][msgsender_MSG], value_s370);
[L1487]  COND FALSE  !(revert)
[L1490]  CALL        call _approve~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, msgsender_MSG, __var_2);
[L1634]              __var_8 := null;
[L1635]  COND FALSE  !(!(spender_s510 != null))
[L1639]              __var_9 := null;
[L1640]  COND FALSE  !(!(owner_s510 != null))
[L1644]              sum__allowed1[owner_s510] := sum__allowed1[owner_s510] - _allowed_Token[this][owner_s510][spender_s510];
[L1645]              _allowed_Token[this][owner_s510][spender_s510] := value_s510;
[L1646]              sum__allowed1[owner_s510] := sum__allowed1[owner_s510] + _allowed_Token[this][owner_s510][spender_s510];
[L1647]              assert { :EventEmitted "Approval_Token" } true;
[L1490]  RET         call _approve~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, msgsender_MSG, __var_2);
[L1491]  COND FALSE  !(revert)
[L1494]              __ret_0_ := true;
[L540]   RET         call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L541]               assume !revert && gas >= 0;
[L2305]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2376]  RET         call CorralChoice_Token(this);

Loop:
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND FALSE  !(gas >= 0)
[L2376]  RET         call CorralChoice_Token(this);

[2020-11-25 06:15:34,946 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:15:34,946 INFO  L82        PathProgramCache]: Analyzing trace with hash -1575418333, now seen corresponding path program 1 times
[2020-11-25 06:15:34,946 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:15:34,952 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:15:34,974 INFO  L134       CoverageAnalysis]: Checked inductivity of 5 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 5 trivial. 0 not checked.
[2020-11-25 06:15:34,974 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:15:34,974 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 06:15:34,975 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:15:34,975 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 06:15:34,975 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 06:15:34,975 INFO  L87              Difference]: Start difference. First operand 1576 states and 1704 transitions. cyclomatic complexity: 131 Second operand 4 states.
[2020-11-25 06:15:35,045 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:15:35,045 INFO  L93              Difference]: Finished difference Result 2118 states and 2392 transitions.
[2020-11-25 06:15:35,045 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 06:15:35,045 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2118 states and 2392 transitions.
[2020-11-25 06:15:35,051 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 06:15:35,058 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2118 states to 2052 states and 2325 transitions.
[2020-11-25 06:15:35,058 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 675
[2020-11-25 06:15:35,058 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 675
[2020-11-25 06:15:35,058 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2052 states and 2325 transitions.
[2020-11-25 06:15:35,060 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:15:35,060 INFO  L728         BuchiCegarLoop]: Abstraction has 2052 states and 2325 transitions.
[2020-11-25 06:15:35,062 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2052 states and 2325 transitions.
[2020-11-25 06:15:35,074 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2052 to 1510.
[2020-11-25 06:15:35,075 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1510 states.
[2020-11-25 06:15:35,076 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1510 states to 1510 states and 1636 transitions.
[2020-11-25 06:15:35,076 INFO  L751         BuchiCegarLoop]: Abstraction has 1510 states and 1636 transitions.
[2020-11-25 06:15:35,076 INFO  L631         BuchiCegarLoop]: Abstraction has 1510 states and 1636 transitions.
[2020-11-25 06:15:35,076 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 06:15:35,076 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1510 states and 1636 transitions.
[2020-11-25 06:15:35,079 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:15:35,079 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:15:35,079 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:15:35,080 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:15:35,081 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_Token0 := false;
[L2]                 call_transferFrom_Token0 := false;
[L2]     CALL        call main();
[L2366]              assume null == 0;
[L2367]  CALL        call this := FreshRefGenerator__success();
[L1107]              havoc newRef;
[L1108]              assume Alloc[newRef] == false;
[L1109]              Alloc[newRef] := true;
[L1110]              assume newRef != null;
[L2367]  RET         call this := FreshRefGenerator__success();
[L2368]              assume now >= 0;
[L2369]              assume DType[this] == Token;
[L2370]              assume msgvalue_MSG == 0;
[L2371]              gas := gas - 53000;
[L2372]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L209]               havoc __exception;
[L210]               revert := false;
[L211]   COND FALSE  !(__exception)
[L232]   CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1374]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1295]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1280]              assume msgsender_MSG != null;
[L1281]              Balance[this] := 0;
[L1295]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1296]  COND FALSE  !(revert)
[L1374]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1375]  COND FALSE  !(revert)
[L1378]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1333]              assume msgsender_MSG != null;
[L1334]              Balance[this] := 0;
[L1335]              name_Token[this] := 1672502729;
[L1336]              symbol_Token[this] := 624073;
[L1337]              decimals_Token[this] := 18;
[L1338]              _balances_Token[this] := zeroRefintArr();
[L1339]              sum__balances0[this] := 0;
[L1340]              _allowed_Token[this] := zeroRefRefintArr();
[L1341]              sum__allowed1[this] := 0;
[L1342]              _totalSupply_Token[this] := 0;
[L1344]              amount_s261 := nonlinearMul(3 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_Token[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1345]  CALL        call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1345]  RET         call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1346]  COND FALSE  !(revert)
[L1349]              _totalSupply_Token[this] := __var_1;
[L1350]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][banker_s261];
[L1351]              _balances_Token[this][banker_s261] := amount_s261;
[L1352]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][banker_s261];
[L1353]              assert { :EventEmitted "Transfer_Token" } true;
[L1378]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1379]  COND FALSE  !(revert)
[L232]   RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L233]               assume !revert && gas >= 0;
[L2372]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L2373]              assume !revert && gas >= 0;
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND FALSE  !(choice == 11)
[L2293]  COND TRUE   choice == 10
[L2294]              gas := gas - 21000;
[L2295]  COND TRUE   gas >= 0
[L2296]              assume value_s335 >= 0 && value_s335 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]              assume msgvalue_MSG == 0;
[L2298]  CALL        call __ret_0_approve := approve~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, spender_s335, value_s335);
[L463]               havoc __exception;
[L464]               revert := false;
[L465]   COND FALSE  !(__exception)
[L486]   CALL        call __ret_0_ := approve~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, spender_s335, value_s335);
[L1452]  CALL        call _approve~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s335, value_s335);
[L1634]              __var_8 := null;
[L1635]  COND FALSE  !(!(spender_s510 != null))
[L1639]              __var_9 := null;
[L1640]  COND FALSE  !(!(owner_s510 != null))
[L1644]              sum__allowed1[owner_s510] := sum__allowed1[owner_s510] - _allowed_Token[this][owner_s510][spender_s510];
[L1645]              _allowed_Token[this][owner_s510][spender_s510] := value_s510;
[L1646]              sum__allowed1[owner_s510] := sum__allowed1[owner_s510] + _allowed_Token[this][owner_s510][spender_s510];
[L1647]              assert { :EventEmitted "Approval_Token" } true;
[L1452]  RET         call _approve~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s335, value_s335);
[L1453]  COND FALSE  !(revert)
[L1456]              __ret_0_ := true;
[L486]   RET         call __ret_0_ := approve~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, spender_s335, value_s335);
[L487]               assume !revert && gas >= 0;
[L2298]  RET         call __ret_0_approve := approve~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, spender_s335, value_s335);
[L2376]  RET         call CorralChoice_Token(this);
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND FALSE  !(choice == 11)
[L2293]  COND FALSE  !(choice == 10)
[L2300]  COND TRUE   choice == 9
[L2301]              gas := gas - 21000;
[L2302]  COND TRUE   gas >= 0
[L2303]              assume value_s370 >= 0 && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2304]              assume msgvalue_MSG == 0;
[L2305]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s370 != to_s370 && ((value_s370 > _balances_Token[this][from_s370] || value_s370 > _allowed_Token[this][from_s370][msgsender_MSG]) || _balances_Token[this][to_s370] + value_s370 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s370 >= 0) && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s370] >= 0) && _balances_Token[this][to_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][from_s370] >= 0) && _balances_Token[this][from_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_Token[this][from_s370][msgsender_MSG] >= 0) && _allowed_Token[this][from_s370][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_Token0 := true;
[L2]                 call_transferFrom_Token0 := false;
[L2]                 revert := revert_hold;
[L517]               havoc __exception;
[L518]               revert := false;
[L519]   COND FALSE  !(__exception)
[L540]   CALL        call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1482]  CALL        call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1589]              __var_5 := null;
[L1590]  COND FALSE  !(!(to_s470 != null))
[L1594]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1594]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1595]  COND FALSE  !(revert)
[L1598]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][from_s470];
[L1599]              _balances_Token[this][from_s470] := __var_6;
[L1600]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][from_s470];
[L1601]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1601]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1602]  COND FALSE  !(revert)
[L1605]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][to_s470];
[L1606]              _balances_Token[this][to_s470] := __var_7;
[L1607]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][to_s470];
[L1608]              assert { :EventEmitted "Transfer_Token" } true;
[L1482]  RET         call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1483]  COND FALSE  !(revert)
[L1486]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_Token[this][from_s370][msgsender_MSG], value_s370);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1486]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_Token[this][from_s370][msgsender_MSG], value_s370);
[L1487]  COND FALSE  !(revert)
[L1490]  CALL        call _approve~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, msgsender_MSG, __var_2);
[L1634]              __var_8 := null;
[L1635]  COND FALSE  !(!(spender_s510 != null))
[L1639]              __var_9 := null;
[L1640]  COND FALSE  !(!(owner_s510 != null))
[L1644]              sum__allowed1[owner_s510] := sum__allowed1[owner_s510] - _allowed_Token[this][owner_s510][spender_s510];
[L1645]              _allowed_Token[this][owner_s510][spender_s510] := value_s510;
[L1646]              sum__allowed1[owner_s510] := sum__allowed1[owner_s510] + _allowed_Token[this][owner_s510][spender_s510];
[L1647]              assert { :EventEmitted "Approval_Token" } true;
[L1490]  RET         call _approve~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, msgsender_MSG, __var_2);
[L1491]  COND FALSE  !(revert)
[L1494]              __ret_0_ := true;
[L540]   RET         call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L541]               assume !revert && gas >= 0;
[L2305]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2376]  RET         call CorralChoice_Token(this);

Loop:
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND FALSE  !(choice == 11)
[L2293]  COND FALSE  !(choice == 10)
[L2300]  COND TRUE   choice == 9
[L2301]              gas := gas - 21000;
[L2302]  COND TRUE   gas >= 0
[L2303]              assume value_s370 >= 0 && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2304]              assume msgvalue_MSG == 0;
[L2305]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s370 != to_s370 && ((value_s370 > _balances_Token[this][from_s370] || value_s370 > _allowed_Token[this][from_s370][msgsender_MSG]) || _balances_Token[this][to_s370] + value_s370 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s370 >= 0) && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s370] >= 0) && _balances_Token[this][to_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][from_s370] >= 0) && _balances_Token[this][from_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_Token[this][from_s370][msgsender_MSG] >= 0) && _allowed_Token[this][from_s370][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_Token0 := true;
[L2]                 call_transferFrom_Token0 := false;
[L2]                 revert := revert_hold;
[L517]               havoc __exception;
[L518]               revert := false;
[L519]   COND FALSE  !(__exception)
[L540]   CALL        call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1482]  CALL        call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1589]              __var_5 := null;
[L1590]  COND FALSE  !(!(to_s470 != null))
[L1594]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1594]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1595]  COND FALSE  !(revert)
[L1598]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][from_s470];
[L1599]              _balances_Token[this][from_s470] := __var_6;
[L1600]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][from_s470];
[L1601]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1601]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1602]  COND FALSE  !(revert)
[L1605]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][to_s470];
[L1606]              _balances_Token[this][to_s470] := __var_7;
[L1607]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][to_s470];
[L1608]              assert { :EventEmitted "Transfer_Token" } true;
[L1482]  RET         call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1483]  COND FALSE  !(revert)
[L1486]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_Token[this][from_s370][msgsender_MSG], value_s370);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1486]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_Token[this][from_s370][msgsender_MSG], value_s370);
[L1487]  COND FALSE  !(revert)
[L1490]  CALL        call _approve~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, msgsender_MSG, __var_2);
[L1634]              __var_8 := null;
[L1635]  COND FALSE  !(!(spender_s510 != null))
[L1639]              __var_9 := null;
[L1640]  COND FALSE  !(!(owner_s510 != null))
[L1644]              sum__allowed1[owner_s510] := sum__allowed1[owner_s510] - _allowed_Token[this][owner_s510][spender_s510];
[L1645]              _allowed_Token[this][owner_s510][spender_s510] := value_s510;
[L1646]              sum__allowed1[owner_s510] := sum__allowed1[owner_s510] + _allowed_Token[this][owner_s510][spender_s510];
[L1647]              assert { :EventEmitted "Approval_Token" } true;
[L1490]  RET         call _approve~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, msgsender_MSG, __var_2);
[L1491]  COND FALSE  !(revert)
[L1494]              __ret_0_ := true;
[L540]   RET         call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L541]               assume !revert && gas >= 0;
[L2305]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2376]  RET         call CorralChoice_Token(this);

[2020-11-25 06:15:35,084 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:15:35,084 INFO  L82        PathProgramCache]: Analyzing trace with hash 994977836, now seen corresponding path program 1 times
[2020-11-25 06:15:35,084 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:15:35,099 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:15:35,344 INFO  L134       CoverageAnalysis]: Checked inductivity of 49 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 49 trivial. 0 not checked.
[2020-11-25 06:15:35,344 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:15:35,344 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 06:15:35,345 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:15:35,345 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 06:15:35,345 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=43, Invalid=299, Unknown=0, NotChecked=0, Total=342
[2020-11-25 06:15:35,345 INFO  L87              Difference]: Start difference. First operand 1510 states and 1636 transitions. cyclomatic complexity: 129 Second operand 19 states.
[2020-11-25 06:15:36,584 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:15:36,584 INFO  L93              Difference]: Finished difference Result 1564 states and 1701 transitions.
[2020-11-25 06:15:36,585 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 06:15:36,585 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1564 states and 1701 transitions.
[2020-11-25 06:15:36,588 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:15:36,591 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1564 states to 1564 states and 1701 transitions.
[2020-11-25 06:15:36,592 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 563
[2020-11-25 06:15:36,592 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 563
[2020-11-25 06:15:36,592 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1564 states and 1701 transitions.
[2020-11-25 06:15:36,593 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:15:36,594 INFO  L728         BuchiCegarLoop]: Abstraction has 1564 states and 1701 transitions.
[2020-11-25 06:15:36,595 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1564 states and 1701 transitions.
[2020-11-25 06:15:36,603 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1564 to 1521.
[2020-11-25 06:15:36,604 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1521 states.
[2020-11-25 06:15:36,607 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1521 states to 1521 states and 1657 transitions.
[2020-11-25 06:15:36,607 INFO  L751         BuchiCegarLoop]: Abstraction has 1521 states and 1657 transitions.
[2020-11-25 06:15:36,607 INFO  L631         BuchiCegarLoop]: Abstraction has 1521 states and 1657 transitions.
[2020-11-25 06:15:36,607 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 06:15:36,607 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1521 states and 1657 transitions.
[2020-11-25 06:15:36,610 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:15:36,610 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:15:36,610 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:15:36,612 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:15:36,612 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_Token0 := false;
[L2]                 call_transferFrom_Token0 := false;
[L2]     CALL        call main();
[L2366]              assume null == 0;
[L2367]  CALL        call this := FreshRefGenerator__success();
[L1107]              havoc newRef;
[L1108]              assume Alloc[newRef] == false;
[L1109]              Alloc[newRef] := true;
[L1110]              assume newRef != null;
[L2367]  RET         call this := FreshRefGenerator__success();
[L2368]              assume now >= 0;
[L2369]              assume DType[this] == Token;
[L2370]              assume msgvalue_MSG == 0;
[L2371]              gas := gas - 53000;
[L2372]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L209]               havoc __exception;
[L210]               revert := false;
[L211]   COND FALSE  !(__exception)
[L232]   CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1374]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1295]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1280]              assume msgsender_MSG != null;
[L1281]              Balance[this] := 0;
[L1295]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1296]  COND FALSE  !(revert)
[L1374]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1375]  COND FALSE  !(revert)
[L1378]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1333]              assume msgsender_MSG != null;
[L1334]              Balance[this] := 0;
[L1335]              name_Token[this] := 1672502729;
[L1336]              symbol_Token[this] := 624073;
[L1337]              decimals_Token[this] := 18;
[L1338]              _balances_Token[this] := zeroRefintArr();
[L1339]              sum__balances0[this] := 0;
[L1340]              _allowed_Token[this] := zeroRefRefintArr();
[L1341]              sum__allowed1[this] := 0;
[L1342]              _totalSupply_Token[this] := 0;
[L1344]              amount_s261 := nonlinearMul(3 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_Token[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1345]  CALL        call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1345]  RET         call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1346]  COND FALSE  !(revert)
[L1349]              _totalSupply_Token[this] := __var_1;
[L1350]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][banker_s261];
[L1351]              _balances_Token[this][banker_s261] := amount_s261;
[L1352]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][banker_s261];
[L1353]              assert { :EventEmitted "Transfer_Token" } true;
[L1378]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1379]  COND FALSE  !(revert)
[L232]   RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L233]               assume !revert && gas >= 0;
[L2372]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L2373]              assume !revert && gas >= 0;
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND FALSE  !(choice == 11)
[L2293]  COND FALSE  !(choice == 10)
[L2300]  COND TRUE   choice == 9
[L2301]              gas := gas - 21000;
[L2302]  COND TRUE   gas >= 0
[L2303]              assume value_s370 >= 0 && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2304]              assume msgvalue_MSG == 0;
[L2305]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s370 != to_s370 && ((value_s370 > _balances_Token[this][from_s370] || value_s370 > _allowed_Token[this][from_s370][msgsender_MSG]) || _balances_Token[this][to_s370] + value_s370 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s370 >= 0) && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s370] >= 0) && _balances_Token[this][to_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][from_s370] >= 0) && _balances_Token[this][from_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_Token[this][from_s370][msgsender_MSG] >= 0) && _allowed_Token[this][from_s370][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L517]               havoc __exception;
[L518]               revert := false;
[L519]   COND FALSE  !(__exception)
[L540]   CALL        call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1482]  CALL        call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1589]              __var_5 := null;
[L1590]  COND FALSE  !(!(to_s470 != null))
[L1594]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1594]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1595]  COND FALSE  !(revert)
[L1598]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][from_s470];
[L1599]              _balances_Token[this][from_s470] := __var_6;
[L1600]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][from_s470];
[L1601]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1601]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1602]  COND FALSE  !(revert)
[L1605]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][to_s470];
[L1606]              _balances_Token[this][to_s470] := __var_7;
[L1607]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][to_s470];
[L1608]              assert { :EventEmitted "Transfer_Token" } true;
[L1482]  RET         call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1483]  COND FALSE  !(revert)
[L1486]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_Token[this][from_s370][msgsender_MSG], value_s370);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1486]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_Token[this][from_s370][msgsender_MSG], value_s370);
[L1487]  COND FALSE  !(revert)
[L1490]  CALL        call _approve~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, msgsender_MSG, __var_2);
[L1634]              __var_8 := null;
[L1635]  COND FALSE  !(!(spender_s510 != null))
[L1639]              __var_9 := null;
[L1640]  COND FALSE  !(!(owner_s510 != null))
[L1644]              sum__allowed1[owner_s510] := sum__allowed1[owner_s510] - _allowed_Token[this][owner_s510][spender_s510];
[L1645]              _allowed_Token[this][owner_s510][spender_s510] := value_s510;
[L1646]              sum__allowed1[owner_s510] := sum__allowed1[owner_s510] + _allowed_Token[this][owner_s510][spender_s510];
[L1647]              assert { :EventEmitted "Approval_Token" } true;
[L1490]  RET         call _approve~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, msgsender_MSG, __var_2);
[L1491]  COND FALSE  !(revert)
[L1494]              __ret_0_ := true;
[L540]   RET         call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L541]               assume !revert && gas >= 0;
[L2305]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2376]  RET         call CorralChoice_Token(this);
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND FALSE  !(choice == 11)
[L2293]  COND FALSE  !(choice == 10)
[L2300]  COND TRUE   choice == 9
[L2301]              gas := gas - 21000;
[L2302]  COND TRUE   gas >= 0
[L2303]              assume value_s370 >= 0 && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2304]              assume msgvalue_MSG == 0;
[L2305]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s370 != to_s370 && ((value_s370 > _balances_Token[this][from_s370] || value_s370 > _allowed_Token[this][from_s370][msgsender_MSG]) || _balances_Token[this][to_s370] + value_s370 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s370 >= 0) && value_s370 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s370] >= 0) && _balances_Token[this][to_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][from_s370] >= 0) && _balances_Token[this][from_s370] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_Token[this][from_s370][msgsender_MSG] >= 0) && _allowed_Token[this][from_s370][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_Token0 := true;
[L2]                 call_transferFrom_Token0 := false;
[L2]                 revert := revert_hold;
[L517]               havoc __exception;
[L518]               revert := false;
[L519]   COND FALSE  !(__exception)
[L540]   CALL        call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1482]  CALL        call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1589]              __var_5 := null;
[L1590]  COND FALSE  !(!(to_s470 != null))
[L1594]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1594]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1595]  COND FALSE  !(revert)
[L1598]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][from_s470];
[L1599]              _balances_Token[this][from_s470] := __var_6;
[L1600]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][from_s470];
[L1601]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1601]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1602]  COND FALSE  !(revert)
[L1605]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][to_s470];
[L1606]              _balances_Token[this][to_s470] := __var_7;
[L1607]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][to_s470];
[L1608]              assert { :EventEmitted "Transfer_Token" } true;
[L1482]  RET         call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L1483]  COND FALSE  !(revert)
[L1486]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_Token[this][from_s370][msgsender_MSG], value_s370);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1486]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_Token[this][from_s370][msgsender_MSG], value_s370);
[L1487]  COND FALSE  !(revert)
[L1490]  CALL        call _approve~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, msgsender_MSG, __var_2);
[L1634]              __var_8 := null;
[L1635]  COND FALSE  !(!(spender_s510 != null))
[L1639]              __var_9 := null;
[L1640]  COND FALSE  !(!(owner_s510 != null))
[L1644]              sum__allowed1[owner_s510] := sum__allowed1[owner_s510] - _allowed_Token[this][owner_s510][spender_s510];
[L1645]              _allowed_Token[this][owner_s510][spender_s510] := value_s510;
[L1646]              sum__allowed1[owner_s510] := sum__allowed1[owner_s510] + _allowed_Token[this][owner_s510][spender_s510];
[L1647]              assert { :EventEmitted "Approval_Token" } true;
[L1490]  RET         call _approve~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, msgsender_MSG, __var_2);
[L1491]  COND FALSE  !(revert)
[L1494]              __ret_0_ := true;
[L540]   RET         call __ret_0_ := transferFrom~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L541]               assume !revert && gas >= 0;
[L2305]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, from_s370, to_s370, value_s370);
[L2376]  RET         call CorralChoice_Token(this);

Loop:
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND FALSE  !(gas >= 0)
[L2376]  RET         call CorralChoice_Token(this);

[2020-11-25 06:15:36,616 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:15:36,617 INFO  L82        PathProgramCache]: Analyzing trace with hash -34555952, now seen corresponding path program 1 times
[2020-11-25 06:15:36,617 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:15:36,655 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:15:36,839 INFO  L134       CoverageAnalysis]: Checked inductivity of 69 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 67 trivial. 0 not checked.
[2020-11-25 06:15:36,839 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:15:36,839 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 06:15:36,840 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:15:36,840 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 06:15:36,840 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=38, Invalid=234, Unknown=0, NotChecked=0, Total=272
[2020-11-25 06:15:36,840 INFO  L87              Difference]: Start difference. First operand 1521 states and 1657 transitions. cyclomatic complexity: 141 Second operand 17 states.
[2020-11-25 06:15:37,546 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:15:37,546 INFO  L93              Difference]: Finished difference Result 930 states and 1013 transitions.
[2020-11-25 06:15:37,546 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 06:15:37,547 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 930 states and 1013 transitions.
[2020-11-25 06:15:37,548 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 06:15:37,548 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 930 states to 0 states and 0 transitions.
[2020-11-25 06:15:37,548 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 06:15:37,548 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 06:15:37,548 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 06:15:37,549 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:15:37,549 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 06:15:37,549 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 06:15:37,549 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 06:15:37,549 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 06:15:37,549 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 06:15:37,549 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 06:15:37,549 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 06:15:37,552 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:15:37 BasicIcfg
[2020-11-25 06:15:37,552 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 06:15:37,552 INFO  L168              Benchmark]: Toolchain (without parser) took 6678.13 ms. Allocated memory was 1.0 GB in the beginning and 1.5 GB in the end (delta: 475.0 MB). Free memory was 940.6 MB in the beginning and 980.6 MB in the end (delta: -40.0 MB). Peak memory consumption was 435.0 MB. Max. memory is 15.3 GB.
[2020-11-25 06:15:37,553 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.34 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 06:15:37,553 INFO  L168              Benchmark]: Boogie Preprocessor took 81.49 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:15:37,553 INFO  L168              Benchmark]: UtopiaSpecLang took 54.25 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:15:37,554 INFO  L168              Benchmark]: Boogie Printer took 11.61 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 06:15:37,554 INFO  L168              Benchmark]: RCFGBuilder took 578.05 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 865.4 MB in the end (delta: 64.4 MB). Peak memory consumption was 64.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:15:37,555 INFO  L168              Benchmark]: UtopiaLTL2Aut took 43.91 ms. Allocated memory is still 1.0 GB. Free memory was 865.4 MB in the beginning and 861.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 06:15:37,555 INFO  L168              Benchmark]: BÃ¼chi Program Product took 962.07 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 58.7 MB). Free memory was 861.8 MB in the beginning and 893.8 MB in the end (delta: -31.9 MB). Peak memory consumption was 146.8 MB. Max. memory is 15.3 GB.
[2020-11-25 06:15:37,555 INFO  L168              Benchmark]: BlockEncodingV2 took 77.75 ms. Allocated memory is still 1.1 GB. Free memory was 893.8 MB in the beginning and 852.7 MB in the end (delta: 41.1 MB). Peak memory consumption was 41.1 MB. Max. memory is 15.3 GB.
[2020-11-25 06:15:37,555 INFO  L168              Benchmark]: BuchiAutomizer took 4865.94 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 416.3 MB). Free memory was 852.7 MB in the beginning and 980.6 MB in the end (delta: -127.9 MB). Peak memory consumption was 288.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:15:37,558 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2002 locations, 3383 edges
  - StatisticsResult: Encoded RCFG
    1961 locations, 3293 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.34 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 81.49 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 54.25 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 11.61 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 578.05 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 865.4 MB in the end (delta: 64.4 MB). Peak memory consumption was 64.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 43.91 ms. Allocated memory is still 1.0 GB. Free memory was 865.4 MB in the beginning and 861.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 962.07 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 58.7 MB). Free memory was 861.8 MB in the beginning and 893.8 MB in the end (delta: -31.9 MB). Peak memory consumption was 146.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 77.75 ms. Allocated memory is still 1.1 GB. Free memory was 893.8 MB in the beginning and 852.7 MB in the end (delta: 41.1 MB). Peak memory consumption was 41.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 4865.94 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 416.3 MB). Free memory was 852.7 MB in the beginning and 980.6 MB in the end (delta: -127.9 MB). Peak memory consumption was 288.4 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    825 locations, 1041 edges
  - StatisticsResult: BuchiProgram size
    2002 locations, 3383 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 19 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 4.8s and 8 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.8s. Construction of modules took 2.4s. BÃ¼chi inclusion checks took 1.0s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 6 MinimizatonAttempts, 1372 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 1796 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 11838 SDtfs, 10645 SDslu, 21359 SDs, 0 SdLazy, 34840 SolverSat, 1805 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_Token0) ==> ( <>(fail_transferFrom_Token0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
