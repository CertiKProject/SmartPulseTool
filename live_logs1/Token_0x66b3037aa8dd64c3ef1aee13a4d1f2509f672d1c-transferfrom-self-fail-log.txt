This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 05:59:10,711 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 05:59:10,713 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 05:59:10,723 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 05:59:10,724 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 05:59:10,724 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 05:59:10,725 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 05:59:10,726 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 05:59:10,728 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 05:59:10,729 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 05:59:10,729 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 05:59:10,729 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 05:59:10,730 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 05:59:10,731 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 05:59:10,732 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 05:59:10,732 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 05:59:10,733 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 05:59:10,734 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 05:59:10,735 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 05:59:10,736 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 05:59:10,737 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 05:59:10,737 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 05:59:10,739 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 05:59:10,739 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 05:59:10,739 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 05:59:10,740 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 05:59:10,740 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 05:59:10,741 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 05:59:10,741 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 05:59:10,741 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 05:59:10,741 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 05:59:10,742 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 05:59:10,742 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 05:59:10,743 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 05:59:10,744 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 05:59:10,744 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 05:59:10,744 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 05:59:10,744 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 05:59:10,744 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 05:59:10,745 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 05:59:10,745 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 05:59:10,746 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 05:59:10,753 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 05:59:10,753 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 05:59:10,754 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 05:59:10,754 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 05:59:10,754 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 05:59:10,754 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 05:59:10,754 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 05:59:10,755 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 05:59:10,755 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 05:59:10,755 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 05:59:10,755 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 05:59:10,755 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 05:59:10,755 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 05:59:10,755 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 05:59:10,755 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 05:59:10,755 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 05:59:10,755 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 05:59:10,756 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 05:59:10,756 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 05:59:10,756 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 05:59:10,756 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 05:59:10,756 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 05:59:10,756 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 05:59:10,756 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 05:59:10,756 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 05:59:10,756 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 05:59:10,777 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 05:59:10,791 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 05:59:10,794 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 05:59:10,795 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 05:59:10,795 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 05:59:10,796 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl
[2020-11-25 05:59:10,796 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl'
[2020-11-25 05:59:10,882 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 05:59:10,883 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 05:59:10,884 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 05:59:10,884 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 05:59:10,884 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 05:59:10,899 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:10" (1/1) ...
[2020-11-25 05:59:10,901 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:10" (1/1) ...
[2020-11-25 05:59:10,931 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:10" (1/1) ...
[2020-11-25 05:59:10,932 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:10" (1/1) ...
[2020-11-25 05:59:10,957 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:10" (1/1) ...
[2020-11-25 05:59:10,969 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:10" (1/1) ...
[2020-11-25 05:59:10,981 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:10" (1/1) ...
[2020-11-25 05:59:10,992 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 05:59:10,993 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 05:59:10,993 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 05:59:10,995 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 05:59:10,998 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:10" (1/1) ...
[2020-11-25 05:59:11,015 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 05:59:11,020 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 05:59:11,027 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 05:59:11,034 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( sender_s271==recipient_s271 && ( amount_s271>_balances_ERC20[this][sender_s271] || amount_s271>_allowances_ERC20[this][sender_s271][msg.sender] ) ) && amount_s271>=0 ) && amount_s271<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s271]>=0 ) && _balances_ERC20[this][recipient_s271]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][sender_s271]>=0 ) && _balances_ERC20[this][sender_s271]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][sender_s271][msg.sender]>=0 ) && _allowances_ERC20[this][sender_s271][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[sender_s271,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IdentifierExpression[recipient_s271,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s271,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s271,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPGT,IdentifierExpression[amount_s271,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s271,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s271,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s271,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s271,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s271,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s271,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s271,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s271,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s271,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 05:59:11,040 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 05:59:11,040 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC200) ==> ( <>AP(fail_transferFrom_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 05:59:11,049 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:59:11 PropertyContainer
[2020-11-25 05:59:11,050 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 05:59:11,050 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 05:59:11,050 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 05:59:11,050 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 05:59:11,051 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:10" (1/2) ...
[2020-11-25 05:59:11,051 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 05:59:11,051 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 05:59:11,066 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:59:11" (2/2) ...
[2020-11-25 05:59:11,067 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 05:59:11,067 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 05:59:11,067 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 05:59:11,067 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 05:59:11,068 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:10" (1/2) ...
[2020-11-25 05:59:11,125 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 05:59:11,125 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 05:59:11,125 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 05:59:11,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 05:59:11,126 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 05:59:11,126 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 05:59:11,126 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 05:59:11,126 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 05:59:11,126 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 05:59:11,126 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 05:59:11,126 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 05:59:11,126 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 05:59:11,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 05:59:11,127 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 05:59:11,127 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 05:59:11,127 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 05:59:11,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 05:59:11,127 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllow_ERC20
[2020-11-25 05:59:11,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllow_ERC20
[2020-11-25 05:59:11,128 INFO  L130     BoogieDeclarations]: Found specification of procedure setExceptions~address_ERC20
[2020-11-25 05:59:11,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure setExceptions~address_ERC20
[2020-11-25 05:59:11,128 INFO  L130     BoogieDeclarations]: Found specification of procedure burnOwner_ERC20
[2020-11-25 05:59:11,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnOwner_ERC20
[2020-11-25 05:59:11,128 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 05:59:11,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 05:59:11,128 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 05:59:11,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 05:59:11,128 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 05:59:11,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 05:59:11,129 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 05:59:11,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 05:59:11,129 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 05:59:11,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 05:59:11,129 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 05:59:11,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 05:59:11,129 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 05:59:11,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 05:59:11,129 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 05:59:11,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 05:59:11,130 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 05:59:11,130 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 05:59:11,130 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 05:59:11,130 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 05:59:11,130 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 05:59:11,130 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 05:59:11,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 05:59:11,130 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 05:59:11,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 05:59:11,130 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 05:59:11,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 05:59:11,131 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 05:59:11,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 05:59:11,131 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 05:59:11,131 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 05:59:11,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 05:59:11,131 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 05:59:11,131 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 05:59:11,131 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 05:59:11,131 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 05:59:11,131 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token_NoBaseCtor__success
[2020-11-25 05:59:11,132 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token
[2020-11-25 05:59:11,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token
[2020-11-25 05:59:11,132 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_Token
[2020-11-25 05:59:11,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_Token
[2020-11-25 05:59:11,132 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Token
[2020-11-25 05:59:11,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Token
[2020-11-25 05:59:11,132 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_Token
[2020-11-25 05:59:11,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_Token
[2020-11-25 05:59:11,132 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_Token
[2020-11-25 05:59:11,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_Token
[2020-11-25 05:59:11,133 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Token
[2020-11-25 05:59:11,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Token
[2020-11-25 05:59:11,133 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_Token
[2020-11-25 05:59:11,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_Token
[2020-11-25 05:59:11,133 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 05:59:11,133 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 05:59:11,133 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 05:59:11,133 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 05:59:11,133 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 05:59:11,133 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 05:59:11,134 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 05:59:11,134 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 05:59:11,134 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 05:59:11,134 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 05:59:11,134 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 05:59:11,134 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 05:59:11,134 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 05:59:11,134 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Token
[2020-11-25 05:59:11,134 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 05:59:11,134 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 05:59:11,135 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 05:59:11,135 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 05:59:11,135 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 05:59:11,135 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 05:59:11,135 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 05:59:11,135 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 05:59:11,135 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 05:59:11,135 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 05:59:11,135 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 05:59:11,135 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 05:59:11,135 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllow_ERC20__success
[2020-11-25 05:59:11,136 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllow_ERC20__fail
[2020-11-25 05:59:11,136 INFO  L130     BoogieDeclarations]: Found specification of procedure setExceptions~address_ERC20__success
[2020-11-25 05:59:11,136 INFO  L130     BoogieDeclarations]: Found specification of procedure setExceptions~address_ERC20__fail
[2020-11-25 05:59:11,136 INFO  L130     BoogieDeclarations]: Found specification of procedure burnOwner_ERC20__success
[2020-11-25 05:59:11,136 INFO  L130     BoogieDeclarations]: Found specification of procedure burnOwner_ERC20__fail
[2020-11-25 05:59:11,136 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 05:59:11,136 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 05:59:11,136 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 05:59:11,136 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 05:59:11,136 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 05:59:11,137 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 05:59:11,137 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 05:59:11,137 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 05:59:11,137 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 05:59:11,137 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 05:59:11,137 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 05:59:11,137 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 05:59:11,137 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 05:59:11,137 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 05:59:11,137 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 05:59:11,137 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 05:59:11,138 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 05:59:11,138 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 05:59:11,138 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 05:59:11,138 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 05:59:11,138 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 05:59:11,138 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 05:59:11,138 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 05:59:11,138 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 05:59:11,138 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 05:59:11,138 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 05:59:11,139 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 05:59:11,139 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 05:59:11,139 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 05:59:11,139 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 05:59:11,139 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 05:59:11,139 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 05:59:11,139 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 05:59:11,139 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 05:59:11,139 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 05:59:11,139 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 05:59:11,139 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token_NoBaseCtor__fail
[2020-11-25 05:59:11,139 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token__success
[2020-11-25 05:59:11,140 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token__fail
[2020-11-25 05:59:11,140 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_Token__success
[2020-11-25 05:59:11,140 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_Token__fail
[2020-11-25 05:59:11,140 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Token__success
[2020-11-25 05:59:11,140 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Token__fail
[2020-11-25 05:59:11,140 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_Token__success
[2020-11-25 05:59:11,140 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_Token__fail
[2020-11-25 05:59:11,140 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_Token__success
[2020-11-25 05:59:11,140 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_Token__fail
[2020-11-25 05:59:11,140 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Token__success
[2020-11-25 05:59:11,140 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Token__fail
[2020-11-25 05:59:11,140 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_Token__success
[2020-11-25 05:59:11,141 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_Token__fail
[2020-11-25 05:59:11,141 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 05:59:11,141 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 05:59:11,141 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 05:59:11,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 05:59:11,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 05:59:11,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 05:59:11,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 05:59:11,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 05:59:11,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 05:59:11,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 05:59:11,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 05:59:11,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 05:59:11,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 05:59:11,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 05:59:11,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 05:59:11,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 05:59:11,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 05:59:11,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 05:59:11,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 05:59:11,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllow_ERC20__fail
[2020-11-25 05:59:11,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllow_ERC20__success
[2020-11-25 05:59:11,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure setExceptions~address_ERC20__fail
[2020-11-25 05:59:11,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure setExceptions~address_ERC20__success
[2020-11-25 05:59:11,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnOwner_ERC20__fail
[2020-11-25 05:59:11,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnOwner_ERC20__success
[2020-11-25 05:59:11,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 05:59:11,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 05:59:11,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 05:59:11,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 05:59:11,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 05:59:11,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 05:59:11,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 05:59:11,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 05:59:11,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 05:59:11,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 05:59:11,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 05:59:11,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 05:59:11,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 05:59:11,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 05:59:11,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 05:59:11,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 05:59:11,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 05:59:11,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 05:59:11,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 05:59:11,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 05:59:11,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 05:59:11,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 05:59:11,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 05:59:11,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 05:59:11,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 05:59:11,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 05:59:11,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 05:59:11,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 05:59:11,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 05:59:11,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 05:59:11,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 05:59:11,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 05:59:11,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 05:59:11,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 05:59:11,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 05:59:11,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 05:59:11,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 05:59:11,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 05:59:11,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 05:59:11,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 05:59:11,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 05:59:11,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 05:59:11,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 05:59:11,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 05:59:11,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 05:59:11,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 05:59:11,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token_NoBaseCtor__fail
[2020-11-25 05:59:11,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token_NoBaseCtor__success
[2020-11-25 05:59:11,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token__fail
[2020-11-25 05:59:11,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token__success
[2020-11-25 05:59:11,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_Token__fail
[2020-11-25 05:59:11,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_Token__success
[2020-11-25 05:59:11,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Token__fail
[2020-11-25 05:59:11,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Token__success
[2020-11-25 05:59:11,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_Token__fail
[2020-11-25 05:59:11,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_Token__success
[2020-11-25 05:59:11,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_Token__fail
[2020-11-25 05:59:11,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_Token__success
[2020-11-25 05:59:11,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Token__fail
[2020-11-25 05:59:11,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Token__success
[2020-11-25 05:59:11,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_Token__fail
[2020-11-25 05:59:11,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_Token__success
[2020-11-25 05:59:11,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 05:59:11,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 05:59:11,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 05:59:11,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 05:59:11,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 05:59:11,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 05:59:11,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 05:59:11,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 05:59:11,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 05:59:11,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 05:59:11,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 05:59:11,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 05:59:11,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 05:59:11,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 05:59:11,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 05:59:11,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 05:59:11,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Token
[2020-11-25 05:59:11,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 05:59:11,149 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 05:59:11,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 05:59:11,507 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:59:11,508 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:59:11,929 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 05:59:11,929 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 05:59:11,931 INFO  L202        PluginConnector]: Adding new model Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:59:11 BoogieIcfgContainer
[2020-11-25 05:59:11,932 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:59:11" (2/2) ...
[2020-11-25 05:59:11,932 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 05:59:11,932 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@37a9d1c8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:59:11, skipping insertion in model container
[2020-11-25 05:59:11,932 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 05:59:11,932 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 05:59:11,932 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 05:59:11,934 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 05:59:11,934 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:10" (1/3) ...
[2020-11-25 05:59:11,935 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@7c3641a4 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:59:11, skipping insertion in model container
[2020-11-25 05:59:11,935 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:59:11" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 05:59:11,974 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:59:11 NWAContainer
[2020-11-25 05:59:11,974 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 05:59:11,974 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 05:59:11,975 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 05:59:11,975 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 05:59:11,976 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:59:11" (3/4) ...
[2020-11-25 05:59:11,977 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5feb788c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:59:11, skipping insertion in model container
[2020-11-25 05:59:11,977 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:59:11" (4/4) ...
[2020-11-25 05:59:11,980 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 05:59:11,985 INFO  L110   BuchiProductObserver]: Initial RCFG 2125 locations, 2887 edges
[2020-11-25 05:59:11,985 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 05:59:11,998 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 05:59:13,475 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 05:59:13,482 INFO  L110   BuchiProductObserver]: BuchiProgram size 5236 locations, 9358 edges
[2020-11-25 05:59:13,482 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:59:13 BoogieIcfgContainer
[2020-11-25 05:59:13,482 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 05:59:13,482 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 05:59:13,482 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 05:59:13,483 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 05:59:13,484 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:59:13" (1/1) ...
[2020-11-25 05:59:13,594 INFO  L313           BlockEncoder]: Initial Icfg 5236 locations, 9358 edges
[2020-11-25 05:59:13,594 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 05:59:13,595 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 05:59:13,595 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 05:59:13,595 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 05:59:13,608 INFO  L70    emoveInfeasibleEdges]: Removed 156 edges and 15 locations because of local infeasibility
[2020-11-25 05:59:13,620 INFO  L70        RemoveSinkStates]: Removed 158 edges and 96 locations by removing sink states
[2020-11-25 05:59:13,631 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 05:59:13,634 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 05:59:13,638 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 05:59:13,638 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 05:59:13,641 INFO  L313           BlockEncoder]: Encoded RCFG 5105 locations, 9015 edges
[2020-11-25 05:59:13,641 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:59:13 BasicIcfg
[2020-11-25 05:59:13,641 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 05:59:13,642 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 05:59:13,643 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 05:59:13,647 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 05:59:13,648 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:59:13,648 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:10" (1/6) ...
[2020-11-25 05:59:13,651 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@43fe9740 and model type Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:59:13, skipping insertion in model container
[2020-11-25 05:59:13,651 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:59:13,651 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:59:11" (2/6) ...
[2020-11-25 05:59:13,651 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@43fe9740 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:59:13, skipping insertion in model container
[2020-11-25 05:59:13,652 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:59:13,652 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:59:11" (3/6) ...
[2020-11-25 05:59:13,652 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@43fe9740 and model type Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:59:13, skipping insertion in model container
[2020-11-25 05:59:13,653 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:59:13,653 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:59:11" (4/6) ...
[2020-11-25 05:59:13,653 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@43fe9740 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:59:13, skipping insertion in model container
[2020-11-25 05:59:13,653 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:59:13,654 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:59:13" (5/6) ...
[2020-11-25 05:59:13,654 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@43fe9740 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 05:59:13, skipping insertion in model container
[2020-11-25 05:59:13,654 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:59:13,654 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:59:13" (6/6) ...
[2020-11-25 05:59:13,655 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Token_0x66b3037aa8dd64c3ef1aee13a4d1f2509f672d1c_transferfrom-self-fail.bpl_BEv2
[2020-11-25 05:59:13,694 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 05:59:13,694 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 05:59:13,694 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 05:59:13,695 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 05:59:13,695 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 05:59:13,695 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 05:59:13,695 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 05:59:13,695 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 05:59:13,695 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 05:59:13,747 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5105 states.
[2020-11-25 05:59:13,844 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:13,844 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:59:13,844 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:59:13,854 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:13,854 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:13,854 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 05:59:13,854 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5105 states.
[2020-11-25 05:59:13,881 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:13,881 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:59:13,881 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:59:13,884 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:13,884 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND FALSE  !(__exception)
[L1478]  CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3817]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L3817]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND TRUE   revert
[L1478]  RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1479]              assume !revert && gas >= 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND TRUE   choice == 20
[L5555]              gas := gas - 21000;
[L5556]  COND FALSE  !(gas >= 0)
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:59:13,901 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:59:13,902 INFO  L82        PathProgramCache]: Analyzing trace with hash 1254025741, now seen corresponding path program 1 times
[2020-11-25 05:59:13,906 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:59:13,932 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:59:13,974 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:59:13,976 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:59:13,976 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 05:59:14,247 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:59:14,260 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 05:59:14,260 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 05:59:14,262 INFO  L87              Difference]: Start difference. First operand 5105 states. Second operand 4 states.
[2020-11-25 05:59:14,798 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:59:14,798 INFO  L93              Difference]: Finished difference Result 3410 states and 3963 transitions.
[2020-11-25 05:59:14,799 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 05:59:14,801 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3410 states and 3963 transitions.
[2020-11-25 05:59:14,826 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:14,849 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3410 states to 3410 states and 3963 transitions.
[2020-11-25 05:59:14,850 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 05:59:14,852 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 903
[2020-11-25 05:59:14,852 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3410 states and 3963 transitions.
[2020-11-25 05:59:14,859 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:59:14,859 INFO  L728         BuchiCegarLoop]: Abstraction has 3410 states and 3963 transitions.
[2020-11-25 05:59:14,872 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3410 states and 3963 transitions.
[2020-11-25 05:59:14,915 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3410 to 3410.
[2020-11-25 05:59:14,915 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3410 states.
[2020-11-25 05:59:14,920 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3410 states to 3410 states and 3963 transitions.
[2020-11-25 05:59:14,921 INFO  L751         BuchiCegarLoop]: Abstraction has 3410 states and 3963 transitions.
[2020-11-25 05:59:14,921 INFO  L631         BuchiCegarLoop]: Abstraction has 3410 states and 3963 transitions.
[2020-11-25 05:59:14,922 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 05:59:14,922 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3410 states and 3963 transitions.
[2020-11-25 05:59:14,929 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:14,929 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:59:14,929 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:59:14,931 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:14,931 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND FALSE  !(__exception)
[L1478]  CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3817]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L3817]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND TRUE   revert
[L1478]  RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1479]              assume !revert && gas >= 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND FALSE  !(choice == 18)
[L5573]  COND FALSE  !(choice == 17)
[L5579]  COND FALSE  !(choice == 16)
[L5586]  COND TRUE   choice == 15
[L5587]              gas := gas - 21000;
[L5588]  COND TRUE   gas >= 0
[L5589]              assume amount_s271 >= 0 && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5590]              assume msgvalue_MSG == 0;
[L5591]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s271 == recipient_s271 && (amount_s271 > _balances_ERC20[this][sender_s271] || amount_s271 > _allowances_ERC20[this][sender_s271][msgsender_MSG])) && amount_s271 >= 0) && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s271] >= 0) && _balances_ERC20[this][recipient_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s271] >= 0) && _balances_ERC20[this][sender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s271][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s271][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3037]  COND TRUE   DType[this] == Token
[L3038]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3343]              __var_15 := null;
[L3344]  COND TRUE   !(sender_s383 != null)
[L3345]              revert := true;
[L3038]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3039]  COND TRUE   revert
[L881]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L882]               assume !revert && gas >= 0;
[L5591]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L5701]  RET         call CorralChoice_Token(this);

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND FALSE  !(choice == 18)
[L5573]  COND FALSE  !(choice == 17)
[L5579]  COND FALSE  !(choice == 16)
[L5586]  COND TRUE   choice == 15
[L5587]              gas := gas - 21000;
[L5588]  COND TRUE   gas >= 0
[L5589]              assume amount_s271 >= 0 && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5590]              assume msgvalue_MSG == 0;
[L5591]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s271 == recipient_s271 && (amount_s271 > _balances_ERC20[this][sender_s271] || amount_s271 > _allowances_ERC20[this][sender_s271][msgsender_MSG])) && amount_s271 >= 0) && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s271] >= 0) && _balances_ERC20[this][recipient_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s271] >= 0) && _balances_ERC20[this][sender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s271][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s271][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3037]  COND TRUE   DType[this] == Token
[L3038]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3343]              __var_15 := null;
[L3344]  COND TRUE   !(sender_s383 != null)
[L3345]              revert := true;
[L3038]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3039]  COND TRUE   revert
[L881]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L882]               assume !revert && gas >= 0;
[L5591]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:59:14,935 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:59:14,935 INFO  L82        PathProgramCache]: Analyzing trace with hash -450651763, now seen corresponding path program 1 times
[2020-11-25 05:59:14,935 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:59:14,944 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:59:14,963 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:59:14,963 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:59:14,963 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:59:14,964 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:59:14,964 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:59:14,965 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:59:14,965 INFO  L87              Difference]: Start difference. First operand 3410 states and 3963 transitions. cyclomatic complexity: 555 Second operand 3 states.
[2020-11-25 05:59:15,065 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:59:15,065 INFO  L93              Difference]: Finished difference Result 4333 states and 4998 transitions.
[2020-11-25 05:59:15,065 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:59:15,066 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4333 states and 4998 transitions.
[2020-11-25 05:59:15,088 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:59:15,112 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4333 states to 4333 states and 4998 transitions.
[2020-11-25 05:59:15,112 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1182
[2020-11-25 05:59:15,113 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1182
[2020-11-25 05:59:15,114 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4333 states and 4998 transitions.
[2020-11-25 05:59:15,122 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:59:15,122 INFO  L728         BuchiCegarLoop]: Abstraction has 4333 states and 4998 transitions.
[2020-11-25 05:59:15,127 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4333 states and 4998 transitions.
[2020-11-25 05:59:15,176 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4333 to 3826.
[2020-11-25 05:59:15,177 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3826 states.
[2020-11-25 05:59:15,182 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3826 states to 3826 states and 4386 transitions.
[2020-11-25 05:59:15,183 INFO  L751         BuchiCegarLoop]: Abstraction has 3826 states and 4386 transitions.
[2020-11-25 05:59:15,183 INFO  L631         BuchiCegarLoop]: Abstraction has 3826 states and 4386 transitions.
[2020-11-25 05:59:15,183 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 05:59:15,183 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3826 states and 4386 transitions.
[2020-11-25 05:59:15,192 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:59:15,192 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:59:15,192 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:59:15,195 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:15,195 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND FALSE  !(__exception)
[L1478]  CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3817]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L3817]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3821]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L3826]              havoc __var_29;
[L3827]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L2681]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L2681]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L2685]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2685]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2686]  COND FALSE  !(revert)
[L2689]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2649]              assume msgsender_MSG != null;
[L2650]              Balance[this] := 0;
[L2651]              _balances_ERC20[this] := zeroRefintArr();
[L2652]              sum__balances0[this] := 0;
[L2653]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2654]              sum__allowances1[this] := 0;
[L2655]              exceptions_ERC20[this] := zeroRefboolArr();
[L2656]              uniswap_ERC20[this] := null;
[L2657]              _owner_ERC20[this] := null;
[L2658]              _totalSupply_ERC20[this] := 0;
[L2660]              _owner_ERC20[this] := owner_s119;
[L2689]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2690]  COND FALSE  !(revert)
[L3827]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L3828]  COND FALSE  !(revert)
[L3831]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3549]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3549]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3550]  COND FALSE  !(revert)
[L3553]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3524]              assume msgsender_MSG != null;
[L3525]              Balance[this] := 0;
[L3526]              _name_ERC20Detailed[this] := -1081022691;
[L3527]              _symbol_ERC20Detailed[this] := -1081022691;
[L3528]              _decimals_ERC20Detailed[this] := 0;
[L3530]              _name_ERC20Detailed[this] := name_s544;
[L3531]              _symbol_ERC20Detailed[this] := symbol_s544;
[L3532]              _decimals_ERC20Detailed[this] := decimals_s544;
[L3553]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3554]  COND FALSE  !(revert)
[L3831]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3763]              assume msgsender_MSG != null;
[L3764]              Balance[this] := 0;
[L3765]              governance_Token[this] := null;
[L3766]              minters_Token[this] := zeroRefboolArr();
[L3769]              havoc __var_27;
[L3770]              governance_Token[this] := __var_27;
[L3772]              havoc __var_28;
[L3773]  CALL        call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3902]  COND TRUE   !(msgsender_MSG == governance_Token[this])
[L3903]              revert := true;
[L3773]  RET         call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3774]  COND TRUE   revert
[L3835]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3836]  COND FALSE  !(revert)
[L1478]  RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1479]              assume !revert && gas >= 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND FALSE  !(choice == 18)
[L5573]  COND FALSE  !(choice == 17)
[L5579]  COND FALSE  !(choice == 16)
[L5586]  COND TRUE   choice == 15
[L5587]              gas := gas - 21000;
[L5588]  COND TRUE   gas >= 0
[L5589]              assume amount_s271 >= 0 && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5590]              assume msgvalue_MSG == 0;
[L5591]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s271 == recipient_s271 && (amount_s271 > _balances_ERC20[this][sender_s271] || amount_s271 > _allowances_ERC20[this][sender_s271][msgsender_MSG])) && amount_s271 >= 0) && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s271] >= 0) && _balances_ERC20[this][recipient_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s271] >= 0) && _balances_ERC20[this][sender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s271][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s271][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3037]  COND TRUE   DType[this] == Token
[L3038]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3343]              __var_15 := null;
[L3344]  COND TRUE   !(sender_s383 != null)
[L3345]              revert := true;
[L3038]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3039]  COND TRUE   revert
[L881]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L882]               assume !revert && gas >= 0;
[L5591]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L5701]  RET         call CorralChoice_Token(this);

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND FALSE  !(choice == 18)
[L5573]  COND FALSE  !(choice == 17)
[L5579]  COND FALSE  !(choice == 16)
[L5586]  COND TRUE   choice == 15
[L5587]              gas := gas - 21000;
[L5588]  COND TRUE   gas >= 0
[L5589]              assume amount_s271 >= 0 && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5590]              assume msgvalue_MSG == 0;
[L5591]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s271 == recipient_s271 && (amount_s271 > _balances_ERC20[this][sender_s271] || amount_s271 > _allowances_ERC20[this][sender_s271][msgsender_MSG])) && amount_s271 >= 0) && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s271] >= 0) && _balances_ERC20[this][recipient_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s271] >= 0) && _balances_ERC20[this][sender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s271][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s271][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3037]  COND TRUE   DType[this] == Token
[L3038]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3343]              __var_15 := null;
[L3344]  COND TRUE   !(sender_s383 != null)
[L3345]              revert := true;
[L3038]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3039]  COND TRUE   revert
[L881]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L882]               assume !revert && gas >= 0;
[L5591]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:59:15,200 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:59:15,200 INFO  L82        PathProgramCache]: Analyzing trace with hash 70524700, now seen corresponding path program 1 times
[2020-11-25 05:59:15,201 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:59:15,214 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:59:15,263 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 05:59:15,263 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:59:15,263 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:59:15,264 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:59:15,264 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:59:15,264 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:59:15,264 INFO  L87              Difference]: Start difference. First operand 3826 states and 4386 transitions. cyclomatic complexity: 562 Second operand 3 states.
[2020-11-25 05:59:15,337 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:59:15,337 INFO  L93              Difference]: Finished difference Result 4334 states and 4895 transitions.
[2020-11-25 05:59:15,337 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:59:15,337 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4334 states and 4895 transitions.
[2020-11-25 05:59:15,350 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:59:15,368 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4334 states to 4092 states and 4617 transitions.
[2020-11-25 05:59:15,368 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1095
[2020-11-25 05:59:15,369 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1105
[2020-11-25 05:59:15,369 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4092 states and 4617 transitions.
[2020-11-25 05:59:15,374 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:59:15,374 INFO  L728         BuchiCegarLoop]: Abstraction has 4092 states and 4617 transitions.
[2020-11-25 05:59:15,377 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4092 states and 4617 transitions.
[2020-11-25 05:59:15,411 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4092 to 3684.
[2020-11-25 05:59:15,411 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3684 states.
[2020-11-25 05:59:15,416 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3684 states to 3684 states and 4104 transitions.
[2020-11-25 05:59:15,416 INFO  L751         BuchiCegarLoop]: Abstraction has 3684 states and 4104 transitions.
[2020-11-25 05:59:15,416 INFO  L631         BuchiCegarLoop]: Abstraction has 3684 states and 4104 transitions.
[2020-11-25 05:59:15,416 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 05:59:15,416 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3684 states and 4104 transitions.
[2020-11-25 05:59:15,422 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:59:15,422 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:59:15,422 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:59:15,425 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:15,426 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND FALSE  !(__exception)
[L1478]  CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3817]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L3817]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3821]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L3826]              havoc __var_29;
[L3827]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L2681]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L2681]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L2685]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2685]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2686]  COND FALSE  !(revert)
[L2689]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2649]              assume msgsender_MSG != null;
[L2650]              Balance[this] := 0;
[L2651]              _balances_ERC20[this] := zeroRefintArr();
[L2652]              sum__balances0[this] := 0;
[L2653]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2654]              sum__allowances1[this] := 0;
[L2655]              exceptions_ERC20[this] := zeroRefboolArr();
[L2656]              uniswap_ERC20[this] := null;
[L2657]              _owner_ERC20[this] := null;
[L2658]              _totalSupply_ERC20[this] := 0;
[L2660]              _owner_ERC20[this] := owner_s119;
[L2689]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2690]  COND FALSE  !(revert)
[L3827]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L3828]  COND FALSE  !(revert)
[L3831]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3549]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3549]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3550]  COND FALSE  !(revert)
[L3553]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3524]              assume msgsender_MSG != null;
[L3525]              Balance[this] := 0;
[L3526]              _name_ERC20Detailed[this] := -1081022691;
[L3527]              _symbol_ERC20Detailed[this] := -1081022691;
[L3528]              _decimals_ERC20Detailed[this] := 0;
[L3530]              _name_ERC20Detailed[this] := name_s544;
[L3531]              _symbol_ERC20Detailed[this] := symbol_s544;
[L3532]              _decimals_ERC20Detailed[this] := decimals_s544;
[L3553]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3554]  COND FALSE  !(revert)
[L3831]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3763]              assume msgsender_MSG != null;
[L3764]              Balance[this] := 0;
[L3765]              governance_Token[this] := null;
[L3766]              minters_Token[this] := zeroRefboolArr();
[L3769]              havoc __var_27;
[L3770]              governance_Token[this] := __var_27;
[L3772]              havoc __var_28;
[L3773]  CALL        call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3902]  COND FALSE  !(!(msgsender_MSG == governance_Token[this]))
[L3906]              minters_Token[this][_minter_s789] := true;
[L3773]  RET         call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3774]  COND FALSE  !(revert)
[L3777]  CALL        call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3859]  COND FALSE  !(!minters_Token[this][msgsender_MSG])
[L3863]  COND TRUE   DType[this] == Token
[L3864]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3399]              __var_19 := null;
[L3400]  COND FALSE  !(!(account_s426 != null))
[L3404]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3404]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3405]  COND FALSE  !(revert)
[L3408]              _totalSupply_ERC20[this] := __var_20;
[L3409]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3409]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3410]  COND FALSE  !(revert)
[L3413]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s426];
[L3414]              _balances_ERC20[this][account_s426] := __var_21;
[L3415]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s426];
[L3416]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3864]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3865]  COND FALSE  !(revert)
[L3777]  RET         call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3778]  COND FALSE  !(revert)
[L3835]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3836]  COND FALSE  !(revert)
[L1478]  RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1479]              assume !revert && gas >= 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND FALSE  !(choice == 18)
[L5573]  COND FALSE  !(choice == 17)
[L5579]  COND FALSE  !(choice == 16)
[L5586]  COND TRUE   choice == 15
[L5587]              gas := gas - 21000;
[L5588]  COND TRUE   gas >= 0
[L5589]              assume amount_s271 >= 0 && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5590]              assume msgvalue_MSG == 0;
[L5591]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s271 == recipient_s271 && (amount_s271 > _balances_ERC20[this][sender_s271] || amount_s271 > _allowances_ERC20[this][sender_s271][msgsender_MSG])) && amount_s271 >= 0) && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s271] >= 0) && _balances_ERC20[this][recipient_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s271] >= 0) && _balances_ERC20[this][sender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s271][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s271][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3037]  COND TRUE   DType[this] == Token
[L3038]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3343]              __var_15 := null;
[L3344]  COND FALSE  !(!(sender_s383 != null))
[L3348]              __var_16 := null;
[L3349]  COND FALSE  !(!(recipient_s383 != null))
[L3353]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3353]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3354]  COND FALSE  !(revert)
[L3357]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s383];
[L3358]              _balances_ERC20[this][sender_s383] := __var_17;
[L3359]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s383];
[L3360]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3360]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3361]  COND FALSE  !(revert)
[L3364]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s383];
[L3365]              _balances_ERC20[this][recipient_s383] := __var_18;
[L3366]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s383];
[L3367]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3038]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3039]  COND FALSE  !(revert)
[L3050]  COND TRUE   DType[this] == Token
[L3051]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3051]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3052]  COND FALSE  !(revert)
[L3063]  COND FALSE  !(DType[this] == Token)
[L3068]  COND TRUE   DType[this] == ERC20
[L3069]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3069]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3070]  COND FALSE  !(revert)
[L3076]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3076]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3077]  COND FALSE  !(revert)
[L3080]  COND TRUE   DType[this] == Token
[L3081]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3491]              __var_25 := null;
[L3492]  COND FALSE  !(!(owner_s513 != null))
[L3496]              __var_26 := null;
[L3497]  COND FALSE  !(!(spender_s513 != null))
[L3501]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] - _allowances_ERC20[this][owner_s513][spender_s513];
[L3502]              _allowances_ERC20[this][owner_s513][spender_s513] := amount_s513;
[L3503]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] + _allowances_ERC20[this][owner_s513][spender_s513];
[L3504]              assert { :EventEmitted "Approval_ERC20" } true;
[L3081]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3082]  COND FALSE  !(revert)
[L3093]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L882]               assume !revert && gas >= 0;
[L5591]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L5701]  RET         call CorralChoice_Token(this);

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND FALSE  !(choice == 18)
[L5573]  COND FALSE  !(choice == 17)
[L5579]  COND FALSE  !(choice == 16)
[L5586]  COND TRUE   choice == 15
[L5587]              gas := gas - 21000;
[L5588]  COND TRUE   gas >= 0
[L5589]              assume amount_s271 >= 0 && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5590]              assume msgvalue_MSG == 0;
[L5591]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s271 == recipient_s271 && (amount_s271 > _balances_ERC20[this][sender_s271] || amount_s271 > _allowances_ERC20[this][sender_s271][msgsender_MSG])) && amount_s271 >= 0) && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s271] >= 0) && _balances_ERC20[this][recipient_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s271] >= 0) && _balances_ERC20[this][sender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s271][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s271][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3037]  COND TRUE   DType[this] == Token
[L3038]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3343]              __var_15 := null;
[L3344]  COND FALSE  !(!(sender_s383 != null))
[L3348]              __var_16 := null;
[L3349]  COND FALSE  !(!(recipient_s383 != null))
[L3353]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3353]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3354]  COND FALSE  !(revert)
[L3357]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s383];
[L3358]              _balances_ERC20[this][sender_s383] := __var_17;
[L3359]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s383];
[L3360]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3360]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3361]  COND FALSE  !(revert)
[L3364]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s383];
[L3365]              _balances_ERC20[this][recipient_s383] := __var_18;
[L3366]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s383];
[L3367]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3038]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3039]  COND FALSE  !(revert)
[L3050]  COND TRUE   DType[this] == Token
[L3051]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3051]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3052]  COND FALSE  !(revert)
[L3063]  COND FALSE  !(DType[this] == Token)
[L3068]  COND TRUE   DType[this] == ERC20
[L3069]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3069]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3070]  COND FALSE  !(revert)
[L3076]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3076]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3077]  COND FALSE  !(revert)
[L3080]  COND TRUE   DType[this] == Token
[L3081]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3491]              __var_25 := null;
[L3492]  COND FALSE  !(!(owner_s513 != null))
[L3496]              __var_26 := null;
[L3497]  COND FALSE  !(!(spender_s513 != null))
[L3501]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] - _allowances_ERC20[this][owner_s513][spender_s513];
[L3502]              _allowances_ERC20[this][owner_s513][spender_s513] := amount_s513;
[L3503]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] + _allowances_ERC20[this][owner_s513][spender_s513];
[L3504]              assert { :EventEmitted "Approval_ERC20" } true;
[L3081]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3082]  COND FALSE  !(revert)
[L3093]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L882]               assume !revert && gas >= 0;
[L5591]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:59:15,430 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:59:15,430 INFO  L82        PathProgramCache]: Analyzing trace with hash 219727204, now seen corresponding path program 1 times
[2020-11-25 05:59:15,431 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:59:15,449 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:59:15,529 INFO  L134       CoverageAnalysis]: Checked inductivity of 53 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 53 trivial. 0 not checked.
[2020-11-25 05:59:15,530 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:59:15,530 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:59:15,530 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:59:15,530 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:59:15,530 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:59:15,531 INFO  L87              Difference]: Start difference. First operand 3684 states and 4104 transitions. cyclomatic complexity: 422 Second operand 3 states.
[2020-11-25 05:59:15,572 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:59:15,572 INFO  L93              Difference]: Finished difference Result 3702 states and 4124 transitions.
[2020-11-25 05:59:15,572 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:59:15,573 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3702 states and 4124 transitions.
[2020-11-25 05:59:15,581 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:59:15,590 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3702 states to 3702 states and 4124 transitions.
[2020-11-25 05:59:15,590 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1045
[2020-11-25 05:59:15,591 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1045
[2020-11-25 05:59:15,591 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3702 states and 4124 transitions.
[2020-11-25 05:59:15,593 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:59:15,594 INFO  L728         BuchiCegarLoop]: Abstraction has 3702 states and 4124 transitions.
[2020-11-25 05:59:15,596 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3702 states and 4124 transitions.
[2020-11-25 05:59:15,621 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3702 to 3696.
[2020-11-25 05:59:15,621 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3696 states.
[2020-11-25 05:59:15,624 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3696 states to 3696 states and 4118 transitions.
[2020-11-25 05:59:15,624 INFO  L751         BuchiCegarLoop]: Abstraction has 3696 states and 4118 transitions.
[2020-11-25 05:59:15,624 INFO  L631         BuchiCegarLoop]: Abstraction has 3696 states and 4118 transitions.
[2020-11-25 05:59:15,624 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 05:59:15,625 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3696 states and 4118 transitions.
[2020-11-25 05:59:15,629 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:59:15,629 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:59:15,629 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:59:15,631 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:15,632 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND FALSE  !(__exception)
[L1478]  CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3817]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L3817]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3821]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L3826]              havoc __var_29;
[L3827]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L2681]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L2681]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L2685]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2685]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2686]  COND FALSE  !(revert)
[L2689]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2649]              assume msgsender_MSG != null;
[L2650]              Balance[this] := 0;
[L2651]              _balances_ERC20[this] := zeroRefintArr();
[L2652]              sum__balances0[this] := 0;
[L2653]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2654]              sum__allowances1[this] := 0;
[L2655]              exceptions_ERC20[this] := zeroRefboolArr();
[L2656]              uniswap_ERC20[this] := null;
[L2657]              _owner_ERC20[this] := null;
[L2658]              _totalSupply_ERC20[this] := 0;
[L2660]              _owner_ERC20[this] := owner_s119;
[L2689]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2690]  COND FALSE  !(revert)
[L3827]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L3828]  COND FALSE  !(revert)
[L3831]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3549]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3549]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3550]  COND FALSE  !(revert)
[L3553]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3524]              assume msgsender_MSG != null;
[L3525]              Balance[this] := 0;
[L3526]              _name_ERC20Detailed[this] := -1081022691;
[L3527]              _symbol_ERC20Detailed[this] := -1081022691;
[L3528]              _decimals_ERC20Detailed[this] := 0;
[L3530]              _name_ERC20Detailed[this] := name_s544;
[L3531]              _symbol_ERC20Detailed[this] := symbol_s544;
[L3532]              _decimals_ERC20Detailed[this] := decimals_s544;
[L3553]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3554]  COND FALSE  !(revert)
[L3831]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3763]              assume msgsender_MSG != null;
[L3764]              Balance[this] := 0;
[L3765]              governance_Token[this] := null;
[L3766]              minters_Token[this] := zeroRefboolArr();
[L3769]              havoc __var_27;
[L3770]              governance_Token[this] := __var_27;
[L3772]              havoc __var_28;
[L3773]  CALL        call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3902]  COND FALSE  !(!(msgsender_MSG == governance_Token[this]))
[L3906]              minters_Token[this][_minter_s789] := true;
[L3773]  RET         call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3774]  COND FALSE  !(revert)
[L3777]  CALL        call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3859]  COND FALSE  !(!minters_Token[this][msgsender_MSG])
[L3863]  COND TRUE   DType[this] == Token
[L3864]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3399]              __var_19 := null;
[L3400]  COND FALSE  !(!(account_s426 != null))
[L3404]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3404]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3405]  COND FALSE  !(revert)
[L3408]              _totalSupply_ERC20[this] := __var_20;
[L3409]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3409]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3410]  COND FALSE  !(revert)
[L3413]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s426];
[L3414]              _balances_ERC20[this][account_s426] := __var_21;
[L3415]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s426];
[L3416]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3864]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3865]  COND FALSE  !(revert)
[L3777]  RET         call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3778]  COND FALSE  !(revert)
[L3835]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3836]  COND FALSE  !(revert)
[L1478]  RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1479]              assume !revert && gas >= 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND FALSE  !(choice == 18)
[L5573]  COND FALSE  !(choice == 17)
[L5579]  COND FALSE  !(choice == 16)
[L5586]  COND TRUE   choice == 15
[L5587]              gas := gas - 21000;
[L5588]  COND TRUE   gas >= 0
[L5589]              assume amount_s271 >= 0 && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5590]              assume msgvalue_MSG == 0;
[L5591]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s271 == recipient_s271 && (amount_s271 > _balances_ERC20[this][sender_s271] || amount_s271 > _allowances_ERC20[this][sender_s271][msgsender_MSG])) && amount_s271 >= 0) && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s271] >= 0) && _balances_ERC20[this][recipient_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s271] >= 0) && _balances_ERC20[this][sender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s271][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s271][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3037]  COND TRUE   DType[this] == Token
[L3038]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3343]              __var_15 := null;
[L3344]  COND FALSE  !(!(sender_s383 != null))
[L3348]              __var_16 := null;
[L3349]  COND FALSE  !(!(recipient_s383 != null))
[L3353]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3353]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3354]  COND FALSE  !(revert)
[L3357]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s383];
[L3358]              _balances_ERC20[this][sender_s383] := __var_17;
[L3359]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s383];
[L3360]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3360]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3361]  COND FALSE  !(revert)
[L3364]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s383];
[L3365]              _balances_ERC20[this][recipient_s383] := __var_18;
[L3366]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s383];
[L3367]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3038]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3039]  COND FALSE  !(revert)
[L3050]  COND TRUE   DType[this] == Token
[L3051]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3051]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3052]  COND FALSE  !(revert)
[L3063]  COND TRUE   DType[this] == Token
[L3064]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3064]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L3076]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3076]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3077]  COND FALSE  !(revert)
[L3080]  COND TRUE   DType[this] == Token
[L3081]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3491]              __var_25 := null;
[L3492]  COND FALSE  !(!(owner_s513 != null))
[L3496]              __var_26 := null;
[L3497]  COND FALSE  !(!(spender_s513 != null))
[L3501]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] - _allowances_ERC20[this][owner_s513][spender_s513];
[L3502]              _allowances_ERC20[this][owner_s513][spender_s513] := amount_s513;
[L3503]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] + _allowances_ERC20[this][owner_s513][spender_s513];
[L3504]              assert { :EventEmitted "Approval_ERC20" } true;
[L3081]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3082]  COND FALSE  !(revert)
[L3093]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L882]               assume !revert && gas >= 0;
[L5591]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L5701]  RET         call CorralChoice_Token(this);

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND FALSE  !(choice == 18)
[L5573]  COND FALSE  !(choice == 17)
[L5579]  COND FALSE  !(choice == 16)
[L5586]  COND TRUE   choice == 15
[L5587]              gas := gas - 21000;
[L5588]  COND TRUE   gas >= 0
[L5589]              assume amount_s271 >= 0 && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5590]              assume msgvalue_MSG == 0;
[L5591]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s271 == recipient_s271 && (amount_s271 > _balances_ERC20[this][sender_s271] || amount_s271 > _allowances_ERC20[this][sender_s271][msgsender_MSG])) && amount_s271 >= 0) && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s271] >= 0) && _balances_ERC20[this][recipient_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s271] >= 0) && _balances_ERC20[this][sender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s271][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s271][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3037]  COND TRUE   DType[this] == Token
[L3038]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3343]              __var_15 := null;
[L3344]  COND FALSE  !(!(sender_s383 != null))
[L3348]              __var_16 := null;
[L3349]  COND FALSE  !(!(recipient_s383 != null))
[L3353]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3353]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3354]  COND FALSE  !(revert)
[L3357]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s383];
[L3358]              _balances_ERC20[this][sender_s383] := __var_17;
[L3359]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s383];
[L3360]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3360]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3361]  COND FALSE  !(revert)
[L3364]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s383];
[L3365]              _balances_ERC20[this][recipient_s383] := __var_18;
[L3366]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s383];
[L3367]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3038]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3039]  COND FALSE  !(revert)
[L3050]  COND TRUE   DType[this] == Token
[L3051]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3051]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3052]  COND FALSE  !(revert)
[L3063]  COND TRUE   DType[this] == Token
[L3064]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3064]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L3076]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3076]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3077]  COND FALSE  !(revert)
[L3080]  COND TRUE   DType[this] == Token
[L3081]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3491]              __var_25 := null;
[L3492]  COND FALSE  !(!(owner_s513 != null))
[L3496]              __var_26 := null;
[L3497]  COND FALSE  !(!(spender_s513 != null))
[L3501]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] - _allowances_ERC20[this][owner_s513][spender_s513];
[L3502]              _allowances_ERC20[this][owner_s513][spender_s513] := amount_s513;
[L3503]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] + _allowances_ERC20[this][owner_s513][spender_s513];
[L3504]              assert { :EventEmitted "Approval_ERC20" } true;
[L3081]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3082]  COND FALSE  !(revert)
[L3093]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L882]               assume !revert && gas >= 0;
[L5591]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:59:15,636 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:59:15,636 INFO  L82        PathProgramCache]: Analyzing trace with hash 41298034, now seen corresponding path program 1 times
[2020-11-25 05:59:15,637 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:59:15,653 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:59:15,797 INFO  L134       CoverageAnalysis]: Checked inductivity of 53 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 49 trivial. 0 not checked.
[2020-11-25 05:59:15,797 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:59:15,797 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 05:59:15,798 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:59:15,798 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 05:59:15,798 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=35, Invalid=237, Unknown=0, NotChecked=0, Total=272
[2020-11-25 05:59:15,798 INFO  L87              Difference]: Start difference. First operand 3696 states and 4118 transitions. cyclomatic complexity: 424 Second operand 17 states.
[2020-11-25 05:59:17,848 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:59:17,848 INFO  L93              Difference]: Finished difference Result 3788 states and 4222 transitions.
[2020-11-25 05:59:17,848 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 05:59:17,848 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3788 states and 4222 transitions.
[2020-11-25 05:59:17,855 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:59:17,864 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3788 states to 3788 states and 4222 transitions.
[2020-11-25 05:59:17,864 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1061
[2020-11-25 05:59:17,865 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1061
[2020-11-25 05:59:17,865 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3788 states and 4222 transitions.
[2020-11-25 05:59:17,868 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:59:17,868 INFO  L728         BuchiCegarLoop]: Abstraction has 3788 states and 4222 transitions.
[2020-11-25 05:59:17,871 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3788 states and 4222 transitions.
[2020-11-25 05:59:17,892 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3788 to 3547.
[2020-11-25 05:59:17,892 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3547 states.
[2020-11-25 05:59:17,895 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3547 states to 3547 states and 3932 transitions.
[2020-11-25 05:59:17,895 INFO  L751         BuchiCegarLoop]: Abstraction has 3547 states and 3932 transitions.
[2020-11-25 05:59:17,895 INFO  L631         BuchiCegarLoop]: Abstraction has 3547 states and 3932 transitions.
[2020-11-25 05:59:17,895 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 05:59:17,895 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3547 states and 3932 transitions.
[2020-11-25 05:59:17,899 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:17,899 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:59:17,899 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:59:17,901 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:17,901 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND TRUE   __exception
[L1450]              __tmp__Balance := Balance;
[L1451]              __tmp__DType := DType;
[L1452]              __tmp__Alloc := Alloc;
[L1453]              __tmp__balance_ADDR := balance_ADDR;
[L1454]              __tmp__M_Ref_int := M_Ref_int;
[L1455]              __tmp__sum__balances0 := sum__balances0;
[L1456]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1457]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1458]              __tmp__sum__allowances1 := sum__allowances1;
[L1459]              __tmp__M_Ref_bool := M_Ref_bool;
[L1460]              __tmp__sum_exceptions2 := sum_exceptions2;
[L1461]              __tmp__sum_minters3 := sum_minters3;
[L1462]              __tmp__Length := Length;
[L1463]              __tmp__now := now;
[L1464]              __tmp___balances_ERC20 := _balances_ERC20;
[L1465]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1466]              __tmp__exceptions_ERC20 := exceptions_ERC20;
[L1467]              __tmp__uniswap_ERC20 := uniswap_ERC20;
[L1468]              __tmp___owner_ERC20 := _owner_ERC20;
[L1469]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1470]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1471]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1472]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1473]              __tmp__governance_Token := governance_Token;
[L1474]              __tmp__minters_Token := minters_Token;
[L1475]  CALL        call Token_Token__fail(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2603]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2588]              assume msgsender_MSG != null;
[L2589]              __tmp__Balance[this] := 0;
[L2603]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2604]  COND FALSE  !(revert)
[L3788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3789]  COND FALSE  !(revert)
[L3792]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2571]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2556]              assume msgsender_MSG != null;
[L2557]              __tmp__Balance[this] := 0;
[L2571]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2572]  COND FALSE  !(revert)
[L3792]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3793]  COND FALSE  !(revert)
[L3797]              havoc __var_29;
[L3798]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L2665]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2603]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2588]              assume msgsender_MSG != null;
[L2589]              __tmp__Balance[this] := 0;
[L2603]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2604]  COND FALSE  !(revert)
[L2665]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2666]  COND FALSE  !(revert)
[L2669]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2571]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2556]              assume msgsender_MSG != null;
[L2557]              __tmp__Balance[this] := 0;
[L2571]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2572]  COND FALSE  !(revert)
[L2669]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2670]  COND FALSE  !(revert)
[L2673]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2632]              assume msgsender_MSG != null;
[L2633]              __tmp__Balance[this] := 0;
[L2634]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2635]              __tmp__sum__balances0[this] := 0;
[L2636]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2637]              __tmp__sum__allowances1[this] := 0;
[L2638]              __tmp__exceptions_ERC20[this] := zeroRefboolArr();
[L2639]              __tmp__uniswap_ERC20[this] := null;
[L2640]              __tmp___owner_ERC20[this] := null;
[L2641]              __tmp___totalSupply_ERC20[this] := 0;
[L2643]              __tmp___owner_ERC20[this] := owner_s119;
[L2673]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2674]  COND FALSE  !(revert)
[L3798]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L3799]  COND FALSE  !(revert)
[L3802]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3537]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2571]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2556]              assume msgsender_MSG != null;
[L2557]              __tmp__Balance[this] := 0;
[L2571]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2572]  COND FALSE  !(revert)
[L3537]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3538]  COND FALSE  !(revert)
[L3541]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3510]              assume msgsender_MSG != null;
[L3511]              __tmp__Balance[this] := 0;
[L3512]              __tmp___name_ERC20Detailed[this] := -1081022691;
[L3513]              __tmp___symbol_ERC20Detailed[this] := -1081022691;
[L3514]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3516]              __tmp___name_ERC20Detailed[this] := name_s544;
[L3517]              __tmp___symbol_ERC20Detailed[this] := symbol_s544;
[L3518]              __tmp___decimals_ERC20Detailed[this] := decimals_s544;
[L3541]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3542]  COND FALSE  !(revert)
[L3802]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3803]  COND FALSE  !(revert)
[L3806]  CALL        call Token_Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3737]              assume msgsender_MSG != null;
[L3738]              __tmp__Balance[this] := 0;
[L3739]              __tmp__governance_Token[this] := null;
[L3740]              __tmp__minters_Token[this] := zeroRefboolArr();
[L3743]              havoc __var_27;
[L3744]              __tmp__governance_Token[this] := __var_27;
[L3746]              havoc __var_28;
[L3747]  CALL        call addMinter~address_Token__fail(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3893]  COND FALSE  !(!(msgsender_MSG == __tmp__governance_Token[this]))
[L3897]              __tmp__minters_Token[this][_minter_s789] := true;
[L3747]  RET         call addMinter~address_Token__fail(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3748]  COND FALSE  !(revert)
[L3751]  CALL        call mint~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__governance_Token[this], amount_s730);
[L3843]  COND FALSE  !(!__tmp__minters_Token[this][msgsender_MSG])
[L3847]  COND TRUE   __tmp__DType[this] == Token
[L3848]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3375]              __var_19 := null;
[L3376]  COND FALSE  !(!(account_s426 != null))
[L3380]  CALL        call __var_20 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s426);
[L3630]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3631]  COND FALSE  !(!(c_s594 >= a_s594))
[L3635]              __ret_0_ := c_s594;
[L3380]  RET         call __var_20 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s426);
[L3381]  COND FALSE  !(revert)
[L3384]              __tmp___totalSupply_ERC20[this] := __var_20;
[L3385]  CALL        call __var_21 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s426], amount_s426);
[L3630]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3631]  COND FALSE  !(!(c_s594 >= a_s594))
[L3635]              __ret_0_ := c_s594;
[L3385]  RET         call __var_21 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s426], amount_s426);
[L3386]  COND FALSE  !(revert)
[L3389]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s426];
[L3390]              __tmp___balances_ERC20[this][account_s426] := __var_21;
[L3391]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s426];
[L3848]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3849]  COND FALSE  !(revert)
[L3751]  RET         call mint~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__governance_Token[this], amount_s730);
[L3752]  COND FALSE  !(revert)
[L3806]  RET         call Token_Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3807]  COND FALSE  !(revert)
[L1475]  RET         call Token_Token__fail(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1476]              assume revert || gas < 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND FALSE  !(choice == 18)
[L5573]  COND FALSE  !(choice == 17)
[L5579]  COND FALSE  !(choice == 16)
[L5586]  COND TRUE   choice == 15
[L5587]              gas := gas - 21000;
[L5588]  COND TRUE   gas >= 0
[L5589]              assume amount_s271 >= 0 && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5590]              assume msgvalue_MSG == 0;
[L5591]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s271 == recipient_s271 && (amount_s271 > _balances_ERC20[this][sender_s271] || amount_s271 > _allowances_ERC20[this][sender_s271][msgsender_MSG])) && amount_s271 >= 0) && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s271] >= 0) && _balances_ERC20[this][recipient_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s271] >= 0) && _balances_ERC20[this][sender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s271][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s271][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3037]  COND TRUE   DType[this] == Token
[L3038]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3343]              __var_15 := null;
[L3344]  COND FALSE  !(!(sender_s383 != null))
[L3348]              __var_16 := null;
[L3349]  COND FALSE  !(!(recipient_s383 != null))
[L3353]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3353]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3354]  COND FALSE  !(revert)
[L3357]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s383];
[L3358]              _balances_ERC20[this][sender_s383] := __var_17;
[L3359]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s383];
[L3360]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3360]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3361]  COND FALSE  !(revert)
[L3364]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s383];
[L3365]              _balances_ERC20[this][recipient_s383] := __var_18;
[L3366]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s383];
[L3367]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3038]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3039]  COND FALSE  !(revert)
[L3050]  COND TRUE   DType[this] == Token
[L3051]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3051]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3052]  COND FALSE  !(revert)
[L3063]  COND TRUE   DType[this] == Token
[L3064]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3064]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L3076]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3076]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3077]  COND FALSE  !(revert)
[L3080]  COND TRUE   DType[this] == Token
[L3081]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3491]              __var_25 := null;
[L3492]  COND FALSE  !(!(owner_s513 != null))
[L3496]              __var_26 := null;
[L3497]  COND FALSE  !(!(spender_s513 != null))
[L3501]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] - _allowances_ERC20[this][owner_s513][spender_s513];
[L3502]              _allowances_ERC20[this][owner_s513][spender_s513] := amount_s513;
[L3503]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] + _allowances_ERC20[this][owner_s513][spender_s513];
[L3504]              assert { :EventEmitted "Approval_ERC20" } true;
[L3081]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3082]  COND FALSE  !(revert)
[L3093]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L882]               assume !revert && gas >= 0;
[L5591]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L5701]  RET         call CorralChoice_Token(this);

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND FALSE  !(choice == 18)
[L5573]  COND FALSE  !(choice == 17)
[L5579]  COND FALSE  !(choice == 16)
[L5586]  COND TRUE   choice == 15
[L5587]              gas := gas - 21000;
[L5588]  COND TRUE   gas >= 0
[L5589]              assume amount_s271 >= 0 && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5590]              assume msgvalue_MSG == 0;
[L5591]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s271 == recipient_s271 && (amount_s271 > _balances_ERC20[this][sender_s271] || amount_s271 > _allowances_ERC20[this][sender_s271][msgsender_MSG])) && amount_s271 >= 0) && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s271] >= 0) && _balances_ERC20[this][recipient_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s271] >= 0) && _balances_ERC20[this][sender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s271][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s271][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3037]  COND TRUE   DType[this] == Token
[L3038]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3343]              __var_15 := null;
[L3344]  COND FALSE  !(!(sender_s383 != null))
[L3348]              __var_16 := null;
[L3349]  COND FALSE  !(!(recipient_s383 != null))
[L3353]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3353]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3354]  COND FALSE  !(revert)
[L3357]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s383];
[L3358]              _balances_ERC20[this][sender_s383] := __var_17;
[L3359]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s383];
[L3360]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3360]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3361]  COND FALSE  !(revert)
[L3364]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s383];
[L3365]              _balances_ERC20[this][recipient_s383] := __var_18;
[L3366]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s383];
[L3367]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3038]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3039]  COND FALSE  !(revert)
[L3050]  COND TRUE   DType[this] == Token
[L3051]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3051]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3052]  COND FALSE  !(revert)
[L3063]  COND TRUE   DType[this] == Token
[L3064]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3064]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L3076]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3076]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3077]  COND FALSE  !(revert)
[L3080]  COND TRUE   DType[this] == Token
[L3081]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3491]              __var_25 := null;
[L3492]  COND FALSE  !(!(owner_s513 != null))
[L3496]              __var_26 := null;
[L3497]  COND FALSE  !(!(spender_s513 != null))
[L3501]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] - _allowances_ERC20[this][owner_s513][spender_s513];
[L3502]              _allowances_ERC20[this][owner_s513][spender_s513] := amount_s513;
[L3503]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] + _allowances_ERC20[this][owner_s513][spender_s513];
[L3504]              assert { :EventEmitted "Approval_ERC20" } true;
[L3081]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3082]  COND FALSE  !(revert)
[L3093]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L882]               assume !revert && gas >= 0;
[L5591]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:59:17,905 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:59:17,905 INFO  L82        PathProgramCache]: Analyzing trace with hash -553760134, now seen corresponding path program 1 times
[2020-11-25 05:59:17,906 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:59:17,919 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:59:17,968 INFO  L134       CoverageAnalysis]: Checked inductivity of 53 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 48 trivial. 0 not checked.
[2020-11-25 05:59:17,968 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:59:17,968 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 05:59:17,969 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:59:17,969 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 05:59:17,969 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=10, Unknown=0, NotChecked=0, Total=20
[2020-11-25 05:59:17,969 INFO  L87              Difference]: Start difference. First operand 3547 states and 3932 transitions. cyclomatic complexity: 388 Second operand 5 states.
[2020-11-25 05:59:18,366 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:59:18,366 INFO  L93              Difference]: Finished difference Result 4374 states and 4973 transitions.
[2020-11-25 05:59:18,367 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 05:59:18,367 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4374 states and 4973 transitions.
[2020-11-25 05:59:18,378 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 05:59:18,390 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4374 states to 4234 states and 4828 transitions.
[2020-11-25 05:59:18,390 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1179
[2020-11-25 05:59:18,391 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1179
[2020-11-25 05:59:18,391 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4234 states and 4828 transitions.
[2020-11-25 05:59:18,395 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:59:18,395 INFO  L728         BuchiCegarLoop]: Abstraction has 4234 states and 4828 transitions.
[2020-11-25 05:59:18,398 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4234 states and 4828 transitions.
[2020-11-25 05:59:18,420 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4234 to 3405.
[2020-11-25 05:59:18,420 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3405 states.
[2020-11-25 05:59:18,424 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3405 states to 3405 states and 3785 transitions.
[2020-11-25 05:59:18,424 INFO  L751         BuchiCegarLoop]: Abstraction has 3405 states and 3785 transitions.
[2020-11-25 05:59:18,424 INFO  L631         BuchiCegarLoop]: Abstraction has 3405 states and 3785 transitions.
[2020-11-25 05:59:18,424 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 05:59:18,424 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3405 states and 3785 transitions.
[2020-11-25 05:59:18,429 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:18,429 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:59:18,429 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:59:18,430 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:18,430 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND FALSE  !(__exception)
[L1478]  CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3817]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L3817]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3821]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L3826]              havoc __var_29;
[L3827]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L2681]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L2681]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L2685]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2685]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2686]  COND FALSE  !(revert)
[L2689]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2649]              assume msgsender_MSG != null;
[L2650]              Balance[this] := 0;
[L2651]              _balances_ERC20[this] := zeroRefintArr();
[L2652]              sum__balances0[this] := 0;
[L2653]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2654]              sum__allowances1[this] := 0;
[L2655]              exceptions_ERC20[this] := zeroRefboolArr();
[L2656]              uniswap_ERC20[this] := null;
[L2657]              _owner_ERC20[this] := null;
[L2658]              _totalSupply_ERC20[this] := 0;
[L2660]              _owner_ERC20[this] := owner_s119;
[L2689]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2690]  COND FALSE  !(revert)
[L3827]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L3828]  COND FALSE  !(revert)
[L3831]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3549]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3549]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3550]  COND FALSE  !(revert)
[L3553]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3524]              assume msgsender_MSG != null;
[L3525]              Balance[this] := 0;
[L3526]              _name_ERC20Detailed[this] := -1081022691;
[L3527]              _symbol_ERC20Detailed[this] := -1081022691;
[L3528]              _decimals_ERC20Detailed[this] := 0;
[L3530]              _name_ERC20Detailed[this] := name_s544;
[L3531]              _symbol_ERC20Detailed[this] := symbol_s544;
[L3532]              _decimals_ERC20Detailed[this] := decimals_s544;
[L3553]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3554]  COND FALSE  !(revert)
[L3831]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3763]              assume msgsender_MSG != null;
[L3764]              Balance[this] := 0;
[L3765]              governance_Token[this] := null;
[L3766]              minters_Token[this] := zeroRefboolArr();
[L3769]              havoc __var_27;
[L3770]              governance_Token[this] := __var_27;
[L3772]              havoc __var_28;
[L3773]  CALL        call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3902]  COND FALSE  !(!(msgsender_MSG == governance_Token[this]))
[L3906]              minters_Token[this][_minter_s789] := true;
[L3773]  RET         call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3774]  COND FALSE  !(revert)
[L3777]  CALL        call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3859]  COND FALSE  !(!minters_Token[this][msgsender_MSG])
[L3863]  COND TRUE   DType[this] == Token
[L3864]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3399]              __var_19 := null;
[L3400]  COND FALSE  !(!(account_s426 != null))
[L3404]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3404]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3405]  COND FALSE  !(revert)
[L3408]              _totalSupply_ERC20[this] := __var_20;
[L3409]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3409]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3410]  COND FALSE  !(revert)
[L3413]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s426];
[L3414]              _balances_ERC20[this][account_s426] := __var_21;
[L3415]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s426];
[L3416]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3864]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3865]  COND FALSE  !(revert)
[L3777]  RET         call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3778]  COND FALSE  !(revert)
[L3835]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3836]  COND FALSE  !(revert)
[L1478]  RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1479]              assume !revert && gas >= 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND FALSE  !(choice == 18)
[L5573]  COND FALSE  !(choice == 17)
[L5579]  COND TRUE   choice == 16
[L5580]              gas := gas - 21000;
[L5581]  COND TRUE   gas >= 0
[L5582]              assume amount_s235 >= 0 && amount_s235 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5583]              assume msgvalue_MSG == 0;
[L5584]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s235, amount_s235);
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND FALSE  !(__exception)
[L811]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s235, amount_s235);
[L2937]  COND FALSE  !(DType[this] == Token)
[L2942]  COND TRUE   DType[this] == ERC20
[L2943]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L2943]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]  COND FALSE  !(revert)
[L2950]  COND TRUE   DType[this] == Token
[L2951]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, spender_s235, amount_s235);
[L3491]              __var_25 := null;
[L3492]  COND FALSE  !(!(owner_s513 != null))
[L3496]              __var_26 := null;
[L3497]  COND FALSE  !(!(spender_s513 != null))
[L3501]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] - _allowances_ERC20[this][owner_s513][spender_s513];
[L3502]              _allowances_ERC20[this][owner_s513][spender_s513] := amount_s513;
[L3503]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] + _allowances_ERC20[this][owner_s513][spender_s513];
[L3504]              assert { :EventEmitted "Approval_ERC20" } true;
[L2951]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, spender_s235, amount_s235);
[L2952]  COND FALSE  !(revert)
[L2963]              __ret_0_ := true;
[L811]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s235, amount_s235);
[L812]               assume !revert && gas >= 0;
[L5584]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s235, amount_s235);
[L5701]  RET         call CorralChoice_Token(this);
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND FALSE  !(choice == 18)
[L5573]  COND FALSE  !(choice == 17)
[L5579]  COND FALSE  !(choice == 16)
[L5586]  COND TRUE   choice == 15
[L5587]              gas := gas - 21000;
[L5588]  COND TRUE   gas >= 0
[L5589]              assume amount_s271 >= 0 && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5590]              assume msgvalue_MSG == 0;
[L5591]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s271 == recipient_s271 && (amount_s271 > _balances_ERC20[this][sender_s271] || amount_s271 > _allowances_ERC20[this][sender_s271][msgsender_MSG])) && amount_s271 >= 0) && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s271] >= 0) && _balances_ERC20[this][recipient_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s271] >= 0) && _balances_ERC20[this][sender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s271][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s271][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3037]  COND TRUE   DType[this] == Token
[L3038]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3343]              __var_15 := null;
[L3344]  COND FALSE  !(!(sender_s383 != null))
[L3348]              __var_16 := null;
[L3349]  COND FALSE  !(!(recipient_s383 != null))
[L3353]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3353]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3354]  COND FALSE  !(revert)
[L3357]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s383];
[L3358]              _balances_ERC20[this][sender_s383] := __var_17;
[L3359]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s383];
[L3360]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3360]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3361]  COND FALSE  !(revert)
[L3364]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s383];
[L3365]              _balances_ERC20[this][recipient_s383] := __var_18;
[L3366]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s383];
[L3367]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3038]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3039]  COND FALSE  !(revert)
[L3050]  COND TRUE   DType[this] == Token
[L3051]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3051]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3052]  COND FALSE  !(revert)
[L3063]  COND TRUE   DType[this] == Token
[L3064]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3064]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L3076]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3076]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3077]  COND FALSE  !(revert)
[L3080]  COND TRUE   DType[this] == Token
[L3081]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3491]              __var_25 := null;
[L3492]  COND FALSE  !(!(owner_s513 != null))
[L3496]              __var_26 := null;
[L3497]  COND FALSE  !(!(spender_s513 != null))
[L3501]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] - _allowances_ERC20[this][owner_s513][spender_s513];
[L3502]              _allowances_ERC20[this][owner_s513][spender_s513] := amount_s513;
[L3503]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] + _allowances_ERC20[this][owner_s513][spender_s513];
[L3504]              assert { :EventEmitted "Approval_ERC20" } true;
[L3081]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3082]  COND FALSE  !(revert)
[L3093]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L882]               assume !revert && gas >= 0;
[L5591]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L5701]  RET         call CorralChoice_Token(this);

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND TRUE   choice == 20
[L5555]              gas := gas - 21000;
[L5556]  COND FALSE  !(gas >= 0)
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:59:18,434 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:59:18,435 INFO  L82        PathProgramCache]: Analyzing trace with hash -589883916, now seen corresponding path program 1 times
[2020-11-25 05:59:18,435 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:59:18,452 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:59:18,588 INFO  L134       CoverageAnalysis]: Checked inductivity of 118 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 117 trivial. 0 not checked.
[2020-11-25 05:59:18,588 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:59:18,588 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:59:18,589 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:59:18,589 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:59:18,589 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:59:18,589 INFO  L87              Difference]: Start difference. First operand 3405 states and 3785 transitions. cyclomatic complexity: 383 Second operand 3 states.
[2020-11-25 05:59:18,627 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:59:18,627 INFO  L93              Difference]: Finished difference Result 3413 states and 3793 transitions.
[2020-11-25 05:59:18,627 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:59:18,628 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3413 states and 3793 transitions.
[2020-11-25 05:59:18,635 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:18,645 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3413 states to 3413 states and 3793 transitions.
[2020-11-25 05:59:18,645 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 951
[2020-11-25 05:59:18,646 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 951
[2020-11-25 05:59:18,646 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3413 states and 3793 transitions.
[2020-11-25 05:59:18,649 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:59:18,649 INFO  L728         BuchiCegarLoop]: Abstraction has 3413 states and 3793 transitions.
[2020-11-25 05:59:18,653 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3413 states and 3793 transitions.
[2020-11-25 05:59:18,676 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3413 to 3407.
[2020-11-25 05:59:18,676 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3407 states.
[2020-11-25 05:59:18,680 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3407 states to 3407 states and 3787 transitions.
[2020-11-25 05:59:18,680 INFO  L751         BuchiCegarLoop]: Abstraction has 3407 states and 3787 transitions.
[2020-11-25 05:59:18,680 INFO  L631         BuchiCegarLoop]: Abstraction has 3407 states and 3787 transitions.
[2020-11-25 05:59:18,680 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 05:59:18,681 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3407 states and 3787 transitions.
[2020-11-25 05:59:18,685 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:18,686 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:59:18,686 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:59:18,688 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:18,688 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5691]              assume null == 0;
[L5692]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L5692]  RET         call this := FreshRefGenerator__success();
[L5693]              assume now >= 0;
[L5694]              assume DType[this] == Token;
[L5695]              assume msgvalue_MSG == 0;
[L5696]              gas := gas - 53000;
[L5697]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1447]              havoc __exception;
[L1448]              revert := false;
[L1449]  COND FALSE  !(__exception)
[L1478]  CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3817]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L3817]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3821]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L3826]              havoc __var_29;
[L3827]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L2681]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2611]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2596]              assume msgsender_MSG != null;
[L2597]              Balance[this] := 0;
[L2611]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2612]  COND FALSE  !(revert)
[L2681]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L2685]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2685]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2686]  COND FALSE  !(revert)
[L2689]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2649]              assume msgsender_MSG != null;
[L2650]              Balance[this] := 0;
[L2651]              _balances_ERC20[this] := zeroRefintArr();
[L2652]              sum__balances0[this] := 0;
[L2653]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2654]              sum__allowances1[this] := 0;
[L2655]              exceptions_ERC20[this] := zeroRefboolArr();
[L2656]              uniswap_ERC20[this] := null;
[L2657]              _owner_ERC20[this] := null;
[L2658]              _totalSupply_ERC20[this] := 0;
[L2660]              _owner_ERC20[this] := owner_s119;
[L2689]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s119);
[L2690]  COND FALSE  !(revert)
[L3827]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_29);
[L3828]  COND FALSE  !(revert)
[L3831]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3549]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3549]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3550]  COND FALSE  !(revert)
[L3553]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3524]              assume msgsender_MSG != null;
[L3525]              Balance[this] := 0;
[L3526]              _name_ERC20Detailed[this] := -1081022691;
[L3527]              _symbol_ERC20Detailed[this] := -1081022691;
[L3528]              _decimals_ERC20Detailed[this] := 0;
[L3530]              _name_ERC20Detailed[this] := name_s544;
[L3531]              _symbol_ERC20Detailed[this] := symbol_s544;
[L3532]              _decimals_ERC20Detailed[this] := decimals_s544;
[L3553]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s544, symbol_s544, decimals_s544);
[L3554]  COND FALSE  !(revert)
[L3831]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, 18);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3763]              assume msgsender_MSG != null;
[L3764]              Balance[this] := 0;
[L3765]              governance_Token[this] := null;
[L3766]              minters_Token[this] := zeroRefboolArr();
[L3769]              havoc __var_27;
[L3770]              governance_Token[this] := __var_27;
[L3772]              havoc __var_28;
[L3773]  CALL        call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3902]  COND FALSE  !(!(msgsender_MSG == governance_Token[this]))
[L3906]              minters_Token[this][_minter_s789] := true;
[L3773]  RET         call addMinter~address_Token__success(this, msgsender_MSG, msgvalue_MSG, __var_28);
[L3774]  COND FALSE  !(revert)
[L3777]  CALL        call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3859]  COND FALSE  !(!minters_Token[this][msgsender_MSG])
[L3863]  COND TRUE   DType[this] == Token
[L3864]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3399]              __var_19 := null;
[L3400]  COND FALSE  !(!(account_s426 != null))
[L3404]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3404]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s426);
[L3405]  COND FALSE  !(revert)
[L3408]              _totalSupply_ERC20[this] := __var_20;
[L3409]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3409]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s426], amount_s426);
[L3410]  COND FALSE  !(revert)
[L3413]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s426];
[L3414]              _balances_ERC20[this][account_s426] := __var_21;
[L3415]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s426];
[L3416]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3864]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s751, amount_s751);
[L3865]  COND FALSE  !(revert)
[L3777]  RET         call mint~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, governance_Token[this], amount_s730);
[L3778]  COND FALSE  !(revert)
[L3835]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L3836]  COND FALSE  !(revert)
[L1478]  RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L1479]              assume !revert && gas >= 0;
[L5697]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, name_s730, ticker_s730, amount_s730);
[L5698]              assume !revert && gas >= 0;
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND FALSE  !(choice == 18)
[L5573]  COND FALSE  !(choice == 17)
[L5579]  COND TRUE   choice == 16
[L5580]              gas := gas - 21000;
[L5581]  COND TRUE   gas >= 0
[L5582]              assume amount_s235 >= 0 && amount_s235 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5583]              assume msgvalue_MSG == 0;
[L5584]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s235, amount_s235);
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND FALSE  !(__exception)
[L811]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s235, amount_s235);
[L2937]  COND TRUE   DType[this] == Token
[L2938]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L2938]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2939]  COND FALSE  !(revert)
[L2950]  COND TRUE   DType[this] == Token
[L2951]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, spender_s235, amount_s235);
[L3491]              __var_25 := null;
[L3492]  COND FALSE  !(!(owner_s513 != null))
[L3496]              __var_26 := null;
[L3497]  COND FALSE  !(!(spender_s513 != null))
[L3501]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] - _allowances_ERC20[this][owner_s513][spender_s513];
[L3502]              _allowances_ERC20[this][owner_s513][spender_s513] := amount_s513;
[L3503]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] + _allowances_ERC20[this][owner_s513][spender_s513];
[L3504]              assert { :EventEmitted "Approval_ERC20" } true;
[L2951]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, spender_s235, amount_s235);
[L2952]  COND FALSE  !(revert)
[L2963]              __ret_0_ := true;
[L811]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s235, amount_s235);
[L812]               assume !revert && gas >= 0;
[L5584]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s235, amount_s235);
[L5701]  RET         call CorralChoice_Token(this);
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND FALSE  !(choice == 18)
[L5573]  COND FALSE  !(choice == 17)
[L5579]  COND FALSE  !(choice == 16)
[L5586]  COND TRUE   choice == 15
[L5587]              gas := gas - 21000;
[L5588]  COND TRUE   gas >= 0
[L5589]              assume amount_s271 >= 0 && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5590]              assume msgvalue_MSG == 0;
[L5591]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s271 == recipient_s271 && (amount_s271 > _balances_ERC20[this][sender_s271] || amount_s271 > _allowances_ERC20[this][sender_s271][msgsender_MSG])) && amount_s271 >= 0) && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s271] >= 0) && _balances_ERC20[this][recipient_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s271] >= 0) && _balances_ERC20[this][sender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s271][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s271][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3037]  COND TRUE   DType[this] == Token
[L3038]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3343]              __var_15 := null;
[L3344]  COND FALSE  !(!(sender_s383 != null))
[L3348]              __var_16 := null;
[L3349]  COND FALSE  !(!(recipient_s383 != null))
[L3353]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3353]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3354]  COND FALSE  !(revert)
[L3357]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s383];
[L3358]              _balances_ERC20[this][sender_s383] := __var_17;
[L3359]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s383];
[L3360]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3360]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3361]  COND FALSE  !(revert)
[L3364]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s383];
[L3365]              _balances_ERC20[this][recipient_s383] := __var_18;
[L3366]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s383];
[L3367]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3038]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3039]  COND FALSE  !(revert)
[L3050]  COND TRUE   DType[this] == Token
[L3051]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3051]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3052]  COND FALSE  !(revert)
[L3063]  COND TRUE   DType[this] == Token
[L3064]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3064]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L3076]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3076]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3077]  COND FALSE  !(revert)
[L3080]  COND TRUE   DType[this] == Token
[L3081]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3491]              __var_25 := null;
[L3492]  COND FALSE  !(!(owner_s513 != null))
[L3496]              __var_26 := null;
[L3497]  COND FALSE  !(!(spender_s513 != null))
[L3501]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] - _allowances_ERC20[this][owner_s513][spender_s513];
[L3502]              _allowances_ERC20[this][owner_s513][spender_s513] := amount_s513;
[L3503]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] + _allowances_ERC20[this][owner_s513][spender_s513];
[L3504]              assert { :EventEmitted "Approval_ERC20" } true;
[L3081]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3082]  COND FALSE  !(revert)
[L3093]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L882]               assume !revert && gas >= 0;
[L5591]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L5701]  RET         call CorralChoice_Token(this);

Loop:
[L5701]  CALL        call CorralChoice_Token(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc __ret_0_totalSupply;
[L5500]              havoc account_s181;
[L5501]              havoc __ret_0_balanceOf;
[L5502]              havoc recipient_s200;
[L5503]              havoc amount_s200;
[L5504]              havoc __ret_0_transfer;
[L5505]              havoc owner_s216;
[L5506]              havoc spender_s216;
[L5507]              havoc __ret_0_allowance;
[L5508]              havoc spender_s235;
[L5509]              havoc amount_s235;
[L5510]              havoc __ret_0_approve;
[L5511]              havoc sender_s271;
[L5512]              havoc recipient_s271;
[L5513]              havoc amount_s271;
[L5514]              havoc __ret_0_transferFrom;
[L5515]              havoc owner_s119;
[L5516]              havoc someAddress_s143;
[L5517]              havoc spender_s298;
[L5518]              havoc addedValue_s298;
[L5519]              havoc __ret_0_increaseAllowance;
[L5520]              havoc spender_s326;
[L5521]              havoc subtractedValue_s326;
[L5522]              havoc __ret_0_decreaseAllowance;
[L5523]              havoc name_s544;
[L5524]              havoc symbol_s544;
[L5525]              havoc decimals_s544;
[L5526]              havoc __ret_0_name;
[L5527]              havoc __ret_0_symbol;
[L5528]              havoc __ret_0_decimals;
[L5529]              havoc __ret_0_governance;
[L5530]              havoc arg812_s0;
[L5531]              havoc __ret_0_minters;
[L5532]              havoc name_s730;
[L5533]              havoc ticker_s730;
[L5534]              havoc amount_s730;
[L5535]              havoc account_s751;
[L5536]              havoc amount_s751;
[L5537]              havoc _governance_s769;
[L5538]              havoc _minter_s789;
[L5539]              havoc _minter_s809;
[L5540]              havoc tmpNow;
[L5541]              havoc gas;
[L5542]              assume gas > 4000000 && gas <= 8000000;
[L5543]              tmpNow := now;
[L5544]              havoc now;
[L5545]              assume now > tmpNow;
[L5546]              assume msgsender_MSG != null;
[L5547]              assume DType[msgsender_MSG] != IERC20;
[L5548]              assume DType[msgsender_MSG] != Context;
[L5549]              assume DType[msgsender_MSG] != ERC20;
[L5550]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5551]              assume DType[msgsender_MSG] != SafeMath;
[L5552]              assume DType[msgsender_MSG] != Token;
[L5553]              Alloc[msgsender_MSG] := true;
[L5554]  COND FALSE  !(choice == 20)
[L5560]  COND FALSE  !(choice == 19)
[L5566]  COND FALSE  !(choice == 18)
[L5573]  COND FALSE  !(choice == 17)
[L5579]  COND FALSE  !(choice == 16)
[L5586]  COND TRUE   choice == 15
[L5587]              gas := gas - 21000;
[L5588]  COND TRUE   gas >= 0
[L5589]              assume amount_s271 >= 0 && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5590]              assume msgvalue_MSG == 0;
[L5591]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s271 == recipient_s271 && (amount_s271 > _balances_ERC20[this][sender_s271] || amount_s271 > _allowances_ERC20[this][sender_s271][msgsender_MSG])) && amount_s271 >= 0) && amount_s271 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s271] >= 0) && _balances_ERC20[this][recipient_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s271] >= 0) && _balances_ERC20[this][sender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s271][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s271][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L850]               havoc __exception;
[L851]               revert := false;
[L852]   COND FALSE  !(__exception)
[L881]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3037]  COND TRUE   DType[this] == Token
[L3038]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3343]              __var_15 := null;
[L3344]  COND FALSE  !(!(sender_s383 != null))
[L3348]              __var_16 := null;
[L3349]  COND FALSE  !(!(recipient_s383 != null))
[L3353]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3353]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s383], amount_s383, 47124453);
[L3354]  COND FALSE  !(revert)
[L3357]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s383];
[L3358]              _balances_ERC20[this][sender_s383] := __var_17;
[L3359]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s383];
[L3360]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3642]              c_s594 := (a_s594 + b_s594) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3643]  COND FALSE  !(!(c_s594 >= a_s594))
[L3647]              __ret_0_ := c_s594;
[L3360]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s383], amount_s383);
[L3361]  COND FALSE  !(revert)
[L3364]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s383];
[L3365]              _balances_ERC20[this][recipient_s383] := __var_18;
[L3366]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s383];
[L3367]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3038]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L3039]  COND FALSE  !(revert)
[L3050]  COND TRUE   DType[this] == Token
[L3051]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3051]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3052]  COND FALSE  !(revert)
[L3063]  COND TRUE   DType[this] == Token
[L3064]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]              __ret_0_ := msgsender_MSG;
[L3064]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L3076]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3666]  COND FALSE  !(!(b_s621 <= a_s621))
[L3670]              c_s621 := (a_s621 - b_s621) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3671]              __ret_0_ := c_s621;
[L3076]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s271][__var_8], amount_s271, 716492258);
[L3077]  COND FALSE  !(revert)
[L3080]  COND TRUE   DType[this] == Token
[L3081]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3491]              __var_25 := null;
[L3492]  COND FALSE  !(!(owner_s513 != null))
[L3496]              __var_26 := null;
[L3497]  COND FALSE  !(!(spender_s513 != null))
[L3501]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] - _allowances_ERC20[this][owner_s513][spender_s513];
[L3502]              _allowances_ERC20[this][owner_s513][spender_s513] := amount_s513;
[L3503]              sum__allowances1[owner_s513] := sum__allowances1[owner_s513] + _allowances_ERC20[this][owner_s513][spender_s513];
[L3504]              assert { :EventEmitted "Approval_ERC20" } true;
[L3081]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, __var_6, __var_7);
[L3082]  COND FALSE  !(revert)
[L3093]              __ret_0_ := true;
[L881]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L882]               assume !revert && gas >= 0;
[L5591]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s271, recipient_s271, amount_s271);
[L5701]  RET         call CorralChoice_Token(this);

[2020-11-25 05:59:18,693 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:59:18,694 INFO  L82        PathProgramCache]: Analyzing trace with hash 1778126130, now seen corresponding path program 1 times
[2020-11-25 05:59:18,694 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:59:18,720 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:59:18,921 INFO  L134       CoverageAnalysis]: Checked inductivity of 118 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 116 trivial. 0 not checked.
[2020-11-25 05:59:18,921 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:59:18,921 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 05:59:18,922 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:59:18,922 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 05:59:18,922 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=127, Unknown=0, NotChecked=0, Total=156
[2020-11-25 05:59:18,922 INFO  L87              Difference]: Start difference. First operand 3407 states and 3787 transitions. cyclomatic complexity: 383 Second operand 13 states.
[2020-11-25 05:59:19,917 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:59:19,917 INFO  L93              Difference]: Finished difference Result 1975 states and 2193 transitions.
[2020-11-25 05:59:19,918 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 05:59:19,918 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1975 states and 2193 transitions.
[2020-11-25 05:59:19,927 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 05:59:19,928 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1975 states to 0 states and 0 transitions.
[2020-11-25 05:59:19,928 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 05:59:19,928 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 05:59:19,928 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 05:59:19,928 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:59:19,928 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 05:59:19,929 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 05:59:19,929 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 05:59:19,929 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 05:59:19,929 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 05:59:19,929 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 05:59:19,929 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 05:59:19,934 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:59:19 BasicIcfg
[2020-11-25 05:59:19,934 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 05:59:19,934 INFO  L168              Benchmark]: Toolchain (without parser) took 9051.84 ms. Allocated memory was 1.0 GB in the beginning and 2.0 GB in the end (delta: 925.4 MB). Free memory was 935.2 MB in the beginning and 1.4 GB in the end (delta: -509.7 MB). Peak memory consumption was 415.6 MB. Max. memory is 15.3 GB.
[2020-11-25 05:59:19,936 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 05:59:19,936 INFO  L168              Benchmark]: Boogie Preprocessor took 108.65 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 05:59:19,936 INFO  L168              Benchmark]: UtopiaSpecLang took 57.05 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 05:59:19,936 INFO  L168              Benchmark]: Boogie Printer took 16.83 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 05:59:19,937 INFO  L168              Benchmark]: RCFGBuilder took 865.24 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 758.0 MB in the end (delta: 150.3 MB). Peak memory consumption was 150.3 MB. Max. memory is 15.3 GB.
[2020-11-25 05:59:19,937 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.91 ms. Allocated memory is still 1.0 GB. Free memory was 758.0 MB in the beginning and 754.4 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 05:59:19,938 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1507.49 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 188.7 MB). Free memory was 754.4 MB in the beginning and 784.2 MB in the end (delta: -29.8 MB). Peak memory consumption was 159.0 MB. Max. memory is 15.3 GB.
[2020-11-25 05:59:19,938 INFO  L168              Benchmark]: BlockEncodingV2 took 159.30 ms. Allocated memory is still 1.2 GB. Free memory was 784.2 MB in the beginning and 709.4 MB in the end (delta: 74.8 MB). Peak memory consumption was 74.8 MB. Max. memory is 15.3 GB.
[2020-11-25 05:59:19,938 INFO  L168              Benchmark]: BuchiAutomizer took 6291.93 ms. Allocated memory was 1.2 GB in the beginning and 2.0 GB in the end (delta: 736.6 MB). Free memory was 709.4 MB in the beginning and 1.4 GB in the end (delta: -735.5 MB). Peak memory consumption was 1.2 MB. Max. memory is 15.3 GB.
[2020-11-25 05:59:19,941 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5236 locations, 9358 edges
  - StatisticsResult: Encoded RCFG
    5105 locations, 9015 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 108.65 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 57.05 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.83 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 865.24 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 758.0 MB in the end (delta: 150.3 MB). Peak memory consumption was 150.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.91 ms. Allocated memory is still 1.0 GB. Free memory was 758.0 MB in the beginning and 754.4 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1507.49 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 188.7 MB). Free memory was 754.4 MB in the beginning and 784.2 MB in the end (delta: -29.8 MB). Peak memory consumption was 159.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 159.30 ms. Allocated memory is still 1.2 GB. Free memory was 784.2 MB in the beginning and 709.4 MB in the end (delta: 74.8 MB). Peak memory consumption was 74.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 6291.93 ms. Allocated memory was 1.2 GB in the beginning and 2.0 GB in the end (delta: 736.6 MB). Free memory was 709.4 MB in the beginning and 1.4 GB in the end (delta: -735.5 MB). Peak memory consumption was 1.2 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2125 locations, 2887 edges
  - StatisticsResult: BuchiProgram size
    5236 locations, 9358 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 17 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 6.2s and 9 iterations.  TraceHistogramMax:3. Analysis of lassos took 1.1s. Construction of modules took 2.9s. BÃ¼chi inclusion checks took 1.3s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 7 MinimizatonAttempts, 1997 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 3826 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 29114 SDtfs, 17839 SDslu, 36254 SDs, 0 SdLazy, 53868 SolverSat, 2967 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.9s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC200) ==> ( <>(fail_transferFrom_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
