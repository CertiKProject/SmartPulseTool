This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 06:16:24,396 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 06:16:24,397 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 06:16:24,408 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 06:16:24,408 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 06:16:24,409 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 06:16:24,410 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 06:16:24,411 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 06:16:24,413 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 06:16:24,413 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 06:16:24,414 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 06:16:24,414 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 06:16:24,415 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 06:16:24,415 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 06:16:24,416 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 06:16:24,417 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 06:16:24,417 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 06:16:24,418 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 06:16:24,420 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 06:16:24,421 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 06:16:24,422 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 06:16:24,422 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 06:16:24,424 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 06:16:24,424 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 06:16:24,424 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 06:16:24,425 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 06:16:24,425 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 06:16:24,426 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 06:16:24,426 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 06:16:24,426 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 06:16:24,427 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 06:16:24,427 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 06:16:24,427 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 06:16:24,428 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 06:16:24,429 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 06:16:24,429 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 06:16:24,429 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 06:16:24,429 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 06:16:24,429 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 06:16:24,430 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 06:16:24,431 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 06:16:24,431 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 06:16:24,438 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 06:16:24,438 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 06:16:24,439 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 06:16:24,439 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 06:16:24,439 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 06:16:24,439 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 06:16:24,439 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 06:16:24,439 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 06:16:24,440 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 06:16:24,440 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 06:16:24,440 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 06:16:24,440 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 06:16:24,440 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 06:16:24,440 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 06:16:24,440 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 06:16:24,440 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 06:16:24,440 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 06:16:24,440 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 06:16:24,441 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 06:16:24,441 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 06:16:24,441 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 06:16:24,441 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 06:16:24,441 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 06:16:24,441 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 06:16:24,441 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 06:16:24,441 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 06:16:24,463 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 06:16:24,474 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 06:16:24,477 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 06:16:24,478 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 06:16:24,478 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 06:16:24,479 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl
[2020-11-25 06:16:24,479 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl'
[2020-11-25 06:16:24,551 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 06:16:24,552 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 06:16:24,552 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 06:16:24,552 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 06:16:24,552 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 06:16:24,568 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:24" (1/1) ...
[2020-11-25 06:16:24,570 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:24" (1/1) ...
[2020-11-25 06:16:24,601 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:24" (1/1) ...
[2020-11-25 06:16:24,601 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:24" (1/1) ...
[2020-11-25 06:16:24,619 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:24" (1/1) ...
[2020-11-25 06:16:24,627 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:24" (1/1) ...
[2020-11-25 06:16:24,633 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:24" (1/1) ...
[2020-11-25 06:16:24,641 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 06:16:24,642 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 06:16:24,642 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 06:16:24,644 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 06:16:24,648 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:24" (1/1) ...
[2020-11-25 06:16:24,673 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balanceOf_TokenERC20[this][from] && value <= allowance_TokenERC20[this][from][msg.sender] && balanceOf_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balanceOf_TokenERC20[this][from] == old(balanceOf_TokenERC20[this][from]) - value && balanceOf_TokenERC20[this][to] == old(balanceOf_TokenERC20[this][to]) + value && allowance_TokenERC20[this][from][msg.sender] == old(allowance_TokenERC20[this][from][msg.sender]) - value && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1]) && allowance_TokenERC20[this][p2][p3] == old(allowance_TokenERC20[this][p2][p3]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_TokenERC20[this] == old(owner_TokenERC20[this]) && lockIn_TokenERC20[this] == old(lockIn_TokenERC20[this]) && whitelisted_TokenERC20[this] == old(whitelisted_TokenERC20[this]) && admin_TokenERC20[this] == old(admin_TokenERC20[this]))))
[2020-11-25 06:16:24,679 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balanceOf_TokenERC20[this][from] && value <= allowance_TokenERC20[this][from][msg.sender] && balanceOf_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balanceOf_TokenERC20[this][from] == old(balanceOf_TokenERC20[this][from]) - value && balanceOf_TokenERC20[this][to] == old(balanceOf_TokenERC20[this][to]) + value && allowance_TokenERC20[this][from][msg.sender] == old(allowance_TokenERC20[this][from][msg.sender]) - value && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1]) && allowance_TokenERC20[this][p2][p3] == old(allowance_TokenERC20[this][p2][p3]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_TokenERC20[this] == old(owner_TokenERC20[this]) && lockIn_TokenERC20[this] == old(lockIn_TokenERC20[this]) && whitelisted_TokenERC20[this] == old(whitelisted_TokenERC20[this]) && admin_TokenERC20[this] == old(admin_TokenERC20[this]))))
[2020-11-25 06:16:24,687 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balanceOf_TokenERC20[this][from] && value <= allowance_TokenERC20[this][from][msg.sender] && balanceOf_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balanceOf_TokenERC20[this][from] == old(balanceOf_TokenERC20[this][from]) - value && balanceOf_TokenERC20[this][to] == old(balanceOf_TokenERC20[this][to]) + value && allowance_TokenERC20[this][from][msg.sender] == old(allowance_TokenERC20[this][from][msg.sender]) - value && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1]) && allowance_TokenERC20[this][p2][p3] == old(allowance_TokenERC20[this][p2][p3]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_TokenERC20[this] == old(owner_TokenERC20[this]) && lockIn_TokenERC20[this] == old(lockIn_TokenERC20[this]) && whitelisted_TokenERC20[this] == old(whitelisted_TokenERC20[this]) && admin_TokenERC20[this] == old(admin_TokenERC20[this]))))
[2020-11-25 06:16:24,695 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=_from_s376 && p1!=_to_s376 ) && ( p2!=_from_s376 || p3!=msg.sender ) ) && _from_s376!=_to_s376 ) && _value_s376<=balanceOf_TokenERC20[this][_from_s376] ) && _value_s376<=allowance_TokenERC20[this][_from_s376][msg.sender] ) && ( balanceOf_TokenERC20[this][_to_s376] + _value_s376 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _value_s376>=0 ) && _value_s376<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_to_s376]>=0 ) && balanceOf_TokenERC20[this][_to_s376]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_from_s376]>=0 ) && balanceOf_TokenERC20[this][_from_s376]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowance_TokenERC20[this][_from_s376][msg.sender]>=0 ) && allowance_TokenERC20[this][_from_s376][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_to_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IdentifierExpression[_to_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IdentifierExpression[_value_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 06:16:24,701 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( success_s376==true && balanceOf_TokenERC20[this][_from_s376]==( ( old(balanceOf_TokenERC20[this][_from_s376]) ) - _value_s376 ) ) && balanceOf_TokenERC20[this][_to_s376]==( ( old(balanceOf_TokenERC20[this][_to_s376]) ) + _value_s376 ) ) && allowance_TokenERC20[this][_from_s376][msg.sender]==( ( old(allowance_TokenERC20[this][_from_s376][msg.sender]) ) - _value_s376 ) ) && totalSupply_TokenERC20[this]==( old(totalSupply_TokenERC20[this]) ) ) && balanceOf_TokenERC20[this][p1]==( old(balanceOf_TokenERC20[this][p1]) ) ) && allowance_TokenERC20[this][p2][p3]==( old(allowance_TokenERC20[this][p2][p3]) ) ) && name_TokenERC20[this]==( old(name_TokenERC20[this]) ) ) && symbol_TokenERC20[this]==( old(symbol_TokenERC20[this]) ) ) && decimals_TokenERC20[this]==( old(decimals_TokenERC20[this]) ) ) && owner_TokenERC20[this]==( old(owner_TokenERC20[this]) ) ) && lockIn_TokenERC20[this]==( old(lockIn_TokenERC20[this]) ) ) && whitelisted_TokenERC20[this]==( old(whitelisted_TokenERC20[this]) ) ) && admin_TokenERC20[this]==( old(admin_TokenERC20[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s376,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_TokenERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[_value_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[_value_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[_value_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[lockIn_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[lockIn_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[whitelisted_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[whitelisted_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[admin_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[admin_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]]
[2020-11-25 06:16:24,709 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balanceOf_TokenERC20[this][from] && value <= allowance_TokenERC20[this][from][msg.sender] && balanceOf_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balanceOf_TokenERC20[this][from] == old(balanceOf_TokenERC20[this][from]) - value && balanceOf_TokenERC20[this][to] == old(balanceOf_TokenERC20[this][to]) + value && allowance_TokenERC20[this][from][msg.sender] == old(allowance_TokenERC20[this][from][msg.sender]) - value && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1]) && allowance_TokenERC20[this][p2][p3] == old(allowance_TokenERC20[this][p2][p3]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_TokenERC20[this] == old(owner_TokenERC20[this]) && lockIn_TokenERC20[this] == old(lockIn_TokenERC20[this]) && whitelisted_TokenERC20[this] == old(whitelisted_TokenERC20[this]) && admin_TokenERC20[this] == old(admin_TokenERC20[this]))))
[2020-11-25 06:16:24,709 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_TokenERC200) ==> ( <>AP(success_transferFrom_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 06:16:24,717 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:16:24 PropertyContainer
[2020-11-25 06:16:24,717 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 06:16:24,717 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 06:16:24,717 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 06:16:24,717 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 06:16:24,718 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:24" (1/2) ...
[2020-11-25 06:16:24,718 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 06:16:24,719 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 06:16:24,730 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:16:24" (2/2) ...
[2020-11-25 06:16:24,730 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 06:16:24,731 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 06:16:24,731 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 06:16:24,731 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 06:16:24,732 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:24" (1/2) ...
[2020-11-25 06:16:24,787 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 06:16:24,787 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 06:16:24,787 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-25 06:16:24,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-25 06:16:24,787 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-25 06:16:24,787 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 06:16:24,787 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 06:16:24,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 06:16:24,788 INFO  L130     BoogieDeclarations]: Found specification of procedure toggleLockIn_TokenERC20
[2020-11-25 06:16:24,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure toggleLockIn_TokenERC20
[2020-11-25 06:16:24,788 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist~address_TokenERC20
[2020-11-25 06:16:24,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist~address_TokenERC20
[2020-11-25 06:16:24,788 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromWhitelist~address_TokenERC20
[2020-11-25 06:16:24,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromWhitelist~address_TokenERC20
[2020-11-25 06:16:24,788 INFO  L130     BoogieDeclarations]: Found specification of procedure addToAdmin~address_TokenERC20
[2020-11-25 06:16:24,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToAdmin~address_TokenERC20
[2020-11-25 06:16:24,788 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromAdmin~address_TokenERC20
[2020-11-25 06:16:24,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromAdmin~address_TokenERC20
[2020-11-25 06:16:24,789 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 06:16:24,789 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 06:16:24,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 06:16:24,789 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 06:16:24,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 06:16:24,789 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 06:16:24,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 06:16:24,789 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 06:16:24,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 06:16:24,790 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20
[2020-11-25 06:16:24,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20
[2020-11-25 06:16:24,790 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 06:16:24,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 06:16:24,790 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 06:16:24,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 06:16:24,790 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 06:16:24,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 06:16:24,790 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 06:16:24,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 06:16:24,791 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_TokenERC20
[2020-11-25 06:16:24,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_TokenERC20
[2020-11-25 06:16:24,791 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 06:16:24,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 06:16:24,791 INFO  L130     BoogieDeclarations]: Found specification of procedure lockIn_TokenERC20
[2020-11-25 06:16:24,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockIn_TokenERC20
[2020-11-25 06:16:24,791 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 06:16:24,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 06:16:24,791 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 06:16:24,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 06:16:24,792 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 06:16:24,792 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 06:16:24,792 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 06:16:24,792 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-25 06:16:24,792 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-25 06:16:24,792 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 06:16:24,792 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 06:16:24,792 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 06:16:24,792 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 06:16:24,792 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 06:16:24,793 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 06:16:24,793 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 06:16:24,793 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 06:16:24,793 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 06:16:24,793 INFO  L130     BoogieDeclarations]: Found specification of procedure toggleLockIn_TokenERC20__success
[2020-11-25 06:16:24,793 INFO  L130     BoogieDeclarations]: Found specification of procedure toggleLockIn_TokenERC20__fail
[2020-11-25 06:16:24,793 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist~address_TokenERC20__success
[2020-11-25 06:16:24,793 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist~address_TokenERC20__fail
[2020-11-25 06:16:24,793 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromWhitelist~address_TokenERC20__success
[2020-11-25 06:16:24,793 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromWhitelist~address_TokenERC20__fail
[2020-11-25 06:16:24,794 INFO  L130     BoogieDeclarations]: Found specification of procedure addToAdmin~address_TokenERC20__success
[2020-11-25 06:16:24,794 INFO  L130     BoogieDeclarations]: Found specification of procedure addToAdmin~address_TokenERC20__fail
[2020-11-25 06:16:24,794 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromAdmin~address_TokenERC20__success
[2020-11-25 06:16:24,794 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromAdmin~address_TokenERC20__fail
[2020-11-25 06:16:24,794 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 06:16:24,794 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 06:16:24,794 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 06:16:24,794 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 06:16:24,794 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 06:16:24,794 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 06:16:24,795 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 06:16:24,795 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 06:16:24,795 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 06:16:24,795 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__success
[2020-11-25 06:16:24,795 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__fail
[2020-11-25 06:16:24,795 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 06:16:24,795 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 06:16:24,795 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 06:16:24,795 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 06:16:24,796 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 06:16:24,796 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 06:16:24,796 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 06:16:24,796 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 06:16:24,796 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_TokenERC20__success
[2020-11-25 06:16:24,796 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_TokenERC20__fail
[2020-11-25 06:16:24,796 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 06:16:24,796 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 06:16:24,796 INFO  L130     BoogieDeclarations]: Found specification of procedure lockIn_TokenERC20__success
[2020-11-25 06:16:24,796 INFO  L130     BoogieDeclarations]: Found specification of procedure lockIn_TokenERC20__fail
[2020-11-25 06:16:24,797 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 06:16:24,797 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 06:16:24,797 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 06:16:24,797 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 06:16:24,797 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 06:16:24,797 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 06:16:24,797 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 06:16:24,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 06:16:24,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 06:16:24,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 06:16:24,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 06:16:24,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 06:16:24,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 06:16:24,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 06:16:24,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 06:16:24,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 06:16:24,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 06:16:24,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure toggleLockIn_TokenERC20__fail
[2020-11-25 06:16:24,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure toggleLockIn_TokenERC20__success
[2020-11-25 06:16:24,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist~address_TokenERC20__fail
[2020-11-25 06:16:24,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist~address_TokenERC20__success
[2020-11-25 06:16:24,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromWhitelist~address_TokenERC20__fail
[2020-11-25 06:16:24,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromWhitelist~address_TokenERC20__success
[2020-11-25 06:16:24,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToAdmin~address_TokenERC20__fail
[2020-11-25 06:16:24,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToAdmin~address_TokenERC20__success
[2020-11-25 06:16:24,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromAdmin~address_TokenERC20__fail
[2020-11-25 06:16:24,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromAdmin~address_TokenERC20__success
[2020-11-25 06:16:24,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 06:16:24,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 06:16:24,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 06:16:24,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 06:16:24,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 06:16:24,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 06:16:24,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 06:16:24,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 06:16:24,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 06:16:24,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 06:16:24,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__fail
[2020-11-25 06:16:24,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__success
[2020-11-25 06:16:24,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 06:16:24,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 06:16:24,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 06:16:24,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 06:16:24,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 06:16:24,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 06:16:24,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 06:16:24,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 06:16:24,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_TokenERC20__fail
[2020-11-25 06:16:24,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_TokenERC20__success
[2020-11-25 06:16:24,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 06:16:24,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 06:16:24,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockIn_TokenERC20__fail
[2020-11-25 06:16:24,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockIn_TokenERC20__success
[2020-11-25 06:16:24,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 06:16:24,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 06:16:24,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 06:16:24,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 06:16:24,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 06:16:24,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 06:16:24,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 06:16:24,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 06:16:24,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 06:16:24,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 06:16:24,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-25 06:16:24,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-25 06:16:24,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 06:16:24,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 06:16:24,807 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 06:16:24,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 06:16:24,994 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:16:25,258 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:16:25,259 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:16:25,259 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:16:25,389 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 06:16:25,390 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 06:16:25,391 INFO  L202        PluginConnector]: Adding new model TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:16:25 BoogieIcfgContainer
[2020-11-25 06:16:25,391 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:16:24" (2/2) ...
[2020-11-25 06:16:25,391 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 06:16:25,392 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6bc5910f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:16:25, skipping insertion in model container
[2020-11-25 06:16:25,392 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 06:16:25,392 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 06:16:25,392 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 06:16:25,393 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 06:16:25,394 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:24" (1/3) ...
[2020-11-25 06:16:25,394 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@14b330b1 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:16:25, skipping insertion in model container
[2020-11-25 06:16:25,394 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:16:24" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 06:16:25,432 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:16:25 NWAContainer
[2020-11-25 06:16:25,432 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 06:16:25,433 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 06:16:25,433 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 06:16:25,434 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 06:16:25,434 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:16:25" (3/4) ...
[2020-11-25 06:16:25,435 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@65bb1835 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:16:25, skipping insertion in model container
[2020-11-25 06:16:25,435 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:16:25" (4/4) ...
[2020-11-25 06:16:25,438 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 06:16:25,441 INFO  L110   BuchiProductObserver]: Initial RCFG 1295 locations, 1555 edges
[2020-11-25 06:16:25,441 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 06:16:25,451 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 06:16:26,674 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 06:16:26,678 INFO  L110   BuchiProductObserver]: BuchiProgram size 2968 locations, 4964 edges
[2020-11-25 06:16:26,678 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:16:26 BoogieIcfgContainer
[2020-11-25 06:16:26,678 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 06:16:26,679 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 06:16:26,679 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 06:16:26,680 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 06:16:26,681 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:16:26" (1/1) ...
[2020-11-25 06:16:26,816 INFO  L313           BlockEncoder]: Initial Icfg 2968 locations, 4964 edges
[2020-11-25 06:16:26,816 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 06:16:26,817 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 06:16:26,817 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 06:16:26,817 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 06:16:26,826 INFO  L70    emoveInfeasibleEdges]: Removed 30 edges and 7 locations because of local infeasibility
[2020-11-25 06:16:26,831 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 06:16:26,840 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 06:16:26,843 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 06:16:26,846 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 06:16:26,846 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 06:16:26,849 INFO  L313           BlockEncoder]: Encoded RCFG 2948 locations, 4915 edges
[2020-11-25 06:16:26,849 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:16:26 BasicIcfg
[2020-11-25 06:16:26,849 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 06:16:26,849 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 06:16:26,850 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 06:16:26,851 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 06:16:26,851 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:16:26,851 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:24" (1/6) ...
[2020-11-25 06:16:26,853 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@365df9c6 and model type TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:16:26, skipping insertion in model container
[2020-11-25 06:16:26,853 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:16:26,853 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:16:24" (2/6) ...
[2020-11-25 06:16:26,853 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@365df9c6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:16:26, skipping insertion in model container
[2020-11-25 06:16:26,853 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:16:26,853 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:16:25" (3/6) ...
[2020-11-25 06:16:26,853 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@365df9c6 and model type TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:16:26, skipping insertion in model container
[2020-11-25 06:16:26,853 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:16:26,854 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:16:25" (4/6) ...
[2020-11-25 06:16:26,854 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@365df9c6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:16:26, skipping insertion in model container
[2020-11-25 06:16:26,854 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:16:26,854 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:16:26" (5/6) ...
[2020-11-25 06:16:26,854 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@365df9c6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 06:16:26, skipping insertion in model container
[2020-11-25 06:16:26,854 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:16:26,854 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:16:26" (6/6) ...
[2020-11-25 06:16:26,855 INFO  L404   chiAutomizerObserver]: Analyzing ICFG TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-normal.bpl_BEv2
[2020-11-25 06:16:26,889 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 06:16:26,889 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 06:16:26,889 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 06:16:26,889 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 06:16:26,889 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 06:16:26,889 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 06:16:26,889 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 06:16:26,889 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 06:16:26,889 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 06:16:26,909 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2948 states.
[2020-11-25 06:16:26,954 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:16:26,954 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:16:26,954 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:16:26,962 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:16:26,962 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:16:26,963 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 06:16:26,963 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2948 states.
[2020-11-25 06:16:26,979 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:16:26,979 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:16:26,979 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:16:26,981 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:16:26,981 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3322]              assume null == 0;
[L3323]  CALL        call this := FreshRefGenerator__success();
[L1844]              havoc newRef;
[L1845]              assume Alloc[newRef] == false;
[L1846]              Alloc[newRef] := true;
[L1847]              assume newRef != null;
[L3323]  RET         call this := FreshRefGenerator__success();
[L3324]              assume now >= 0;
[L3325]              assume DType[this] == TokenERC20;
[L3326]              assume msgvalue_MSG == 0;
[L3327]              gas := gas - 53000;
[L3328]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L177]               havoc __exception;
[L178]               revert := false;
[L179]   COND FALSE  !(__exception)
[L207]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1960]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1919]              assume msgsender_MSG != null;
[L1920]              Balance[this] := 0;
[L1921]              name_TokenERC20[this] := 846149099;
[L1922]              symbol_TokenERC20[this] := 846149099;
[L1923]              decimals_TokenERC20[this] := 8;
[L1924]              owner_TokenERC20[this] := null;
[L1925]              totalSupply_TokenERC20[this] := 0;
[L1926]              lockIn_TokenERC20[this] := false;
[L1927]              whitelisted_TokenERC20[this] := zeroRefboolArr();
[L1928]              admin_TokenERC20[this] := zeroRefboolArr();
[L1929]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1930]              sum_balanceOf2[this] := 0;
[L1931]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1932]              sum_allowance3[this] := 0;
[L1934]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1935]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s130, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1936]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1937]              balanceOf_TokenERC20[this][crowdsaleOwner_s130] := totalSupply_TokenERC20[this];
[L1938]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1939]              name_TokenERC20[this] := tokenName_s130;
[L1940]              symbol_TokenERC20[this] := tokenSymbol_s130;
[L1941]              lockIn_TokenERC20[this] := false;
[L1942]              admin_TokenERC20[this][msgsender_MSG] := true;
[L1943]              whitelisted_TokenERC20[this][msgsender_MSG] := true;
[L1944]              owner_TokenERC20[this] := crowdsaleOwner_s130;
[L1945]              admin_TokenERC20[this][crowdsaleOwner_s130] := true;
[L1960]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1961]  COND FALSE  !(revert)
[L207]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L208]               assume !revert && gas >= 0;
[L3328]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L3329]              assume !revert && gas >= 0;

Loop:
[L3332]  CALL        call CorralChoice_TokenERC20(this);
[L3140]              havoc msgsender_MSG;
[L3141]              havoc msgvalue_MSG;
[L3142]              havoc choice;
[L3143]              havoc __ret_0_name;
[L3144]              havoc __ret_0_symbol;
[L3145]              havoc __ret_0_decimals;
[L3146]              havoc __ret_0_owner;
[L3147]              havoc __ret_0_totalSupply;
[L3148]              havoc __ret_0_lockIn;
[L3149]              havoc arg536_s0;
[L3150]              havoc __ret_0_balanceOf;
[L3151]              havoc arg537_s0;
[L3152]              havoc arg538_s0;
[L3153]              havoc __ret_0_allowance;
[L3154]              havoc initialSupply_s130;
[L3155]              havoc tokenName_s130;
[L3156]              havoc tokenSymbol_s130;
[L3157]              havoc crowdsaleOwner_s130;
[L3158]              havoc newAddress_s165;
[L3159]              havoc oldaddress_s190;
[L3160]              havoc newAddress_s209;
[L3161]              havoc oldAddress_s234;
[L3162]              havoc _to_s336;
[L3163]              havoc _value_s336;
[L3164]              havoc _from_s376;
[L3165]              havoc _to_s376;
[L3166]              havoc _value_s376;
[L3167]              havoc success_s376;
[L3168]              havoc _spender_s404;
[L3169]              havoc _value_s404;
[L3170]              havoc success_s404;
[L3171]              havoc _spender_s442;
[L3172]              havoc _value_s442;
[L3173]              havoc _extraData_s442;
[L3174]              havoc success_s442;
[L3175]              havoc _value_s478;
[L3176]              havoc success_s478;
[L3177]              havoc _from_s533;
[L3178]              havoc _value_s533;
[L3179]              havoc success_s533;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != tokenRecipient;
[L3188]              assume DType[msgsender_MSG] != TokenERC20;
[L3189]              Alloc[msgsender_MSG] := true;
[L3190]  COND TRUE   choice == 19
[L3191]              gas := gas - 21000;
[L3192]  COND FALSE  !(gas >= 0)
[L3332]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:16:26,995 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:16:26,995 INFO  L82        PathProgramCache]: Analyzing trace with hash -1784839819, now seen corresponding path program 1 times
[2020-11-25 06:16:26,998 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:16:27,018 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:16:27,053 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:16:27,055 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:16:27,055 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 06:16:27,153 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:16:27,161 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 06:16:27,162 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 06:16:27,163 INFO  L87              Difference]: Start difference. First operand 2948 states. Second operand 4 states.
[2020-11-25 06:16:27,475 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:16:27,475 INFO  L93              Difference]: Finished difference Result 2481 states and 2694 transitions.
[2020-11-25 06:16:27,475 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 06:16:27,477 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2481 states and 2694 transitions.
[2020-11-25 06:16:27,491 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:16:27,512 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2481 states to 2479 states and 2690 transitions.
[2020-11-25 06:16:27,513 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 06:16:27,516 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1174
[2020-11-25 06:16:27,517 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2479 states and 2690 transitions.
[2020-11-25 06:16:27,524 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:16:27,524 INFO  L728         BuchiCegarLoop]: Abstraction has 2479 states and 2690 transitions.
[2020-11-25 06:16:27,543 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2479 states and 2690 transitions.
[2020-11-25 06:16:27,587 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2479 to 2479.
[2020-11-25 06:16:27,587 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2479 states.
[2020-11-25 06:16:27,592 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2479 states to 2479 states and 2690 transitions.
[2020-11-25 06:16:27,594 INFO  L751         BuchiCegarLoop]: Abstraction has 2479 states and 2690 transitions.
[2020-11-25 06:16:27,594 INFO  L631         BuchiCegarLoop]: Abstraction has 2479 states and 2690 transitions.
[2020-11-25 06:16:27,594 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 06:16:27,594 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2479 states and 2690 transitions.
[2020-11-25 06:16:27,604 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:16:27,604 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:16:27,604 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:16:27,606 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:16:27,606 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3322]              assume null == 0;
[L3323]  CALL        call this := FreshRefGenerator__success();
[L1844]              havoc newRef;
[L1845]              assume Alloc[newRef] == false;
[L1846]              Alloc[newRef] := true;
[L1847]              assume newRef != null;
[L3323]  RET         call this := FreshRefGenerator__success();
[L3324]              assume now >= 0;
[L3325]              assume DType[this] == TokenERC20;
[L3326]              assume msgvalue_MSG == 0;
[L3327]              gas := gas - 53000;
[L3328]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L177]               havoc __exception;
[L178]               revert := false;
[L179]   COND FALSE  !(__exception)
[L207]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1960]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1919]              assume msgsender_MSG != null;
[L1920]              Balance[this] := 0;
[L1921]              name_TokenERC20[this] := 846149099;
[L1922]              symbol_TokenERC20[this] := 846149099;
[L1923]              decimals_TokenERC20[this] := 8;
[L1924]              owner_TokenERC20[this] := null;
[L1925]              totalSupply_TokenERC20[this] := 0;
[L1926]              lockIn_TokenERC20[this] := false;
[L1927]              whitelisted_TokenERC20[this] := zeroRefboolArr();
[L1928]              admin_TokenERC20[this] := zeroRefboolArr();
[L1929]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1930]              sum_balanceOf2[this] := 0;
[L1931]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1932]              sum_allowance3[this] := 0;
[L1934]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1935]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s130, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1936]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1937]              balanceOf_TokenERC20[this][crowdsaleOwner_s130] := totalSupply_TokenERC20[this];
[L1938]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1939]              name_TokenERC20[this] := tokenName_s130;
[L1940]              symbol_TokenERC20[this] := tokenSymbol_s130;
[L1941]              lockIn_TokenERC20[this] := false;
[L1942]              admin_TokenERC20[this][msgsender_MSG] := true;
[L1943]              whitelisted_TokenERC20[this][msgsender_MSG] := true;
[L1944]              owner_TokenERC20[this] := crowdsaleOwner_s130;
[L1945]              admin_TokenERC20[this][crowdsaleOwner_s130] := true;
[L1960]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1961]  COND FALSE  !(revert)
[L207]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L208]               assume !revert && gas >= 0;
[L3328]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L3329]              assume !revert && gas >= 0;
[L3332]  CALL        call CorralChoice_TokenERC20(this);
[L3140]              havoc msgsender_MSG;
[L3141]              havoc msgvalue_MSG;
[L3142]              havoc choice;
[L3143]              havoc __ret_0_name;
[L3144]              havoc __ret_0_symbol;
[L3145]              havoc __ret_0_decimals;
[L3146]              havoc __ret_0_owner;
[L3147]              havoc __ret_0_totalSupply;
[L3148]              havoc __ret_0_lockIn;
[L3149]              havoc arg536_s0;
[L3150]              havoc __ret_0_balanceOf;
[L3151]              havoc arg537_s0;
[L3152]              havoc arg538_s0;
[L3153]              havoc __ret_0_allowance;
[L3154]              havoc initialSupply_s130;
[L3155]              havoc tokenName_s130;
[L3156]              havoc tokenSymbol_s130;
[L3157]              havoc crowdsaleOwner_s130;
[L3158]              havoc newAddress_s165;
[L3159]              havoc oldaddress_s190;
[L3160]              havoc newAddress_s209;
[L3161]              havoc oldAddress_s234;
[L3162]              havoc _to_s336;
[L3163]              havoc _value_s336;
[L3164]              havoc _from_s376;
[L3165]              havoc _to_s376;
[L3166]              havoc _value_s376;
[L3167]              havoc success_s376;
[L3168]              havoc _spender_s404;
[L3169]              havoc _value_s404;
[L3170]              havoc success_s404;
[L3171]              havoc _spender_s442;
[L3172]              havoc _value_s442;
[L3173]              havoc _extraData_s442;
[L3174]              havoc success_s442;
[L3175]              havoc _value_s478;
[L3176]              havoc success_s478;
[L3177]              havoc _from_s533;
[L3178]              havoc _value_s533;
[L3179]              havoc success_s533;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != tokenRecipient;
[L3188]              assume DType[msgsender_MSG] != TokenERC20;
[L3189]              Alloc[msgsender_MSG] := true;
[L3190]  COND FALSE  !(choice == 19)
[L3196]  COND FALSE  !(choice == 18)
[L3202]  COND FALSE  !(choice == 17)
[L3208]  COND FALSE  !(choice == 16)
[L3214]  COND FALSE  !(choice == 15)
[L3220]  COND FALSE  !(choice == 14)
[L3226]  COND FALSE  !(choice == 13)
[L3232]  COND FALSE  !(choice == 12)
[L3238]  COND FALSE  !(choice == 11)
[L3244]  COND FALSE  !(choice == 10)
[L3250]  COND FALSE  !(choice == 9)
[L3256]  COND FALSE  !(choice == 8)
[L3262]  COND FALSE  !(choice == 7)
[L3268]  COND FALSE  !(choice == 6)
[L3275]  COND TRUE   choice == 5
[L3276]              gas := gas - 21000;
[L3277]  COND TRUE   gas >= 0
[L3278]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3279]              assume msgvalue_MSG == 0;
[L3280]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s376 && p1 != _to_s376) && (p2 != _from_s376 || p3 != msgsender_MSG)) && _from_s376 != _to_s376) && _value_s376 <= balanceOf_TokenERC20[this][_from_s376]) && _value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s376] + _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L640]               havoc __exception;
[L641]               revert := false;
[L642]   COND FALSE  !(__exception)
[L670]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2173]  COND TRUE   !(_value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG])
[L2174]              revert := true;
[L670]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L671]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s376 == true && balanceOf_TokenERC20[this][_from_s376] == old(balanceOf_TokenERC20[this][_from_s376]) - _value_s376) && balanceOf_TokenERC20[this][_to_s376] == old(balanceOf_TokenERC20[this][_to_s376]) + _value_s376) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] == old(allowance_TokenERC20[this][_from_s376][msgsender_MSG]) - _value_s376) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1])) && allowance_TokenERC20[this][p2][p3] == old(allowance_TokenERC20[this][p2][p3])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_TokenERC20[this] == old(owner_TokenERC20[this])) && lockIn_TokenERC20[this] == old(lockIn_TokenERC20[this])) && whitelisted_TokenERC20[this] == old(whitelisted_TokenERC20[this])) && admin_TokenERC20[this] == old(admin_TokenERC20[this]));
[L3]                 revert := revert_hold;
[L3280]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3332]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L3332]  CALL        call CorralChoice_TokenERC20(this);
[L3140]              havoc msgsender_MSG;
[L3141]              havoc msgvalue_MSG;
[L3142]              havoc choice;
[L3143]              havoc __ret_0_name;
[L3144]              havoc __ret_0_symbol;
[L3145]              havoc __ret_0_decimals;
[L3146]              havoc __ret_0_owner;
[L3147]              havoc __ret_0_totalSupply;
[L3148]              havoc __ret_0_lockIn;
[L3149]              havoc arg536_s0;
[L3150]              havoc __ret_0_balanceOf;
[L3151]              havoc arg537_s0;
[L3152]              havoc arg538_s0;
[L3153]              havoc __ret_0_allowance;
[L3154]              havoc initialSupply_s130;
[L3155]              havoc tokenName_s130;
[L3156]              havoc tokenSymbol_s130;
[L3157]              havoc crowdsaleOwner_s130;
[L3158]              havoc newAddress_s165;
[L3159]              havoc oldaddress_s190;
[L3160]              havoc newAddress_s209;
[L3161]              havoc oldAddress_s234;
[L3162]              havoc _to_s336;
[L3163]              havoc _value_s336;
[L3164]              havoc _from_s376;
[L3165]              havoc _to_s376;
[L3166]              havoc _value_s376;
[L3167]              havoc success_s376;
[L3168]              havoc _spender_s404;
[L3169]              havoc _value_s404;
[L3170]              havoc success_s404;
[L3171]              havoc _spender_s442;
[L3172]              havoc _value_s442;
[L3173]              havoc _extraData_s442;
[L3174]              havoc success_s442;
[L3175]              havoc _value_s478;
[L3176]              havoc success_s478;
[L3177]              havoc _from_s533;
[L3178]              havoc _value_s533;
[L3179]              havoc success_s533;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != tokenRecipient;
[L3188]              assume DType[msgsender_MSG] != TokenERC20;
[L3189]              Alloc[msgsender_MSG] := true;
[L3190]  COND FALSE  !(choice == 19)
[L3196]  COND FALSE  !(choice == 18)
[L3202]  COND FALSE  !(choice == 17)
[L3208]  COND FALSE  !(choice == 16)
[L3214]  COND FALSE  !(choice == 15)
[L3220]  COND FALSE  !(choice == 14)
[L3226]  COND FALSE  !(choice == 13)
[L3232]  COND FALSE  !(choice == 12)
[L3238]  COND FALSE  !(choice == 11)
[L3244]  COND FALSE  !(choice == 10)
[L3250]  COND FALSE  !(choice == 9)
[L3256]  COND FALSE  !(choice == 8)
[L3262]  COND FALSE  !(choice == 7)
[L3268]  COND FALSE  !(choice == 6)
[L3275]  COND TRUE   choice == 5
[L3276]              gas := gas - 21000;
[L3277]  COND TRUE   gas >= 0
[L3278]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3279]              assume msgvalue_MSG == 0;
[L3280]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s376 && p1 != _to_s376) && (p2 != _from_s376 || p3 != msgsender_MSG)) && _from_s376 != _to_s376) && _value_s376 <= balanceOf_TokenERC20[this][_from_s376]) && _value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s376] + _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L640]               havoc __exception;
[L641]               revert := false;
[L642]   COND FALSE  !(__exception)
[L670]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2173]  COND TRUE   !(_value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG])
[L2174]              revert := true;
[L670]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L671]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s376 == true && balanceOf_TokenERC20[this][_from_s376] == old(balanceOf_TokenERC20[this][_from_s376]) - _value_s376) && balanceOf_TokenERC20[this][_to_s376] == old(balanceOf_TokenERC20[this][_to_s376]) + _value_s376) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] == old(allowance_TokenERC20[this][_from_s376][msgsender_MSG]) - _value_s376) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1])) && allowance_TokenERC20[this][p2][p3] == old(allowance_TokenERC20[this][p2][p3])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_TokenERC20[this] == old(owner_TokenERC20[this])) && lockIn_TokenERC20[this] == old(lockIn_TokenERC20[this])) && whitelisted_TokenERC20[this] == old(whitelisted_TokenERC20[this])) && admin_TokenERC20[this] == old(admin_TokenERC20[this]));
[L3]                 revert := revert_hold;
[L3280]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3332]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:16:27,610 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:16:27,610 INFO  L82        PathProgramCache]: Analyzing trace with hash -405333464, now seen corresponding path program 1 times
[2020-11-25 06:16:27,611 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:16:27,629 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:16:27,658 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:16:27,658 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:16:27,658 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 06:16:27,659 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:16:27,659 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 06:16:27,659 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 06:16:27,660 INFO  L87              Difference]: Start difference. First operand 2479 states and 2690 transitions. cyclomatic complexity: 213 Second operand 3 states.
[2020-11-25 06:16:27,714 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:16:27,714 INFO  L93              Difference]: Finished difference Result 3161 states and 3498 transitions.
[2020-11-25 06:16:27,715 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 06:16:27,715 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3161 states and 3498 transitions.
[2020-11-25 06:16:27,728 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:16:27,742 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3161 states to 3027 states and 3346 transitions.
[2020-11-25 06:16:27,742 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1448
[2020-11-25 06:16:27,743 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1448
[2020-11-25 06:16:27,743 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3027 states and 3346 transitions.
[2020-11-25 06:16:27,747 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:16:27,747 INFO  L728         BuchiCegarLoop]: Abstraction has 3027 states and 3346 transitions.
[2020-11-25 06:16:27,749 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3027 states and 3346 transitions.
[2020-11-25 06:16:27,771 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3027 to 2461.
[2020-11-25 06:16:27,771 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2461 states.
[2020-11-25 06:16:27,775 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2461 states to 2461 states and 2636 transitions.
[2020-11-25 06:16:27,775 INFO  L751         BuchiCegarLoop]: Abstraction has 2461 states and 2636 transitions.
[2020-11-25 06:16:27,775 INFO  L631         BuchiCegarLoop]: Abstraction has 2461 states and 2636 transitions.
[2020-11-25 06:16:27,775 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 06:16:27,775 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2461 states and 2636 transitions.
[2020-11-25 06:16:27,780 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:16:27,780 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:16:27,780 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:16:27,782 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:16:27,782 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3322]              assume null == 0;
[L3323]  CALL        call this := FreshRefGenerator__success();
[L1844]              havoc newRef;
[L1845]              assume Alloc[newRef] == false;
[L1846]              Alloc[newRef] := true;
[L1847]              assume newRef != null;
[L3323]  RET         call this := FreshRefGenerator__success();
[L3324]              assume now >= 0;
[L3325]              assume DType[this] == TokenERC20;
[L3326]              assume msgvalue_MSG == 0;
[L3327]              gas := gas - 53000;
[L3328]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L177]               havoc __exception;
[L178]               revert := false;
[L179]   COND FALSE  !(__exception)
[L207]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1960]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1919]              assume msgsender_MSG != null;
[L1920]              Balance[this] := 0;
[L1921]              name_TokenERC20[this] := 846149099;
[L1922]              symbol_TokenERC20[this] := 846149099;
[L1923]              decimals_TokenERC20[this] := 8;
[L1924]              owner_TokenERC20[this] := null;
[L1925]              totalSupply_TokenERC20[this] := 0;
[L1926]              lockIn_TokenERC20[this] := false;
[L1927]              whitelisted_TokenERC20[this] := zeroRefboolArr();
[L1928]              admin_TokenERC20[this] := zeroRefboolArr();
[L1929]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1930]              sum_balanceOf2[this] := 0;
[L1931]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1932]              sum_allowance3[this] := 0;
[L1934]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1935]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s130, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1936]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1937]              balanceOf_TokenERC20[this][crowdsaleOwner_s130] := totalSupply_TokenERC20[this];
[L1938]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1939]              name_TokenERC20[this] := tokenName_s130;
[L1940]              symbol_TokenERC20[this] := tokenSymbol_s130;
[L1941]              lockIn_TokenERC20[this] := false;
[L1942]              admin_TokenERC20[this][msgsender_MSG] := true;
[L1943]              whitelisted_TokenERC20[this][msgsender_MSG] := true;
[L1944]              owner_TokenERC20[this] := crowdsaleOwner_s130;
[L1945]              admin_TokenERC20[this][crowdsaleOwner_s130] := true;
[L1960]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1961]  COND FALSE  !(revert)
[L207]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L208]               assume !revert && gas >= 0;
[L3328]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L3329]              assume !revert && gas >= 0;
[L3332]  CALL        call CorralChoice_TokenERC20(this);
[L3140]              havoc msgsender_MSG;
[L3141]              havoc msgvalue_MSG;
[L3142]              havoc choice;
[L3143]              havoc __ret_0_name;
[L3144]              havoc __ret_0_symbol;
[L3145]              havoc __ret_0_decimals;
[L3146]              havoc __ret_0_owner;
[L3147]              havoc __ret_0_totalSupply;
[L3148]              havoc __ret_0_lockIn;
[L3149]              havoc arg536_s0;
[L3150]              havoc __ret_0_balanceOf;
[L3151]              havoc arg537_s0;
[L3152]              havoc arg538_s0;
[L3153]              havoc __ret_0_allowance;
[L3154]              havoc initialSupply_s130;
[L3155]              havoc tokenName_s130;
[L3156]              havoc tokenSymbol_s130;
[L3157]              havoc crowdsaleOwner_s130;
[L3158]              havoc newAddress_s165;
[L3159]              havoc oldaddress_s190;
[L3160]              havoc newAddress_s209;
[L3161]              havoc oldAddress_s234;
[L3162]              havoc _to_s336;
[L3163]              havoc _value_s336;
[L3164]              havoc _from_s376;
[L3165]              havoc _to_s376;
[L3166]              havoc _value_s376;
[L3167]              havoc success_s376;
[L3168]              havoc _spender_s404;
[L3169]              havoc _value_s404;
[L3170]              havoc success_s404;
[L3171]              havoc _spender_s442;
[L3172]              havoc _value_s442;
[L3173]              havoc _extraData_s442;
[L3174]              havoc success_s442;
[L3175]              havoc _value_s478;
[L3176]              havoc success_s478;
[L3177]              havoc _from_s533;
[L3178]              havoc _value_s533;
[L3179]              havoc success_s533;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != tokenRecipient;
[L3188]              assume DType[msgsender_MSG] != TokenERC20;
[L3189]              Alloc[msgsender_MSG] := true;
[L3190]  COND FALSE  !(choice == 19)
[L3196]  COND FALSE  !(choice == 18)
[L3202]  COND FALSE  !(choice == 17)
[L3208]  COND FALSE  !(choice == 16)
[L3214]  COND FALSE  !(choice == 15)
[L3220]  COND FALSE  !(choice == 14)
[L3226]  COND FALSE  !(choice == 13)
[L3232]  COND FALSE  !(choice == 12)
[L3238]  COND FALSE  !(choice == 11)
[L3244]  COND FALSE  !(choice == 10)
[L3250]  COND FALSE  !(choice == 9)
[L3256]  COND FALSE  !(choice == 8)
[L3262]  COND FALSE  !(choice == 7)
[L3268]  COND FALSE  !(choice == 6)
[L3275]  COND TRUE   choice == 5
[L3276]              gas := gas - 21000;
[L3277]  COND TRUE   gas >= 0
[L3278]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3279]              assume msgvalue_MSG == 0;
[L3280]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s376 && p1 != _to_s376) && (p2 != _from_s376 || p3 != msgsender_MSG)) && _from_s376 != _to_s376) && _value_s376 <= balanceOf_TokenERC20[this][_from_s376]) && _value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s376] + _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L640]               havoc __exception;
[L641]               revert := false;
[L642]   COND TRUE   __exception
[L643]               __tmp__Balance := Balance;
[L644]               __tmp__DType := DType;
[L645]               __tmp__Alloc := Alloc;
[L646]               __tmp__balance_ADDR := balance_ADDR;
[L647]               __tmp__M_Ref_bool := M_Ref_bool;
[L648]               __tmp__sum_whitelisted0 := sum_whitelisted0;
[L649]               __tmp__sum_admin1 := sum_admin1;
[L650]               __tmp__M_Ref_int := M_Ref_int;
[L651]               __tmp__sum_balanceOf2 := sum_balanceOf2;
[L652]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L653]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L654]               __tmp__sum_allowance3 := sum_allowance3;
[L655]               __tmp__Length := Length;
[L656]               __tmp__now := now;
[L657]               __tmp__name_TokenERC20 := name_TokenERC20;
[L658]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L659]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L660]               __tmp__owner_TokenERC20 := owner_TokenERC20;
[L661]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L662]               __tmp__lockIn_TokenERC20 := lockIn_TokenERC20;
[L663]               __tmp__whitelisted_TokenERC20 := whitelisted_TokenERC20;
[L664]               __tmp__admin_TokenERC20 := admin_TokenERC20;
[L665]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L666]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L667]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2156]  COND TRUE   !(_value_s376 <= __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG])
[L2157]              revert := true;
[L667]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L668]               assume revert || gas < 0;
[L3280]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3332]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L3332]  CALL        call CorralChoice_TokenERC20(this);
[L3140]              havoc msgsender_MSG;
[L3141]              havoc msgvalue_MSG;
[L3142]              havoc choice;
[L3143]              havoc __ret_0_name;
[L3144]              havoc __ret_0_symbol;
[L3145]              havoc __ret_0_decimals;
[L3146]              havoc __ret_0_owner;
[L3147]              havoc __ret_0_totalSupply;
[L3148]              havoc __ret_0_lockIn;
[L3149]              havoc arg536_s0;
[L3150]              havoc __ret_0_balanceOf;
[L3151]              havoc arg537_s0;
[L3152]              havoc arg538_s0;
[L3153]              havoc __ret_0_allowance;
[L3154]              havoc initialSupply_s130;
[L3155]              havoc tokenName_s130;
[L3156]              havoc tokenSymbol_s130;
[L3157]              havoc crowdsaleOwner_s130;
[L3158]              havoc newAddress_s165;
[L3159]              havoc oldaddress_s190;
[L3160]              havoc newAddress_s209;
[L3161]              havoc oldAddress_s234;
[L3162]              havoc _to_s336;
[L3163]              havoc _value_s336;
[L3164]              havoc _from_s376;
[L3165]              havoc _to_s376;
[L3166]              havoc _value_s376;
[L3167]              havoc success_s376;
[L3168]              havoc _spender_s404;
[L3169]              havoc _value_s404;
[L3170]              havoc success_s404;
[L3171]              havoc _spender_s442;
[L3172]              havoc _value_s442;
[L3173]              havoc _extraData_s442;
[L3174]              havoc success_s442;
[L3175]              havoc _value_s478;
[L3176]              havoc success_s478;
[L3177]              havoc _from_s533;
[L3178]              havoc _value_s533;
[L3179]              havoc success_s533;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != tokenRecipient;
[L3188]              assume DType[msgsender_MSG] != TokenERC20;
[L3189]              Alloc[msgsender_MSG] := true;
[L3190]  COND FALSE  !(choice == 19)
[L3196]  COND FALSE  !(choice == 18)
[L3202]  COND FALSE  !(choice == 17)
[L3208]  COND FALSE  !(choice == 16)
[L3214]  COND FALSE  !(choice == 15)
[L3220]  COND FALSE  !(choice == 14)
[L3226]  COND FALSE  !(choice == 13)
[L3232]  COND FALSE  !(choice == 12)
[L3238]  COND FALSE  !(choice == 11)
[L3244]  COND FALSE  !(choice == 10)
[L3250]  COND FALSE  !(choice == 9)
[L3256]  COND FALSE  !(choice == 8)
[L3262]  COND FALSE  !(choice == 7)
[L3268]  COND FALSE  !(choice == 6)
[L3275]  COND TRUE   choice == 5
[L3276]              gas := gas - 21000;
[L3277]  COND TRUE   gas >= 0
[L3278]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3279]              assume msgvalue_MSG == 0;
[L3280]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s376 && p1 != _to_s376) && (p2 != _from_s376 || p3 != msgsender_MSG)) && _from_s376 != _to_s376) && _value_s376 <= balanceOf_TokenERC20[this][_from_s376]) && _value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s376] + _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L640]               havoc __exception;
[L641]               revert := false;
[L642]   COND TRUE   __exception
[L643]               __tmp__Balance := Balance;
[L644]               __tmp__DType := DType;
[L645]               __tmp__Alloc := Alloc;
[L646]               __tmp__balance_ADDR := balance_ADDR;
[L647]               __tmp__M_Ref_bool := M_Ref_bool;
[L648]               __tmp__sum_whitelisted0 := sum_whitelisted0;
[L649]               __tmp__sum_admin1 := sum_admin1;
[L650]               __tmp__M_Ref_int := M_Ref_int;
[L651]               __tmp__sum_balanceOf2 := sum_balanceOf2;
[L652]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L653]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L654]               __tmp__sum_allowance3 := sum_allowance3;
[L655]               __tmp__Length := Length;
[L656]               __tmp__now := now;
[L657]               __tmp__name_TokenERC20 := name_TokenERC20;
[L658]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L659]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L660]               __tmp__owner_TokenERC20 := owner_TokenERC20;
[L661]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L662]               __tmp__lockIn_TokenERC20 := lockIn_TokenERC20;
[L663]               __tmp__whitelisted_TokenERC20 := whitelisted_TokenERC20;
[L664]               __tmp__admin_TokenERC20 := admin_TokenERC20;
[L665]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L666]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L667]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2156]  COND TRUE   !(_value_s376 <= __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG])
[L2157]              revert := true;
[L667]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L668]               assume revert || gas < 0;
[L3280]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3332]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:16:27,785 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:16:27,786 INFO  L82        PathProgramCache]: Analyzing trace with hash -680965331, now seen corresponding path program 1 times
[2020-11-25 06:16:27,786 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:16:27,796 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:16:27,844 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:16:27,844 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:16:27,844 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 06:16:27,845 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:16:27,845 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 06:16:27,845 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 06:16:27,845 INFO  L87              Difference]: Start difference. First operand 2461 states and 2636 transitions. cyclomatic complexity: 177 Second operand 6 states.
[2020-11-25 06:16:28,629 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:16:28,629 INFO  L93              Difference]: Finished difference Result 2663 states and 2852 transitions.
[2020-11-25 06:16:28,631 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 06:16:28,632 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2663 states and 2852 transitions.
[2020-11-25 06:16:28,648 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:16:28,663 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2663 states to 2663 states and 2852 transitions.
[2020-11-25 06:16:28,664 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1264
[2020-11-25 06:16:28,666 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1264
[2020-11-25 06:16:28,666 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2663 states and 2852 transitions.
[2020-11-25 06:16:28,670 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:16:28,670 INFO  L728         BuchiCegarLoop]: Abstraction has 2663 states and 2852 transitions.
[2020-11-25 06:16:28,675 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2663 states and 2852 transitions.
[2020-11-25 06:16:28,710 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2663 to 2527.
[2020-11-25 06:16:28,710 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2527 states.
[2020-11-25 06:16:28,714 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2527 states to 2527 states and 2706 transitions.
[2020-11-25 06:16:28,714 INFO  L751         BuchiCegarLoop]: Abstraction has 2527 states and 2706 transitions.
[2020-11-25 06:16:28,714 INFO  L631         BuchiCegarLoop]: Abstraction has 2527 states and 2706 transitions.
[2020-11-25 06:16:28,715 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 06:16:28,715 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2527 states and 2706 transitions.
[2020-11-25 06:16:28,723 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:16:28,724 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:16:28,724 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:16:28,726 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:16:28,726 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3322]              assume null == 0;
[L3323]  CALL        call this := FreshRefGenerator__success();
[L1844]              havoc newRef;
[L1845]              assume Alloc[newRef] == false;
[L1846]              Alloc[newRef] := true;
[L1847]              assume newRef != null;
[L3323]  RET         call this := FreshRefGenerator__success();
[L3324]              assume now >= 0;
[L3325]              assume DType[this] == TokenERC20;
[L3326]              assume msgvalue_MSG == 0;
[L3327]              gas := gas - 53000;
[L3328]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L177]               havoc __exception;
[L178]               revert := false;
[L179]   COND FALSE  !(__exception)
[L207]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1960]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1919]              assume msgsender_MSG != null;
[L1920]              Balance[this] := 0;
[L1921]              name_TokenERC20[this] := 846149099;
[L1922]              symbol_TokenERC20[this] := 846149099;
[L1923]              decimals_TokenERC20[this] := 8;
[L1924]              owner_TokenERC20[this] := null;
[L1925]              totalSupply_TokenERC20[this] := 0;
[L1926]              lockIn_TokenERC20[this] := false;
[L1927]              whitelisted_TokenERC20[this] := zeroRefboolArr();
[L1928]              admin_TokenERC20[this] := zeroRefboolArr();
[L1929]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1930]              sum_balanceOf2[this] := 0;
[L1931]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1932]              sum_allowance3[this] := 0;
[L1934]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1935]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s130, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1936]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1937]              balanceOf_TokenERC20[this][crowdsaleOwner_s130] := totalSupply_TokenERC20[this];
[L1938]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1939]              name_TokenERC20[this] := tokenName_s130;
[L1940]              symbol_TokenERC20[this] := tokenSymbol_s130;
[L1941]              lockIn_TokenERC20[this] := false;
[L1942]              admin_TokenERC20[this][msgsender_MSG] := true;
[L1943]              whitelisted_TokenERC20[this][msgsender_MSG] := true;
[L1944]              owner_TokenERC20[this] := crowdsaleOwner_s130;
[L1945]              admin_TokenERC20[this][crowdsaleOwner_s130] := true;
[L1960]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1961]  COND FALSE  !(revert)
[L207]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L208]               assume !revert && gas >= 0;
[L3328]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L3329]              assume !revert && gas >= 0;
[L3332]  CALL        call CorralChoice_TokenERC20(this);
[L3140]              havoc msgsender_MSG;
[L3141]              havoc msgvalue_MSG;
[L3142]              havoc choice;
[L3143]              havoc __ret_0_name;
[L3144]              havoc __ret_0_symbol;
[L3145]              havoc __ret_0_decimals;
[L3146]              havoc __ret_0_owner;
[L3147]              havoc __ret_0_totalSupply;
[L3148]              havoc __ret_0_lockIn;
[L3149]              havoc arg536_s0;
[L3150]              havoc __ret_0_balanceOf;
[L3151]              havoc arg537_s0;
[L3152]              havoc arg538_s0;
[L3153]              havoc __ret_0_allowance;
[L3154]              havoc initialSupply_s130;
[L3155]              havoc tokenName_s130;
[L3156]              havoc tokenSymbol_s130;
[L3157]              havoc crowdsaleOwner_s130;
[L3158]              havoc newAddress_s165;
[L3159]              havoc oldaddress_s190;
[L3160]              havoc newAddress_s209;
[L3161]              havoc oldAddress_s234;
[L3162]              havoc _to_s336;
[L3163]              havoc _value_s336;
[L3164]              havoc _from_s376;
[L3165]              havoc _to_s376;
[L3166]              havoc _value_s376;
[L3167]              havoc success_s376;
[L3168]              havoc _spender_s404;
[L3169]              havoc _value_s404;
[L3170]              havoc success_s404;
[L3171]              havoc _spender_s442;
[L3172]              havoc _value_s442;
[L3173]              havoc _extraData_s442;
[L3174]              havoc success_s442;
[L3175]              havoc _value_s478;
[L3176]              havoc success_s478;
[L3177]              havoc _from_s533;
[L3178]              havoc _value_s533;
[L3179]              havoc success_s533;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != tokenRecipient;
[L3188]              assume DType[msgsender_MSG] != TokenERC20;
[L3189]              Alloc[msgsender_MSG] := true;
[L3190]  COND FALSE  !(choice == 19)
[L3196]  COND FALSE  !(choice == 18)
[L3202]  COND FALSE  !(choice == 17)
[L3208]  COND FALSE  !(choice == 16)
[L3214]  COND FALSE  !(choice == 15)
[L3220]  COND FALSE  !(choice == 14)
[L3226]  COND FALSE  !(choice == 13)
[L3232]  COND FALSE  !(choice == 12)
[L3238]  COND FALSE  !(choice == 11)
[L3244]  COND FALSE  !(choice == 10)
[L3250]  COND FALSE  !(choice == 9)
[L3256]  COND FALSE  !(choice == 8)
[L3262]  COND FALSE  !(choice == 7)
[L3268]  COND FALSE  !(choice == 6)
[L3275]  COND TRUE   choice == 5
[L3276]              gas := gas - 21000;
[L3277]  COND TRUE   gas >= 0
[L3278]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3279]              assume msgvalue_MSG == 0;
[L3280]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s376 && p1 != _to_s376) && (p2 != _from_s376 || p3 != msgsender_MSG)) && _from_s376 != _to_s376) && _value_s376 <= balanceOf_TokenERC20[this][_from_s376]) && _value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s376] + _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L640]               havoc __exception;
[L641]               revert := false;
[L642]   COND FALSE  !(__exception)
[L670]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2173]  COND FALSE  !(!(_value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]))
[L2177]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] - allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2178]              allowance_TokenERC20[this][_from_s376][msgsender_MSG] := (allowance_TokenERC20[this][_from_s376][msgsender_MSG] - _value_s376) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2179]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] + allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2180]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2108]  COND FALSE  !(lockIn_TokenERC20[this])
[L2114]              __var_2 := null;
[L2115]  COND FALSE  !(!(_to_s321 != null))
[L2119]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s321] >= _value_s321))
[L2123]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s321]))
[L2127]              previousBalances_s321 := (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2128]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_from_s321];
[L2129]              balanceOf_TokenERC20[this][_from_s321] := (balanceOf_TokenERC20[this][_from_s321] - _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2130]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_from_s321];
[L2131]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_to_s321];
[L2132]              balanceOf_TokenERC20[this][_to_s321] := (balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_to_s321];
[L2134]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2135]              assert (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s321;
[L2180]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2181]  COND FALSE  !(revert)
[L2184]              success_s376 := true;
[L670]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L671]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s376 == true && balanceOf_TokenERC20[this][_from_s376] == old(balanceOf_TokenERC20[this][_from_s376]) - _value_s376) && balanceOf_TokenERC20[this][_to_s376] == old(balanceOf_TokenERC20[this][_to_s376]) + _value_s376) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] == old(allowance_TokenERC20[this][_from_s376][msgsender_MSG]) - _value_s376) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1])) && allowance_TokenERC20[this][p2][p3] == old(allowance_TokenERC20[this][p2][p3])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_TokenERC20[this] == old(owner_TokenERC20[this])) && lockIn_TokenERC20[this] == old(lockIn_TokenERC20[this])) && whitelisted_TokenERC20[this] == old(whitelisted_TokenERC20[this])) && admin_TokenERC20[this] == old(admin_TokenERC20[this]));
[L3]                 revert := revert_hold;
[L3280]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3332]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L3332]  CALL        call CorralChoice_TokenERC20(this);
[L3140]              havoc msgsender_MSG;
[L3141]              havoc msgvalue_MSG;
[L3142]              havoc choice;
[L3143]              havoc __ret_0_name;
[L3144]              havoc __ret_0_symbol;
[L3145]              havoc __ret_0_decimals;
[L3146]              havoc __ret_0_owner;
[L3147]              havoc __ret_0_totalSupply;
[L3148]              havoc __ret_0_lockIn;
[L3149]              havoc arg536_s0;
[L3150]              havoc __ret_0_balanceOf;
[L3151]              havoc arg537_s0;
[L3152]              havoc arg538_s0;
[L3153]              havoc __ret_0_allowance;
[L3154]              havoc initialSupply_s130;
[L3155]              havoc tokenName_s130;
[L3156]              havoc tokenSymbol_s130;
[L3157]              havoc crowdsaleOwner_s130;
[L3158]              havoc newAddress_s165;
[L3159]              havoc oldaddress_s190;
[L3160]              havoc newAddress_s209;
[L3161]              havoc oldAddress_s234;
[L3162]              havoc _to_s336;
[L3163]              havoc _value_s336;
[L3164]              havoc _from_s376;
[L3165]              havoc _to_s376;
[L3166]              havoc _value_s376;
[L3167]              havoc success_s376;
[L3168]              havoc _spender_s404;
[L3169]              havoc _value_s404;
[L3170]              havoc success_s404;
[L3171]              havoc _spender_s442;
[L3172]              havoc _value_s442;
[L3173]              havoc _extraData_s442;
[L3174]              havoc success_s442;
[L3175]              havoc _value_s478;
[L3176]              havoc success_s478;
[L3177]              havoc _from_s533;
[L3178]              havoc _value_s533;
[L3179]              havoc success_s533;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != tokenRecipient;
[L3188]              assume DType[msgsender_MSG] != TokenERC20;
[L3189]              Alloc[msgsender_MSG] := true;
[L3190]  COND FALSE  !(choice == 19)
[L3196]  COND FALSE  !(choice == 18)
[L3202]  COND FALSE  !(choice == 17)
[L3208]  COND FALSE  !(choice == 16)
[L3214]  COND FALSE  !(choice == 15)
[L3220]  COND FALSE  !(choice == 14)
[L3226]  COND FALSE  !(choice == 13)
[L3232]  COND FALSE  !(choice == 12)
[L3238]  COND FALSE  !(choice == 11)
[L3244]  COND FALSE  !(choice == 10)
[L3250]  COND FALSE  !(choice == 9)
[L3256]  COND FALSE  !(choice == 8)
[L3262]  COND FALSE  !(choice == 7)
[L3268]  COND FALSE  !(choice == 6)
[L3275]  COND TRUE   choice == 5
[L3276]              gas := gas - 21000;
[L3277]  COND TRUE   gas >= 0
[L3278]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3279]              assume msgvalue_MSG == 0;
[L3280]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s376 && p1 != _to_s376) && (p2 != _from_s376 || p3 != msgsender_MSG)) && _from_s376 != _to_s376) && _value_s376 <= balanceOf_TokenERC20[this][_from_s376]) && _value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s376] + _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L640]               havoc __exception;
[L641]               revert := false;
[L642]   COND FALSE  !(__exception)
[L670]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2173]  COND FALSE  !(!(_value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]))
[L2177]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] - allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2178]              allowance_TokenERC20[this][_from_s376][msgsender_MSG] := (allowance_TokenERC20[this][_from_s376][msgsender_MSG] - _value_s376) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2179]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] + allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2180]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2108]  COND FALSE  !(lockIn_TokenERC20[this])
[L2114]              __var_2 := null;
[L2115]  COND FALSE  !(!(_to_s321 != null))
[L2119]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s321] >= _value_s321))
[L2123]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s321]))
[L2127]              previousBalances_s321 := (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2128]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_from_s321];
[L2129]              balanceOf_TokenERC20[this][_from_s321] := (balanceOf_TokenERC20[this][_from_s321] - _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2130]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_from_s321];
[L2131]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_to_s321];
[L2132]              balanceOf_TokenERC20[this][_to_s321] := (balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_to_s321];
[L2134]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2135]              assert (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s321;
[L2180]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2181]  COND FALSE  !(revert)
[L2184]              success_s376 := true;
[L670]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L671]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s376 == true && balanceOf_TokenERC20[this][_from_s376] == old(balanceOf_TokenERC20[this][_from_s376]) - _value_s376) && balanceOf_TokenERC20[this][_to_s376] == old(balanceOf_TokenERC20[this][_to_s376]) + _value_s376) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] == old(allowance_TokenERC20[this][_from_s376][msgsender_MSG]) - _value_s376) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1])) && allowance_TokenERC20[this][p2][p3] == old(allowance_TokenERC20[this][p2][p3])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_TokenERC20[this] == old(owner_TokenERC20[this])) && lockIn_TokenERC20[this] == old(lockIn_TokenERC20[this])) && whitelisted_TokenERC20[this] == old(whitelisted_TokenERC20[this])) && admin_TokenERC20[this] == old(admin_TokenERC20[this]));
[L3]                 revert := revert_hold;
[L3280]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3332]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:16:28,731 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:16:28,731 INFO  L82        PathProgramCache]: Analyzing trace with hash -1054797567, now seen corresponding path program 1 times
[2020-11-25 06:16:28,732 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:16:28,776 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:16:28,920 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:16:28,921 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:16:28,921 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 06:16:28,921 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:16:28,921 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 06:16:28,922 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=45, Invalid=261, Unknown=0, NotChecked=0, Total=306
[2020-11-25 06:16:28,922 INFO  L87              Difference]: Start difference. First operand 2527 states and 2706 transitions. cyclomatic complexity: 181 Second operand 18 states.
[2020-11-25 06:16:30,655 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:16:30,655 INFO  L93              Difference]: Finished difference Result 2625 states and 2854 transitions.
[2020-11-25 06:16:30,655 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 06:16:30,655 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2625 states and 2854 transitions.
[2020-11-25 06:16:30,662 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 06:16:30,670 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2625 states to 2625 states and 2854 transitions.
[2020-11-25 06:16:30,670 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1244
[2020-11-25 06:16:30,670 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1244
[2020-11-25 06:16:30,671 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2625 states and 2854 transitions.
[2020-11-25 06:16:30,673 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:16:30,673 INFO  L728         BuchiCegarLoop]: Abstraction has 2625 states and 2854 transitions.
[2020-11-25 06:16:30,676 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2625 states and 2854 transitions.
[2020-11-25 06:16:30,695 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2625 to 2597.
[2020-11-25 06:16:30,695 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2597 states.
[2020-11-25 06:16:30,715 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2597 states to 2597 states and 2787 transitions.
[2020-11-25 06:16:30,715 INFO  L751         BuchiCegarLoop]: Abstraction has 2597 states and 2787 transitions.
[2020-11-25 06:16:30,715 INFO  L631         BuchiCegarLoop]: Abstraction has 2597 states and 2787 transitions.
[2020-11-25 06:16:30,715 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 06:16:30,716 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2597 states and 2787 transitions.
[2020-11-25 06:16:30,719 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:16:30,719 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:16:30,719 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:16:30,721 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:16:30,721 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3322]              assume null == 0;
[L3323]  CALL        call this := FreshRefGenerator__success();
[L1844]              havoc newRef;
[L1845]              assume Alloc[newRef] == false;
[L1846]              Alloc[newRef] := true;
[L1847]              assume newRef != null;
[L3323]  RET         call this := FreshRefGenerator__success();
[L3324]              assume now >= 0;
[L3325]              assume DType[this] == TokenERC20;
[L3326]              assume msgvalue_MSG == 0;
[L3327]              gas := gas - 53000;
[L3328]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L177]               havoc __exception;
[L178]               revert := false;
[L179]   COND FALSE  !(__exception)
[L207]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1960]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1919]              assume msgsender_MSG != null;
[L1920]              Balance[this] := 0;
[L1921]              name_TokenERC20[this] := 846149099;
[L1922]              symbol_TokenERC20[this] := 846149099;
[L1923]              decimals_TokenERC20[this] := 8;
[L1924]              owner_TokenERC20[this] := null;
[L1925]              totalSupply_TokenERC20[this] := 0;
[L1926]              lockIn_TokenERC20[this] := false;
[L1927]              whitelisted_TokenERC20[this] := zeroRefboolArr();
[L1928]              admin_TokenERC20[this] := zeroRefboolArr();
[L1929]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1930]              sum_balanceOf2[this] := 0;
[L1931]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1932]              sum_allowance3[this] := 0;
[L1934]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1935]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s130, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1936]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1937]              balanceOf_TokenERC20[this][crowdsaleOwner_s130] := totalSupply_TokenERC20[this];
[L1938]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1939]              name_TokenERC20[this] := tokenName_s130;
[L1940]              symbol_TokenERC20[this] := tokenSymbol_s130;
[L1941]              lockIn_TokenERC20[this] := false;
[L1942]              admin_TokenERC20[this][msgsender_MSG] := true;
[L1943]              whitelisted_TokenERC20[this][msgsender_MSG] := true;
[L1944]              owner_TokenERC20[this] := crowdsaleOwner_s130;
[L1945]              admin_TokenERC20[this][crowdsaleOwner_s130] := true;
[L1960]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1961]  COND FALSE  !(revert)
[L207]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L208]               assume !revert && gas >= 0;
[L3328]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L3329]              assume !revert && gas >= 0;
[L3332]  CALL        call CorralChoice_TokenERC20(this);
[L3140]              havoc msgsender_MSG;
[L3141]              havoc msgvalue_MSG;
[L3142]              havoc choice;
[L3143]              havoc __ret_0_name;
[L3144]              havoc __ret_0_symbol;
[L3145]              havoc __ret_0_decimals;
[L3146]              havoc __ret_0_owner;
[L3147]              havoc __ret_0_totalSupply;
[L3148]              havoc __ret_0_lockIn;
[L3149]              havoc arg536_s0;
[L3150]              havoc __ret_0_balanceOf;
[L3151]              havoc arg537_s0;
[L3152]              havoc arg538_s0;
[L3153]              havoc __ret_0_allowance;
[L3154]              havoc initialSupply_s130;
[L3155]              havoc tokenName_s130;
[L3156]              havoc tokenSymbol_s130;
[L3157]              havoc crowdsaleOwner_s130;
[L3158]              havoc newAddress_s165;
[L3159]              havoc oldaddress_s190;
[L3160]              havoc newAddress_s209;
[L3161]              havoc oldAddress_s234;
[L3162]              havoc _to_s336;
[L3163]              havoc _value_s336;
[L3164]              havoc _from_s376;
[L3165]              havoc _to_s376;
[L3166]              havoc _value_s376;
[L3167]              havoc success_s376;
[L3168]              havoc _spender_s404;
[L3169]              havoc _value_s404;
[L3170]              havoc success_s404;
[L3171]              havoc _spender_s442;
[L3172]              havoc _value_s442;
[L3173]              havoc _extraData_s442;
[L3174]              havoc success_s442;
[L3175]              havoc _value_s478;
[L3176]              havoc success_s478;
[L3177]              havoc _from_s533;
[L3178]              havoc _value_s533;
[L3179]              havoc success_s533;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != tokenRecipient;
[L3188]              assume DType[msgsender_MSG] != TokenERC20;
[L3189]              Alloc[msgsender_MSG] := true;
[L3190]  COND FALSE  !(choice == 19)
[L3196]  COND FALSE  !(choice == 18)
[L3202]  COND FALSE  !(choice == 17)
[L3208]  COND FALSE  !(choice == 16)
[L3214]  COND FALSE  !(choice == 15)
[L3220]  COND FALSE  !(choice == 14)
[L3226]  COND FALSE  !(choice == 13)
[L3232]  COND FALSE  !(choice == 12)
[L3238]  COND FALSE  !(choice == 11)
[L3244]  COND FALSE  !(choice == 10)
[L3250]  COND FALSE  !(choice == 9)
[L3256]  COND FALSE  !(choice == 8)
[L3262]  COND FALSE  !(choice == 7)
[L3268]  COND FALSE  !(choice == 6)
[L3275]  COND TRUE   choice == 5
[L3276]              gas := gas - 21000;
[L3277]  COND TRUE   gas >= 0
[L3278]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3279]              assume msgvalue_MSG == 0;
[L3280]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s376 && p1 != _to_s376) && (p2 != _from_s376 || p3 != msgsender_MSG)) && _from_s376 != _to_s376) && _value_s376 <= balanceOf_TokenERC20[this][_from_s376]) && _value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s376] + _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L640]               havoc __exception;
[L641]               revert := false;
[L642]   COND TRUE   __exception
[L643]               __tmp__Balance := Balance;
[L644]               __tmp__DType := DType;
[L645]               __tmp__Alloc := Alloc;
[L646]               __tmp__balance_ADDR := balance_ADDR;
[L647]               __tmp__M_Ref_bool := M_Ref_bool;
[L648]               __tmp__sum_whitelisted0 := sum_whitelisted0;
[L649]               __tmp__sum_admin1 := sum_admin1;
[L650]               __tmp__M_Ref_int := M_Ref_int;
[L651]               __tmp__sum_balanceOf2 := sum_balanceOf2;
[L652]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L653]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L654]               __tmp__sum_allowance3 := sum_allowance3;
[L655]               __tmp__Length := Length;
[L656]               __tmp__now := now;
[L657]               __tmp__name_TokenERC20 := name_TokenERC20;
[L658]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L659]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L660]               __tmp__owner_TokenERC20 := owner_TokenERC20;
[L661]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L662]               __tmp__lockIn_TokenERC20 := lockIn_TokenERC20;
[L663]               __tmp__whitelisted_TokenERC20 := whitelisted_TokenERC20;
[L664]               __tmp__admin_TokenERC20 := admin_TokenERC20;
[L665]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L666]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L667]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2156]  COND FALSE  !(!(_value_s376 <= __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG]))
[L2160]              __tmp__sum_allowance3[_from_s376] := __tmp__sum_allowance3[_from_s376] - __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2161]              __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG] := (__tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG] - _value_s376) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2162]              __tmp__sum_allowance3[_from_s376] := __tmp__sum_allowance3[_from_s376] + __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2163]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2076]  COND TRUE   __tmp__lockIn_TokenERC20[this]
[L2077]  COND TRUE   !__tmp__whitelisted_TokenERC20[this][_from_s321]
[L2078]              revert := true;
[L2163]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2164]  COND TRUE   revert
[L667]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L668]               assume revert || gas < 0;
[L3280]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3332]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L3332]  CALL        call CorralChoice_TokenERC20(this);
[L3140]              havoc msgsender_MSG;
[L3141]              havoc msgvalue_MSG;
[L3142]              havoc choice;
[L3143]              havoc __ret_0_name;
[L3144]              havoc __ret_0_symbol;
[L3145]              havoc __ret_0_decimals;
[L3146]              havoc __ret_0_owner;
[L3147]              havoc __ret_0_totalSupply;
[L3148]              havoc __ret_0_lockIn;
[L3149]              havoc arg536_s0;
[L3150]              havoc __ret_0_balanceOf;
[L3151]              havoc arg537_s0;
[L3152]              havoc arg538_s0;
[L3153]              havoc __ret_0_allowance;
[L3154]              havoc initialSupply_s130;
[L3155]              havoc tokenName_s130;
[L3156]              havoc tokenSymbol_s130;
[L3157]              havoc crowdsaleOwner_s130;
[L3158]              havoc newAddress_s165;
[L3159]              havoc oldaddress_s190;
[L3160]              havoc newAddress_s209;
[L3161]              havoc oldAddress_s234;
[L3162]              havoc _to_s336;
[L3163]              havoc _value_s336;
[L3164]              havoc _from_s376;
[L3165]              havoc _to_s376;
[L3166]              havoc _value_s376;
[L3167]              havoc success_s376;
[L3168]              havoc _spender_s404;
[L3169]              havoc _value_s404;
[L3170]              havoc success_s404;
[L3171]              havoc _spender_s442;
[L3172]              havoc _value_s442;
[L3173]              havoc _extraData_s442;
[L3174]              havoc success_s442;
[L3175]              havoc _value_s478;
[L3176]              havoc success_s478;
[L3177]              havoc _from_s533;
[L3178]              havoc _value_s533;
[L3179]              havoc success_s533;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != tokenRecipient;
[L3188]              assume DType[msgsender_MSG] != TokenERC20;
[L3189]              Alloc[msgsender_MSG] := true;
[L3190]  COND FALSE  !(choice == 19)
[L3196]  COND FALSE  !(choice == 18)
[L3202]  COND FALSE  !(choice == 17)
[L3208]  COND FALSE  !(choice == 16)
[L3214]  COND FALSE  !(choice == 15)
[L3220]  COND FALSE  !(choice == 14)
[L3226]  COND FALSE  !(choice == 13)
[L3232]  COND FALSE  !(choice == 12)
[L3238]  COND FALSE  !(choice == 11)
[L3244]  COND FALSE  !(choice == 10)
[L3250]  COND FALSE  !(choice == 9)
[L3256]  COND FALSE  !(choice == 8)
[L3262]  COND FALSE  !(choice == 7)
[L3268]  COND FALSE  !(choice == 6)
[L3275]  COND TRUE   choice == 5
[L3276]              gas := gas - 21000;
[L3277]  COND TRUE   gas >= 0
[L3278]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3279]              assume msgvalue_MSG == 0;
[L3280]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s376 && p1 != _to_s376) && (p2 != _from_s376 || p3 != msgsender_MSG)) && _from_s376 != _to_s376) && _value_s376 <= balanceOf_TokenERC20[this][_from_s376]) && _value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s376] + _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L640]               havoc __exception;
[L641]               revert := false;
[L642]   COND TRUE   __exception
[L643]               __tmp__Balance := Balance;
[L644]               __tmp__DType := DType;
[L645]               __tmp__Alloc := Alloc;
[L646]               __tmp__balance_ADDR := balance_ADDR;
[L647]               __tmp__M_Ref_bool := M_Ref_bool;
[L648]               __tmp__sum_whitelisted0 := sum_whitelisted0;
[L649]               __tmp__sum_admin1 := sum_admin1;
[L650]               __tmp__M_Ref_int := M_Ref_int;
[L651]               __tmp__sum_balanceOf2 := sum_balanceOf2;
[L652]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L653]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L654]               __tmp__sum_allowance3 := sum_allowance3;
[L655]               __tmp__Length := Length;
[L656]               __tmp__now := now;
[L657]               __tmp__name_TokenERC20 := name_TokenERC20;
[L658]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L659]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L660]               __tmp__owner_TokenERC20 := owner_TokenERC20;
[L661]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L662]               __tmp__lockIn_TokenERC20 := lockIn_TokenERC20;
[L663]               __tmp__whitelisted_TokenERC20 := whitelisted_TokenERC20;
[L664]               __tmp__admin_TokenERC20 := admin_TokenERC20;
[L665]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L666]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L667]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2156]  COND FALSE  !(!(_value_s376 <= __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG]))
[L2160]              __tmp__sum_allowance3[_from_s376] := __tmp__sum_allowance3[_from_s376] - __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2161]              __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG] := (__tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG] - _value_s376) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2162]              __tmp__sum_allowance3[_from_s376] := __tmp__sum_allowance3[_from_s376] + __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2163]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2076]  COND TRUE   __tmp__lockIn_TokenERC20[this]
[L2077]  COND TRUE   !__tmp__whitelisted_TokenERC20[this][_from_s321]
[L2078]              revert := true;
[L2163]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2164]  COND TRUE   revert
[L667]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L668]               assume revert || gas < 0;
[L3280]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3332]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:16:30,731 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:16:30,732 INFO  L82        PathProgramCache]: Analyzing trace with hash 1709697234, now seen corresponding path program 1 times
[2020-11-25 06:16:30,732 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:16:30,740 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:16:30,780 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:16:30,780 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:16:30,780 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 06:16:30,780 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:16:30,781 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 06:16:30,781 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 06:16:30,781 INFO  L87              Difference]: Start difference. First operand 2597 states and 2787 transitions. cyclomatic complexity: 194 Second operand 12 states.
[2020-11-25 06:16:31,952 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:16:31,953 INFO  L93              Difference]: Finished difference Result 4537 states and 5034 transitions.
[2020-11-25 06:16:31,953 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 06:16:31,953 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4537 states and 5034 transitions.
[2020-11-25 06:16:31,962 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 20
[2020-11-25 06:16:31,972 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4537 states to 4537 states and 5034 transitions.
[2020-11-25 06:16:31,972 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2207
[2020-11-25 06:16:31,973 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2207
[2020-11-25 06:16:31,973 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4537 states and 5034 transitions.
[2020-11-25 06:16:31,976 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:16:31,976 INFO  L728         BuchiCegarLoop]: Abstraction has 4537 states and 5034 transitions.
[2020-11-25 06:16:31,978 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4537 states and 5034 transitions.
[2020-11-25 06:16:32,003 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4537 to 3709.
[2020-11-25 06:16:32,003 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3709 states.
[2020-11-25 06:16:32,007 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3709 states to 3709 states and 4164 transitions.
[2020-11-25 06:16:32,007 INFO  L751         BuchiCegarLoop]: Abstraction has 3709 states and 4164 transitions.
[2020-11-25 06:16:32,007 INFO  L631         BuchiCegarLoop]: Abstraction has 3709 states and 4164 transitions.
[2020-11-25 06:16:32,007 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 06:16:32,007 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3709 states and 4164 transitions.
[2020-11-25 06:16:32,011 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 06:16:32,012 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:16:32,012 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:16:32,013 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:16:32,013 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3322]              assume null == 0;
[L3323]  CALL        call this := FreshRefGenerator__success();
[L1844]              havoc newRef;
[L1845]              assume Alloc[newRef] == false;
[L1846]              Alloc[newRef] := true;
[L1847]              assume newRef != null;
[L3323]  RET         call this := FreshRefGenerator__success();
[L3324]              assume now >= 0;
[L3325]              assume DType[this] == TokenERC20;
[L3326]              assume msgvalue_MSG == 0;
[L3327]              gas := gas - 53000;
[L3328]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L177]               havoc __exception;
[L178]               revert := false;
[L179]   COND FALSE  !(__exception)
[L207]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1960]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1919]              assume msgsender_MSG != null;
[L1920]              Balance[this] := 0;
[L1921]              name_TokenERC20[this] := 846149099;
[L1922]              symbol_TokenERC20[this] := 846149099;
[L1923]              decimals_TokenERC20[this] := 8;
[L1924]              owner_TokenERC20[this] := null;
[L1925]              totalSupply_TokenERC20[this] := 0;
[L1926]              lockIn_TokenERC20[this] := false;
[L1927]              whitelisted_TokenERC20[this] := zeroRefboolArr();
[L1928]              admin_TokenERC20[this] := zeroRefboolArr();
[L1929]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1930]              sum_balanceOf2[this] := 0;
[L1931]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1932]              sum_allowance3[this] := 0;
[L1934]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1935]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s130, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1936]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1937]              balanceOf_TokenERC20[this][crowdsaleOwner_s130] := totalSupply_TokenERC20[this];
[L1938]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1939]              name_TokenERC20[this] := tokenName_s130;
[L1940]              symbol_TokenERC20[this] := tokenSymbol_s130;
[L1941]              lockIn_TokenERC20[this] := false;
[L1942]              admin_TokenERC20[this][msgsender_MSG] := true;
[L1943]              whitelisted_TokenERC20[this][msgsender_MSG] := true;
[L1944]              owner_TokenERC20[this] := crowdsaleOwner_s130;
[L1945]              admin_TokenERC20[this][crowdsaleOwner_s130] := true;
[L1960]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1961]  COND FALSE  !(revert)
[L207]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L208]               assume !revert && gas >= 0;
[L3328]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L3329]              assume !revert && gas >= 0;
[L3332]  CALL        call CorralChoice_TokenERC20(this);
[L3140]              havoc msgsender_MSG;
[L3141]              havoc msgvalue_MSG;
[L3142]              havoc choice;
[L3143]              havoc __ret_0_name;
[L3144]              havoc __ret_0_symbol;
[L3145]              havoc __ret_0_decimals;
[L3146]              havoc __ret_0_owner;
[L3147]              havoc __ret_0_totalSupply;
[L3148]              havoc __ret_0_lockIn;
[L3149]              havoc arg536_s0;
[L3150]              havoc __ret_0_balanceOf;
[L3151]              havoc arg537_s0;
[L3152]              havoc arg538_s0;
[L3153]              havoc __ret_0_allowance;
[L3154]              havoc initialSupply_s130;
[L3155]              havoc tokenName_s130;
[L3156]              havoc tokenSymbol_s130;
[L3157]              havoc crowdsaleOwner_s130;
[L3158]              havoc newAddress_s165;
[L3159]              havoc oldaddress_s190;
[L3160]              havoc newAddress_s209;
[L3161]              havoc oldAddress_s234;
[L3162]              havoc _to_s336;
[L3163]              havoc _value_s336;
[L3164]              havoc _from_s376;
[L3165]              havoc _to_s376;
[L3166]              havoc _value_s376;
[L3167]              havoc success_s376;
[L3168]              havoc _spender_s404;
[L3169]              havoc _value_s404;
[L3170]              havoc success_s404;
[L3171]              havoc _spender_s442;
[L3172]              havoc _value_s442;
[L3173]              havoc _extraData_s442;
[L3174]              havoc success_s442;
[L3175]              havoc _value_s478;
[L3176]              havoc success_s478;
[L3177]              havoc _from_s533;
[L3178]              havoc _value_s533;
[L3179]              havoc success_s533;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != tokenRecipient;
[L3188]              assume DType[msgsender_MSG] != TokenERC20;
[L3189]              Alloc[msgsender_MSG] := true;
[L3190]  COND FALSE  !(choice == 19)
[L3196]  COND FALSE  !(choice == 18)
[L3202]  COND FALSE  !(choice == 17)
[L3208]  COND FALSE  !(choice == 16)
[L3214]  COND FALSE  !(choice == 15)
[L3220]  COND FALSE  !(choice == 14)
[L3226]  COND FALSE  !(choice == 13)
[L3232]  COND FALSE  !(choice == 12)
[L3238]  COND FALSE  !(choice == 11)
[L3244]  COND FALSE  !(choice == 10)
[L3250]  COND FALSE  !(choice == 9)
[L3256]  COND FALSE  !(choice == 8)
[L3262]  COND FALSE  !(choice == 7)
[L3268]  COND FALSE  !(choice == 6)
[L3275]  COND TRUE   choice == 5
[L3276]              gas := gas - 21000;
[L3277]  COND TRUE   gas >= 0
[L3278]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3279]              assume msgvalue_MSG == 0;
[L3280]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s376 && p1 != _to_s376) && (p2 != _from_s376 || p3 != msgsender_MSG)) && _from_s376 != _to_s376) && _value_s376 <= balanceOf_TokenERC20[this][_from_s376]) && _value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s376] + _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L640]               havoc __exception;
[L641]               revert := false;
[L642]   COND TRUE   __exception
[L643]               __tmp__Balance := Balance;
[L644]               __tmp__DType := DType;
[L645]               __tmp__Alloc := Alloc;
[L646]               __tmp__balance_ADDR := balance_ADDR;
[L647]               __tmp__M_Ref_bool := M_Ref_bool;
[L648]               __tmp__sum_whitelisted0 := sum_whitelisted0;
[L649]               __tmp__sum_admin1 := sum_admin1;
[L650]               __tmp__M_Ref_int := M_Ref_int;
[L651]               __tmp__sum_balanceOf2 := sum_balanceOf2;
[L652]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L653]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L654]               __tmp__sum_allowance3 := sum_allowance3;
[L655]               __tmp__Length := Length;
[L656]               __tmp__now := now;
[L657]               __tmp__name_TokenERC20 := name_TokenERC20;
[L658]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L659]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L660]               __tmp__owner_TokenERC20 := owner_TokenERC20;
[L661]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L662]               __tmp__lockIn_TokenERC20 := lockIn_TokenERC20;
[L663]               __tmp__whitelisted_TokenERC20 := whitelisted_TokenERC20;
[L664]               __tmp__admin_TokenERC20 := admin_TokenERC20;
[L665]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L666]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L667]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2156]  COND FALSE  !(!(_value_s376 <= __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG]))
[L2160]              __tmp__sum_allowance3[_from_s376] := __tmp__sum_allowance3[_from_s376] - __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2161]              __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG] := (__tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG] - _value_s376) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2162]              __tmp__sum_allowance3[_from_s376] := __tmp__sum_allowance3[_from_s376] + __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2163]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2076]  COND FALSE  !(__tmp__lockIn_TokenERC20[this])
[L2082]              __var_2 := null;
[L2083]  COND TRUE   !(_to_s321 != null)
[L2084]              revert := true;
[L2163]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2164]  COND TRUE   revert
[L667]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L668]               assume revert || gas < 0;
[L3280]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3332]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L3332]  CALL        call CorralChoice_TokenERC20(this);
[L3140]              havoc msgsender_MSG;
[L3141]              havoc msgvalue_MSG;
[L3142]              havoc choice;
[L3143]              havoc __ret_0_name;
[L3144]              havoc __ret_0_symbol;
[L3145]              havoc __ret_0_decimals;
[L3146]              havoc __ret_0_owner;
[L3147]              havoc __ret_0_totalSupply;
[L3148]              havoc __ret_0_lockIn;
[L3149]              havoc arg536_s0;
[L3150]              havoc __ret_0_balanceOf;
[L3151]              havoc arg537_s0;
[L3152]              havoc arg538_s0;
[L3153]              havoc __ret_0_allowance;
[L3154]              havoc initialSupply_s130;
[L3155]              havoc tokenName_s130;
[L3156]              havoc tokenSymbol_s130;
[L3157]              havoc crowdsaleOwner_s130;
[L3158]              havoc newAddress_s165;
[L3159]              havoc oldaddress_s190;
[L3160]              havoc newAddress_s209;
[L3161]              havoc oldAddress_s234;
[L3162]              havoc _to_s336;
[L3163]              havoc _value_s336;
[L3164]              havoc _from_s376;
[L3165]              havoc _to_s376;
[L3166]              havoc _value_s376;
[L3167]              havoc success_s376;
[L3168]              havoc _spender_s404;
[L3169]              havoc _value_s404;
[L3170]              havoc success_s404;
[L3171]              havoc _spender_s442;
[L3172]              havoc _value_s442;
[L3173]              havoc _extraData_s442;
[L3174]              havoc success_s442;
[L3175]              havoc _value_s478;
[L3176]              havoc success_s478;
[L3177]              havoc _from_s533;
[L3178]              havoc _value_s533;
[L3179]              havoc success_s533;
[L3180]              havoc tmpNow;
[L3181]              havoc gas;
[L3182]              assume gas > 4000000 && gas <= 8000000;
[L3183]              tmpNow := now;
[L3184]              havoc now;
[L3185]              assume now > tmpNow;
[L3186]              assume msgsender_MSG != null;
[L3187]              assume DType[msgsender_MSG] != tokenRecipient;
[L3188]              assume DType[msgsender_MSG] != TokenERC20;
[L3189]              Alloc[msgsender_MSG] := true;
[L3190]  COND FALSE  !(choice == 19)
[L3196]  COND FALSE  !(choice == 18)
[L3202]  COND FALSE  !(choice == 17)
[L3208]  COND FALSE  !(choice == 16)
[L3214]  COND FALSE  !(choice == 15)
[L3220]  COND FALSE  !(choice == 14)
[L3226]  COND FALSE  !(choice == 13)
[L3232]  COND FALSE  !(choice == 12)
[L3238]  COND FALSE  !(choice == 11)
[L3244]  COND FALSE  !(choice == 10)
[L3250]  COND FALSE  !(choice == 9)
[L3256]  COND FALSE  !(choice == 8)
[L3262]  COND FALSE  !(choice == 7)
[L3268]  COND FALSE  !(choice == 6)
[L3275]  COND FALSE  !(choice == 5)
[L3282]  COND FALSE  !(choice == 4)
[L3289]  COND FALSE  !(choice == 3)
[L3296]  COND TRUE   choice == 2
[L3297]              gas := gas - 21000;
[L3298]  COND TRUE   gas >= 0
[L3299]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3300]              assume msgvalue_MSG == 0;
[L3301]  CALL        call success_s478 := burn~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _value_s478);
[L839]               havoc __exception;
[L840]               revert := false;
[L841]   COND FALSE  !(__exception)
[L869]   CALL        call success_s478 := burn~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _value_s478);
[L2263]  COND FALSE  !(!(balanceOf_TokenERC20[this][msgsender_MSG] >= _value_s478))
[L2267]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2268]              balanceOf_TokenERC20[this][msgsender_MSG] := (balanceOf_TokenERC20[this][msgsender_MSG] - _value_s478) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2269]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2270]              totalSupply_TokenERC20[this] := (totalSupply_TokenERC20[this] - _value_s478) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2271]              assert { :EventEmitted "Burn_TokenERC20" } true;
[L2272]              success_s478 := true;
[L869]   RET         call success_s478 := burn~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _value_s478);
[L870]               assume !revert && gas >= 0;
[L3301]  RET         call success_s478 := burn~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _value_s478);
[L3332]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:16:32,015 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:16:32,016 INFO  L82        PathProgramCache]: Analyzing trace with hash 302635514, now seen corresponding path program 1 times
[2020-11-25 06:16:32,016 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:16:32,026 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 06:16:32,036 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 06:16:32,081 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:16:32,081 INFO  L82        PathProgramCache]: Analyzing trace with hash 1098112012, now seen corresponding path program 1 times
[2020-11-25 06:16:32,081 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:16:32,085 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 06:16:32,089 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 06:16:32,098 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:16:32,098 INFO  L82        PathProgramCache]: Analyzing trace with hash -2053132347, now seen corresponding path program 1 times
[2020-11-25 06:16:32,098 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:16:32,112 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 06:16:32,126 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
[2020-11-25 06:16:32,476 WARN  L188               SmtUtils]: Spent 184.00 ms on a formula simplification. DAG size of input: 196 DAG size of output: 191
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2179 to 4357
[2020-11-25 06:16:32,780 WARN  L188               SmtUtils]: Spent 222.00 ms on a formula simplification. DAG size of input: 269 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 673 to 1327
[2020-11-25 06:16:33,038 WARN  L188               SmtUtils]: Spent 198.00 ms on a formula simplification that was a NOOP. DAG size: 312
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.003s / 0.006s total
Resizing node table from 3967 to 7933
[2020-11-25 06:16:33,214 WARN  L188               SmtUtils]: Spent 157.00 ms on a formula simplification that was a NOOP. DAG size: 250
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3019 to 6037
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
[2020-11-25 06:16:33,370 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 06:16:33,827 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification that was a NOOP. DAG size: 285
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
[2020-11-25 06:16:34,285 WARN  L188               SmtUtils]: Spent 275.00 ms on a formula simplification. DAG size of input: 199 DAG size of output: 191
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #8: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-25 06:16:34,560 WARN  L188               SmtUtils]: Spent 263.00 ms on a formula simplification. DAG size of input: 146 DAG size of output: 140
[2020-11-25 06:16:34,783 WARN  L188               SmtUtils]: Spent 219.00 ms on a formula simplification that was a NOOP. DAG size: 315
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 06:16:35,831 WARN  L188               SmtUtils]: Spent 1.03 s on a formula simplification. DAG size of input: 261 DAG size of output: 261
[2020-11-25 06:16:37,274 WARN  L188               SmtUtils]: Spent 1.44 s on a formula simplification. DAG size of input: 337 DAG size of output: 292
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-25 06:16:37,714 WARN  L188               SmtUtils]: Spent 412.00 ms on a formula simplification. DAG size of input: 182 DAG size of output: 176
[2020-11-25 06:16:38,114 WARN  L188               SmtUtils]: Spent 398.00 ms on a formula simplification that was a NOOP. DAG size: 362
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8713 to 17419
Garbage collection #8: 17419 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 17419 to 34819
[2020-11-25 06:16:39,015 WARN  L188               SmtUtils]: Spent 890.00 ms on a formula simplification. DAG size of input: 291 DAG size of output: 291
[2020-11-25 06:16:40,796 WARN  L188               SmtUtils]: Spent 1.78 s on a formula simplification. DAG size of input: 523 DAG size of output: 509
Garbage collection #1: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #2: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #3: 761 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 761 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 12073 to 24137
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 06:16:42,037 WARN  L188               SmtUtils]: Spent 1.22 s on a formula simplification. DAG size of input: 250 DAG size of output: 241
[2020-11-25 06:16:42,825 WARN  L188               SmtUtils]: Spent 769.00 ms on a formula simplification that was a NOOP. DAG size: 366
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
[2020-11-25 06:16:46,816 WARN  L188               SmtUtils]: Spent 3.97 s on a formula simplification. DAG size of input: 306 DAG size of output: 244
[2020-11-25 06:16:48,652 WARN  L188               SmtUtils]: Spent 1.83 s on a formula simplification. DAG size of input: 371 DAG size of output: 370
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #8: 16103 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 16103 to 32203
Garbage collection #9: 32203 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 32203 to 64403
Garbage collection #10: 64403 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 64403 to 114377
[2020-11-25 06:17:05,020 WARN  L188               SmtUtils]: Spent 16.20 s on a formula simplification. DAG size of input: 821 DAG size of output: 370
[2020-11-25 06:17:05,039 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 06:17:05,058 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 06:17:05,065 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:17:05 BasicIcfg
[2020-11-25 06:17:05,065 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 06:17:05,065 INFO  L168              Benchmark]: Toolchain (without parser) took 40514.30 ms. Allocated memory was 1.0 GB in the beginning and 3.6 GB in the end (delta: 2.5 GB). Free memory was 940.6 MB in the beginning and 725.5 MB in the end (delta: 215.0 MB). Peak memory consumption was 2.8 GB. Max. memory is 15.3 GB.
[2020-11-25 06:17:05,066 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 06:17:05,066 INFO  L168              Benchmark]: Boogie Preprocessor took 89.70 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 06:17:05,066 INFO  L168              Benchmark]: UtopiaSpecLang took 74.97 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-25 06:17:05,067 INFO  L168              Benchmark]: Boogie Printer took 13.15 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:17:05,067 INFO  L168              Benchmark]: RCFGBuilder took 661.24 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 827.8 MB in the end (delta: 85.9 MB). Peak memory consumption was 85.9 MB. Max. memory is 15.3 GB.
[2020-11-25 06:17:05,067 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.54 ms. Allocated memory is still 1.0 GB. Free memory was 827.8 MB in the beginning and 818.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 06:17:05,068 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1245.82 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 67.1 MB). Free memory was 818.8 MB in the beginning and 703.5 MB in the end (delta: 115.3 MB). Peak memory consumption was 182.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:17:05,068 INFO  L168              Benchmark]: BlockEncodingV2 took 170.48 ms. Allocated memory was 1.1 GB in the beginning and 1.2 GB in the end (delta: 145.2 MB). Free memory was 703.5 MB in the beginning and 1.1 GB in the end (delta: -433.9 MB). Peak memory consumption was 19.5 MB. Max. memory is 15.3 GB.
[2020-11-25 06:17:05,069 INFO  L168              Benchmark]: BuchiAutomizer took 38215.57 ms. Allocated memory was 1.2 GB in the beginning and 3.6 GB in the end (delta: 2.3 GB). Free memory was 1.1 GB in the beginning and 725.5 MB in the end (delta: 411.9 MB). Peak memory consumption was 2.7 GB. Max. memory is 15.3 GB.
[2020-11-25 06:17:05,071 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2968 locations, 4964 edges
  - StatisticsResult: Encoded RCFG
    2948 locations, 4915 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 89.70 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 74.97 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 13.15 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 661.24 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 827.8 MB in the end (delta: 85.9 MB). Peak memory consumption was 85.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.54 ms. Allocated memory is still 1.0 GB. Free memory was 827.8 MB in the beginning and 818.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1245.82 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 67.1 MB). Free memory was 818.8 MB in the beginning and 703.5 MB in the end (delta: 115.3 MB). Peak memory consumption was 182.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 170.48 ms. Allocated memory was 1.1 GB in the beginning and 1.2 GB in the end (delta: 145.2 MB). Free memory was 703.5 MB in the beginning and 1.1 GB in the end (delta: -433.9 MB). Peak memory consumption was 19.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 38215.57 ms. Allocated memory was 1.2 GB in the beginning and 3.6 GB in the end (delta: 2.3 GB). Free memory was 1.1 GB in the beginning and 725.5 MB in the end (delta: 411.9 MB). Peak memory consumption was 2.7 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1295 locations, 1555 edges
  - StatisticsResult: BuchiProgram size
    2968 locations, 4964 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 5 terminating modules (5 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.5 modules have a trivial ranking function, the largest among these consists of 18 locations. The remainder module has 3709 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 38.1s and 6 iterations.  TraceHistogramMax:1. Analysis of lassos took 33.5s. Construction of modules took 2.9s. BÃ¼chi inclusion checks took 1.0s. Highest rank in rank-based complementation 0. Minimization of det autom 5. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 5 MinimizatonAttempts, 1558 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3709 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 14063 SDtfs, 15537 SDslu, 25690 SDs, 0 SdLazy, 54145 SolverSat, 2717 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.9s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU5 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115792089237316195423570985008687907853269984665640564039457584007913129639957) = (new TokenERC20)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639954, initialSupply : 115792089237316195423570985008687907853269984665640564039457584007913129639943, tokenName : 115792089237316195423570985008687907853269984665640564039457584007913129639944, tokenSymbol : 115792089237316195423570985008687907853269984665640564039457584007913129639956, crowdsaleOwner : 115792089237316195423570985008687907853269984665640564039457584007913129639954});
[L177]               havoc __exception;
[L178]               revert := false;
[L179]   COND FALSE  !(__exception)
[L207]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1960]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1919]              assume msgsender_MSG != null;
[L1920]              Balance[this] := 0;
[L1921]              name_TokenERC20[this] := 846149099;
[L1922]              symbol_TokenERC20[this] := 846149099;
[L1923]              decimals_TokenERC20[this] := 8;
[L1924]              owner_TokenERC20[this] := null;
[L1925]              totalSupply_TokenERC20[this] := 0;
[L1926]              lockIn_TokenERC20[this] := false;
[L1927]              whitelisted_TokenERC20[this] := zeroRefboolArr();
[L1928]              admin_TokenERC20[this] := zeroRefboolArr();
[L1929]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1930]              sum_balanceOf2[this] := 0;
[L1931]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1932]              sum_allowance3[this] := 0;
[L1934]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1935]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s130, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1936]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1937]              balanceOf_TokenERC20[this][crowdsaleOwner_s130] := totalSupply_TokenERC20[this];
[L1938]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1939]              name_TokenERC20[this] := tokenName_s130;
[L1940]              symbol_TokenERC20[this] := tokenSymbol_s130;
[L1941]              lockIn_TokenERC20[this] := false;
[L1942]              admin_TokenERC20[this][msgsender_MSG] := true;
[L1943]              whitelisted_TokenERC20[this][msgsender_MSG] := true;
[L1944]              owner_TokenERC20[this] := crowdsaleOwner_s130;
[L1945]              admin_TokenERC20[this][crowdsaleOwner_s130] := true;
[L1960]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1961]  COND FALSE  !(revert)
[L207]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L208]               assume !revert && gas >= 0;
[L3328]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
TokenERC20(115792089237316195423570985008687907853269984665640564039457584007913129639957).transferFrom~address~address~uint256.gas(3979002)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639945, _from : 115792089237316195423570985008687907853269984665640564039457584007913129639954, _to : 0, _value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s376 && p1 != _to_s376) && (p2 != _from_s376 || p3 != msgsender_MSG)) && _from_s376 != _to_s376) && _value_s376 <= balanceOf_TokenERC20[this][_from_s376]) && _value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s376] + _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L640]               havoc __exception;
[L641]               revert := false;
[L642]   COND TRUE   __exception
[L643]               __tmp__Balance := Balance;
[L644]               __tmp__DType := DType;
[L645]               __tmp__Alloc := Alloc;
[L646]               __tmp__balance_ADDR := balance_ADDR;
[L647]               __tmp__M_Ref_bool := M_Ref_bool;
[L648]               __tmp__sum_whitelisted0 := sum_whitelisted0;
[L649]               __tmp__sum_admin1 := sum_admin1;
[L650]               __tmp__M_Ref_int := M_Ref_int;
[L651]               __tmp__sum_balanceOf2 := sum_balanceOf2;
[L652]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L653]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L654]               __tmp__sum_allowance3 := sum_allowance3;
[L655]               __tmp__Length := Length;
[L656]               __tmp__now := now;
[L657]               __tmp__name_TokenERC20 := name_TokenERC20;
[L658]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L659]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L660]               __tmp__owner_TokenERC20 := owner_TokenERC20;
[L661]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L662]               __tmp__lockIn_TokenERC20 := lockIn_TokenERC20;
[L663]               __tmp__whitelisted_TokenERC20 := whitelisted_TokenERC20;
[L664]               __tmp__admin_TokenERC20 := admin_TokenERC20;
[L665]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L666]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L667]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2156]  COND FALSE  !(!(_value_s376 <= __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG]))
[L2160]              __tmp__sum_allowance3[_from_s376] := __tmp__sum_allowance3[_from_s376] - __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2161]              __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG] := (__tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG] - _value_s376) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2162]              __tmp__sum_allowance3[_from_s376] := __tmp__sum_allowance3[_from_s376] + __tmp__allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2163]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2076]  COND FALSE  !(__tmp__lockIn_TokenERC20[this])
[L2082]              __var_2 := null;
[L2083]  COND TRUE   !(_to_s321 != null)
[L2084]              revert := true;
[L2163]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2164]  COND TRUE   revert
[L667]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L668]               assume revert || gas < 0;
[L3280]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);

Loop:
TokenERC20(115792089237316195423570985008687907853269984665640564039457584007913129639957).burn~uint256.gas(3979001)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639954, _value : 5});
[L839]               havoc __exception;
[L840]               revert := false;
[L841]   COND FALSE  !(__exception)
[L869]   CALL        call success_s478 := burn~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _value_s478);
[L2263]  COND FALSE  !(!(balanceOf_TokenERC20[this][msgsender_MSG] >= _value_s478))
[L2267]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2268]              balanceOf_TokenERC20[this][msgsender_MSG] := (balanceOf_TokenERC20[this][msgsender_MSG] - _value_s478) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2269]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2270]              totalSupply_TokenERC20[this] := (totalSupply_TokenERC20[this] - _value_s478) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2271]              assert { :EventEmitted "Burn_TokenERC20" } true;
[L2272]              success_s478 := true;
[L869]   RET         call success_s478 := burn~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _value_s478);
[L870]               assume !revert && gas >= 0;
[L3301]  RET         call success_s478 := burn~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _value_s478);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
