This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 12:50:49,248 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 12:50:49,249 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 12:50:49,260 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 12:50:49,260 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 12:50:49,260 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 12:50:49,261 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 12:50:49,263 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 12:50:49,264 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 12:50:49,265 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 12:50:49,265 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 12:50:49,266 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 12:50:49,266 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 12:50:49,267 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 12:50:49,268 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 12:50:49,268 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 12:50:49,269 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 12:50:49,270 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 12:50:49,271 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 12:50:49,273 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 12:50:49,273 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 12:50:49,274 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 12:50:49,276 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 12:50:49,276 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 12:50:49,276 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 12:50:49,276 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 12:50:49,277 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 12:50:49,277 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 12:50:49,277 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 12:50:49,278 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 12:50:49,278 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 12:50:49,279 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 12:50:49,279 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 12:50:49,280 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 12:50:49,280 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 12:50:49,280 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 12:50:49,281 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 12:50:49,281 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 12:50:49,281 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 12:50:49,282 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 12:50:49,282 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 12:50:49,282 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 12:50:49,290 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 12:50:49,290 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 12:50:49,291 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 12:50:49,291 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 12:50:49,291 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 12:50:49,291 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 12:50:49,291 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 12:50:49,291 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 12:50:49,291 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 12:50:49,291 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 12:50:49,292 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 12:50:49,292 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 12:50:49,292 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 12:50:49,292 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 12:50:49,292 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 12:50:49,292 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 12:50:49,292 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 12:50:49,292 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 12:50:49,292 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 12:50:49,292 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 12:50:49,293 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 12:50:49,293 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 12:50:49,293 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 12:50:49,293 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 12:50:49,293 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 12:50:49,293 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 12:50:49,316 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 12:50:49,328 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 12:50:49,330 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 12:50:49,331 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 12:50:49,331 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 12:50:49,332 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl
[2020-11-25 12:50:49,332 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl'
[2020-11-25 12:50:49,395 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 12:50:49,397 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 12:50:49,398 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 12:50:49,398 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 12:50:49,398 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 12:50:49,417 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:49" (1/1) ...
[2020-11-25 12:50:49,418 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:49" (1/1) ...
[2020-11-25 12:50:49,441 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:49" (1/1) ...
[2020-11-25 12:50:49,442 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:49" (1/1) ...
[2020-11-25 12:50:49,457 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:49" (1/1) ...
[2020-11-25 12:50:49,463 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:49" (1/1) ...
[2020-11-25 12:50:49,468 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:49" (1/1) ...
[2020-11-25 12:50:49,474 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 12:50:49,474 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 12:50:49,474 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 12:50:49,476 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 12:50:49,480 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:49" (1/1) ...
[2020-11-25 12:50:49,500 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(CSB.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_CSB[this][msg.sender] && balances_CSB[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][msg.sender] >= 0 &&  balances_CSB[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(CSB.transfer(to, value), return == true && balances_CSB[this][msg.sender] == old(balances_CSB[this][msg.sender]) - value && balances_CSB[this][to] == old(balances_CSB[this][to]) + value && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this]) && allowed_CSB[this] == old(allowed_CSB[this]) && balances_CSB[this][p1] == old(balances_CSB[this][p1]) && name_CSB[this] == old(name_CSB[this]) && decimals_CSB[this] == old(decimals_CSB[this]) && symbol_CSB[this] == old(symbol_CSB[this]))))
[2020-11-25 12:50:49,505 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(CSB.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_CSB[this][msg.sender] && balances_CSB[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][msg.sender] >= 0 &&  balances_CSB[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(CSB.transfer(to, value), return == true && balances_CSB[this][msg.sender] == old(balances_CSB[this][msg.sender]) - value && balances_CSB[this][to] == old(balances_CSB[this][to]) + value && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this]) && allowed_CSB[this] == old(allowed_CSB[this]) && balances_CSB[this][p1] == old(balances_CSB[this][p1]) && name_CSB[this] == old(name_CSB[this]) && decimals_CSB[this] == old(decimals_CSB[this]) && symbol_CSB[this] == old(symbol_CSB[this]))))
[2020-11-25 12:50:49,513 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(CSB.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_CSB[this][msg.sender] && balances_CSB[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][msg.sender] >= 0 &&  balances_CSB[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(CSB.transfer(to, value), return == true && balances_CSB[this][msg.sender] == old(balances_CSB[this][msg.sender]) - value && balances_CSB[this][to] == old(balances_CSB[this][to]) + value && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this]) && allowed_CSB[this] == old(allowed_CSB[this]) && balances_CSB[this][p1] == old(balances_CSB[this][p1]) && name_CSB[this] == old(name_CSB[this]) && decimals_CSB[this] == old(decimals_CSB[this]) && symbol_CSB[this] == old(symbol_CSB[this]))))
[2020-11-25 12:50:49,519 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=_to_s172 ) && msg.sender!=_to_s172 ) && _value_s172<=balances_CSB[this][msg.sender] ) && ( balances_CSB[this][_to_s172] + _value_s172 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _value_s172>=0 ) && _value_s172<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_CSB[this][_to_s172]>=0 ) && balances_CSB[this][_to_s172]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_CSB[this][msg.sender]>=0 ) && balances_CSB[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_to_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>],IdentifierExpression[_to_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[_to_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],IdentifierExpression[_value_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[_to_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[_to_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 12:50:49,522 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( success_s172==true && balances_CSB[this][msg.sender]==( ( old(balances_CSB[this][msg.sender]) ) - _value_s172 ) ) && balances_CSB[this][_to_s172]==( ( old(balances_CSB[this][_to_s172]) ) + _value_s172 ) ) && totalSupply_CSBInterface[this]==( old(totalSupply_CSBInterface[this]) ) ) && allowed_CSB[this]==( old(allowed_CSB[this]) ) ) && balances_CSB[this][p1]==( old(balances_CSB[this][p1]) ) ) && name_CSB[this]==( old(name_CSB[this]) ) ) && decimals_CSB[this]==( old(decimals_CSB[this]) ) ) && symbol_CSB[this]==( old(symbol_CSB[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s172,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_CSB>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]],IdentifierExpression[_value_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[_to_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[_to_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]],IdentifierExpression[_value_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_CSBInterface,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_CSBInterface,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]]]]
[2020-11-25 12:50:49,525 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(CSB.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_CSB[this][msg.sender] && balances_CSB[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][msg.sender] >= 0 &&  balances_CSB[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(CSB.transfer(to, value), return == true && balances_CSB[this][msg.sender] == old(balances_CSB[this][msg.sender]) - value && balances_CSB[this][to] == old(balances_CSB[this][to]) + value && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this]) && allowed_CSB[this] == old(allowed_CSB[this]) && balances_CSB[this][p1] == old(balances_CSB[this][p1]) && name_CSB[this] == old(name_CSB[this]) && decimals_CSB[this] == old(decimals_CSB[this]) && symbol_CSB[this] == old(symbol_CSB[this]))))
[2020-11-25 12:50:49,525 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_CSB0) ==> ( <>AP(success_transfer_CSB0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 12:50:49,531 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:50:49 PropertyContainer
[2020-11-25 12:50:49,531 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 12:50:49,531 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 12:50:49,531 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 12:50:49,531 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 12:50:49,532 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:49" (1/2) ...
[2020-11-25 12:50:49,532 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 12:50:49,532 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 12:50:49,541 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:50:49" (2/2) ...
[2020-11-25 12:50:49,541 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 12:50:49,541 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 12:50:49,541 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 12:50:49,542 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 12:50:49,542 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:49" (1/2) ...
[2020-11-25 12:50:49,593 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 12:50:49,594 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface_NoBaseCtor__success
[2020-11-25 12:50:49,594 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface
[2020-11-25 12:50:49,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface
[2020-11-25 12:50:49,594 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSBInterface
[2020-11-25 12:50:49,594 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSBInterface
[2020-11-25 12:50:49,594 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSBInterface
[2020-11-25 12:50:49,594 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSBInterface
[2020-11-25 12:50:49,594 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSBInterface
[2020-11-25 12:50:49,594 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_CSBInterface
[2020-11-25 12:50:49,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_CSBInterface
[2020-11-25 12:50:49,594 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB_NoBaseCtor__success
[2020-11-25 12:50:49,595 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB
[2020-11-25 12:50:49,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB
[2020-11-25 12:50:49,595 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSB
[2020-11-25 12:50:49,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_CSB
[2020-11-25 12:50:49,595 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSB
[2020-11-25 12:50:49,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_CSB
[2020-11-25 12:50:49,595 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSB
[2020-11-25 12:50:49,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_CSB
[2020-11-25 12:50:49,595 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSB
[2020-11-25 12:50:49,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_CSB
[2020-11-25 12:50:49,596 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSB
[2020-11-25 12:50:49,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_CSB
[2020-11-25 12:50:49,596 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_CSB
[2020-11-25 12:50:49,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_CSB
[2020-11-25 12:50:49,596 INFO  L130     BoogieDeclarations]: Found specification of procedure allowed~address~address_CSB
[2020-11-25 12:50:49,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowed~address~address_CSB
[2020-11-25 12:50:49,596 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CSB
[2020-11-25 12:50:49,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CSB
[2020-11-25 12:50:49,596 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CSB
[2020-11-25 12:50:49,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CSB
[2020-11-25 12:50:49,596 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CSB
[2020-11-25 12:50:49,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CSB
[2020-11-25 12:50:49,597 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 12:50:49,597 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 12:50:49,597 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 12:50:49,597 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CSBInterface
[2020-11-25 12:50:49,597 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_CSBInterface
[2020-11-25 12:50:49,597 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CSB
[2020-11-25 12:50:49,597 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 12:50:49,597 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 12:50:49,597 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface_NoBaseCtor__fail
[2020-11-25 12:50:49,597 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface__success
[2020-11-25 12:50:49,597 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface__fail
[2020-11-25 12:50:49,597 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_CSBInterface__success
[2020-11-25 12:50:49,597 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_CSBInterface__fail
[2020-11-25 12:50:49,598 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB_NoBaseCtor__fail
[2020-11-25 12:50:49,598 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB__success
[2020-11-25 12:50:49,598 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB__fail
[2020-11-25 12:50:49,598 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSB__success
[2020-11-25 12:50:49,598 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSB__fail
[2020-11-25 12:50:49,598 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSB__success
[2020-11-25 12:50:49,598 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSB__fail
[2020-11-25 12:50:49,598 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSB__success
[2020-11-25 12:50:49,598 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSB__fail
[2020-11-25 12:50:49,598 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSB__success
[2020-11-25 12:50:49,598 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSB__fail
[2020-11-25 12:50:49,598 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSB__success
[2020-11-25 12:50:49,598 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSB__fail
[2020-11-25 12:50:49,599 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_CSB__success
[2020-11-25 12:50:49,599 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_CSB__fail
[2020-11-25 12:50:49,599 INFO  L130     BoogieDeclarations]: Found specification of procedure allowed~address~address_CSB__success
[2020-11-25 12:50:49,599 INFO  L130     BoogieDeclarations]: Found specification of procedure allowed~address~address_CSB__fail
[2020-11-25 12:50:49,599 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CSB__success
[2020-11-25 12:50:49,599 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CSB__fail
[2020-11-25 12:50:49,599 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CSB__success
[2020-11-25 12:50:49,599 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CSB__fail
[2020-11-25 12:50:49,599 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CSB__success
[2020-11-25 12:50:49,599 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CSB__fail
[2020-11-25 12:50:49,599 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 12:50:49,599 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 12:50:49,599 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 12:50:49,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 12:50:49,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 12:50:49,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface_NoBaseCtor__fail
[2020-11-25 12:50:49,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface_NoBaseCtor__success
[2020-11-25 12:50:49,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface__fail
[2020-11-25 12:50:49,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface__success
[2020-11-25 12:50:49,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_CSBInterface__fail
[2020-11-25 12:50:49,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_CSBInterface__success
[2020-11-25 12:50:49,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB_NoBaseCtor__fail
[2020-11-25 12:50:49,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB_NoBaseCtor__success
[2020-11-25 12:50:49,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB__fail
[2020-11-25 12:50:49,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB__success
[2020-11-25 12:50:49,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_CSB__fail
[2020-11-25 12:50:49,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_CSB__success
[2020-11-25 12:50:49,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_CSB__fail
[2020-11-25 12:50:49,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_CSB__success
[2020-11-25 12:50:49,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_CSB__fail
[2020-11-25 12:50:49,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_CSB__success
[2020-11-25 12:50:49,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_CSB__fail
[2020-11-25 12:50:49,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_CSB__success
[2020-11-25 12:50:49,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_CSB__fail
[2020-11-25 12:50:49,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_CSB__success
[2020-11-25 12:50:49,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_CSB__fail
[2020-11-25 12:50:49,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_CSB__success
[2020-11-25 12:50:49,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowed~address~address_CSB__fail
[2020-11-25 12:50:49,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowed~address~address_CSB__success
[2020-11-25 12:50:49,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CSB__fail
[2020-11-25 12:50:49,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CSB__success
[2020-11-25 12:50:49,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CSB__fail
[2020-11-25 12:50:49,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CSB__success
[2020-11-25 12:50:49,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CSB__fail
[2020-11-25 12:50:49,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CSB__success
[2020-11-25 12:50:49,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 12:50:49,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 12:50:49,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 12:50:49,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 12:50:49,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 12:50:49,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 12:50:49,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CSBInterface
[2020-11-25 12:50:49,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_CSBInterface
[2020-11-25 12:50:49,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CSB
[2020-11-25 12:50:49,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 12:50:49,603 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 12:50:49,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 12:50:49,737 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:50:49,901 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:50:49,901 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:50:49,901 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:50:50,057 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 12:50:50,057 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 12:50:50,059 INFO  L202        PluginConnector]: Adding new model CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:50:50 BoogieIcfgContainer
[2020-11-25 12:50:50,059 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:50:49" (2/2) ...
[2020-11-25 12:50:50,059 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 12:50:50,059 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1ea733d1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:50:50, skipping insertion in model container
[2020-11-25 12:50:50,060 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 12:50:50,060 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 12:50:50,060 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 12:50:50,061 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 12:50:50,061 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:49" (1/3) ...
[2020-11-25 12:50:50,062 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4a4ed5da and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:50:50, skipping insertion in model container
[2020-11-25 12:50:50,062 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:50:49" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 12:50:50,096 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:50:50 NWAContainer
[2020-11-25 12:50:50,096 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 12:50:50,096 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 12:50:50,096 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 12:50:50,097 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 12:50:50,098 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:50:50" (3/4) ...
[2020-11-25 12:50:50,098 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@db05159 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:50:50, skipping insertion in model container
[2020-11-25 12:50:50,098 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:50:50" (4/4) ...
[2020-11-25 12:50:50,102 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 12:50:50,104 INFO  L110   BuchiProductObserver]: Initial RCFG 791 locations, 953 edges
[2020-11-25 12:50:50,104 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 12:50:50,113 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 12:50:51,084 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 12:50:51,087 INFO  L110   BuchiProductObserver]: BuchiProgram size 1830 locations, 3061 edges
[2020-11-25 12:50:51,087 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:50:51 BoogieIcfgContainer
[2020-11-25 12:50:51,087 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 12:50:51,088 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 12:50:51,088 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 12:50:51,089 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 12:50:51,089 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:50:51" (1/1) ...
[2020-11-25 12:50:51,134 INFO  L313           BlockEncoder]: Initial Icfg 1830 locations, 3061 edges
[2020-11-25 12:50:51,134 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 12:50:51,135 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 12:50:51,135 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 12:50:51,135 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 12:50:51,142 INFO  L70    emoveInfeasibleEdges]: Removed 27 edges and 7 locations because of local infeasibility
[2020-11-25 12:50:51,146 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 12:50:51,152 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 12:50:51,154 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 12:50:51,155 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 12:50:51,155 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 12:50:51,157 INFO  L313           BlockEncoder]: Encoded RCFG 1812 locations, 3018 edges
[2020-11-25 12:50:51,158 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:50:51 BasicIcfg
[2020-11-25 12:50:51,158 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 12:50:51,158 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 12:50:51,158 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 12:50:51,160 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 12:50:51,160 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:50:51,160 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:49" (1/6) ...
[2020-11-25 12:50:51,162 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7576cae7 and model type CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:50:51, skipping insertion in model container
[2020-11-25 12:50:51,162 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:50:51,162 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:50:49" (2/6) ...
[2020-11-25 12:50:51,162 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7576cae7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:50:51, skipping insertion in model container
[2020-11-25 12:50:51,162 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:50:51,162 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:50:50" (3/6) ...
[2020-11-25 12:50:51,162 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7576cae7 and model type CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:50:51, skipping insertion in model container
[2020-11-25 12:50:51,162 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:50:51,163 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:50:50" (4/6) ...
[2020-11-25 12:50:51,163 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7576cae7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:50:51, skipping insertion in model container
[2020-11-25 12:50:51,163 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:50:51,163 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:50:51" (5/6) ...
[2020-11-25 12:50:51,163 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7576cae7 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:50:51, skipping insertion in model container
[2020-11-25 12:50:51,163 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:50:51,163 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:50:51" (6/6) ...
[2020-11-25 12:50:51,164 INFO  L404   chiAutomizerObserver]: Analyzing ICFG CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-normal.bpl_BEv2
[2020-11-25 12:50:51,198 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 12:50:51,198 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 12:50:51,198 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 12:50:51,198 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 12:50:51,198 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 12:50:51,198 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 12:50:51,198 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 12:50:51,198 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 12:50:51,198 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 12:50:51,218 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1812 states.
[2020-11-25 12:50:51,252 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:50:51,252 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:50:51,252 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:50:51,261 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:50:51,261 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:50:51,261 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 12:50:51,261 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1812 states.
[2020-11-25 12:50:51,272 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:50:51,272 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:50:51,273 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:50:51,275 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:50:51,275 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_CSB0 := false;
[L3]                 call_transfer_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND TRUE   revert
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND TRUE   choice == 11
[L2123]              gas := gas - 21000;
[L2124]  COND FALSE  !(gas >= 0)
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:50:51,288 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:50:51,289 INFO  L82        PathProgramCache]: Analyzing trace with hash -1101031454, now seen corresponding path program 1 times
[2020-11-25 12:50:51,292 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:50:51,308 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:50:51,344 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:50:51,346 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:50:51,346 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:50:51,350 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:50:51,463 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:50:51,463 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:50:51,466 INFO  L87              Difference]: Start difference. First operand 1812 states. Second operand 4 states.
[2020-11-25 12:50:51,643 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:50:51,643 INFO  L93              Difference]: Finished difference Result 1323 states and 1414 transitions.
[2020-11-25 12:50:51,643 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:50:51,645 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1323 states and 1414 transitions.
[2020-11-25 12:50:51,652 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:50:51,663 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1323 states to 1323 states and 1414 transitions.
[2020-11-25 12:50:51,664 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 12:50:51,666 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 594
[2020-11-25 12:50:51,667 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1323 states and 1414 transitions.
[2020-11-25 12:50:51,671 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:50:51,671 INFO  L728         BuchiCegarLoop]: Abstraction has 1323 states and 1414 transitions.
[2020-11-25 12:50:51,686 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1323 states and 1414 transitions.
[2020-11-25 12:50:51,715 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1323 to 1323.
[2020-11-25 12:50:51,715 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1323 states.
[2020-11-25 12:50:51,718 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1323 states to 1323 states and 1414 transitions.
[2020-11-25 12:50:51,719 INFO  L751         BuchiCegarLoop]: Abstraction has 1323 states and 1414 transitions.
[2020-11-25 12:50:51,719 INFO  L631         BuchiCegarLoop]: Abstraction has 1323 states and 1414 transitions.
[2020-11-25 12:50:51,719 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 12:50:51,719 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1323 states and 1414 transitions.
[2020-11-25 12:50:51,723 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:50:51,723 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:50:51,723 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:50:51,725 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:50:51,725 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_CSB0 := false;
[L3]                 call_transfer_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND TRUE   revert
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND TRUE   choice == 9
[L2135]              gas := gas - 21000;
[L2136]  COND TRUE   gas >= 0
[L2137]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2138]              assume msgvalue_MSG == 0;
[L2139]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s172) && msgsender_MSG != _to_s172) && _value_s172 <= balances_CSB[this][msgsender_MSG]) && balances_CSB[this][_to_s172] + _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_CSB0 := true;
[L3]                 call_transfer_CSB0 := false;
[L3]                 revert := revert_hold;
[L258]               havoc __exception;
[L259]               revert := false;
[L260]   COND FALSE  !(__exception)
[L282]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1202]  COND TRUE   !(balances_CSB[this][msgsender_MSG] >= _value_s172)
[L1203]              revert := true;
[L282]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L283]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((success_s172 == true && balances_CSB[this][msgsender_MSG] == old(balances_CSB[this][msgsender_MSG]) - _value_s172) && balances_CSB[this][_to_s172] == old(balances_CSB[this][_to_s172]) + _value_s172) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && allowed_CSB[this] == old(allowed_CSB[this])) && balances_CSB[this][p1] == old(balances_CSB[this][p1])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2139]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND TRUE   choice == 9
[L2135]              gas := gas - 21000;
[L2136]  COND TRUE   gas >= 0
[L2137]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2138]              assume msgvalue_MSG == 0;
[L2139]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s172) && msgsender_MSG != _to_s172) && _value_s172 <= balances_CSB[this][msgsender_MSG]) && balances_CSB[this][_to_s172] + _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_CSB0 := true;
[L3]                 call_transfer_CSB0 := false;
[L3]                 revert := revert_hold;
[L258]               havoc __exception;
[L259]               revert := false;
[L260]   COND FALSE  !(__exception)
[L282]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1202]  COND TRUE   !(balances_CSB[this][msgsender_MSG] >= _value_s172)
[L1203]              revert := true;
[L282]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L283]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((success_s172 == true && balances_CSB[this][msgsender_MSG] == old(balances_CSB[this][msgsender_MSG]) - _value_s172) && balances_CSB[this][_to_s172] == old(balances_CSB[this][_to_s172]) + _value_s172) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && allowed_CSB[this] == old(allowed_CSB[this])) && balances_CSB[this][p1] == old(balances_CSB[this][p1])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2139]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:50:51,728 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:50:51,728 INFO  L82        PathProgramCache]: Analyzing trace with hash -592295442, now seen corresponding path program 1 times
[2020-11-25 12:50:51,729 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:50:51,736 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:50:51,752 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:50:51,753 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:50:51,753 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:50:51,754 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:50:51,754 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:50:51,754 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:50:51,754 INFO  L87              Difference]: Start difference. First operand 1323 states and 1414 transitions. cyclomatic complexity: 93 Second operand 4 states.
[2020-11-25 12:50:51,918 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:50:51,918 INFO  L93              Difference]: Finished difference Result 1921 states and 2174 transitions.
[2020-11-25 12:50:51,918 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:50:51,919 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1921 states and 2174 transitions.
[2020-11-25 12:50:51,928 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 12:50:51,937 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1921 states to 1901 states and 2154 transitions.
[2020-11-25 12:50:51,937 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 883
[2020-11-25 12:50:51,938 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 883
[2020-11-25 12:50:51,938 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1901 states and 2154 transitions.
[2020-11-25 12:50:51,941 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:50:51,941 INFO  L728         BuchiCegarLoop]: Abstraction has 1901 states and 2154 transitions.
[2020-11-25 12:50:51,942 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1901 states and 2154 transitions.
[2020-11-25 12:50:51,958 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1901 to 1319.
[2020-11-25 12:50:51,958 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1319 states.
[2020-11-25 12:50:51,960 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1319 states to 1319 states and 1400 transitions.
[2020-11-25 12:50:51,960 INFO  L751         BuchiCegarLoop]: Abstraction has 1319 states and 1400 transitions.
[2020-11-25 12:50:51,960 INFO  L631         BuchiCegarLoop]: Abstraction has 1319 states and 1400 transitions.
[2020-11-25 12:50:51,960 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 12:50:51,960 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1319 states and 1400 transitions.
[2020-11-25 12:50:51,965 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:50:51,965 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:50:51,965 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:50:51,967 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:50:51,967 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_CSB0 := false;
[L3]                 call_transfer_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND TRUE   choice == 9
[L2135]              gas := gas - 21000;
[L2136]  COND TRUE   gas >= 0
[L2137]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2138]              assume msgvalue_MSG == 0;
[L2139]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s172) && msgsender_MSG != _to_s172) && _value_s172 <= balances_CSB[this][msgsender_MSG]) && balances_CSB[this][_to_s172] + _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_CSB0 := true;
[L3]                 call_transfer_CSB0 := false;
[L3]                 revert := revert_hold;
[L258]               havoc __exception;
[L259]               revert := false;
[L260]   COND FALSE  !(__exception)
[L282]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1202]  COND FALSE  !(!(balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1206]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1207]              balances_CSB[this][msgsender_MSG] := (balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1208]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1209]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s172];
[L1210]              balances_CSB[this][_to_s172] := (balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1211]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s172];
[L1212]              assert { :EventEmitted "Transfer_CSB" } true;
[L1213]              success_s172 := true;
[L282]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L283]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((success_s172 == true && balances_CSB[this][msgsender_MSG] == old(balances_CSB[this][msgsender_MSG]) - _value_s172) && balances_CSB[this][_to_s172] == old(balances_CSB[this][_to_s172]) + _value_s172) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && allowed_CSB[this] == old(allowed_CSB[this])) && balances_CSB[this][p1] == old(balances_CSB[this][p1])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2139]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND TRUE   choice == 9
[L2135]              gas := gas - 21000;
[L2136]  COND TRUE   gas >= 0
[L2137]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2138]              assume msgvalue_MSG == 0;
[L2139]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s172) && msgsender_MSG != _to_s172) && _value_s172 <= balances_CSB[this][msgsender_MSG]) && balances_CSB[this][_to_s172] + _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_CSB0 := true;
[L3]                 call_transfer_CSB0 := false;
[L3]                 revert := revert_hold;
[L258]               havoc __exception;
[L259]               revert := false;
[L260]   COND FALSE  !(__exception)
[L282]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1202]  COND FALSE  !(!(balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1206]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1207]              balances_CSB[this][msgsender_MSG] := (balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1208]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1209]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s172];
[L1210]              balances_CSB[this][_to_s172] := (balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1211]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s172];
[L1212]              assert { :EventEmitted "Transfer_CSB" } true;
[L1213]              success_s172 := true;
[L282]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L283]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((success_s172 == true && balances_CSB[this][msgsender_MSG] == old(balances_CSB[this][msgsender_MSG]) - _value_s172) && balances_CSB[this][_to_s172] == old(balances_CSB[this][_to_s172]) + _value_s172) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && allowed_CSB[this] == old(allowed_CSB[this])) && balances_CSB[this][p1] == old(balances_CSB[this][p1])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2139]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:50:51,971 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:50:51,971 INFO  L82        PathProgramCache]: Analyzing trace with hash 2062218547, now seen corresponding path program 1 times
[2020-11-25 12:50:51,972 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:50:52,023 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:50:52,681 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:50:52,681 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:50:52,683 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 12:50:52,683 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:50:52,684 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 12:50:52,684 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=236, Unknown=0, NotChecked=0, Total=272
[2020-11-25 12:50:52,684 INFO  L87              Difference]: Start difference. First operand 1319 states and 1400 transitions. cyclomatic complexity: 83 Second operand 17 states.
[2020-11-25 12:50:55,099 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:50:55,099 INFO  L93              Difference]: Finished difference Result 1434 states and 1545 transitions.
[2020-11-25 12:50:55,099 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 12:50:55,100 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1434 states and 1545 transitions.
[2020-11-25 12:50:55,105 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 12:50:55,110 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1434 states to 1434 states and 1545 transitions.
[2020-11-25 12:50:55,110 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 645
[2020-11-25 12:50:55,111 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 645
[2020-11-25 12:50:55,111 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1434 states and 1545 transitions.
[2020-11-25 12:50:55,113 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:50:55,113 INFO  L728         BuchiCegarLoop]: Abstraction has 1434 states and 1545 transitions.
[2020-11-25 12:50:55,114 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1434 states and 1545 transitions.
[2020-11-25 12:50:55,127 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1434 to 1398.
[2020-11-25 12:50:55,127 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1398 states.
[2020-11-25 12:50:55,130 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1398 states to 1398 states and 1492 transitions.
[2020-11-25 12:50:55,130 INFO  L751         BuchiCegarLoop]: Abstraction has 1398 states and 1492 transitions.
[2020-11-25 12:50:55,130 INFO  L631         BuchiCegarLoop]: Abstraction has 1398 states and 1492 transitions.
[2020-11-25 12:50:55,131 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 12:50:55,131 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1398 states and 1492 transitions.
[2020-11-25 12:50:55,135 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:50:55,135 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:50:55,135 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:50:55,137 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:50:55,137 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_CSB0 := false;
[L3]                 call_transfer_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND TRUE   choice == 9
[L2135]              gas := gas - 21000;
[L2136]  COND TRUE   gas >= 0
[L2137]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2138]              assume msgvalue_MSG == 0;
[L2139]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s172) && msgsender_MSG != _to_s172) && _value_s172 <= balances_CSB[this][msgsender_MSG]) && balances_CSB[this][_to_s172] + _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_CSB0 := true;
[L3]                 call_transfer_CSB0 := false;
[L3]                 revert := revert_hold;
[L258]               havoc __exception;
[L259]               revert := false;
[L260]   COND TRUE   __exception
[L261]               __tmp__Balance := Balance;
[L262]               __tmp__DType := DType;
[L263]               __tmp__Alloc := Alloc;
[L264]               __tmp__balance_ADDR := balance_ADDR;
[L265]               __tmp__M_Ref_int := M_Ref_int;
[L266]               __tmp__sum_balances0 := sum_balances0;
[L267]               __tmp__alloc_allowed_CSB_lvl0 := alloc_allowed_CSB_lvl0;
[L268]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L269]               __tmp__sum_allowed1 := sum_allowed1;
[L270]               __tmp__Length := Length;
[L271]               __tmp__now := now;
[L272]               __tmp__totalSupply_CSBInterface := totalSupply_CSBInterface;
[L273]               __tmp__MAX_UINT256_CSB := MAX_UINT256_CSB;
[L274]               __tmp__balances_CSB := balances_CSB;
[L275]               __tmp__allowed_CSB := allowed_CSB;
[L276]               __tmp__name_CSB := name_CSB;
[L277]               __tmp__decimals_CSB := decimals_CSB;
[L278]               __tmp__symbol_CSB := symbol_CSB;
[L279]   CALL        call success_s172 := transfer~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1186]  COND TRUE   !(__tmp__balances_CSB[this][msgsender_MSG] >= _value_s172)
[L1187]              revert := true;
[L279]   RET         call success_s172 := transfer~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L280]               assume revert || gas < 0;
[L2139]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND TRUE   choice == 9
[L2135]              gas := gas - 21000;
[L2136]  COND TRUE   gas >= 0
[L2137]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2138]              assume msgvalue_MSG == 0;
[L2139]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s172) && msgsender_MSG != _to_s172) && _value_s172 <= balances_CSB[this][msgsender_MSG]) && balances_CSB[this][_to_s172] + _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_CSB0 := true;
[L3]                 call_transfer_CSB0 := false;
[L3]                 revert := revert_hold;
[L258]               havoc __exception;
[L259]               revert := false;
[L260]   COND TRUE   __exception
[L261]               __tmp__Balance := Balance;
[L262]               __tmp__DType := DType;
[L263]               __tmp__Alloc := Alloc;
[L264]               __tmp__balance_ADDR := balance_ADDR;
[L265]               __tmp__M_Ref_int := M_Ref_int;
[L266]               __tmp__sum_balances0 := sum_balances0;
[L267]               __tmp__alloc_allowed_CSB_lvl0 := alloc_allowed_CSB_lvl0;
[L268]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L269]               __tmp__sum_allowed1 := sum_allowed1;
[L270]               __tmp__Length := Length;
[L271]               __tmp__now := now;
[L272]               __tmp__totalSupply_CSBInterface := totalSupply_CSBInterface;
[L273]               __tmp__MAX_UINT256_CSB := MAX_UINT256_CSB;
[L274]               __tmp__balances_CSB := balances_CSB;
[L275]               __tmp__allowed_CSB := allowed_CSB;
[L276]               __tmp__name_CSB := name_CSB;
[L277]               __tmp__decimals_CSB := decimals_CSB;
[L278]               __tmp__symbol_CSB := symbol_CSB;
[L279]   CALL        call success_s172 := transfer~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1186]  COND TRUE   !(__tmp__balances_CSB[this][msgsender_MSG] >= _value_s172)
[L1187]              revert := true;
[L279]   RET         call success_s172 := transfer~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L280]               assume revert || gas < 0;
[L2139]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:50:55,140 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:50:55,141 INFO  L82        PathProgramCache]: Analyzing trace with hash -561955377, now seen corresponding path program 1 times
[2020-11-25 12:50:55,141 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:50:55,148 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:50:55,171 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:50:55,172 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:50:55,172 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 12:50:55,172 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:50:55,172 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 12:50:55,173 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 12:50:55,173 INFO  L87              Difference]: Start difference. First operand 1398 states and 1492 transitions. cyclomatic complexity: 98 Second operand 6 states.
[2020-11-25 12:50:55,364 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:50:55,364 INFO  L93              Difference]: Finished difference Result 1493 states and 1604 transitions.
[2020-11-25 12:50:55,364 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 12:50:55,365 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1493 states and 1604 transitions.
[2020-11-25 12:50:55,370 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 12:50:55,375 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1493 states to 1493 states and 1604 transitions.
[2020-11-25 12:50:55,375 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 12:50:55,375 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 12:50:55,375 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1493 states and 1604 transitions.
[2020-11-25 12:50:55,377 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:50:55,377 INFO  L728         BuchiCegarLoop]: Abstraction has 1493 states and 1604 transitions.
[2020-11-25 12:50:55,378 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1493 states and 1604 transitions.
[2020-11-25 12:50:55,389 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1493 to 1450.
[2020-11-25 12:50:55,389 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1450 states.
[2020-11-25 12:50:55,391 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1450 states to 1450 states and 1546 transitions.
[2020-11-25 12:50:55,391 INFO  L751         BuchiCegarLoop]: Abstraction has 1450 states and 1546 transitions.
[2020-11-25 12:50:55,392 INFO  L631         BuchiCegarLoop]: Abstraction has 1450 states and 1546 transitions.
[2020-11-25 12:50:55,392 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 12:50:55,392 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1450 states and 1546 transitions.
[2020-11-25 12:50:55,394 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:50:55,394 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:50:55,394 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:50:55,396 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:50:55,396 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_CSB0 := false;
[L3]                 call_transfer_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND TRUE   choice == 9
[L2135]              gas := gas - 21000;
[L2136]  COND TRUE   gas >= 0
[L2137]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2138]              assume msgvalue_MSG == 0;
[L2139]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s172) && msgsender_MSG != _to_s172) && _value_s172 <= balances_CSB[this][msgsender_MSG]) && balances_CSB[this][_to_s172] + _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_CSB0 := true;
[L3]                 call_transfer_CSB0 := false;
[L3]                 revert := revert_hold;
[L258]               havoc __exception;
[L259]               revert := false;
[L260]   COND TRUE   __exception
[L261]               __tmp__Balance := Balance;
[L262]               __tmp__DType := DType;
[L263]               __tmp__Alloc := Alloc;
[L264]               __tmp__balance_ADDR := balance_ADDR;
[L265]               __tmp__M_Ref_int := M_Ref_int;
[L266]               __tmp__sum_balances0 := sum_balances0;
[L267]               __tmp__alloc_allowed_CSB_lvl0 := alloc_allowed_CSB_lvl0;
[L268]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L269]               __tmp__sum_allowed1 := sum_allowed1;
[L270]               __tmp__Length := Length;
[L271]               __tmp__now := now;
[L272]               __tmp__totalSupply_CSBInterface := totalSupply_CSBInterface;
[L273]               __tmp__MAX_UINT256_CSB := MAX_UINT256_CSB;
[L274]               __tmp__balances_CSB := balances_CSB;
[L275]               __tmp__allowed_CSB := allowed_CSB;
[L276]               __tmp__name_CSB := name_CSB;
[L277]               __tmp__decimals_CSB := decimals_CSB;
[L278]               __tmp__symbol_CSB := symbol_CSB;
[L279]   CALL        call success_s172 := transfer~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1186]  COND FALSE  !(!(__tmp__balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1190]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_CSB[this][msgsender_MSG];
[L1191]              __tmp__balances_CSB[this][msgsender_MSG] := (__tmp__balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1192]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_CSB[this][msgsender_MSG];
[L1193]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_CSB[this][_to_s172];
[L1194]              __tmp__balances_CSB[this][_to_s172] := (__tmp__balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1195]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_CSB[this][_to_s172];
[L1196]              success_s172 := true;
[L279]   RET         call success_s172 := transfer~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L280]               assume revert || gas < 0;
[L2139]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND TRUE   choice == 9
[L2135]              gas := gas - 21000;
[L2136]  COND TRUE   gas >= 0
[L2137]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2138]              assume msgvalue_MSG == 0;
[L2139]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s172) && msgsender_MSG != _to_s172) && _value_s172 <= balances_CSB[this][msgsender_MSG]) && balances_CSB[this][_to_s172] + _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_CSB0 := true;
[L3]                 call_transfer_CSB0 := false;
[L3]                 revert := revert_hold;
[L258]               havoc __exception;
[L259]               revert := false;
[L260]   COND TRUE   __exception
[L261]               __tmp__Balance := Balance;
[L262]               __tmp__DType := DType;
[L263]               __tmp__Alloc := Alloc;
[L264]               __tmp__balance_ADDR := balance_ADDR;
[L265]               __tmp__M_Ref_int := M_Ref_int;
[L266]               __tmp__sum_balances0 := sum_balances0;
[L267]               __tmp__alloc_allowed_CSB_lvl0 := alloc_allowed_CSB_lvl0;
[L268]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L269]               __tmp__sum_allowed1 := sum_allowed1;
[L270]               __tmp__Length := Length;
[L271]               __tmp__now := now;
[L272]               __tmp__totalSupply_CSBInterface := totalSupply_CSBInterface;
[L273]               __tmp__MAX_UINT256_CSB := MAX_UINT256_CSB;
[L274]               __tmp__balances_CSB := balances_CSB;
[L275]               __tmp__allowed_CSB := allowed_CSB;
[L276]               __tmp__name_CSB := name_CSB;
[L277]               __tmp__decimals_CSB := decimals_CSB;
[L278]               __tmp__symbol_CSB := symbol_CSB;
[L279]   CALL        call success_s172 := transfer~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1186]  COND FALSE  !(!(__tmp__balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1190]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_CSB[this][msgsender_MSG];
[L1191]              __tmp__balances_CSB[this][msgsender_MSG] := (__tmp__balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1192]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_CSB[this][msgsender_MSG];
[L1193]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_CSB[this][_to_s172];
[L1194]              __tmp__balances_CSB[this][_to_s172] := (__tmp__balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1195]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_CSB[this][_to_s172];
[L1196]              success_s172 := true;
[L279]   RET         call success_s172 := transfer~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L280]               assume revert || gas < 0;
[L2139]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:50:55,398 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:50:55,398 INFO  L82        PathProgramCache]: Analyzing trace with hash 1342161383, now seen corresponding path program 1 times
[2020-11-25 12:50:55,399 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:50:55,405 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:50:55,422 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:50:55,422 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:50:55,422 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 12:50:55,423 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:50:55,423 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 12:50:55,423 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 12:50:55,423 INFO  L87              Difference]: Start difference. First operand 1450 states and 1546 transitions. cyclomatic complexity: 100 Second operand 6 states.
[2020-11-25 12:50:55,595 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:50:55,595 INFO  L93              Difference]: Finished difference Result 1869 states and 2067 transitions.
[2020-11-25 12:50:55,595 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 12:50:55,595 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1869 states and 2067 transitions.
[2020-11-25 12:50:55,600 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 12:50:55,604 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1869 states to 1255 states and 1448 transitions.
[2020-11-25 12:50:55,604 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 587
[2020-11-25 12:50:55,605 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 587
[2020-11-25 12:50:55,605 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1255 states and 1448 transitions.
[2020-11-25 12:50:55,606 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:50:55,606 INFO  L728         BuchiCegarLoop]: Abstraction has 1255 states and 1448 transitions.
[2020-11-25 12:50:55,607 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1255 states and 1448 transitions.
[2020-11-25 12:50:55,614 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1255 to 807.
[2020-11-25 12:50:55,614 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 807 states.
[2020-11-25 12:50:55,615 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 807 states to 807 states and 868 transitions.
[2020-11-25 12:50:55,615 INFO  L751         BuchiCegarLoop]: Abstraction has 807 states and 868 transitions.
[2020-11-25 12:50:55,615 INFO  L631         BuchiCegarLoop]: Abstraction has 807 states and 868 transitions.
[2020-11-25 12:50:55,615 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 12:50:55,615 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 807 states and 868 transitions.
[2020-11-25 12:50:55,617 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:50:55,617 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:50:55,617 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:50:55,617 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:50:55,618 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_CSB0 := false;
[L3]                 call_transfer_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1248]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1249]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1250]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1251]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1252]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1253]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1254]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1259]              assert { :EventEmitted "Transfer_CSB" } true;
[L1260]              success_s239 := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND TRUE   choice == 9
[L2135]              gas := gas - 21000;
[L2136]  COND TRUE   gas >= 0
[L2137]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2138]              assume msgvalue_MSG == 0;
[L2139]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s172) && msgsender_MSG != _to_s172) && _value_s172 <= balances_CSB[this][msgsender_MSG]) && balances_CSB[this][_to_s172] + _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_CSB0 := true;
[L3]                 call_transfer_CSB0 := false;
[L3]                 revert := revert_hold;
[L258]               havoc __exception;
[L259]               revert := false;
[L260]   COND FALSE  !(__exception)
[L282]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1202]  COND FALSE  !(!(balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1206]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1207]              balances_CSB[this][msgsender_MSG] := (balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1208]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1209]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s172];
[L1210]              balances_CSB[this][_to_s172] := (balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1211]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s172];
[L1212]              assert { :EventEmitted "Transfer_CSB" } true;
[L1213]              success_s172 := true;
[L282]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L283]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((success_s172 == true && balances_CSB[this][msgsender_MSG] == old(balances_CSB[this][msgsender_MSG]) - _value_s172) && balances_CSB[this][_to_s172] == old(balances_CSB[this][_to_s172]) + _value_s172) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && allowed_CSB[this] == old(allowed_CSB[this])) && balances_CSB[this][p1] == old(balances_CSB[this][p1])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2139]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND TRUE   choice == 11
[L2123]              gas := gas - 21000;
[L2124]  COND FALSE  !(gas >= 0)
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:50:55,620 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:50:55,620 INFO  L82        PathProgramCache]: Analyzing trace with hash -230547761, now seen corresponding path program 1 times
[2020-11-25 12:50:55,621 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:50:55,630 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:50:55,707 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 1 proven. 45 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:50:55,707 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:50:55,707 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 12:50:55,707 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:50:55,707 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 12:50:55,707 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-11-25 12:50:55,708 INFO  L87              Difference]: Start difference. First operand 807 states and 868 transitions. cyclomatic complexity: 64 Second operand 12 states.
[2020-11-25 12:50:56,022 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:50:56,022 INFO  L93              Difference]: Finished difference Result 844 states and 921 transitions.
[2020-11-25 12:50:56,022 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 12:50:56,022 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 844 states and 921 transitions.
[2020-11-25 12:50:56,024 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:50:56,026 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 844 states to 844 states and 921 transitions.
[2020-11-25 12:50:56,026 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 380
[2020-11-25 12:50:56,026 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 380
[2020-11-25 12:50:56,027 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 844 states and 921 transitions.
[2020-11-25 12:50:56,027 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:50:56,027 INFO  L728         BuchiCegarLoop]: Abstraction has 844 states and 921 transitions.
[2020-11-25 12:50:56,028 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 844 states and 921 transitions.
[2020-11-25 12:50:56,034 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 844 to 844.
[2020-11-25 12:50:56,034 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 844 states.
[2020-11-25 12:50:56,035 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 844 states to 844 states and 921 transitions.
[2020-11-25 12:50:56,035 INFO  L751         BuchiCegarLoop]: Abstraction has 844 states and 921 transitions.
[2020-11-25 12:50:56,035 INFO  L631         BuchiCegarLoop]: Abstraction has 844 states and 921 transitions.
[2020-11-25 12:50:56,035 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 12:50:56,035 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 844 states and 921 transitions.
[2020-11-25 12:50:56,037 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:50:56,037 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:50:56,037 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:50:56,038 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:50:56,038 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_CSB0 := false;
[L3]                 call_transfer_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND TRUE   choice == 9
[L2135]              gas := gas - 21000;
[L2136]  COND TRUE   gas >= 0
[L2137]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2138]              assume msgvalue_MSG == 0;
[L2139]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((p1 != msgsender_MSG && p1 != _to_s172) && msgsender_MSG != _to_s172) && _value_s172 <= balances_CSB[this][msgsender_MSG]) && balances_CSB[this][_to_s172] + _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L258]               havoc __exception;
[L259]               revert := false;
[L260]   COND FALSE  !(__exception)
[L282]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1202]  COND FALSE  !(!(balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1206]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1207]              balances_CSB[this][msgsender_MSG] := (balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1208]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1209]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s172];
[L1210]              balances_CSB[this][_to_s172] := (balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1211]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s172];
[L1212]              assert { :EventEmitted "Transfer_CSB" } true;
[L1213]              success_s172 := true;
[L282]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L283]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((success_s172 == true && balances_CSB[this][msgsender_MSG] == old(balances_CSB[this][msgsender_MSG]) - _value_s172) && balances_CSB[this][_to_s172] == old(balances_CSB[this][_to_s172]) + _value_s172) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && allowed_CSB[this] == old(allowed_CSB[this])) && balances_CSB[this][p1] == old(balances_CSB[this][p1])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2139]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2213]  RET         call CorralChoice_CSB(this);
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND TRUE   choice == 9
[L2135]              gas := gas - 21000;
[L2136]  COND TRUE   gas >= 0
[L2137]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2138]              assume msgvalue_MSG == 0;
[L2139]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s172) && msgsender_MSG != _to_s172) && _value_s172 <= balances_CSB[this][msgsender_MSG]) && balances_CSB[this][_to_s172] + _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_CSB0 := true;
[L3]                 call_transfer_CSB0 := false;
[L3]                 revert := revert_hold;
[L258]               havoc __exception;
[L259]               revert := false;
[L260]   COND FALSE  !(__exception)
[L282]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1202]  COND FALSE  !(!(balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1206]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1207]              balances_CSB[this][msgsender_MSG] := (balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1208]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1209]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s172];
[L1210]              balances_CSB[this][_to_s172] := (balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1211]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s172];
[L1212]              assert { :EventEmitted "Transfer_CSB" } true;
[L1213]              success_s172 := true;
[L282]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L283]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((success_s172 == true && balances_CSB[this][msgsender_MSG] == old(balances_CSB[this][msgsender_MSG]) - _value_s172) && balances_CSB[this][_to_s172] == old(balances_CSB[this][_to_s172]) + _value_s172) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && allowed_CSB[this] == old(allowed_CSB[this])) && balances_CSB[this][p1] == old(balances_CSB[this][p1])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2139]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND TRUE   choice == 11
[L2123]              gas := gas - 21000;
[L2124]  COND FALSE  !(gas >= 0)
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:50:56,041 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:50:56,042 INFO  L82        PathProgramCache]: Analyzing trace with hash 2092559020, now seen corresponding path program 1 times
[2020-11-25 12:50:56,042 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:50:56,115 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:50:56,238 INFO  L134       CoverageAnalysis]: Checked inductivity of 55 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 12:50:56,238 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:50:56,238 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 12:50:56,238 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:50:56,239 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 12:50:56,239 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-11-25 12:50:56,239 INFO  L87              Difference]: Start difference. First operand 844 states and 921 transitions. cyclomatic complexity: 83 Second operand 12 states.
[2020-11-25 12:50:56,482 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:50:56,482 INFO  L93              Difference]: Finished difference Result 487 states and 531 transitions.
[2020-11-25 12:50:56,482 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 12:50:56,482 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 487 states and 531 transitions.
[2020-11-25 12:50:56,483 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 12:50:56,483 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 487 states to 0 states and 0 transitions.
[2020-11-25 12:50:56,483 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 12:50:56,483 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 12:50:56,483 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 12:50:56,483 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:50:56,483 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 12:50:56,483 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 12:50:56,483 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 12:50:56,483 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 12:50:56,483 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 12:50:56,483 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 12:50:56,484 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 12:50:56,486 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:50:56 BasicIcfg
[2020-11-25 12:50:56,486 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 12:50:56,487 INFO  L168              Benchmark]: Toolchain (without parser) took 7090.85 ms. Allocated memory was 1.0 GB in the beginning and 1.5 GB in the end (delta: 447.2 MB). Free memory was 940.6 MB in the beginning and 871.9 MB in the end (delta: 68.7 MB). Peak memory consumption was 515.9 MB. Max. memory is 15.3 GB.
[2020-11-25 12:50:56,488 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:50:56,488 INFO  L168              Benchmark]: Boogie Preprocessor took 76.28 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:50:56,488 INFO  L168              Benchmark]: UtopiaSpecLang took 56.43 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:50:56,489 INFO  L168              Benchmark]: Boogie Printer took 10.21 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:50:56,489 INFO  L168              Benchmark]: RCFGBuilder took 518.28 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.8 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
[2020-11-25 12:50:56,489 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.00 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 861.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 12:50:56,489 INFO  L168              Benchmark]: BÃ¼chi Program Product took 991.35 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 68.2 MB). Free memory was 861.8 MB in the beginning and 889.9 MB in the end (delta: -28.1 MB). Peak memory consumption was 146.0 MB. Max. memory is 15.3 GB.
[2020-11-25 12:50:56,490 INFO  L168              Benchmark]: BlockEncodingV2 took 70.32 ms. Allocated memory is still 1.1 GB. Free memory was 889.9 MB in the beginning and 854.4 MB in the end (delta: 35.5 MB). Peak memory consumption was 35.5 MB. Max. memory is 15.3 GB.
[2020-11-25 12:50:56,491 INFO  L168              Benchmark]: BuchiAutomizer took 5328.42 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 379.1 MB). Free memory was 854.4 MB in the beginning and 871.9 MB in the end (delta: -17.5 MB). Peak memory consumption was 361.6 MB. Max. memory is 15.3 GB.
[2020-11-25 12:50:56,493 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1830 locations, 3061 edges
  - StatisticsResult: Encoded RCFG
    1812 locations, 3018 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 76.28 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 56.43 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 10.21 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 518.28 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.8 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.00 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 861.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 991.35 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 68.2 MB). Free memory was 861.8 MB in the beginning and 889.9 MB in the end (delta: -28.1 MB). Peak memory consumption was 146.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 70.32 ms. Allocated memory is still 1.1 GB. Free memory was 889.9 MB in the beginning and 854.4 MB in the end (delta: 35.5 MB). Peak memory consumption was 35.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 5328.42 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 379.1 MB). Free memory was 854.4 MB in the beginning and 871.9 MB in the end (delta: -17.5 MB). Peak memory consumption was 361.6 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    791 locations, 953 edges
  - StatisticsResult: BuchiProgram size
    1830 locations, 3061 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 17 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 5.2s and 8 iterations.  TraceHistogramMax:2. Analysis of lassos took 1.1s. Construction of modules took 2.8s. BÃ¼chi inclusion checks took 0.8s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 6 MinimizatonAttempts, 1109 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 1450 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 8824 SDtfs, 9452 SDslu, 19297 SDs, 0 SdLazy, 19632 SolverSat, 1617 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.8s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_CS(success_transfer_CSB0)0) ==> ( <>(success_transfer_CSB0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
